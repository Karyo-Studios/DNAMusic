{"version":3,"file":"static/js/main.321562c5.js","mappings":"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A,OACA,UACA,SACA,MACA,WACA,KACA,UACA,SACA,MACA,MACA,KACA,KACA,WACA,aACA,SACA,SACA,OACA,QACA,WACA,KACA,KACA,KACA,KACA,KACA,KACA,OACA,SACA,KACA,OACA,SACA,SACA,KACA,OACA,OACA,OACA,WACA,MACA,WACA,KACA,WACA,SACA,IACA,QACA,SACA,UACA,UACA,QACA,QACA,KACA,QACA,KACA,QACA,QACA,KACA,QACA,MAeWC,GAAe,CAAC,MAAO,SAAU,QAAS,YCxE1CC,GAAW,CACtB1kH,KAAM,WACN+6G,SAsCF,SAA0BvkF,EAAS6S,EAAI2zE,GACrC,IAEIqE,EAEAsD,EAEA/9D,EAEA9sB,EAEA8qF,EAVEhnE,EAAOh7C,KAWb,OAYA,SAAe2gB,GAEb,OAaF,SAAgBA,GAId,OAHAiT,EAAQokF,MAAM,YACdpkF,EAAQokF,MAAM,gBACdpkF,EAAQqkF,QAAQt3F,GACT2gD,CACT,CAlBSs2C,CAAOj3F,EAChB,EAiCA,SAAS2gD,EAAK3gD,GACZ,OAAa,KAATA,GACFiT,EAAQqkF,QAAQt3F,GACTshG,GAEI,KAATthG,GACFiT,EAAQqkF,QAAQt3F,GAChBohG,GAAa,EACNG,GAEI,KAATvhG,GACFiT,EAAQqkF,QAAQt3F,GAChB89F,EAAS,EAMFzjE,EAAKy+D,UAAYhzE,EAAK07E,GAI3BlO,GAAWtzF,IACbiT,EAAQqkF,QAAQt3F,GAEhBqjC,EAASvjC,OAAOC,aAAaC,GACtBuX,GAEFkiF,EAAIz5F,EACb,CAgBA,SAASshG,EAAgBthG,GACvB,OAAa,KAATA,GACFiT,EAAQqkF,QAAQt3F,GAChB89F,EAAS,EACF2D,GAEI,KAATzhG,GACFiT,EAAQqkF,QAAQt3F,GAChB89F,EAAS,EACTvnF,EAAQ,EACDmrF,GAILpO,GAAWtzF,IACbiT,EAAQqkF,QAAQt3F,GAChB89F,EAAS,EAGFzjE,EAAKy+D,UAAYhzE,EAAK07E,GAExB/H,EAAIz5F,EACb,CAYA,SAASyhG,EAAkBzhG,GACzB,OAAa,KAATA,GACFiT,EAAQqkF,QAAQt3F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","sources":["../node_modules/extend/index.js","../node_modules/inline-style-parser/index.js","../node_modules/prop-types/factoryWithThrowingShims.js","../node_modules/prop-types/index.js","../node_modules/prop-types/lib/ReactPropTypesSecret.js","../node_modules/react-dom/cjs/react-dom.production.min.js","../node_modules/react-dom/client.js","../node_modules/react-dom/index.js","../node_modules/react-fps-stats/dist/index.js","../node_modules/react/cjs/react-jsx-runtime.production.min.js","../node_modules/react/cjs/react.production.min.js","../node_modules/react/index.js","../node_modules/react/jsx-runtime.js","../node_modules/scheduler/cjs/scheduler.production.min.js","../node_modules/scheduler/index.js","../node_modules/style-to-object/index.js","../webpack/bootstrap","../webpack/runtime/define property getters","../webpack/runtime/ensure chunk","../webpack/runtime/get javascript chunk filename","../webpack/runtime/get mini-css chunk filename","../webpack/runtime/hasOwnProperty shorthand","../webpack/runtime/load script","../webpack/runtime/make namespace object","../webpack/runtime/publicPath","../webpack/runtime/jsonp chunk loading","../node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js","../node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js","../node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js","../node_modules/@babel/runtime/helpers/esm/typeof.js","../node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js","../node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js","../node_modules/@babel/runtime/helpers/esm/toPropertyKey.js","../node_modules/@babel/runtime/helpers/esm/toPrimitive.js","../node_modules/@babel/runtime/helpers/esm/defineProperty.js","../node_modules/@babel/runtime/helpers/esm/objectSpread2.js","../node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","../node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","soundfonts/WebAudioFont.js","../node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js","../node_modules/@babel/runtime/helpers/esm/get.js","../node_modules/@babel/runtime/helpers/esm/superPropBase.js","../node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js","../node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js","../node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js","../node_modules/@babel/runtime/helpers/esm/inherits.js","../node_modules/@babel/runtime/helpers/esm/isNativeReflectConstruct.js","../node_modules/@babel/runtime/helpers/esm/createSuper.js","../node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js","../node_modules/@babel/runtime/helpers/esm/classCallCheck.js","../node_modules/@babel/runtime/helpers/esm/createClass.js","../node_modules/webmidi/dist/esm/webmidi.esm.js","webmidi.js","createReverb.js","reverb.js","euclid.js","utils.js","playhead.js","soundfonts/_tone_0110_Aspirin_sf2_file.js","soundfonts/_tone_0530_Aspirin_sf2_file.js","soundfonts/_tone_1170_Aspirin_sf2_file.js","soundfonts/_tone_1151_FluidR3_GM_sf2_file.js","soundfonts/_tone_0161_SoundBlasterOld_sf2.js","soundfonts/_tone_0390_FluidR3_GM_sf2_file.js","soundfonts/_tone_0660_Chaos_sf2_file.js","soundfonts/_tone_0320_JCLive_sf2_file.js","soundfonts/_tone_0270_SBAWE32_sf2_file.js","soundfonts/_tone_0730_JCLive_sf2_file.js","soundfonts/_tone_0240_JCLive_sf2_file.js","soundfonts/_tone_0460_FluidR3_GM_sf2_file.js","soundfonts/_tone_1080_JCLive_sf2_file.js","soundfonts/_tone_0720_GeneralUserGS_sf2_file.js","soundfonts/_tone_0640_JCLive_sf2_file.js","soundfonts/_tone_0130_GeneralUserGS_sf2_file.js","soundfonts/_drum_35_0_Chaos_sf2_file.js","soundfonts/_drum_36_0_Chaos_sf2_file.js","soundfonts/_tone_0380_Chaos_sf2_file.js","soundfonts.js","defaults.js","mappings.js","helpers.js","components/singleButton.js","components/rotationToggle.js","components/playheadView.js","components/switchButtonCenterText.js","components/hitsToggle.js","components/toggleButton.js","components/playheadsView.js","components/sequenceInput.js","information.js","components/visualizerSequence.js","components/visualizerPlayheads.js","components/visualizerBlobs.js","graphics.js","components/visualizerMappings.js","../node_modules/react-slider/dist/es/prod/components/ReactSlider/ReactSlider.mjs","../node_modules/@babel/runtime/helpers/esm/inheritsLoose.js","components/speedToggle.js","components/instrumentMenu.js","components/playPauseButton.js","components/remixButton.js","components/switchButton.js","components/toggleVerticalButton.js","components/sequencerSettings.js","presets.js","components/presetMenu.js","../node_modules/hast-util-whitespace/lib/index.js","../node_modules/property-information/lib/util/schema.js","../node_modules/property-information/lib/util/merge.js","../node_modules/property-information/lib/normalize.js","../node_modules/property-information/lib/util/info.js","../node_modules/property-information/lib/util/types.js","../node_modules/property-information/lib/util/defined-info.js","../node_modules/property-information/lib/util/create.js","../node_modules/property-information/lib/xlink.js","../node_modules/property-information/lib/xml.js","../node_modules/property-information/lib/util/case-sensitive-transform.js","../node_modules/property-information/lib/util/case-insensitive-transform.js","../node_modules/property-information/lib/xmlns.js","../node_modules/property-information/lib/aria.js","../node_modules/property-information/lib/html.js","../node_modules/property-information/lib/svg.js","../node_modules/property-information/index.js","../node_modules/property-information/lib/find.js","../node_modules/property-information/lib/hast-to-react.js","../node_modules/style-to-object/index.mjs","../node_modules/unist-util-position/lib/index.js","../node_modules/@babel/runtime/helpers/esm/construct.js","../node_modules/@babel/runtime/helpers/esm/wrapNativeSuper.js","../node_modules/@babel/runtime/helpers/esm/isNativeFunction.js","../node_modules/unist-util-stringify-position/lib/index.js","../node_modules/vfile-message/lib/index.js","../node_modules/hast-util-to-jsx-runtime/lib/index.js","../node_modules/comma-separated-tokens/index.js","../node_modules/space-separated-tokens/index.js","../node_modules/html-url-attributes/lib/index.js","../node_modules/micromark-util-character/index.js","../node_modules/micromark-util-encode/index.js","../node_modules/micromark-util-sanitize-uri/index.js","../node_modules/mdast-util-to-string/lib/index.js","../node_modules/micromark-util-chunked/index.js","../node_modules/micromark-util-subtokenize/index.js","../node_modules/micromark-util-combine-extensions/index.js","../node_modules/micromark-factory-space/index.js","../node_modules/micromark/lib/initialize/content.js","../node_modules/micromark/lib/initialize/document.js","../node_modules/micromark-core-commonmark/lib/blank-line.js","../node_modules/micromark-core-commonmark/lib/content.js","../node_modules/micromark/lib/initialize/flow.js","../node_modules/micromark/lib/initialize/text.js","../node_modules/micromark-util-resolve-all/index.js","../node_modules/micromark/lib/create-tokenizer.js","../node_modules/micromark-core-commonmark/lib/thematic-break.js","../node_modules/micromark-core-commonmark/lib/list.js","../node_modules/micromark-core-commonmark/lib/block-quote.js","../node_modules/micromark-factory-destination/index.js","../node_modules/micromark-factory-label/index.js","../node_modules/micromark-factory-title/index.js","../node_modules/micromark-factory-whitespace/index.js","../node_modules/micromark-util-normalize-identifier/index.js","../node_modules/micromark-core-commonmark/lib/definition.js","../node_modules/micromark-core-commonmark/lib/code-indented.js","../node_modules/micromark-core-commonmark/lib/heading-atx.js","../node_modules/micromark-core-commonmark/lib/setext-underline.js","../node_modules/micromark-util-html-tag-name/index.js","../node_modules/micromark-core-commonmark/lib/html-flow.js","../node_modules/micromark-core-commonmark/lib/code-fenced.js","../node_modules/decode-named-character-reference/index.dom.js","../node_modules/micromark-core-commonmark/lib/character-reference.js","../node_modules/micromark-core-commonmark/lib/character-escape.js","../node_modules/micromark-core-commonmark/lib/line-ending.js","../node_modules/micromark-core-commonmark/lib/label-end.js","../node_modules/micromark-core-commonmark/lib/label-start-image.js","../node_modules/micromark-util-classify-character/index.js","../node_modules/micromark-core-commonmark/lib/attention.js","../node_modules/micromark-core-commonmark/lib/autolink.js","../node_modules/micromark-core-commonmark/lib/html-text.js","../node_modules/micromark-core-commonmark/lib/label-start-link.js","../node_modules/micromark-core-commonmark/lib/hard-break-escape.js","../node_modules/micromark-core-commonmark/lib/code-text.js","../node_modules/micromark/lib/constructs.js","../node_modules/micromark/lib/parse.js","../node_modules/micromark/lib/preprocess.js","../node_modules/micromark-util-decode-numeric-character-reference/index.js","../node_modules/micromark-util-decode-string/index.js","../node_modules/mdast-util-from-markdown/lib/index.js","../node_modules/micromark/lib/postprocess.js","../node_modules/remark-parse/lib/index.js","../node_modules/@ungap/structured-clone/esm/types.js","../node_modules/@ungap/structured-clone/esm/deserialize.js","../node_modules/@ungap/structured-clone/esm/serialize.js","../node_modules/@ungap/structured-clone/esm/index.js","../node_modules/mdast-util-to-hast/lib/footer.js","../node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js","../node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js","../node_modules/unist-util-is/lib/index.js","../node_modules/unist-util-visit-parents/lib/index.js","../node_modules/unist-util-visit/lib/index.js","../node_modules/mdast-util-to-hast/lib/revert.js","../node_modules/mdast-util-to-hast/lib/handlers/list-item.js","../node_modules/trim-lines/index.js","../node_modules/mdast-util-to-hast/lib/handlers/index.js","../node_modules/mdast-util-to-hast/lib/handlers/blockquote.js","../node_modules/mdast-util-to-hast/lib/handlers/break.js","../node_modules/mdast-util-to-hast/lib/handlers/code.js","../node_modules/mdast-util-to-hast/lib/handlers/delete.js","../node_modules/mdast-util-to-hast/lib/handlers/emphasis.js","../node_modules/mdast-util-to-hast/lib/handlers/footnote-reference.js","../node_modules/mdast-util-to-hast/lib/handlers/heading.js","../node_modules/mdast-util-to-hast/lib/handlers/html.js","../node_modules/mdast-util-to-hast/lib/handlers/image-reference.js","../node_modules/mdast-util-to-hast/lib/handlers/image.js","../node_modules/mdast-util-to-hast/lib/handlers/inline-code.js","../node_modules/mdast-util-to-hast/lib/handlers/link-reference.js","../node_modules/mdast-util-to-hast/lib/handlers/link.js","../node_modules/mdast-util-to-hast/lib/handlers/list.js","../node_modules/mdast-util-to-hast/lib/handlers/paragraph.js","../node_modules/mdast-util-to-hast/lib/handlers/root.js","../node_modules/mdast-util-to-hast/lib/handlers/strong.js","../node_modules/mdast-util-to-hast/lib/handlers/table.js","../node_modules/mdast-util-to-hast/lib/handlers/table-cell.js","../node_modules/mdast-util-to-hast/lib/handlers/table-row.js","../node_modules/mdast-util-to-hast/lib/handlers/text.js","../node_modules/mdast-util-to-hast/lib/handlers/thematic-break.js","../node_modules/mdast-util-to-hast/lib/state.js","../node_modules/mdast-util-to-hast/lib/index.js","../node_modules/remark-rehype/lib/index.js","../node_modules/@babel/runtime/helpers/esm/toArray.js","../node_modules/bail/index.js","../node_modules/is-plain-obj/index.js","../node_modules/trough/index.js","../node_modules/vfile/lib/minpath.browser.js","../node_modules/vfile/lib/minproc.browser.js","../node_modules/vfile/lib/minurl.shared.js","../node_modules/vfile/lib/minurl.browser.js","../node_modules/vfile/lib/index.js","../node_modules/unified/lib/callable-instance.js","../node_modules/unified/lib/index.js","../node_modules/react-markdown/lib/index.js","components/consoleWindow.js","loadedSequences.js","components/sequenceBoundsSlider.js","components/consoleSelectButtons.js","App.js","pattern.js","reportWebVitals.js","index.js"],"sourcesContent":["'use strict';\n\nvar hasOwn = Object.prototype.hasOwnProperty;\nvar toStr = Object.prototype.toString;\nvar defineProperty = Object.defineProperty;\nvar gOPD = Object.getOwnPropertyDescriptor;\n\nvar isArray = function isArray(arr) {\n\tif (typeof Array.isArray === 'function') {\n\t\treturn Array.isArray(arr);\n\t}\n\n\treturn toStr.call(arr) === '[object Array]';\n};\n\nvar isPlainObject = function isPlainObject(obj) {\n\tif (!obj || toStr.call(obj) !== '[object Object]') {\n\t\treturn false;\n\t}\n\n\tvar hasOwnConstructor = hasOwn.call(obj, 'constructor');\n\tvar hasIsPrototypeOf = obj.constructor && obj.constructor.prototype && hasOwn.call(obj.constructor.prototype, 'isPrototypeOf');\n\t// Not own constructor property must be Object\n\tif (obj.constructor && !hasOwnConstructor && !hasIsPrototypeOf) {\n\t\treturn false;\n\t}\n\n\t// Own properties are enumerated firstly, so to speed up,\n\t// if last one is own, then all properties are own.\n\tvar key;\n\tfor (key in obj) { /**/ }\n\n\treturn typeof key === 'undefined' || hasOwn.call(obj, key);\n};\n\n// If name is '__proto__', and Object.defineProperty is available, define __proto__ as an own property on target\nvar setProperty = function setProperty(target, options) {\n\tif (defineProperty && options.name === '__proto__') {\n\t\tdefineProperty(target, options.name, {\n\t\t\tenumerable: true,\n\t\t\tconfigurable: true,\n\t\t\tvalue: options.newValue,\n\t\t\twritable: true\n\t\t});\n\t} else {\n\t\ttarget[options.name] = options.newValue;\n\t}\n};\n\n// Return undefined instead of __proto__ if '__proto__' is not an own property\nvar getProperty = function getProperty(obj, name) {\n\tif (name === '__proto__') {\n\t\tif (!hasOwn.call(obj, name)) {\n\t\t\treturn void 0;\n\t\t} else if (gOPD) {\n\t\t\t// In early versions of node, obj['__proto__'] is buggy when obj has\n\t\t\t// __proto__ as an own property. Object.getOwnPropertyDescriptor() works.\n\t\t\treturn gOPD(obj, name).value;\n\t\t}\n\t}\n\n\treturn obj[name];\n};\n\nmodule.exports = function extend() {\n\tvar options, name, src, copy, copyIsArray, clone;\n\tvar target = arguments[0];\n\tvar i = 1;\n\tvar length = arguments.length;\n\tvar deep = false;\n\n\t// Handle a deep copy situation\n\tif (typeof target === 'boolean') {\n\t\tdeep = target;\n\t\ttarget = arguments[1] || {};\n\t\t// skip the boolean and the target\n\t\ti = 2;\n\t}\n\tif (target == null || (typeof target !== 'object' && typeof target !== 'function')) {\n\t\ttarget = {};\n\t}\n\n\tfor (; i < length; ++i) {\n\t\toptions = arguments[i];\n\t\t// Only deal with non-null/undefined values\n\t\tif (options != null) {\n\t\t\t// Extend the base object\n\t\t\tfor (name in options) {\n\t\t\t\tsrc = getProperty(target, name);\n\t\t\t\tcopy = getProperty(options, name);\n\n\t\t\t\t// Prevent never-ending loop\n\t\t\t\tif (target !== copy) {\n\t\t\t\t\t// Recurse if we're merging plain objects or arrays\n\t\t\t\t\tif (deep && copy && (isPlainObject(copy) || (copyIsArray = isArray(copy)))) {\n\t\t\t\t\t\tif (copyIsArray) {\n\t\t\t\t\t\t\tcopyIsArray = false;\n\t\t\t\t\t\t\tclone = src && isArray(src) ? src : [];\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tclone = src && isPlainObject(src) ? src : {};\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Never move original objects, clone them\n\t\t\t\t\t\tsetProperty(target, { name: name, newValue: extend(deep, clone, copy) });\n\n\t\t\t\t\t// Don't bring in undefined values\n\t\t\t\t\t} else if (typeof copy !== 'undefined') {\n\t\t\t\t\t\tsetProperty(target, { name: name, newValue: copy });\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Return the modified object\n\treturn target;\n};\n","// http://www.w3.org/TR/CSS21/grammar.html\n// https://github.com/visionmedia/css-parse/pull/49#issuecomment-30088027\nvar COMMENT_REGEX = /\\/\\*[^*]*\\*+([^/*][^*]*\\*+)*\\//g;\n\nvar NEWLINE_REGEX = /\\n/g;\nvar WHITESPACE_REGEX = /^\\s*/;\n\n// declaration\nvar PROPERTY_REGEX = /^(\\*?[-#/*\\\\\\w]+(\\[[0-9a-z_-]+\\])?)\\s*/;\nvar COLON_REGEX = /^:\\s*/;\nvar VALUE_REGEX = /^((?:'(?:\\\\'|.)*?'|\"(?:\\\\\"|.)*?\"|\\([^)]*?\\)|[^};])+)/;\nvar SEMICOLON_REGEX = /^[;\\s]*/;\n\n// https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String/Trim#Polyfill\nvar TRIM_REGEX = /^\\s+|\\s+$/g;\n\n// strings\nvar NEWLINE = '\\n';\nvar FORWARD_SLASH = '/';\nvar ASTERISK = '*';\nvar EMPTY_STRING = '';\n\n// types\nvar TYPE_COMMENT = 'comment';\nvar TYPE_DECLARATION = 'declaration';\n\n/**\n * @param {String} style\n * @param {Object} [options]\n * @return {Object[]}\n * @throws {TypeError}\n * @throws {Error}\n */\nmodule.exports = function(style, options) {\n  if (typeof style !== 'string') {\n    throw new TypeError('First argument must be a string');\n  }\n\n  if (!style) return [];\n\n  options = options || {};\n\n  /**\n   * Positional.\n   */\n  var lineno = 1;\n  var column = 1;\n\n  /**\n   * Update lineno and column based on `str`.\n   *\n   * @param {String} str\n   */\n  function updatePosition(str) {\n    var lines = str.match(NEWLINE_REGEX);\n    if (lines) lineno += lines.length;\n    var i = str.lastIndexOf(NEWLINE);\n    column = ~i ? str.length - i : column + str.length;\n  }\n\n  /**\n   * Mark position and patch `node.position`.\n   *\n   * @return {Function}\n   */\n  function position() {\n    var start = { line: lineno, column: column };\n    return function(node) {\n      node.position = new Position(start);\n      whitespace();\n      return node;\n    };\n  }\n\n  /**\n   * Store position information for a node.\n   *\n   * @constructor\n   * @property {Object} start\n   * @property {Object} end\n   * @property {undefined|String} source\n   */\n  function Position(start) {\n    this.start = start;\n    this.end = { line: lineno, column: column };\n    this.source = options.source;\n  }\n\n  /**\n   * Non-enumerable source string.\n   */\n  Position.prototype.content = style;\n\n  var errorsList = [];\n\n  /**\n   * Error `msg`.\n   *\n   * @param {String} msg\n   * @throws {Error}\n   */\n  function error(msg) {\n    var err = new Error(\n      options.source + ':' + lineno + ':' + column + ': ' + msg\n    );\n    err.reason = msg;\n    err.filename = options.source;\n    err.line = lineno;\n    err.column = column;\n    err.source = style;\n\n    if (options.silent) {\n      errorsList.push(err);\n    } else {\n      throw err;\n    }\n  }\n\n  /**\n   * Match `re` and return captures.\n   *\n   * @param {RegExp} re\n   * @return {undefined|Array}\n   */\n  function match(re) {\n    var m = re.exec(style);\n    if (!m) return;\n    var str = m[0];\n    updatePosition(str);\n    style = style.slice(str.length);\n    return m;\n  }\n\n  /**\n   * Parse whitespace.\n   */\n  function whitespace() {\n    match(WHITESPACE_REGEX);\n  }\n\n  /**\n   * Parse comments.\n   *\n   * @param {Object[]} [rules]\n   * @return {Object[]}\n   */\n  function comments(rules) {\n    var c;\n    rules = rules || [];\n    while ((c = comment())) {\n      if (c !== false) {\n        rules.push(c);\n      }\n    }\n    return rules;\n  }\n\n  /**\n   * Parse comment.\n   *\n   * @return {Object}\n   * @throws {Error}\n   */\n  function comment() {\n    var pos = position();\n    if (FORWARD_SLASH != style.charAt(0) || ASTERISK != style.charAt(1)) return;\n\n    var i = 2;\n    while (\n      EMPTY_STRING != style.charAt(i) &&\n      (ASTERISK != style.charAt(i) || FORWARD_SLASH != style.charAt(i + 1))\n    ) {\n      ++i;\n    }\n    i += 2;\n\n    if (EMPTY_STRING === style.charAt(i - 1)) {\n      return error('End of comment missing');\n    }\n\n    var str = style.slice(2, i - 2);\n    column += 2;\n    updatePosition(str);\n    style = style.slice(i);\n    column += 2;\n\n    return pos({\n      type: TYPE_COMMENT,\n      comment: str\n    });\n  }\n\n  /**\n   * Parse declaration.\n   *\n   * @return {Object}\n   * @throws {Error}\n   */\n  function declaration() {\n    var pos = position();\n\n    // prop\n    var prop = match(PROPERTY_REGEX);\n    if (!prop) return;\n    comment();\n\n    // :\n    if (!match(COLON_REGEX)) return error(\"property missing ':'\");\n\n    // val\n    var val = match(VALUE_REGEX);\n\n    var ret = pos({\n      type: TYPE_DECLARATION,\n      property: trim(prop[0].replace(COMMENT_REGEX, EMPTY_STRING)),\n      value: val\n        ? trim(val[0].replace(COMMENT_REGEX, EMPTY_STRING))\n        : EMPTY_STRING\n    });\n\n    // ;\n    match(SEMICOLON_REGEX);\n\n    return ret;\n  }\n\n  /**\n   * Parse declarations.\n   *\n   * @return {Object[]}\n   */\n  function declarations() {\n    var decls = [];\n\n    comments(decls);\n\n    // declarations\n    var decl;\n    while ((decl = declaration())) {\n      if (decl !== false) {\n        decls.push(decl);\n        comments(decls);\n      }\n    }\n\n    return decls;\n  }\n\n  whitespace();\n  return declarations();\n};\n\n/**\n * Trim `str`.\n *\n * @param {String} str\n * @return {String}\n */\nfunction trim(str) {\n  return str ? str.replace(TRIM_REGEX, EMPTY_STRING) : EMPTY_STRING;\n}\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nvar ReactPropTypesSecret = require('./lib/ReactPropTypesSecret');\n\nfunction emptyFunction() {}\nfunction emptyFunctionWithReset() {}\nemptyFunctionWithReset.resetWarningCache = emptyFunction;\n\nmodule.exports = function() {\n  function shim(props, propName, componentName, location, propFullName, secret) {\n    if (secret === ReactPropTypesSecret) {\n      // It is still safe when called from React.\n      return;\n    }\n    var err = new Error(\n      'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +\n      'Use PropTypes.checkPropTypes() to call them. ' +\n      'Read more at http://fb.me/use-check-prop-types'\n    );\n    err.name = 'Invariant Violation';\n    throw err;\n  };\n  shim.isRequired = shim;\n  function getShim() {\n    return shim;\n  };\n  // Important!\n  // Keep this list in sync with production version in `./factoryWithTypeCheckers.js`.\n  var ReactPropTypes = {\n    array: shim,\n    bigint: shim,\n    bool: shim,\n    func: shim,\n    number: shim,\n    object: shim,\n    string: shim,\n    symbol: shim,\n\n    any: shim,\n    arrayOf: getShim,\n    element: shim,\n    elementType: shim,\n    instanceOf: getShim,\n    node: shim,\n    objectOf: getShim,\n    oneOf: getShim,\n    oneOfType: getShim,\n    shape: getShim,\n    exact: getShim,\n\n    checkPropTypes: emptyFunctionWithReset,\n    resetWarningCache: emptyFunction\n  };\n\n  ReactPropTypes.PropTypes = ReactPropTypes;\n\n  return ReactPropTypes;\n};\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nif (process.env.NODE_ENV !== 'production') {\n  var ReactIs = require('react-is');\n\n  // By explicitly using `prop-types` you are opting into new development behavior.\n  // http://fb.me/prop-types-in-prod\n  var throwOnDirectAccess = true;\n  module.exports = require('./factoryWithTypeCheckers')(ReactIs.isElement, throwOnDirectAccess);\n} else {\n  // By explicitly using `prop-types` you are opting into new production behavior.\n  // http://fb.me/prop-types-in-prod\n  module.exports = require('./factoryWithThrowingShims')();\n}\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nvar ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';\n\nmodule.exports = ReactPropTypesSecret;\n","/**\n * @license React\n * react-dom.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n/*\n Modernizr 3.0.0pre (Custom Build) | MIT\n*/\n'use strict';var aa=require(\"react\"),ca=require(\"scheduler\");function p(a){for(var b=\"https://reactjs.org/docs/error-decoder.html?invariant=\"+a,c=1;c<arguments.length;c++)b+=\"&args[]=\"+encodeURIComponent(arguments[c]);return\"Minified React error #\"+a+\"; visit \"+b+\" for the full message or use the non-minified dev environment for full errors and additional helpful warnings.\"}var da=new Set,ea={};function fa(a,b){ha(a,b);ha(a+\"Capture\",b)}\nfunction ha(a,b){ea[a]=b;for(a=0;a<b.length;a++)da.add(b[a])}\nvar ia=!(\"undefined\"===typeof window||\"undefined\"===typeof window.document||\"undefined\"===typeof window.document.createElement),ja=Object.prototype.hasOwnProperty,ka=/^[:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$/,la=\n{},ma={};function oa(a){if(ja.call(ma,a))return!0;if(ja.call(la,a))return!1;if(ka.test(a))return ma[a]=!0;la[a]=!0;return!1}function pa(a,b,c,d){if(null!==c&&0===c.type)return!1;switch(typeof b){case \"function\":case \"symbol\":return!0;case \"boolean\":if(d)return!1;if(null!==c)return!c.acceptsBooleans;a=a.toLowerCase().slice(0,5);return\"data-\"!==a&&\"aria-\"!==a;default:return!1}}\nfunction qa(a,b,c,d){if(null===b||\"undefined\"===typeof b||pa(a,b,c,d))return!0;if(d)return!1;if(null!==c)switch(c.type){case 3:return!b;case 4:return!1===b;case 5:return isNaN(b);case 6:return isNaN(b)||1>b}return!1}function v(a,b,c,d,e,f,g){this.acceptsBooleans=2===b||3===b||4===b;this.attributeName=d;this.attributeNamespace=e;this.mustUseProperty=c;this.propertyName=a;this.type=b;this.sanitizeURL=f;this.removeEmptyString=g}var z={};\n\"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style\".split(\" \").forEach(function(a){z[a]=new v(a,0,!1,a,null,!1,!1)});[[\"acceptCharset\",\"accept-charset\"],[\"className\",\"class\"],[\"htmlFor\",\"for\"],[\"httpEquiv\",\"http-equiv\"]].forEach(function(a){var b=a[0];z[b]=new v(b,1,!1,a[1],null,!1,!1)});[\"contentEditable\",\"draggable\",\"spellCheck\",\"value\"].forEach(function(a){z[a]=new v(a,2,!1,a.toLowerCase(),null,!1,!1)});\n[\"autoReverse\",\"externalResourcesRequired\",\"focusable\",\"preserveAlpha\"].forEach(function(a){z[a]=new v(a,2,!1,a,null,!1,!1)});\"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope\".split(\" \").forEach(function(a){z[a]=new v(a,3,!1,a.toLowerCase(),null,!1,!1)});\n[\"checked\",\"multiple\",\"muted\",\"selected\"].forEach(function(a){z[a]=new v(a,3,!0,a,null,!1,!1)});[\"capture\",\"download\"].forEach(function(a){z[a]=new v(a,4,!1,a,null,!1,!1)});[\"cols\",\"rows\",\"size\",\"span\"].forEach(function(a){z[a]=new v(a,6,!1,a,null,!1,!1)});[\"rowSpan\",\"start\"].forEach(function(a){z[a]=new v(a,5,!1,a.toLowerCase(),null,!1,!1)});var ra=/[\\-:]([a-z])/g;function sa(a){return a[1].toUpperCase()}\n\"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height\".split(\" \").forEach(function(a){var b=a.replace(ra,\nsa);z[b]=new v(b,1,!1,a,null,!1,!1)});\"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type\".split(\" \").forEach(function(a){var b=a.replace(ra,sa);z[b]=new v(b,1,!1,a,\"http://www.w3.org/1999/xlink\",!1,!1)});[\"xml:base\",\"xml:lang\",\"xml:space\"].forEach(function(a){var b=a.replace(ra,sa);z[b]=new v(b,1,!1,a,\"http://www.w3.org/XML/1998/namespace\",!1,!1)});[\"tabIndex\",\"crossOrigin\"].forEach(function(a){z[a]=new v(a,1,!1,a.toLowerCase(),null,!1,!1)});\nz.xlinkHref=new v(\"xlinkHref\",1,!1,\"xlink:href\",\"http://www.w3.org/1999/xlink\",!0,!1);[\"src\",\"href\",\"action\",\"formAction\"].forEach(function(a){z[a]=new v(a,1,!1,a.toLowerCase(),null,!0,!0)});\nfunction ta(a,b,c,d){var e=z.hasOwnProperty(b)?z[b]:null;if(null!==e?0!==e.type:d||!(2<b.length)||\"o\"!==b[0]&&\"O\"!==b[0]||\"n\"!==b[1]&&\"N\"!==b[1])qa(b,c,e,d)&&(c=null),d||null===e?oa(b)&&(null===c?a.removeAttribute(b):a.setAttribute(b,\"\"+c)):e.mustUseProperty?a[e.propertyName]=null===c?3===e.type?!1:\"\":c:(b=e.attributeName,d=e.attributeNamespace,null===c?a.removeAttribute(b):(e=e.type,c=3===e||4===e&&!0===c?\"\":\"\"+c,d?a.setAttributeNS(d,b,c):a.setAttribute(b,c)))}\nvar ua=aa.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,va=Symbol.for(\"react.element\"),wa=Symbol.for(\"react.portal\"),ya=Symbol.for(\"react.fragment\"),za=Symbol.for(\"react.strict_mode\"),Aa=Symbol.for(\"react.profiler\"),Ba=Symbol.for(\"react.provider\"),Ca=Symbol.for(\"react.context\"),Da=Symbol.for(\"react.forward_ref\"),Ea=Symbol.for(\"react.suspense\"),Fa=Symbol.for(\"react.suspense_list\"),Ga=Symbol.for(\"react.memo\"),Ha=Symbol.for(\"react.lazy\");Symbol.for(\"react.scope\");Symbol.for(\"react.debug_trace_mode\");\nvar Ia=Symbol.for(\"react.offscreen\");Symbol.for(\"react.legacy_hidden\");Symbol.for(\"react.cache\");Symbol.for(\"react.tracing_marker\");var Ja=Symbol.iterator;function Ka(a){if(null===a||\"object\"!==typeof a)return null;a=Ja&&a[Ja]||a[\"@@iterator\"];return\"function\"===typeof a?a:null}var A=Object.assign,La;function Ma(a){if(void 0===La)try{throw Error();}catch(c){var b=c.stack.trim().match(/\\n( *(at )?)/);La=b&&b[1]||\"\"}return\"\\n\"+La+a}var Na=!1;\nfunction Oa(a,b){if(!a||Na)return\"\";Na=!0;var c=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(b)if(b=function(){throw Error();},Object.defineProperty(b.prototype,\"props\",{set:function(){throw Error();}}),\"object\"===typeof Reflect&&Reflect.construct){try{Reflect.construct(b,[])}catch(l){var d=l}Reflect.construct(a,[],b)}else{try{b.call()}catch(l){d=l}a.call(b.prototype)}else{try{throw Error();}catch(l){d=l}a()}}catch(l){if(l&&d&&\"string\"===typeof l.stack){for(var e=l.stack.split(\"\\n\"),\nf=d.stack.split(\"\\n\"),g=e.length-1,h=f.length-1;1<=g&&0<=h&&e[g]!==f[h];)h--;for(;1<=g&&0<=h;g--,h--)if(e[g]!==f[h]){if(1!==g||1!==h){do if(g--,h--,0>h||e[g]!==f[h]){var k=\"\\n\"+e[g].replace(\" at new \",\" at \");a.displayName&&k.includes(\"<anonymous>\")&&(k=k.replace(\"<anonymous>\",a.displayName));return k}while(1<=g&&0<=h)}break}}}finally{Na=!1,Error.prepareStackTrace=c}return(a=a?a.displayName||a.name:\"\")?Ma(a):\"\"}\nfunction Pa(a){switch(a.tag){case 5:return Ma(a.type);case 16:return Ma(\"Lazy\");case 13:return Ma(\"Suspense\");case 19:return Ma(\"SuspenseList\");case 0:case 2:case 15:return a=Oa(a.type,!1),a;case 11:return a=Oa(a.type.render,!1),a;case 1:return a=Oa(a.type,!0),a;default:return\"\"}}\nfunction Qa(a){if(null==a)return null;if(\"function\"===typeof a)return a.displayName||a.name||null;if(\"string\"===typeof a)return a;switch(a){case ya:return\"Fragment\";case wa:return\"Portal\";case Aa:return\"Profiler\";case za:return\"StrictMode\";case Ea:return\"Suspense\";case Fa:return\"SuspenseList\"}if(\"object\"===typeof a)switch(a.$$typeof){case Ca:return(a.displayName||\"Context\")+\".Consumer\";case Ba:return(a._context.displayName||\"Context\")+\".Provider\";case Da:var b=a.render;a=a.displayName;a||(a=b.displayName||\nb.name||\"\",a=\"\"!==a?\"ForwardRef(\"+a+\")\":\"ForwardRef\");return a;case Ga:return b=a.displayName||null,null!==b?b:Qa(a.type)||\"Memo\";case Ha:b=a._payload;a=a._init;try{return Qa(a(b))}catch(c){}}return null}\nfunction Ra(a){var b=a.type;switch(a.tag){case 24:return\"Cache\";case 9:return(b.displayName||\"Context\")+\".Consumer\";case 10:return(b._context.displayName||\"Context\")+\".Provider\";case 18:return\"DehydratedFragment\";case 11:return a=b.render,a=a.displayName||a.name||\"\",b.displayName||(\"\"!==a?\"ForwardRef(\"+a+\")\":\"ForwardRef\");case 7:return\"Fragment\";case 5:return b;case 4:return\"Portal\";case 3:return\"Root\";case 6:return\"Text\";case 16:return Qa(b);case 8:return b===za?\"StrictMode\":\"Mode\";case 22:return\"Offscreen\";\ncase 12:return\"Profiler\";case 21:return\"Scope\";case 13:return\"Suspense\";case 19:return\"SuspenseList\";case 25:return\"TracingMarker\";case 1:case 0:case 17:case 2:case 14:case 15:if(\"function\"===typeof b)return b.displayName||b.name||null;if(\"string\"===typeof b)return b}return null}function Sa(a){switch(typeof a){case \"boolean\":case \"number\":case \"string\":case \"undefined\":return a;case \"object\":return a;default:return\"\"}}\nfunction Ta(a){var b=a.type;return(a=a.nodeName)&&\"input\"===a.toLowerCase()&&(\"checkbox\"===b||\"radio\"===b)}\nfunction Ua(a){var b=Ta(a)?\"checked\":\"value\",c=Object.getOwnPropertyDescriptor(a.constructor.prototype,b),d=\"\"+a[b];if(!a.hasOwnProperty(b)&&\"undefined\"!==typeof c&&\"function\"===typeof c.get&&\"function\"===typeof c.set){var e=c.get,f=c.set;Object.defineProperty(a,b,{configurable:!0,get:function(){return e.call(this)},set:function(a){d=\"\"+a;f.call(this,a)}});Object.defineProperty(a,b,{enumerable:c.enumerable});return{getValue:function(){return d},setValue:function(a){d=\"\"+a},stopTracking:function(){a._valueTracker=\nnull;delete a[b]}}}}function Va(a){a._valueTracker||(a._valueTracker=Ua(a))}function Wa(a){if(!a)return!1;var b=a._valueTracker;if(!b)return!0;var c=b.getValue();var d=\"\";a&&(d=Ta(a)?a.checked?\"true\":\"false\":a.value);a=d;return a!==c?(b.setValue(a),!0):!1}function Xa(a){a=a||(\"undefined\"!==typeof document?document:void 0);if(\"undefined\"===typeof a)return null;try{return a.activeElement||a.body}catch(b){return a.body}}\nfunction Ya(a,b){var c=b.checked;return A({},b,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=c?c:a._wrapperState.initialChecked})}function Za(a,b){var c=null==b.defaultValue?\"\":b.defaultValue,d=null!=b.checked?b.checked:b.defaultChecked;c=Sa(null!=b.value?b.value:c);a._wrapperState={initialChecked:d,initialValue:c,controlled:\"checkbox\"===b.type||\"radio\"===b.type?null!=b.checked:null!=b.value}}function ab(a,b){b=b.checked;null!=b&&ta(a,\"checked\",b,!1)}\nfunction bb(a,b){ab(a,b);var c=Sa(b.value),d=b.type;if(null!=c)if(\"number\"===d){if(0===c&&\"\"===a.value||a.value!=c)a.value=\"\"+c}else a.value!==\"\"+c&&(a.value=\"\"+c);else if(\"submit\"===d||\"reset\"===d){a.removeAttribute(\"value\");return}b.hasOwnProperty(\"value\")?cb(a,b.type,c):b.hasOwnProperty(\"defaultValue\")&&cb(a,b.type,Sa(b.defaultValue));null==b.checked&&null!=b.defaultChecked&&(a.defaultChecked=!!b.defaultChecked)}\nfunction db(a,b,c){if(b.hasOwnProperty(\"value\")||b.hasOwnProperty(\"defaultValue\")){var d=b.type;if(!(\"submit\"!==d&&\"reset\"!==d||void 0!==b.value&&null!==b.value))return;b=\"\"+a._wrapperState.initialValue;c||b===a.value||(a.value=b);a.defaultValue=b}c=a.name;\"\"!==c&&(a.name=\"\");a.defaultChecked=!!a._wrapperState.initialChecked;\"\"!==c&&(a.name=c)}\nfunction cb(a,b,c){if(\"number\"!==b||Xa(a.ownerDocument)!==a)null==c?a.defaultValue=\"\"+a._wrapperState.initialValue:a.defaultValue!==\"\"+c&&(a.defaultValue=\"\"+c)}var eb=Array.isArray;\nfunction fb(a,b,c,d){a=a.options;if(b){b={};for(var e=0;e<c.length;e++)b[\"$\"+c[e]]=!0;for(c=0;c<a.length;c++)e=b.hasOwnProperty(\"$\"+a[c].value),a[c].selected!==e&&(a[c].selected=e),e&&d&&(a[c].defaultSelected=!0)}else{c=\"\"+Sa(c);b=null;for(e=0;e<a.length;e++){if(a[e].value===c){a[e].selected=!0;d&&(a[e].defaultSelected=!0);return}null!==b||a[e].disabled||(b=a[e])}null!==b&&(b.selected=!0)}}\nfunction gb(a,b){if(null!=b.dangerouslySetInnerHTML)throw Error(p(91));return A({},b,{value:void 0,defaultValue:void 0,children:\"\"+a._wrapperState.initialValue})}function hb(a,b){var c=b.value;if(null==c){c=b.children;b=b.defaultValue;if(null!=c){if(null!=b)throw Error(p(92));if(eb(c)){if(1<c.length)throw Error(p(93));c=c[0]}b=c}null==b&&(b=\"\");c=b}a._wrapperState={initialValue:Sa(c)}}\nfunction ib(a,b){var c=Sa(b.value),d=Sa(b.defaultValue);null!=c&&(c=\"\"+c,c!==a.value&&(a.value=c),null==b.defaultValue&&a.defaultValue!==c&&(a.defaultValue=c));null!=d&&(a.defaultValue=\"\"+d)}function jb(a){var b=a.textContent;b===a._wrapperState.initialValue&&\"\"!==b&&null!==b&&(a.value=b)}function kb(a){switch(a){case \"svg\":return\"http://www.w3.org/2000/svg\";case \"math\":return\"http://www.w3.org/1998/Math/MathML\";default:return\"http://www.w3.org/1999/xhtml\"}}\nfunction lb(a,b){return null==a||\"http://www.w3.org/1999/xhtml\"===a?kb(b):\"http://www.w3.org/2000/svg\"===a&&\"foreignObject\"===b?\"http://www.w3.org/1999/xhtml\":a}\nvar mb,nb=function(a){return\"undefined\"!==typeof MSApp&&MSApp.execUnsafeLocalFunction?function(b,c,d,e){MSApp.execUnsafeLocalFunction(function(){return a(b,c,d,e)})}:a}(function(a,b){if(\"http://www.w3.org/2000/svg\"!==a.namespaceURI||\"innerHTML\"in a)a.innerHTML=b;else{mb=mb||document.createElement(\"div\");mb.innerHTML=\"<svg>\"+b.valueOf().toString()+\"</svg>\";for(b=mb.firstChild;a.firstChild;)a.removeChild(a.firstChild);for(;b.firstChild;)a.appendChild(b.firstChild)}});\nfunction ob(a,b){if(b){var c=a.firstChild;if(c&&c===a.lastChild&&3===c.nodeType){c.nodeValue=b;return}}a.textContent=b}\nvar pb={animationIterationCount:!0,aspectRatio:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,\nzoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},qb=[\"Webkit\",\"ms\",\"Moz\",\"O\"];Object.keys(pb).forEach(function(a){qb.forEach(function(b){b=b+a.charAt(0).toUpperCase()+a.substring(1);pb[b]=pb[a]})});function rb(a,b,c){return null==b||\"boolean\"===typeof b||\"\"===b?\"\":c||\"number\"!==typeof b||0===b||pb.hasOwnProperty(a)&&pb[a]?(\"\"+b).trim():b+\"px\"}\nfunction sb(a,b){a=a.style;for(var c in b)if(b.hasOwnProperty(c)){var d=0===c.indexOf(\"--\"),e=rb(c,b[c],d);\"float\"===c&&(c=\"cssFloat\");d?a.setProperty(c,e):a[c]=e}}var tb=A({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});\nfunction ub(a,b){if(b){if(tb[a]&&(null!=b.children||null!=b.dangerouslySetInnerHTML))throw Error(p(137,a));if(null!=b.dangerouslySetInnerHTML){if(null!=b.children)throw Error(p(60));if(\"object\"!==typeof b.dangerouslySetInnerHTML||!(\"__html\"in b.dangerouslySetInnerHTML))throw Error(p(61));}if(null!=b.style&&\"object\"!==typeof b.style)throw Error(p(62));}}\nfunction vb(a,b){if(-1===a.indexOf(\"-\"))return\"string\"===typeof b.is;switch(a){case \"annotation-xml\":case \"color-profile\":case \"font-face\":case \"font-face-src\":case \"font-face-uri\":case \"font-face-format\":case \"font-face-name\":case \"missing-glyph\":return!1;default:return!0}}var wb=null;function xb(a){a=a.target||a.srcElement||window;a.correspondingUseElement&&(a=a.correspondingUseElement);return 3===a.nodeType?a.parentNode:a}var yb=null,zb=null,Ab=null;\nfunction Bb(a){if(a=Cb(a)){if(\"function\"!==typeof yb)throw Error(p(280));var b=a.stateNode;b&&(b=Db(b),yb(a.stateNode,a.type,b))}}function Eb(a){zb?Ab?Ab.push(a):Ab=[a]:zb=a}function Fb(){if(zb){var a=zb,b=Ab;Ab=zb=null;Bb(a);if(b)for(a=0;a<b.length;a++)Bb(b[a])}}function Gb(a,b){return a(b)}function Hb(){}var Ib=!1;function Jb(a,b,c){if(Ib)return a(b,c);Ib=!0;try{return Gb(a,b,c)}finally{if(Ib=!1,null!==zb||null!==Ab)Hb(),Fb()}}\nfunction Kb(a,b){var c=a.stateNode;if(null===c)return null;var d=Db(c);if(null===d)return null;c=d[b];a:switch(b){case \"onClick\":case \"onClickCapture\":case \"onDoubleClick\":case \"onDoubleClickCapture\":case \"onMouseDown\":case \"onMouseDownCapture\":case \"onMouseMove\":case \"onMouseMoveCapture\":case \"onMouseUp\":case \"onMouseUpCapture\":case \"onMouseEnter\":(d=!d.disabled)||(a=a.type,d=!(\"button\"===a||\"input\"===a||\"select\"===a||\"textarea\"===a));a=!d;break a;default:a=!1}if(a)return null;if(c&&\"function\"!==\ntypeof c)throw Error(p(231,b,typeof c));return c}var Lb=!1;if(ia)try{var Mb={};Object.defineProperty(Mb,\"passive\",{get:function(){Lb=!0}});window.addEventListener(\"test\",Mb,Mb);window.removeEventListener(\"test\",Mb,Mb)}catch(a){Lb=!1}function Nb(a,b,c,d,e,f,g,h,k){var l=Array.prototype.slice.call(arguments,3);try{b.apply(c,l)}catch(m){this.onError(m)}}var Ob=!1,Pb=null,Qb=!1,Rb=null,Sb={onError:function(a){Ob=!0;Pb=a}};function Tb(a,b,c,d,e,f,g,h,k){Ob=!1;Pb=null;Nb.apply(Sb,arguments)}\nfunction Ub(a,b,c,d,e,f,g,h,k){Tb.apply(this,arguments);if(Ob){if(Ob){var l=Pb;Ob=!1;Pb=null}else throw Error(p(198));Qb||(Qb=!0,Rb=l)}}function Vb(a){var b=a,c=a;if(a.alternate)for(;b.return;)b=b.return;else{a=b;do b=a,0!==(b.flags&4098)&&(c=b.return),a=b.return;while(a)}return 3===b.tag?c:null}function Wb(a){if(13===a.tag){var b=a.memoizedState;null===b&&(a=a.alternate,null!==a&&(b=a.memoizedState));if(null!==b)return b.dehydrated}return null}function Xb(a){if(Vb(a)!==a)throw Error(p(188));}\nfunction Yb(a){var b=a.alternate;if(!b){b=Vb(a);if(null===b)throw Error(p(188));return b!==a?null:a}for(var c=a,d=b;;){var e=c.return;if(null===e)break;var f=e.alternate;if(null===f){d=e.return;if(null!==d){c=d;continue}break}if(e.child===f.child){for(f=e.child;f;){if(f===c)return Xb(e),a;if(f===d)return Xb(e),b;f=f.sibling}throw Error(p(188));}if(c.return!==d.return)c=e,d=f;else{for(var g=!1,h=e.child;h;){if(h===c){g=!0;c=e;d=f;break}if(h===d){g=!0;d=e;c=f;break}h=h.sibling}if(!g){for(h=f.child;h;){if(h===\nc){g=!0;c=f;d=e;break}if(h===d){g=!0;d=f;c=e;break}h=h.sibling}if(!g)throw Error(p(189));}}if(c.alternate!==d)throw Error(p(190));}if(3!==c.tag)throw Error(p(188));return c.stateNode.current===c?a:b}function Zb(a){a=Yb(a);return null!==a?$b(a):null}function $b(a){if(5===a.tag||6===a.tag)return a;for(a=a.child;null!==a;){var b=$b(a);if(null!==b)return b;a=a.sibling}return null}\nvar ac=ca.unstable_scheduleCallback,bc=ca.unstable_cancelCallback,cc=ca.unstable_shouldYield,dc=ca.unstable_requestPaint,B=ca.unstable_now,ec=ca.unstable_getCurrentPriorityLevel,fc=ca.unstable_ImmediatePriority,gc=ca.unstable_UserBlockingPriority,hc=ca.unstable_NormalPriority,ic=ca.unstable_LowPriority,jc=ca.unstable_IdlePriority,kc=null,lc=null;function mc(a){if(lc&&\"function\"===typeof lc.onCommitFiberRoot)try{lc.onCommitFiberRoot(kc,a,void 0,128===(a.current.flags&128))}catch(b){}}\nvar oc=Math.clz32?Math.clz32:nc,pc=Math.log,qc=Math.LN2;function nc(a){a>>>=0;return 0===a?32:31-(pc(a)/qc|0)|0}var rc=64,sc=4194304;\nfunction tc(a){switch(a&-a){case 1:return 1;case 2:return 2;case 4:return 4;case 8:return 8;case 16:return 16;case 32:return 32;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return a&4194240;case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:return a&130023424;case 134217728:return 134217728;case 268435456:return 268435456;case 536870912:return 536870912;case 1073741824:return 1073741824;\ndefault:return a}}function uc(a,b){var c=a.pendingLanes;if(0===c)return 0;var d=0,e=a.suspendedLanes,f=a.pingedLanes,g=c&268435455;if(0!==g){var h=g&~e;0!==h?d=tc(h):(f&=g,0!==f&&(d=tc(f)))}else g=c&~e,0!==g?d=tc(g):0!==f&&(d=tc(f));if(0===d)return 0;if(0!==b&&b!==d&&0===(b&e)&&(e=d&-d,f=b&-b,e>=f||16===e&&0!==(f&4194240)))return b;0!==(d&4)&&(d|=c&16);b=a.entangledLanes;if(0!==b)for(a=a.entanglements,b&=d;0<b;)c=31-oc(b),e=1<<c,d|=a[c],b&=~e;return d}\nfunction vc(a,b){switch(a){case 1:case 2:case 4:return b+250;case 8:case 16:case 32:case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return b+5E3;case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:return-1;case 134217728:case 268435456:case 536870912:case 1073741824:return-1;default:return-1}}\nfunction wc(a,b){for(var c=a.suspendedLanes,d=a.pingedLanes,e=a.expirationTimes,f=a.pendingLanes;0<f;){var g=31-oc(f),h=1<<g,k=e[g];if(-1===k){if(0===(h&c)||0!==(h&d))e[g]=vc(h,b)}else k<=b&&(a.expiredLanes|=h);f&=~h}}function xc(a){a=a.pendingLanes&-1073741825;return 0!==a?a:a&1073741824?1073741824:0}function yc(){var a=rc;rc<<=1;0===(rc&4194240)&&(rc=64);return a}function zc(a){for(var b=[],c=0;31>c;c++)b.push(a);return b}\nfunction Ac(a,b,c){a.pendingLanes|=b;536870912!==b&&(a.suspendedLanes=0,a.pingedLanes=0);a=a.eventTimes;b=31-oc(b);a[b]=c}function Bc(a,b){var c=a.pendingLanes&~b;a.pendingLanes=b;a.suspendedLanes=0;a.pingedLanes=0;a.expiredLanes&=b;a.mutableReadLanes&=b;a.entangledLanes&=b;b=a.entanglements;var d=a.eventTimes;for(a=a.expirationTimes;0<c;){var e=31-oc(c),f=1<<e;b[e]=0;d[e]=-1;a[e]=-1;c&=~f}}\nfunction Cc(a,b){var c=a.entangledLanes|=b;for(a=a.entanglements;c;){var d=31-oc(c),e=1<<d;e&b|a[d]&b&&(a[d]|=b);c&=~e}}var C=0;function Dc(a){a&=-a;return 1<a?4<a?0!==(a&268435455)?16:536870912:4:1}var Ec,Fc,Gc,Hc,Ic,Jc=!1,Kc=[],Lc=null,Mc=null,Nc=null,Oc=new Map,Pc=new Map,Qc=[],Rc=\"mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit\".split(\" \");\nfunction Sc(a,b){switch(a){case \"focusin\":case \"focusout\":Lc=null;break;case \"dragenter\":case \"dragleave\":Mc=null;break;case \"mouseover\":case \"mouseout\":Nc=null;break;case \"pointerover\":case \"pointerout\":Oc.delete(b.pointerId);break;case \"gotpointercapture\":case \"lostpointercapture\":Pc.delete(b.pointerId)}}\nfunction Tc(a,b,c,d,e,f){if(null===a||a.nativeEvent!==f)return a={blockedOn:b,domEventName:c,eventSystemFlags:d,nativeEvent:f,targetContainers:[e]},null!==b&&(b=Cb(b),null!==b&&Fc(b)),a;a.eventSystemFlags|=d;b=a.targetContainers;null!==e&&-1===b.indexOf(e)&&b.push(e);return a}\nfunction Uc(a,b,c,d,e){switch(b){case \"focusin\":return Lc=Tc(Lc,a,b,c,d,e),!0;case \"dragenter\":return Mc=Tc(Mc,a,b,c,d,e),!0;case \"mouseover\":return Nc=Tc(Nc,a,b,c,d,e),!0;case \"pointerover\":var f=e.pointerId;Oc.set(f,Tc(Oc.get(f)||null,a,b,c,d,e));return!0;case \"gotpointercapture\":return f=e.pointerId,Pc.set(f,Tc(Pc.get(f)||null,a,b,c,d,e)),!0}return!1}\nfunction Vc(a){var b=Wc(a.target);if(null!==b){var c=Vb(b);if(null!==c)if(b=c.tag,13===b){if(b=Wb(c),null!==b){a.blockedOn=b;Ic(a.priority,function(){Gc(c)});return}}else if(3===b&&c.stateNode.current.memoizedState.isDehydrated){a.blockedOn=3===c.tag?c.stateNode.containerInfo:null;return}}a.blockedOn=null}\nfunction Xc(a){if(null!==a.blockedOn)return!1;for(var b=a.targetContainers;0<b.length;){var c=Yc(a.domEventName,a.eventSystemFlags,b[0],a.nativeEvent);if(null===c){c=a.nativeEvent;var d=new c.constructor(c.type,c);wb=d;c.target.dispatchEvent(d);wb=null}else return b=Cb(c),null!==b&&Fc(b),a.blockedOn=c,!1;b.shift()}return!0}function Zc(a,b,c){Xc(a)&&c.delete(b)}function $c(){Jc=!1;null!==Lc&&Xc(Lc)&&(Lc=null);null!==Mc&&Xc(Mc)&&(Mc=null);null!==Nc&&Xc(Nc)&&(Nc=null);Oc.forEach(Zc);Pc.forEach(Zc)}\nfunction ad(a,b){a.blockedOn===b&&(a.blockedOn=null,Jc||(Jc=!0,ca.unstable_scheduleCallback(ca.unstable_NormalPriority,$c)))}\nfunction bd(a){function b(b){return ad(b,a)}if(0<Kc.length){ad(Kc[0],a);for(var c=1;c<Kc.length;c++){var d=Kc[c];d.blockedOn===a&&(d.blockedOn=null)}}null!==Lc&&ad(Lc,a);null!==Mc&&ad(Mc,a);null!==Nc&&ad(Nc,a);Oc.forEach(b);Pc.forEach(b);for(c=0;c<Qc.length;c++)d=Qc[c],d.blockedOn===a&&(d.blockedOn=null);for(;0<Qc.length&&(c=Qc[0],null===c.blockedOn);)Vc(c),null===c.blockedOn&&Qc.shift()}var cd=ua.ReactCurrentBatchConfig,dd=!0;\nfunction ed(a,b,c,d){var e=C,f=cd.transition;cd.transition=null;try{C=1,fd(a,b,c,d)}finally{C=e,cd.transition=f}}function gd(a,b,c,d){var e=C,f=cd.transition;cd.transition=null;try{C=4,fd(a,b,c,d)}finally{C=e,cd.transition=f}}\nfunction fd(a,b,c,d){if(dd){var e=Yc(a,b,c,d);if(null===e)hd(a,b,d,id,c),Sc(a,d);else if(Uc(e,a,b,c,d))d.stopPropagation();else if(Sc(a,d),b&4&&-1<Rc.indexOf(a)){for(;null!==e;){var f=Cb(e);null!==f&&Ec(f);f=Yc(a,b,c,d);null===f&&hd(a,b,d,id,c);if(f===e)break;e=f}null!==e&&d.stopPropagation()}else hd(a,b,d,null,c)}}var id=null;\nfunction Yc(a,b,c,d){id=null;a=xb(d);a=Wc(a);if(null!==a)if(b=Vb(a),null===b)a=null;else if(c=b.tag,13===c){a=Wb(b);if(null!==a)return a;a=null}else if(3===c){if(b.stateNode.current.memoizedState.isDehydrated)return 3===b.tag?b.stateNode.containerInfo:null;a=null}else b!==a&&(a=null);id=a;return null}\nfunction jd(a){switch(a){case \"cancel\":case \"click\":case \"close\":case \"contextmenu\":case \"copy\":case \"cut\":case \"auxclick\":case \"dblclick\":case \"dragend\":case \"dragstart\":case \"drop\":case \"focusin\":case \"focusout\":case \"input\":case \"invalid\":case \"keydown\":case \"keypress\":case \"keyup\":case \"mousedown\":case \"mouseup\":case \"paste\":case \"pause\":case \"play\":case \"pointercancel\":case \"pointerdown\":case \"pointerup\":case \"ratechange\":case \"reset\":case \"resize\":case \"seeked\":case \"submit\":case \"touchcancel\":case \"touchend\":case \"touchstart\":case \"volumechange\":case \"change\":case \"selectionchange\":case \"textInput\":case \"compositionstart\":case \"compositionend\":case \"compositionupdate\":case \"beforeblur\":case \"afterblur\":case \"beforeinput\":case \"blur\":case \"fullscreenchange\":case \"focus\":case \"hashchange\":case \"popstate\":case \"select\":case \"selectstart\":return 1;case \"drag\":case \"dragenter\":case \"dragexit\":case \"dragleave\":case \"dragover\":case \"mousemove\":case \"mouseout\":case \"mouseover\":case \"pointermove\":case \"pointerout\":case \"pointerover\":case \"scroll\":case \"toggle\":case \"touchmove\":case \"wheel\":case \"mouseenter\":case \"mouseleave\":case \"pointerenter\":case \"pointerleave\":return 4;\ncase \"message\":switch(ec()){case fc:return 1;case gc:return 4;case hc:case ic:return 16;case jc:return 536870912;default:return 16}default:return 16}}var kd=null,ld=null,md=null;function nd(){if(md)return md;var a,b=ld,c=b.length,d,e=\"value\"in kd?kd.value:kd.textContent,f=e.length;for(a=0;a<c&&b[a]===e[a];a++);var g=c-a;for(d=1;d<=g&&b[c-d]===e[f-d];d++);return md=e.slice(a,1<d?1-d:void 0)}\nfunction od(a){var b=a.keyCode;\"charCode\"in a?(a=a.charCode,0===a&&13===b&&(a=13)):a=b;10===a&&(a=13);return 32<=a||13===a?a:0}function pd(){return!0}function qd(){return!1}\nfunction rd(a){function b(b,d,e,f,g){this._reactName=b;this._targetInst=e;this.type=d;this.nativeEvent=f;this.target=g;this.currentTarget=null;for(var c in a)a.hasOwnProperty(c)&&(b=a[c],this[c]=b?b(f):f[c]);this.isDefaultPrevented=(null!=f.defaultPrevented?f.defaultPrevented:!1===f.returnValue)?pd:qd;this.isPropagationStopped=qd;return this}A(b.prototype,{preventDefault:function(){this.defaultPrevented=!0;var a=this.nativeEvent;a&&(a.preventDefault?a.preventDefault():\"unknown\"!==typeof a.returnValue&&\n(a.returnValue=!1),this.isDefaultPrevented=pd)},stopPropagation:function(){var a=this.nativeEvent;a&&(a.stopPropagation?a.stopPropagation():\"unknown\"!==typeof a.cancelBubble&&(a.cancelBubble=!0),this.isPropagationStopped=pd)},persist:function(){},isPersistent:pd});return b}\nvar sd={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(a){return a.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},td=rd(sd),ud=A({},sd,{view:0,detail:0}),vd=rd(ud),wd,xd,yd,Ad=A({},ud,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:zd,button:0,buttons:0,relatedTarget:function(a){return void 0===a.relatedTarget?a.fromElement===a.srcElement?a.toElement:a.fromElement:a.relatedTarget},movementX:function(a){if(\"movementX\"in\na)return a.movementX;a!==yd&&(yd&&\"mousemove\"===a.type?(wd=a.screenX-yd.screenX,xd=a.screenY-yd.screenY):xd=wd=0,yd=a);return wd},movementY:function(a){return\"movementY\"in a?a.movementY:xd}}),Bd=rd(Ad),Cd=A({},Ad,{dataTransfer:0}),Dd=rd(Cd),Ed=A({},ud,{relatedTarget:0}),Fd=rd(Ed),Gd=A({},sd,{animationName:0,elapsedTime:0,pseudoElement:0}),Hd=rd(Gd),Id=A({},sd,{clipboardData:function(a){return\"clipboardData\"in a?a.clipboardData:window.clipboardData}}),Jd=rd(Id),Kd=A({},sd,{data:0}),Ld=rd(Kd),Md={Esc:\"Escape\",\nSpacebar:\" \",Left:\"ArrowLeft\",Up:\"ArrowUp\",Right:\"ArrowRight\",Down:\"ArrowDown\",Del:\"Delete\",Win:\"OS\",Menu:\"ContextMenu\",Apps:\"ContextMenu\",Scroll:\"ScrollLock\",MozPrintableKey:\"Unidentified\"},Nd={8:\"Backspace\",9:\"Tab\",12:\"Clear\",13:\"Enter\",16:\"Shift\",17:\"Control\",18:\"Alt\",19:\"Pause\",20:\"CapsLock\",27:\"Escape\",32:\" \",33:\"PageUp\",34:\"PageDown\",35:\"End\",36:\"Home\",37:\"ArrowLeft\",38:\"ArrowUp\",39:\"ArrowRight\",40:\"ArrowDown\",45:\"Insert\",46:\"Delete\",112:\"F1\",113:\"F2\",114:\"F3\",115:\"F4\",116:\"F5\",117:\"F6\",118:\"F7\",\n119:\"F8\",120:\"F9\",121:\"F10\",122:\"F11\",123:\"F12\",144:\"NumLock\",145:\"ScrollLock\",224:\"Meta\"},Od={Alt:\"altKey\",Control:\"ctrlKey\",Meta:\"metaKey\",Shift:\"shiftKey\"};function Pd(a){var b=this.nativeEvent;return b.getModifierState?b.getModifierState(a):(a=Od[a])?!!b[a]:!1}function zd(){return Pd}\nvar Qd=A({},ud,{key:function(a){if(a.key){var b=Md[a.key]||a.key;if(\"Unidentified\"!==b)return b}return\"keypress\"===a.type?(a=od(a),13===a?\"Enter\":String.fromCharCode(a)):\"keydown\"===a.type||\"keyup\"===a.type?Nd[a.keyCode]||\"Unidentified\":\"\"},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:zd,charCode:function(a){return\"keypress\"===a.type?od(a):0},keyCode:function(a){return\"keydown\"===a.type||\"keyup\"===a.type?a.keyCode:0},which:function(a){return\"keypress\"===\na.type?od(a):\"keydown\"===a.type||\"keyup\"===a.type?a.keyCode:0}}),Rd=rd(Qd),Sd=A({},Ad,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0}),Td=rd(Sd),Ud=A({},ud,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:zd}),Vd=rd(Ud),Wd=A({},sd,{propertyName:0,elapsedTime:0,pseudoElement:0}),Xd=rd(Wd),Yd=A({},Ad,{deltaX:function(a){return\"deltaX\"in a?a.deltaX:\"wheelDeltaX\"in a?-a.wheelDeltaX:0},\ndeltaY:function(a){return\"deltaY\"in a?a.deltaY:\"wheelDeltaY\"in a?-a.wheelDeltaY:\"wheelDelta\"in a?-a.wheelDelta:0},deltaZ:0,deltaMode:0}),Zd=rd(Yd),$d=[9,13,27,32],ae=ia&&\"CompositionEvent\"in window,be=null;ia&&\"documentMode\"in document&&(be=document.documentMode);var ce=ia&&\"TextEvent\"in window&&!be,de=ia&&(!ae||be&&8<be&&11>=be),ee=String.fromCharCode(32),fe=!1;\nfunction ge(a,b){switch(a){case \"keyup\":return-1!==$d.indexOf(b.keyCode);case \"keydown\":return 229!==b.keyCode;case \"keypress\":case \"mousedown\":case \"focusout\":return!0;default:return!1}}function he(a){a=a.detail;return\"object\"===typeof a&&\"data\"in a?a.data:null}var ie=!1;function je(a,b){switch(a){case \"compositionend\":return he(b);case \"keypress\":if(32!==b.which)return null;fe=!0;return ee;case \"textInput\":return a=b.data,a===ee&&fe?null:a;default:return null}}\nfunction ke(a,b){if(ie)return\"compositionend\"===a||!ae&&ge(a,b)?(a=nd(),md=ld=kd=null,ie=!1,a):null;switch(a){case \"paste\":return null;case \"keypress\":if(!(b.ctrlKey||b.altKey||b.metaKey)||b.ctrlKey&&b.altKey){if(b.char&&1<b.char.length)return b.char;if(b.which)return String.fromCharCode(b.which)}return null;case \"compositionend\":return de&&\"ko\"!==b.locale?null:b.data;default:return null}}\nvar le={color:!0,date:!0,datetime:!0,\"datetime-local\":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function me(a){var b=a&&a.nodeName&&a.nodeName.toLowerCase();return\"input\"===b?!!le[a.type]:\"textarea\"===b?!0:!1}function ne(a,b,c,d){Eb(d);b=oe(b,\"onChange\");0<b.length&&(c=new td(\"onChange\",\"change\",null,c,d),a.push({event:c,listeners:b}))}var pe=null,qe=null;function re(a){se(a,0)}function te(a){var b=ue(a);if(Wa(b))return a}\nfunction ve(a,b){if(\"change\"===a)return b}var we=!1;if(ia){var xe;if(ia){var ye=\"oninput\"in document;if(!ye){var ze=document.createElement(\"div\");ze.setAttribute(\"oninput\",\"return;\");ye=\"function\"===typeof ze.oninput}xe=ye}else xe=!1;we=xe&&(!document.documentMode||9<document.documentMode)}function Ae(){pe&&(pe.detachEvent(\"onpropertychange\",Be),qe=pe=null)}function Be(a){if(\"value\"===a.propertyName&&te(qe)){var b=[];ne(b,qe,a,xb(a));Jb(re,b)}}\nfunction Ce(a,b,c){\"focusin\"===a?(Ae(),pe=b,qe=c,pe.attachEvent(\"onpropertychange\",Be)):\"focusout\"===a&&Ae()}function De(a){if(\"selectionchange\"===a||\"keyup\"===a||\"keydown\"===a)return te(qe)}function Ee(a,b){if(\"click\"===a)return te(b)}function Fe(a,b){if(\"input\"===a||\"change\"===a)return te(b)}function Ge(a,b){return a===b&&(0!==a||1/a===1/b)||a!==a&&b!==b}var He=\"function\"===typeof Object.is?Object.is:Ge;\nfunction Ie(a,b){if(He(a,b))return!0;if(\"object\"!==typeof a||null===a||\"object\"!==typeof b||null===b)return!1;var c=Object.keys(a),d=Object.keys(b);if(c.length!==d.length)return!1;for(d=0;d<c.length;d++){var e=c[d];if(!ja.call(b,e)||!He(a[e],b[e]))return!1}return!0}function Je(a){for(;a&&a.firstChild;)a=a.firstChild;return a}\nfunction Ke(a,b){var c=Je(a);a=0;for(var d;c;){if(3===c.nodeType){d=a+c.textContent.length;if(a<=b&&d>=b)return{node:c,offset:b-a};a=d}a:{for(;c;){if(c.nextSibling){c=c.nextSibling;break a}c=c.parentNode}c=void 0}c=Je(c)}}function Le(a,b){return a&&b?a===b?!0:a&&3===a.nodeType?!1:b&&3===b.nodeType?Le(a,b.parentNode):\"contains\"in a?a.contains(b):a.compareDocumentPosition?!!(a.compareDocumentPosition(b)&16):!1:!1}\nfunction Me(){for(var a=window,b=Xa();b instanceof a.HTMLIFrameElement;){try{var c=\"string\"===typeof b.contentWindow.location.href}catch(d){c=!1}if(c)a=b.contentWindow;else break;b=Xa(a.document)}return b}function Ne(a){var b=a&&a.nodeName&&a.nodeName.toLowerCase();return b&&(\"input\"===b&&(\"text\"===a.type||\"search\"===a.type||\"tel\"===a.type||\"url\"===a.type||\"password\"===a.type)||\"textarea\"===b||\"true\"===a.contentEditable)}\nfunction Oe(a){var b=Me(),c=a.focusedElem,d=a.selectionRange;if(b!==c&&c&&c.ownerDocument&&Le(c.ownerDocument.documentElement,c)){if(null!==d&&Ne(c))if(b=d.start,a=d.end,void 0===a&&(a=b),\"selectionStart\"in c)c.selectionStart=b,c.selectionEnd=Math.min(a,c.value.length);else if(a=(b=c.ownerDocument||document)&&b.defaultView||window,a.getSelection){a=a.getSelection();var e=c.textContent.length,f=Math.min(d.start,e);d=void 0===d.end?f:Math.min(d.end,e);!a.extend&&f>d&&(e=d,d=f,f=e);e=Ke(c,f);var g=Ke(c,\nd);e&&g&&(1!==a.rangeCount||a.anchorNode!==e.node||a.anchorOffset!==e.offset||a.focusNode!==g.node||a.focusOffset!==g.offset)&&(b=b.createRange(),b.setStart(e.node,e.offset),a.removeAllRanges(),f>d?(a.addRange(b),a.extend(g.node,g.offset)):(b.setEnd(g.node,g.offset),a.addRange(b)))}b=[];for(a=c;a=a.parentNode;)1===a.nodeType&&b.push({element:a,left:a.scrollLeft,top:a.scrollTop});\"function\"===typeof c.focus&&c.focus();for(c=0;c<b.length;c++)a=b[c],a.element.scrollLeft=a.left,a.element.scrollTop=a.top}}\nvar Pe=ia&&\"documentMode\"in document&&11>=document.documentMode,Qe=null,Re=null,Se=null,Te=!1;\nfunction Ue(a,b,c){var d=c.window===c?c.document:9===c.nodeType?c:c.ownerDocument;Te||null==Qe||Qe!==Xa(d)||(d=Qe,\"selectionStart\"in d&&Ne(d)?d={start:d.selectionStart,end:d.selectionEnd}:(d=(d.ownerDocument&&d.ownerDocument.defaultView||window).getSelection(),d={anchorNode:d.anchorNode,anchorOffset:d.anchorOffset,focusNode:d.focusNode,focusOffset:d.focusOffset}),Se&&Ie(Se,d)||(Se=d,d=oe(Re,\"onSelect\"),0<d.length&&(b=new td(\"onSelect\",\"select\",null,b,c),a.push({event:b,listeners:d}),b.target=Qe)))}\nfunction Ve(a,b){var c={};c[a.toLowerCase()]=b.toLowerCase();c[\"Webkit\"+a]=\"webkit\"+b;c[\"Moz\"+a]=\"moz\"+b;return c}var We={animationend:Ve(\"Animation\",\"AnimationEnd\"),animationiteration:Ve(\"Animation\",\"AnimationIteration\"),animationstart:Ve(\"Animation\",\"AnimationStart\"),transitionend:Ve(\"Transition\",\"TransitionEnd\")},Xe={},Ye={};\nia&&(Ye=document.createElement(\"div\").style,\"AnimationEvent\"in window||(delete We.animationend.animation,delete We.animationiteration.animation,delete We.animationstart.animation),\"TransitionEvent\"in window||delete We.transitionend.transition);function Ze(a){if(Xe[a])return Xe[a];if(!We[a])return a;var b=We[a],c;for(c in b)if(b.hasOwnProperty(c)&&c in Ye)return Xe[a]=b[c];return a}var $e=Ze(\"animationend\"),af=Ze(\"animationiteration\"),bf=Ze(\"animationstart\"),cf=Ze(\"transitionend\"),df=new Map,ef=\"abort auxClick cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll toggle touchMove waiting wheel\".split(\" \");\nfunction ff(a,b){df.set(a,b);fa(b,[a])}for(var gf=0;gf<ef.length;gf++){var hf=ef[gf],jf=hf.toLowerCase(),kf=hf[0].toUpperCase()+hf.slice(1);ff(jf,\"on\"+kf)}ff($e,\"onAnimationEnd\");ff(af,\"onAnimationIteration\");ff(bf,\"onAnimationStart\");ff(\"dblclick\",\"onDoubleClick\");ff(\"focusin\",\"onFocus\");ff(\"focusout\",\"onBlur\");ff(cf,\"onTransitionEnd\");ha(\"onMouseEnter\",[\"mouseout\",\"mouseover\"]);ha(\"onMouseLeave\",[\"mouseout\",\"mouseover\"]);ha(\"onPointerEnter\",[\"pointerout\",\"pointerover\"]);\nha(\"onPointerLeave\",[\"pointerout\",\"pointerover\"]);fa(\"onChange\",\"change click focusin focusout input keydown keyup selectionchange\".split(\" \"));fa(\"onSelect\",\"focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange\".split(\" \"));fa(\"onBeforeInput\",[\"compositionend\",\"keypress\",\"textInput\",\"paste\"]);fa(\"onCompositionEnd\",\"compositionend focusout keydown keypress keyup mousedown\".split(\" \"));fa(\"onCompositionStart\",\"compositionstart focusout keydown keypress keyup mousedown\".split(\" \"));\nfa(\"onCompositionUpdate\",\"compositionupdate focusout keydown keypress keyup mousedown\".split(\" \"));var lf=\"abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting\".split(\" \"),mf=new Set(\"cancel close invalid load scroll toggle\".split(\" \").concat(lf));\nfunction nf(a,b,c){var d=a.type||\"unknown-event\";a.currentTarget=c;Ub(d,b,void 0,a);a.currentTarget=null}\nfunction se(a,b){b=0!==(b&4);for(var c=0;c<a.length;c++){var d=a[c],e=d.event;d=d.listeners;a:{var f=void 0;if(b)for(var g=d.length-1;0<=g;g--){var h=d[g],k=h.instance,l=h.currentTarget;h=h.listener;if(k!==f&&e.isPropagationStopped())break a;nf(e,h,l);f=k}else for(g=0;g<d.length;g++){h=d[g];k=h.instance;l=h.currentTarget;h=h.listener;if(k!==f&&e.isPropagationStopped())break a;nf(e,h,l);f=k}}}if(Qb)throw a=Rb,Qb=!1,Rb=null,a;}\nfunction D(a,b){var c=b[of];void 0===c&&(c=b[of]=new Set);var d=a+\"__bubble\";c.has(d)||(pf(b,a,2,!1),c.add(d))}function qf(a,b,c){var d=0;b&&(d|=4);pf(c,a,d,b)}var rf=\"_reactListening\"+Math.random().toString(36).slice(2);function sf(a){if(!a[rf]){a[rf]=!0;da.forEach(function(b){\"selectionchange\"!==b&&(mf.has(b)||qf(b,!1,a),qf(b,!0,a))});var b=9===a.nodeType?a:a.ownerDocument;null===b||b[rf]||(b[rf]=!0,qf(\"selectionchange\",!1,b))}}\nfunction pf(a,b,c,d){switch(jd(b)){case 1:var e=ed;break;case 4:e=gd;break;default:e=fd}c=e.bind(null,b,c,a);e=void 0;!Lb||\"touchstart\"!==b&&\"touchmove\"!==b&&\"wheel\"!==b||(e=!0);d?void 0!==e?a.addEventListener(b,c,{capture:!0,passive:e}):a.addEventListener(b,c,!0):void 0!==e?a.addEventListener(b,c,{passive:e}):a.addEventListener(b,c,!1)}\nfunction hd(a,b,c,d,e){var f=d;if(0===(b&1)&&0===(b&2)&&null!==d)a:for(;;){if(null===d)return;var g=d.tag;if(3===g||4===g){var h=d.stateNode.containerInfo;if(h===e||8===h.nodeType&&h.parentNode===e)break;if(4===g)for(g=d.return;null!==g;){var k=g.tag;if(3===k||4===k)if(k=g.stateNode.containerInfo,k===e||8===k.nodeType&&k.parentNode===e)return;g=g.return}for(;null!==h;){g=Wc(h);if(null===g)return;k=g.tag;if(5===k||6===k){d=f=g;continue a}h=h.parentNode}}d=d.return}Jb(function(){var d=f,e=xb(c),g=[];\na:{var h=df.get(a);if(void 0!==h){var k=td,n=a;switch(a){case \"keypress\":if(0===od(c))break a;case \"keydown\":case \"keyup\":k=Rd;break;case \"focusin\":n=\"focus\";k=Fd;break;case \"focusout\":n=\"blur\";k=Fd;break;case \"beforeblur\":case \"afterblur\":k=Fd;break;case \"click\":if(2===c.button)break a;case \"auxclick\":case \"dblclick\":case \"mousedown\":case \"mousemove\":case \"mouseup\":case \"mouseout\":case \"mouseover\":case \"contextmenu\":k=Bd;break;case \"drag\":case \"dragend\":case \"dragenter\":case \"dragexit\":case \"dragleave\":case \"dragover\":case \"dragstart\":case \"drop\":k=\nDd;break;case \"touchcancel\":case \"touchend\":case \"touchmove\":case \"touchstart\":k=Vd;break;case $e:case af:case bf:k=Hd;break;case cf:k=Xd;break;case \"scroll\":k=vd;break;case \"wheel\":k=Zd;break;case \"copy\":case \"cut\":case \"paste\":k=Jd;break;case \"gotpointercapture\":case \"lostpointercapture\":case \"pointercancel\":case \"pointerdown\":case \"pointermove\":case \"pointerout\":case \"pointerover\":case \"pointerup\":k=Td}var t=0!==(b&4),J=!t&&\"scroll\"===a,x=t?null!==h?h+\"Capture\":null:h;t=[];for(var w=d,u;null!==\nw;){u=w;var F=u.stateNode;5===u.tag&&null!==F&&(u=F,null!==x&&(F=Kb(w,x),null!=F&&t.push(tf(w,F,u))));if(J)break;w=w.return}0<t.length&&(h=new k(h,n,null,c,e),g.push({event:h,listeners:t}))}}if(0===(b&7)){a:{h=\"mouseover\"===a||\"pointerover\"===a;k=\"mouseout\"===a||\"pointerout\"===a;if(h&&c!==wb&&(n=c.relatedTarget||c.fromElement)&&(Wc(n)||n[uf]))break a;if(k||h){h=e.window===e?e:(h=e.ownerDocument)?h.defaultView||h.parentWindow:window;if(k){if(n=c.relatedTarget||c.toElement,k=d,n=n?Wc(n):null,null!==\nn&&(J=Vb(n),n!==J||5!==n.tag&&6!==n.tag))n=null}else k=null,n=d;if(k!==n){t=Bd;F=\"onMouseLeave\";x=\"onMouseEnter\";w=\"mouse\";if(\"pointerout\"===a||\"pointerover\"===a)t=Td,F=\"onPointerLeave\",x=\"onPointerEnter\",w=\"pointer\";J=null==k?h:ue(k);u=null==n?h:ue(n);h=new t(F,w+\"leave\",k,c,e);h.target=J;h.relatedTarget=u;F=null;Wc(e)===d&&(t=new t(x,w+\"enter\",n,c,e),t.target=u,t.relatedTarget=J,F=t);J=F;if(k&&n)b:{t=k;x=n;w=0;for(u=t;u;u=vf(u))w++;u=0;for(F=x;F;F=vf(F))u++;for(;0<w-u;)t=vf(t),w--;for(;0<u-w;)x=\nvf(x),u--;for(;w--;){if(t===x||null!==x&&t===x.alternate)break b;t=vf(t);x=vf(x)}t=null}else t=null;null!==k&&wf(g,h,k,t,!1);null!==n&&null!==J&&wf(g,J,n,t,!0)}}}a:{h=d?ue(d):window;k=h.nodeName&&h.nodeName.toLowerCase();if(\"select\"===k||\"input\"===k&&\"file\"===h.type)var na=ve;else if(me(h))if(we)na=Fe;else{na=De;var xa=Ce}else(k=h.nodeName)&&\"input\"===k.toLowerCase()&&(\"checkbox\"===h.type||\"radio\"===h.type)&&(na=Ee);if(na&&(na=na(a,d))){ne(g,na,c,e);break a}xa&&xa(a,h,d);\"focusout\"===a&&(xa=h._wrapperState)&&\nxa.controlled&&\"number\"===h.type&&cb(h,\"number\",h.value)}xa=d?ue(d):window;switch(a){case \"focusin\":if(me(xa)||\"true\"===xa.contentEditable)Qe=xa,Re=d,Se=null;break;case \"focusout\":Se=Re=Qe=null;break;case \"mousedown\":Te=!0;break;case \"contextmenu\":case \"mouseup\":case \"dragend\":Te=!1;Ue(g,c,e);break;case \"selectionchange\":if(Pe)break;case \"keydown\":case \"keyup\":Ue(g,c,e)}var $a;if(ae)b:{switch(a){case \"compositionstart\":var ba=\"onCompositionStart\";break b;case \"compositionend\":ba=\"onCompositionEnd\";\nbreak b;case \"compositionupdate\":ba=\"onCompositionUpdate\";break b}ba=void 0}else ie?ge(a,c)&&(ba=\"onCompositionEnd\"):\"keydown\"===a&&229===c.keyCode&&(ba=\"onCompositionStart\");ba&&(de&&\"ko\"!==c.locale&&(ie||\"onCompositionStart\"!==ba?\"onCompositionEnd\"===ba&&ie&&($a=nd()):(kd=e,ld=\"value\"in kd?kd.value:kd.textContent,ie=!0)),xa=oe(d,ba),0<xa.length&&(ba=new Ld(ba,a,null,c,e),g.push({event:ba,listeners:xa}),$a?ba.data=$a:($a=he(c),null!==$a&&(ba.data=$a))));if($a=ce?je(a,c):ke(a,c))d=oe(d,\"onBeforeInput\"),\n0<d.length&&(e=new Ld(\"onBeforeInput\",\"beforeinput\",null,c,e),g.push({event:e,listeners:d}),e.data=$a)}se(g,b)})}function tf(a,b,c){return{instance:a,listener:b,currentTarget:c}}function oe(a,b){for(var c=b+\"Capture\",d=[];null!==a;){var e=a,f=e.stateNode;5===e.tag&&null!==f&&(e=f,f=Kb(a,c),null!=f&&d.unshift(tf(a,f,e)),f=Kb(a,b),null!=f&&d.push(tf(a,f,e)));a=a.return}return d}function vf(a){if(null===a)return null;do a=a.return;while(a&&5!==a.tag);return a?a:null}\nfunction wf(a,b,c,d,e){for(var f=b._reactName,g=[];null!==c&&c!==d;){var h=c,k=h.alternate,l=h.stateNode;if(null!==k&&k===d)break;5===h.tag&&null!==l&&(h=l,e?(k=Kb(c,f),null!=k&&g.unshift(tf(c,k,h))):e||(k=Kb(c,f),null!=k&&g.push(tf(c,k,h))));c=c.return}0!==g.length&&a.push({event:b,listeners:g})}var xf=/\\r\\n?/g,yf=/\\u0000|\\uFFFD/g;function zf(a){return(\"string\"===typeof a?a:\"\"+a).replace(xf,\"\\n\").replace(yf,\"\")}function Af(a,b,c){b=zf(b);if(zf(a)!==b&&c)throw Error(p(425));}function Bf(){}\nvar Cf=null,Df=null;function Ef(a,b){return\"textarea\"===a||\"noscript\"===a||\"string\"===typeof b.children||\"number\"===typeof b.children||\"object\"===typeof b.dangerouslySetInnerHTML&&null!==b.dangerouslySetInnerHTML&&null!=b.dangerouslySetInnerHTML.__html}\nvar Ff=\"function\"===typeof setTimeout?setTimeout:void 0,Gf=\"function\"===typeof clearTimeout?clearTimeout:void 0,Hf=\"function\"===typeof Promise?Promise:void 0,Jf=\"function\"===typeof queueMicrotask?queueMicrotask:\"undefined\"!==typeof Hf?function(a){return Hf.resolve(null).then(a).catch(If)}:Ff;function If(a){setTimeout(function(){throw a;})}\nfunction Kf(a,b){var c=b,d=0;do{var e=c.nextSibling;a.removeChild(c);if(e&&8===e.nodeType)if(c=e.data,\"/$\"===c){if(0===d){a.removeChild(e);bd(b);return}d--}else\"$\"!==c&&\"$?\"!==c&&\"$!\"!==c||d++;c=e}while(c);bd(b)}function Lf(a){for(;null!=a;a=a.nextSibling){var b=a.nodeType;if(1===b||3===b)break;if(8===b){b=a.data;if(\"$\"===b||\"$!\"===b||\"$?\"===b)break;if(\"/$\"===b)return null}}return a}\nfunction Mf(a){a=a.previousSibling;for(var b=0;a;){if(8===a.nodeType){var c=a.data;if(\"$\"===c||\"$!\"===c||\"$?\"===c){if(0===b)return a;b--}else\"/$\"===c&&b++}a=a.previousSibling}return null}var Nf=Math.random().toString(36).slice(2),Of=\"__reactFiber$\"+Nf,Pf=\"__reactProps$\"+Nf,uf=\"__reactContainer$\"+Nf,of=\"__reactEvents$\"+Nf,Qf=\"__reactListeners$\"+Nf,Rf=\"__reactHandles$\"+Nf;\nfunction Wc(a){var b=a[Of];if(b)return b;for(var c=a.parentNode;c;){if(b=c[uf]||c[Of]){c=b.alternate;if(null!==b.child||null!==c&&null!==c.child)for(a=Mf(a);null!==a;){if(c=a[Of])return c;a=Mf(a)}return b}a=c;c=a.parentNode}return null}function Cb(a){a=a[Of]||a[uf];return!a||5!==a.tag&&6!==a.tag&&13!==a.tag&&3!==a.tag?null:a}function ue(a){if(5===a.tag||6===a.tag)return a.stateNode;throw Error(p(33));}function Db(a){return a[Pf]||null}var Sf=[],Tf=-1;function Uf(a){return{current:a}}\nfunction E(a){0>Tf||(a.current=Sf[Tf],Sf[Tf]=null,Tf--)}function G(a,b){Tf++;Sf[Tf]=a.current;a.current=b}var Vf={},H=Uf(Vf),Wf=Uf(!1),Xf=Vf;function Yf(a,b){var c=a.type.contextTypes;if(!c)return Vf;var d=a.stateNode;if(d&&d.__reactInternalMemoizedUnmaskedChildContext===b)return d.__reactInternalMemoizedMaskedChildContext;var e={},f;for(f in c)e[f]=b[f];d&&(a=a.stateNode,a.__reactInternalMemoizedUnmaskedChildContext=b,a.__reactInternalMemoizedMaskedChildContext=e);return e}\nfunction Zf(a){a=a.childContextTypes;return null!==a&&void 0!==a}function $f(){E(Wf);E(H)}function ag(a,b,c){if(H.current!==Vf)throw Error(p(168));G(H,b);G(Wf,c)}function bg(a,b,c){var d=a.stateNode;b=b.childContextTypes;if(\"function\"!==typeof d.getChildContext)return c;d=d.getChildContext();for(var e in d)if(!(e in b))throw Error(p(108,Ra(a)||\"Unknown\",e));return A({},c,d)}\nfunction cg(a){a=(a=a.stateNode)&&a.__reactInternalMemoizedMergedChildContext||Vf;Xf=H.current;G(H,a);G(Wf,Wf.current);return!0}function dg(a,b,c){var d=a.stateNode;if(!d)throw Error(p(169));c?(a=bg(a,b,Xf),d.__reactInternalMemoizedMergedChildContext=a,E(Wf),E(H),G(H,a)):E(Wf);G(Wf,c)}var eg=null,fg=!1,gg=!1;function hg(a){null===eg?eg=[a]:eg.push(a)}function ig(a){fg=!0;hg(a)}\nfunction jg(){if(!gg&&null!==eg){gg=!0;var a=0,b=C;try{var c=eg;for(C=1;a<c.length;a++){var d=c[a];do d=d(!0);while(null!==d)}eg=null;fg=!1}catch(e){throw null!==eg&&(eg=eg.slice(a+1)),ac(fc,jg),e;}finally{C=b,gg=!1}}return null}var kg=[],lg=0,mg=null,ng=0,og=[],pg=0,qg=null,rg=1,sg=\"\";function tg(a,b){kg[lg++]=ng;kg[lg++]=mg;mg=a;ng=b}\nfunction ug(a,b,c){og[pg++]=rg;og[pg++]=sg;og[pg++]=qg;qg=a;var d=rg;a=sg;var e=32-oc(d)-1;d&=~(1<<e);c+=1;var f=32-oc(b)+e;if(30<f){var g=e-e%5;f=(d&(1<<g)-1).toString(32);d>>=g;e-=g;rg=1<<32-oc(b)+e|c<<e|d;sg=f+a}else rg=1<<f|c<<e|d,sg=a}function vg(a){null!==a.return&&(tg(a,1),ug(a,1,0))}function wg(a){for(;a===mg;)mg=kg[--lg],kg[lg]=null,ng=kg[--lg],kg[lg]=null;for(;a===qg;)qg=og[--pg],og[pg]=null,sg=og[--pg],og[pg]=null,rg=og[--pg],og[pg]=null}var xg=null,yg=null,I=!1,zg=null;\nfunction Ag(a,b){var c=Bg(5,null,null,0);c.elementType=\"DELETED\";c.stateNode=b;c.return=a;b=a.deletions;null===b?(a.deletions=[c],a.flags|=16):b.push(c)}\nfunction Cg(a,b){switch(a.tag){case 5:var c=a.type;b=1!==b.nodeType||c.toLowerCase()!==b.nodeName.toLowerCase()?null:b;return null!==b?(a.stateNode=b,xg=a,yg=Lf(b.firstChild),!0):!1;case 6:return b=\"\"===a.pendingProps||3!==b.nodeType?null:b,null!==b?(a.stateNode=b,xg=a,yg=null,!0):!1;case 13:return b=8!==b.nodeType?null:b,null!==b?(c=null!==qg?{id:rg,overflow:sg}:null,a.memoizedState={dehydrated:b,treeContext:c,retryLane:1073741824},c=Bg(18,null,null,0),c.stateNode=b,c.return=a,a.child=c,xg=a,yg=\nnull,!0):!1;default:return!1}}function Dg(a){return 0!==(a.mode&1)&&0===(a.flags&128)}function Eg(a){if(I){var b=yg;if(b){var c=b;if(!Cg(a,b)){if(Dg(a))throw Error(p(418));b=Lf(c.nextSibling);var d=xg;b&&Cg(a,b)?Ag(d,c):(a.flags=a.flags&-4097|2,I=!1,xg=a)}}else{if(Dg(a))throw Error(p(418));a.flags=a.flags&-4097|2;I=!1;xg=a}}}function Fg(a){for(a=a.return;null!==a&&5!==a.tag&&3!==a.tag&&13!==a.tag;)a=a.return;xg=a}\nfunction Gg(a){if(a!==xg)return!1;if(!I)return Fg(a),I=!0,!1;var b;(b=3!==a.tag)&&!(b=5!==a.tag)&&(b=a.type,b=\"head\"!==b&&\"body\"!==b&&!Ef(a.type,a.memoizedProps));if(b&&(b=yg)){if(Dg(a))throw Hg(),Error(p(418));for(;b;)Ag(a,b),b=Lf(b.nextSibling)}Fg(a);if(13===a.tag){a=a.memoizedState;a=null!==a?a.dehydrated:null;if(!a)throw Error(p(317));a:{a=a.nextSibling;for(b=0;a;){if(8===a.nodeType){var c=a.data;if(\"/$\"===c){if(0===b){yg=Lf(a.nextSibling);break a}b--}else\"$\"!==c&&\"$!\"!==c&&\"$?\"!==c||b++}a=a.nextSibling}yg=\nnull}}else yg=xg?Lf(a.stateNode.nextSibling):null;return!0}function Hg(){for(var a=yg;a;)a=Lf(a.nextSibling)}function Ig(){yg=xg=null;I=!1}function Jg(a){null===zg?zg=[a]:zg.push(a)}var Kg=ua.ReactCurrentBatchConfig;function Lg(a,b){if(a&&a.defaultProps){b=A({},b);a=a.defaultProps;for(var c in a)void 0===b[c]&&(b[c]=a[c]);return b}return b}var Mg=Uf(null),Ng=null,Og=null,Pg=null;function Qg(){Pg=Og=Ng=null}function Rg(a){var b=Mg.current;E(Mg);a._currentValue=b}\nfunction Sg(a,b,c){for(;null!==a;){var d=a.alternate;(a.childLanes&b)!==b?(a.childLanes|=b,null!==d&&(d.childLanes|=b)):null!==d&&(d.childLanes&b)!==b&&(d.childLanes|=b);if(a===c)break;a=a.return}}function Tg(a,b){Ng=a;Pg=Og=null;a=a.dependencies;null!==a&&null!==a.firstContext&&(0!==(a.lanes&b)&&(Ug=!0),a.firstContext=null)}\nfunction Vg(a){var b=a._currentValue;if(Pg!==a)if(a={context:a,memoizedValue:b,next:null},null===Og){if(null===Ng)throw Error(p(308));Og=a;Ng.dependencies={lanes:0,firstContext:a}}else Og=Og.next=a;return b}var Wg=null;function Xg(a){null===Wg?Wg=[a]:Wg.push(a)}function Yg(a,b,c,d){var e=b.interleaved;null===e?(c.next=c,Xg(b)):(c.next=e.next,e.next=c);b.interleaved=c;return Zg(a,d)}\nfunction Zg(a,b){a.lanes|=b;var c=a.alternate;null!==c&&(c.lanes|=b);c=a;for(a=a.return;null!==a;)a.childLanes|=b,c=a.alternate,null!==c&&(c.childLanes|=b),c=a,a=a.return;return 3===c.tag?c.stateNode:null}var $g=!1;function ah(a){a.updateQueue={baseState:a.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null,interleaved:null,lanes:0},effects:null}}\nfunction bh(a,b){a=a.updateQueue;b.updateQueue===a&&(b.updateQueue={baseState:a.baseState,firstBaseUpdate:a.firstBaseUpdate,lastBaseUpdate:a.lastBaseUpdate,shared:a.shared,effects:a.effects})}function ch(a,b){return{eventTime:a,lane:b,tag:0,payload:null,callback:null,next:null}}\nfunction dh(a,b,c){var d=a.updateQueue;if(null===d)return null;d=d.shared;if(0!==(K&2)){var e=d.pending;null===e?b.next=b:(b.next=e.next,e.next=b);d.pending=b;return Zg(a,c)}e=d.interleaved;null===e?(b.next=b,Xg(d)):(b.next=e.next,e.next=b);d.interleaved=b;return Zg(a,c)}function eh(a,b,c){b=b.updateQueue;if(null!==b&&(b=b.shared,0!==(c&4194240))){var d=b.lanes;d&=a.pendingLanes;c|=d;b.lanes=c;Cc(a,c)}}\nfunction fh(a,b){var c=a.updateQueue,d=a.alternate;if(null!==d&&(d=d.updateQueue,c===d)){var e=null,f=null;c=c.firstBaseUpdate;if(null!==c){do{var g={eventTime:c.eventTime,lane:c.lane,tag:c.tag,payload:c.payload,callback:c.callback,next:null};null===f?e=f=g:f=f.next=g;c=c.next}while(null!==c);null===f?e=f=b:f=f.next=b}else e=f=b;c={baseState:d.baseState,firstBaseUpdate:e,lastBaseUpdate:f,shared:d.shared,effects:d.effects};a.updateQueue=c;return}a=c.lastBaseUpdate;null===a?c.firstBaseUpdate=b:a.next=\nb;c.lastBaseUpdate=b}\nfunction gh(a,b,c,d){var e=a.updateQueue;$g=!1;var f=e.firstBaseUpdate,g=e.lastBaseUpdate,h=e.shared.pending;if(null!==h){e.shared.pending=null;var k=h,l=k.next;k.next=null;null===g?f=l:g.next=l;g=k;var m=a.alternate;null!==m&&(m=m.updateQueue,h=m.lastBaseUpdate,h!==g&&(null===h?m.firstBaseUpdate=l:h.next=l,m.lastBaseUpdate=k))}if(null!==f){var q=e.baseState;g=0;m=l=k=null;h=f;do{var r=h.lane,y=h.eventTime;if((d&r)===r){null!==m&&(m=m.next={eventTime:y,lane:0,tag:h.tag,payload:h.payload,callback:h.callback,\nnext:null});a:{var n=a,t=h;r=b;y=c;switch(t.tag){case 1:n=t.payload;if(\"function\"===typeof n){q=n.call(y,q,r);break a}q=n;break a;case 3:n.flags=n.flags&-65537|128;case 0:n=t.payload;r=\"function\"===typeof n?n.call(y,q,r):n;if(null===r||void 0===r)break a;q=A({},q,r);break a;case 2:$g=!0}}null!==h.callback&&0!==h.lane&&(a.flags|=64,r=e.effects,null===r?e.effects=[h]:r.push(h))}else y={eventTime:y,lane:r,tag:h.tag,payload:h.payload,callback:h.callback,next:null},null===m?(l=m=y,k=q):m=m.next=y,g|=r;\nh=h.next;if(null===h)if(h=e.shared.pending,null===h)break;else r=h,h=r.next,r.next=null,e.lastBaseUpdate=r,e.shared.pending=null}while(1);null===m&&(k=q);e.baseState=k;e.firstBaseUpdate=l;e.lastBaseUpdate=m;b=e.shared.interleaved;if(null!==b){e=b;do g|=e.lane,e=e.next;while(e!==b)}else null===f&&(e.shared.lanes=0);hh|=g;a.lanes=g;a.memoizedState=q}}\nfunction ih(a,b,c){a=b.effects;b.effects=null;if(null!==a)for(b=0;b<a.length;b++){var d=a[b],e=d.callback;if(null!==e){d.callback=null;d=c;if(\"function\"!==typeof e)throw Error(p(191,e));e.call(d)}}}var jh=(new aa.Component).refs;function kh(a,b,c,d){b=a.memoizedState;c=c(d,b);c=null===c||void 0===c?b:A({},b,c);a.memoizedState=c;0===a.lanes&&(a.updateQueue.baseState=c)}\nvar nh={isMounted:function(a){return(a=a._reactInternals)?Vb(a)===a:!1},enqueueSetState:function(a,b,c){a=a._reactInternals;var d=L(),e=lh(a),f=ch(d,e);f.payload=b;void 0!==c&&null!==c&&(f.callback=c);b=dh(a,f,e);null!==b&&(mh(b,a,e,d),eh(b,a,e))},enqueueReplaceState:function(a,b,c){a=a._reactInternals;var d=L(),e=lh(a),f=ch(d,e);f.tag=1;f.payload=b;void 0!==c&&null!==c&&(f.callback=c);b=dh(a,f,e);null!==b&&(mh(b,a,e,d),eh(b,a,e))},enqueueForceUpdate:function(a,b){a=a._reactInternals;var c=L(),d=\nlh(a),e=ch(c,d);e.tag=2;void 0!==b&&null!==b&&(e.callback=b);b=dh(a,e,d);null!==b&&(mh(b,a,d,c),eh(b,a,d))}};function oh(a,b,c,d,e,f,g){a=a.stateNode;return\"function\"===typeof a.shouldComponentUpdate?a.shouldComponentUpdate(d,f,g):b.prototype&&b.prototype.isPureReactComponent?!Ie(c,d)||!Ie(e,f):!0}\nfunction ph(a,b,c){var d=!1,e=Vf;var f=b.contextType;\"object\"===typeof f&&null!==f?f=Vg(f):(e=Zf(b)?Xf:H.current,d=b.contextTypes,f=(d=null!==d&&void 0!==d)?Yf(a,e):Vf);b=new b(c,f);a.memoizedState=null!==b.state&&void 0!==b.state?b.state:null;b.updater=nh;a.stateNode=b;b._reactInternals=a;d&&(a=a.stateNode,a.__reactInternalMemoizedUnmaskedChildContext=e,a.__reactInternalMemoizedMaskedChildContext=f);return b}\nfunction qh(a,b,c,d){a=b.state;\"function\"===typeof b.componentWillReceiveProps&&b.componentWillReceiveProps(c,d);\"function\"===typeof b.UNSAFE_componentWillReceiveProps&&b.UNSAFE_componentWillReceiveProps(c,d);b.state!==a&&nh.enqueueReplaceState(b,b.state,null)}\nfunction rh(a,b,c,d){var e=a.stateNode;e.props=c;e.state=a.memoizedState;e.refs=jh;ah(a);var f=b.contextType;\"object\"===typeof f&&null!==f?e.context=Vg(f):(f=Zf(b)?Xf:H.current,e.context=Yf(a,f));e.state=a.memoizedState;f=b.getDerivedStateFromProps;\"function\"===typeof f&&(kh(a,b,f,c),e.state=a.memoizedState);\"function\"===typeof b.getDerivedStateFromProps||\"function\"===typeof e.getSnapshotBeforeUpdate||\"function\"!==typeof e.UNSAFE_componentWillMount&&\"function\"!==typeof e.componentWillMount||(b=e.state,\n\"function\"===typeof e.componentWillMount&&e.componentWillMount(),\"function\"===typeof e.UNSAFE_componentWillMount&&e.UNSAFE_componentWillMount(),b!==e.state&&nh.enqueueReplaceState(e,e.state,null),gh(a,c,e,d),e.state=a.memoizedState);\"function\"===typeof e.componentDidMount&&(a.flags|=4194308)}\nfunction sh(a,b,c){a=c.ref;if(null!==a&&\"function\"!==typeof a&&\"object\"!==typeof a){if(c._owner){c=c._owner;if(c){if(1!==c.tag)throw Error(p(309));var d=c.stateNode}if(!d)throw Error(p(147,a));var e=d,f=\"\"+a;if(null!==b&&null!==b.ref&&\"function\"===typeof b.ref&&b.ref._stringRef===f)return b.ref;b=function(a){var b=e.refs;b===jh&&(b=e.refs={});null===a?delete b[f]:b[f]=a};b._stringRef=f;return b}if(\"string\"!==typeof a)throw Error(p(284));if(!c._owner)throw Error(p(290,a));}return a}\nfunction th(a,b){a=Object.prototype.toString.call(b);throw Error(p(31,\"[object Object]\"===a?\"object with keys {\"+Object.keys(b).join(\", \")+\"}\":a));}function uh(a){var b=a._init;return b(a._payload)}\nfunction vh(a){function b(b,c){if(a){var d=b.deletions;null===d?(b.deletions=[c],b.flags|=16):d.push(c)}}function c(c,d){if(!a)return null;for(;null!==d;)b(c,d),d=d.sibling;return null}function d(a,b){for(a=new Map;null!==b;)null!==b.key?a.set(b.key,b):a.set(b.index,b),b=b.sibling;return a}function e(a,b){a=wh(a,b);a.index=0;a.sibling=null;return a}function f(b,c,d){b.index=d;if(!a)return b.flags|=1048576,c;d=b.alternate;if(null!==d)return d=d.index,d<c?(b.flags|=2,c):d;b.flags|=2;return c}function g(b){a&&\nnull===b.alternate&&(b.flags|=2);return b}function h(a,b,c,d){if(null===b||6!==b.tag)return b=xh(c,a.mode,d),b.return=a,b;b=e(b,c);b.return=a;return b}function k(a,b,c,d){var f=c.type;if(f===ya)return m(a,b,c.props.children,d,c.key);if(null!==b&&(b.elementType===f||\"object\"===typeof f&&null!==f&&f.$$typeof===Ha&&uh(f)===b.type))return d=e(b,c.props),d.ref=sh(a,b,c),d.return=a,d;d=yh(c.type,c.key,c.props,null,a.mode,d);d.ref=sh(a,b,c);d.return=a;return d}function l(a,b,c,d){if(null===b||4!==b.tag||\nb.stateNode.containerInfo!==c.containerInfo||b.stateNode.implementation!==c.implementation)return b=zh(c,a.mode,d),b.return=a,b;b=e(b,c.children||[]);b.return=a;return b}function m(a,b,c,d,f){if(null===b||7!==b.tag)return b=Ah(c,a.mode,d,f),b.return=a,b;b=e(b,c);b.return=a;return b}function q(a,b,c){if(\"string\"===typeof b&&\"\"!==b||\"number\"===typeof b)return b=xh(\"\"+b,a.mode,c),b.return=a,b;if(\"object\"===typeof b&&null!==b){switch(b.$$typeof){case va:return c=yh(b.type,b.key,b.props,null,a.mode,c),\nc.ref=sh(a,null,b),c.return=a,c;case wa:return b=zh(b,a.mode,c),b.return=a,b;case Ha:var d=b._init;return q(a,d(b._payload),c)}if(eb(b)||Ka(b))return b=Ah(b,a.mode,c,null),b.return=a,b;th(a,b)}return null}function r(a,b,c,d){var e=null!==b?b.key:null;if(\"string\"===typeof c&&\"\"!==c||\"number\"===typeof c)return null!==e?null:h(a,b,\"\"+c,d);if(\"object\"===typeof c&&null!==c){switch(c.$$typeof){case va:return c.key===e?k(a,b,c,d):null;case wa:return c.key===e?l(a,b,c,d):null;case Ha:return e=c._init,r(a,\nb,e(c._payload),d)}if(eb(c)||Ka(c))return null!==e?null:m(a,b,c,d,null);th(a,c)}return null}function y(a,b,c,d,e){if(\"string\"===typeof d&&\"\"!==d||\"number\"===typeof d)return a=a.get(c)||null,h(b,a,\"\"+d,e);if(\"object\"===typeof d&&null!==d){switch(d.$$typeof){case va:return a=a.get(null===d.key?c:d.key)||null,k(b,a,d,e);case wa:return a=a.get(null===d.key?c:d.key)||null,l(b,a,d,e);case Ha:var f=d._init;return y(a,b,c,f(d._payload),e)}if(eb(d)||Ka(d))return a=a.get(c)||null,m(b,a,d,e,null);th(b,d)}return null}\nfunction n(e,g,h,k){for(var l=null,m=null,u=g,w=g=0,x=null;null!==u&&w<h.length;w++){u.index>w?(x=u,u=null):x=u.sibling;var n=r(e,u,h[w],k);if(null===n){null===u&&(u=x);break}a&&u&&null===n.alternate&&b(e,u);g=f(n,g,w);null===m?l=n:m.sibling=n;m=n;u=x}if(w===h.length)return c(e,u),I&&tg(e,w),l;if(null===u){for(;w<h.length;w++)u=q(e,h[w],k),null!==u&&(g=f(u,g,w),null===m?l=u:m.sibling=u,m=u);I&&tg(e,w);return l}for(u=d(e,u);w<h.length;w++)x=y(u,e,w,h[w],k),null!==x&&(a&&null!==x.alternate&&u.delete(null===\nx.key?w:x.key),g=f(x,g,w),null===m?l=x:m.sibling=x,m=x);a&&u.forEach(function(a){return b(e,a)});I&&tg(e,w);return l}function t(e,g,h,k){var l=Ka(h);if(\"function\"!==typeof l)throw Error(p(150));h=l.call(h);if(null==h)throw Error(p(151));for(var u=l=null,m=g,w=g=0,x=null,n=h.next();null!==m&&!n.done;w++,n=h.next()){m.index>w?(x=m,m=null):x=m.sibling;var t=r(e,m,n.value,k);if(null===t){null===m&&(m=x);break}a&&m&&null===t.alternate&&b(e,m);g=f(t,g,w);null===u?l=t:u.sibling=t;u=t;m=x}if(n.done)return c(e,\nm),I&&tg(e,w),l;if(null===m){for(;!n.done;w++,n=h.next())n=q(e,n.value,k),null!==n&&(g=f(n,g,w),null===u?l=n:u.sibling=n,u=n);I&&tg(e,w);return l}for(m=d(e,m);!n.done;w++,n=h.next())n=y(m,e,w,n.value,k),null!==n&&(a&&null!==n.alternate&&m.delete(null===n.key?w:n.key),g=f(n,g,w),null===u?l=n:u.sibling=n,u=n);a&&m.forEach(function(a){return b(e,a)});I&&tg(e,w);return l}function J(a,d,f,h){\"object\"===typeof f&&null!==f&&f.type===ya&&null===f.key&&(f=f.props.children);if(\"object\"===typeof f&&null!==f){switch(f.$$typeof){case va:a:{for(var k=\nf.key,l=d;null!==l;){if(l.key===k){k=f.type;if(k===ya){if(7===l.tag){c(a,l.sibling);d=e(l,f.props.children);d.return=a;a=d;break a}}else if(l.elementType===k||\"object\"===typeof k&&null!==k&&k.$$typeof===Ha&&uh(k)===l.type){c(a,l.sibling);d=e(l,f.props);d.ref=sh(a,l,f);d.return=a;a=d;break a}c(a,l);break}else b(a,l);l=l.sibling}f.type===ya?(d=Ah(f.props.children,a.mode,h,f.key),d.return=a,a=d):(h=yh(f.type,f.key,f.props,null,a.mode,h),h.ref=sh(a,d,f),h.return=a,a=h)}return g(a);case wa:a:{for(l=f.key;null!==\nd;){if(d.key===l)if(4===d.tag&&d.stateNode.containerInfo===f.containerInfo&&d.stateNode.implementation===f.implementation){c(a,d.sibling);d=e(d,f.children||[]);d.return=a;a=d;break a}else{c(a,d);break}else b(a,d);d=d.sibling}d=zh(f,a.mode,h);d.return=a;a=d}return g(a);case Ha:return l=f._init,J(a,d,l(f._payload),h)}if(eb(f))return n(a,d,f,h);if(Ka(f))return t(a,d,f,h);th(a,f)}return\"string\"===typeof f&&\"\"!==f||\"number\"===typeof f?(f=\"\"+f,null!==d&&6===d.tag?(c(a,d.sibling),d=e(d,f),d.return=a,a=d):\n(c(a,d),d=xh(f,a.mode,h),d.return=a,a=d),g(a)):c(a,d)}return J}var Bh=vh(!0),Ch=vh(!1),Dh={},Eh=Uf(Dh),Fh=Uf(Dh),Gh=Uf(Dh);function Hh(a){if(a===Dh)throw Error(p(174));return a}function Ih(a,b){G(Gh,b);G(Fh,a);G(Eh,Dh);a=b.nodeType;switch(a){case 9:case 11:b=(b=b.documentElement)?b.namespaceURI:lb(null,\"\");break;default:a=8===a?b.parentNode:b,b=a.namespaceURI||null,a=a.tagName,b=lb(b,a)}E(Eh);G(Eh,b)}function Jh(){E(Eh);E(Fh);E(Gh)}\nfunction Kh(a){Hh(Gh.current);var b=Hh(Eh.current);var c=lb(b,a.type);b!==c&&(G(Fh,a),G(Eh,c))}function Lh(a){Fh.current===a&&(E(Eh),E(Fh))}var M=Uf(0);\nfunction Mh(a){for(var b=a;null!==b;){if(13===b.tag){var c=b.memoizedState;if(null!==c&&(c=c.dehydrated,null===c||\"$?\"===c.data||\"$!\"===c.data))return b}else if(19===b.tag&&void 0!==b.memoizedProps.revealOrder){if(0!==(b.flags&128))return b}else if(null!==b.child){b.child.return=b;b=b.child;continue}if(b===a)break;for(;null===b.sibling;){if(null===b.return||b.return===a)return null;b=b.return}b.sibling.return=b.return;b=b.sibling}return null}var Nh=[];\nfunction Oh(){for(var a=0;a<Nh.length;a++)Nh[a]._workInProgressVersionPrimary=null;Nh.length=0}var Ph=ua.ReactCurrentDispatcher,Qh=ua.ReactCurrentBatchConfig,Rh=0,N=null,O=null,P=null,Sh=!1,Th=!1,Uh=0,Vh=0;function Q(){throw Error(p(321));}function Wh(a,b){if(null===b)return!1;for(var c=0;c<b.length&&c<a.length;c++)if(!He(a[c],b[c]))return!1;return!0}\nfunction Xh(a,b,c,d,e,f){Rh=f;N=b;b.memoizedState=null;b.updateQueue=null;b.lanes=0;Ph.current=null===a||null===a.memoizedState?Yh:Zh;a=c(d,e);if(Th){f=0;do{Th=!1;Uh=0;if(25<=f)throw Error(p(301));f+=1;P=O=null;b.updateQueue=null;Ph.current=$h;a=c(d,e)}while(Th)}Ph.current=ai;b=null!==O&&null!==O.next;Rh=0;P=O=N=null;Sh=!1;if(b)throw Error(p(300));return a}function bi(){var a=0!==Uh;Uh=0;return a}\nfunction ci(){var a={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};null===P?N.memoizedState=P=a:P=P.next=a;return P}function di(){if(null===O){var a=N.alternate;a=null!==a?a.memoizedState:null}else a=O.next;var b=null===P?N.memoizedState:P.next;if(null!==b)P=b,O=a;else{if(null===a)throw Error(p(310));O=a;a={memoizedState:O.memoizedState,baseState:O.baseState,baseQueue:O.baseQueue,queue:O.queue,next:null};null===P?N.memoizedState=P=a:P=P.next=a}return P}\nfunction ei(a,b){return\"function\"===typeof b?b(a):b}\nfunction fi(a){var b=di(),c=b.queue;if(null===c)throw Error(p(311));c.lastRenderedReducer=a;var d=O,e=d.baseQueue,f=c.pending;if(null!==f){if(null!==e){var g=e.next;e.next=f.next;f.next=g}d.baseQueue=e=f;c.pending=null}if(null!==e){f=e.next;d=d.baseState;var h=g=null,k=null,l=f;do{var m=l.lane;if((Rh&m)===m)null!==k&&(k=k.next={lane:0,action:l.action,hasEagerState:l.hasEagerState,eagerState:l.eagerState,next:null}),d=l.hasEagerState?l.eagerState:a(d,l.action);else{var q={lane:m,action:l.action,hasEagerState:l.hasEagerState,\neagerState:l.eagerState,next:null};null===k?(h=k=q,g=d):k=k.next=q;N.lanes|=m;hh|=m}l=l.next}while(null!==l&&l!==f);null===k?g=d:k.next=h;He(d,b.memoizedState)||(Ug=!0);b.memoizedState=d;b.baseState=g;b.baseQueue=k;c.lastRenderedState=d}a=c.interleaved;if(null!==a){e=a;do f=e.lane,N.lanes|=f,hh|=f,e=e.next;while(e!==a)}else null===e&&(c.lanes=0);return[b.memoizedState,c.dispatch]}\nfunction gi(a){var b=di(),c=b.queue;if(null===c)throw Error(p(311));c.lastRenderedReducer=a;var d=c.dispatch,e=c.pending,f=b.memoizedState;if(null!==e){c.pending=null;var g=e=e.next;do f=a(f,g.action),g=g.next;while(g!==e);He(f,b.memoizedState)||(Ug=!0);b.memoizedState=f;null===b.baseQueue&&(b.baseState=f);c.lastRenderedState=f}return[f,d]}function hi(){}\nfunction ii(a,b){var c=N,d=di(),e=b(),f=!He(d.memoizedState,e);f&&(d.memoizedState=e,Ug=!0);d=d.queue;ji(ki.bind(null,c,d,a),[a]);if(d.getSnapshot!==b||f||null!==P&&P.memoizedState.tag&1){c.flags|=2048;li(9,mi.bind(null,c,d,e,b),void 0,null);if(null===R)throw Error(p(349));0!==(Rh&30)||ni(c,b,e)}return e}function ni(a,b,c){a.flags|=16384;a={getSnapshot:b,value:c};b=N.updateQueue;null===b?(b={lastEffect:null,stores:null},N.updateQueue=b,b.stores=[a]):(c=b.stores,null===c?b.stores=[a]:c.push(a))}\nfunction mi(a,b,c,d){b.value=c;b.getSnapshot=d;oi(b)&&pi(a)}function ki(a,b,c){return c(function(){oi(b)&&pi(a)})}function oi(a){var b=a.getSnapshot;a=a.value;try{var c=b();return!He(a,c)}catch(d){return!0}}function pi(a){var b=Zg(a,1);null!==b&&mh(b,a,1,-1)}\nfunction qi(a){var b=ci();\"function\"===typeof a&&(a=a());b.memoizedState=b.baseState=a;a={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:ei,lastRenderedState:a};b.queue=a;a=a.dispatch=ri.bind(null,N,a);return[b.memoizedState,a]}\nfunction li(a,b,c,d){a={tag:a,create:b,destroy:c,deps:d,next:null};b=N.updateQueue;null===b?(b={lastEffect:null,stores:null},N.updateQueue=b,b.lastEffect=a.next=a):(c=b.lastEffect,null===c?b.lastEffect=a.next=a:(d=c.next,c.next=a,a.next=d,b.lastEffect=a));return a}function si(){return di().memoizedState}function ti(a,b,c,d){var e=ci();N.flags|=a;e.memoizedState=li(1|b,c,void 0,void 0===d?null:d)}\nfunction ui(a,b,c,d){var e=di();d=void 0===d?null:d;var f=void 0;if(null!==O){var g=O.memoizedState;f=g.destroy;if(null!==d&&Wh(d,g.deps)){e.memoizedState=li(b,c,f,d);return}}N.flags|=a;e.memoizedState=li(1|b,c,f,d)}function vi(a,b){return ti(8390656,8,a,b)}function ji(a,b){return ui(2048,8,a,b)}function wi(a,b){return ui(4,2,a,b)}function xi(a,b){return ui(4,4,a,b)}\nfunction yi(a,b){if(\"function\"===typeof b)return a=a(),b(a),function(){b(null)};if(null!==b&&void 0!==b)return a=a(),b.current=a,function(){b.current=null}}function zi(a,b,c){c=null!==c&&void 0!==c?c.concat([a]):null;return ui(4,4,yi.bind(null,b,a),c)}function Ai(){}function Bi(a,b){var c=di();b=void 0===b?null:b;var d=c.memoizedState;if(null!==d&&null!==b&&Wh(b,d[1]))return d[0];c.memoizedState=[a,b];return a}\nfunction Ci(a,b){var c=di();b=void 0===b?null:b;var d=c.memoizedState;if(null!==d&&null!==b&&Wh(b,d[1]))return d[0];a=a();c.memoizedState=[a,b];return a}function Di(a,b,c){if(0===(Rh&21))return a.baseState&&(a.baseState=!1,Ug=!0),a.memoizedState=c;He(c,b)||(c=yc(),N.lanes|=c,hh|=c,a.baseState=!0);return b}function Ei(a,b){var c=C;C=0!==c&&4>c?c:4;a(!0);var d=Qh.transition;Qh.transition={};try{a(!1),b()}finally{C=c,Qh.transition=d}}function Fi(){return di().memoizedState}\nfunction Gi(a,b,c){var d=lh(a);c={lane:d,action:c,hasEagerState:!1,eagerState:null,next:null};if(Hi(a))Ii(b,c);else if(c=Yg(a,b,c,d),null!==c){var e=L();mh(c,a,d,e);Ji(c,b,d)}}\nfunction ri(a,b,c){var d=lh(a),e={lane:d,action:c,hasEagerState:!1,eagerState:null,next:null};if(Hi(a))Ii(b,e);else{var f=a.alternate;if(0===a.lanes&&(null===f||0===f.lanes)&&(f=b.lastRenderedReducer,null!==f))try{var g=b.lastRenderedState,h=f(g,c);e.hasEagerState=!0;e.eagerState=h;if(He(h,g)){var k=b.interleaved;null===k?(e.next=e,Xg(b)):(e.next=k.next,k.next=e);b.interleaved=e;return}}catch(l){}finally{}c=Yg(a,b,e,d);null!==c&&(e=L(),mh(c,a,d,e),Ji(c,b,d))}}\nfunction Hi(a){var b=a.alternate;return a===N||null!==b&&b===N}function Ii(a,b){Th=Sh=!0;var c=a.pending;null===c?b.next=b:(b.next=c.next,c.next=b);a.pending=b}function Ji(a,b,c){if(0!==(c&4194240)){var d=b.lanes;d&=a.pendingLanes;c|=d;b.lanes=c;Cc(a,c)}}\nvar ai={readContext:Vg,useCallback:Q,useContext:Q,useEffect:Q,useImperativeHandle:Q,useInsertionEffect:Q,useLayoutEffect:Q,useMemo:Q,useReducer:Q,useRef:Q,useState:Q,useDebugValue:Q,useDeferredValue:Q,useTransition:Q,useMutableSource:Q,useSyncExternalStore:Q,useId:Q,unstable_isNewReconciler:!1},Yh={readContext:Vg,useCallback:function(a,b){ci().memoizedState=[a,void 0===b?null:b];return a},useContext:Vg,useEffect:vi,useImperativeHandle:function(a,b,c){c=null!==c&&void 0!==c?c.concat([a]):null;return ti(4194308,\n4,yi.bind(null,b,a),c)},useLayoutEffect:function(a,b){return ti(4194308,4,a,b)},useInsertionEffect:function(a,b){return ti(4,2,a,b)},useMemo:function(a,b){var c=ci();b=void 0===b?null:b;a=a();c.memoizedState=[a,b];return a},useReducer:function(a,b,c){var d=ci();b=void 0!==c?c(b):b;d.memoizedState=d.baseState=b;a={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:a,lastRenderedState:b};d.queue=a;a=a.dispatch=Gi.bind(null,N,a);return[d.memoizedState,a]},useRef:function(a){var b=\nci();a={current:a};return b.memoizedState=a},useState:qi,useDebugValue:Ai,useDeferredValue:function(a){return ci().memoizedState=a},useTransition:function(){var a=qi(!1),b=a[0];a=Ei.bind(null,a[1]);ci().memoizedState=a;return[b,a]},useMutableSource:function(){},useSyncExternalStore:function(a,b,c){var d=N,e=ci();if(I){if(void 0===c)throw Error(p(407));c=c()}else{c=b();if(null===R)throw Error(p(349));0!==(Rh&30)||ni(d,b,c)}e.memoizedState=c;var f={value:c,getSnapshot:b};e.queue=f;vi(ki.bind(null,d,\nf,a),[a]);d.flags|=2048;li(9,mi.bind(null,d,f,c,b),void 0,null);return c},useId:function(){var a=ci(),b=R.identifierPrefix;if(I){var c=sg;var d=rg;c=(d&~(1<<32-oc(d)-1)).toString(32)+c;b=\":\"+b+\"R\"+c;c=Uh++;0<c&&(b+=\"H\"+c.toString(32));b+=\":\"}else c=Vh++,b=\":\"+b+\"r\"+c.toString(32)+\":\";return a.memoizedState=b},unstable_isNewReconciler:!1},Zh={readContext:Vg,useCallback:Bi,useContext:Vg,useEffect:ji,useImperativeHandle:zi,useInsertionEffect:wi,useLayoutEffect:xi,useMemo:Ci,useReducer:fi,useRef:si,useState:function(){return fi(ei)},\nuseDebugValue:Ai,useDeferredValue:function(a){var b=di();return Di(b,O.memoizedState,a)},useTransition:function(){var a=fi(ei)[0],b=di().memoizedState;return[a,b]},useMutableSource:hi,useSyncExternalStore:ii,useId:Fi,unstable_isNewReconciler:!1},$h={readContext:Vg,useCallback:Bi,useContext:Vg,useEffect:ji,useImperativeHandle:zi,useInsertionEffect:wi,useLayoutEffect:xi,useMemo:Ci,useReducer:gi,useRef:si,useState:function(){return gi(ei)},useDebugValue:Ai,useDeferredValue:function(a){var b=di();return null===\nO?b.memoizedState=a:Di(b,O.memoizedState,a)},useTransition:function(){var a=gi(ei)[0],b=di().memoizedState;return[a,b]},useMutableSource:hi,useSyncExternalStore:ii,useId:Fi,unstable_isNewReconciler:!1};function Ki(a,b){try{var c=\"\",d=b;do c+=Pa(d),d=d.return;while(d);var e=c}catch(f){e=\"\\nError generating stack: \"+f.message+\"\\n\"+f.stack}return{value:a,source:b,stack:e,digest:null}}function Li(a,b,c){return{value:a,source:null,stack:null!=c?c:null,digest:null!=b?b:null}}\nfunction Mi(a,b){try{console.error(b.value)}catch(c){setTimeout(function(){throw c;})}}var Ni=\"function\"===typeof WeakMap?WeakMap:Map;function Oi(a,b,c){c=ch(-1,c);c.tag=3;c.payload={element:null};var d=b.value;c.callback=function(){Pi||(Pi=!0,Qi=d);Mi(a,b)};return c}\nfunction Ri(a,b,c){c=ch(-1,c);c.tag=3;var d=a.type.getDerivedStateFromError;if(\"function\"===typeof d){var e=b.value;c.payload=function(){return d(e)};c.callback=function(){Mi(a,b)}}var f=a.stateNode;null!==f&&\"function\"===typeof f.componentDidCatch&&(c.callback=function(){Mi(a,b);\"function\"!==typeof d&&(null===Si?Si=new Set([this]):Si.add(this));var c=b.stack;this.componentDidCatch(b.value,{componentStack:null!==c?c:\"\"})});return c}\nfunction Ti(a,b,c){var d=a.pingCache;if(null===d){d=a.pingCache=new Ni;var e=new Set;d.set(b,e)}else e=d.get(b),void 0===e&&(e=new Set,d.set(b,e));e.has(c)||(e.add(c),a=Ui.bind(null,a,b,c),b.then(a,a))}function Vi(a){do{var b;if(b=13===a.tag)b=a.memoizedState,b=null!==b?null!==b.dehydrated?!0:!1:!0;if(b)return a;a=a.return}while(null!==a);return null}\nfunction Wi(a,b,c,d,e){if(0===(a.mode&1))return a===b?a.flags|=65536:(a.flags|=128,c.flags|=131072,c.flags&=-52805,1===c.tag&&(null===c.alternate?c.tag=17:(b=ch(-1,1),b.tag=2,dh(c,b,1))),c.lanes|=1),a;a.flags|=65536;a.lanes=e;return a}var Xi=ua.ReactCurrentOwner,Ug=!1;function Yi(a,b,c,d){b.child=null===a?Ch(b,null,c,d):Bh(b,a.child,c,d)}\nfunction Zi(a,b,c,d,e){c=c.render;var f=b.ref;Tg(b,e);d=Xh(a,b,c,d,f,e);c=bi();if(null!==a&&!Ug)return b.updateQueue=a.updateQueue,b.flags&=-2053,a.lanes&=~e,$i(a,b,e);I&&c&&vg(b);b.flags|=1;Yi(a,b,d,e);return b.child}\nfunction aj(a,b,c,d,e){if(null===a){var f=c.type;if(\"function\"===typeof f&&!bj(f)&&void 0===f.defaultProps&&null===c.compare&&void 0===c.defaultProps)return b.tag=15,b.type=f,cj(a,b,f,d,e);a=yh(c.type,null,d,b,b.mode,e);a.ref=b.ref;a.return=b;return b.child=a}f=a.child;if(0===(a.lanes&e)){var g=f.memoizedProps;c=c.compare;c=null!==c?c:Ie;if(c(g,d)&&a.ref===b.ref)return $i(a,b,e)}b.flags|=1;a=wh(f,d);a.ref=b.ref;a.return=b;return b.child=a}\nfunction cj(a,b,c,d,e){if(null!==a){var f=a.memoizedProps;if(Ie(f,d)&&a.ref===b.ref)if(Ug=!1,b.pendingProps=d=f,0!==(a.lanes&e))0!==(a.flags&131072)&&(Ug=!0);else return b.lanes=a.lanes,$i(a,b,e)}return dj(a,b,c,d,e)}\nfunction ej(a,b,c){var d=b.pendingProps,e=d.children,f=null!==a?a.memoizedState:null;if(\"hidden\"===d.mode)if(0===(b.mode&1))b.memoizedState={baseLanes:0,cachePool:null,transitions:null},G(fj,gj),gj|=c;else{if(0===(c&1073741824))return a=null!==f?f.baseLanes|c:c,b.lanes=b.childLanes=1073741824,b.memoizedState={baseLanes:a,cachePool:null,transitions:null},b.updateQueue=null,G(fj,gj),gj|=a,null;b.memoizedState={baseLanes:0,cachePool:null,transitions:null};d=null!==f?f.baseLanes:c;G(fj,gj);gj|=d}else null!==\nf?(d=f.baseLanes|c,b.memoizedState=null):d=c,G(fj,gj),gj|=d;Yi(a,b,e,c);return b.child}function hj(a,b){var c=b.ref;if(null===a&&null!==c||null!==a&&a.ref!==c)b.flags|=512,b.flags|=2097152}function dj(a,b,c,d,e){var f=Zf(c)?Xf:H.current;f=Yf(b,f);Tg(b,e);c=Xh(a,b,c,d,f,e);d=bi();if(null!==a&&!Ug)return b.updateQueue=a.updateQueue,b.flags&=-2053,a.lanes&=~e,$i(a,b,e);I&&d&&vg(b);b.flags|=1;Yi(a,b,c,e);return b.child}\nfunction ij(a,b,c,d,e){if(Zf(c)){var f=!0;cg(b)}else f=!1;Tg(b,e);if(null===b.stateNode)jj(a,b),ph(b,c,d),rh(b,c,d,e),d=!0;else if(null===a){var g=b.stateNode,h=b.memoizedProps;g.props=h;var k=g.context,l=c.contextType;\"object\"===typeof l&&null!==l?l=Vg(l):(l=Zf(c)?Xf:H.current,l=Yf(b,l));var m=c.getDerivedStateFromProps,q=\"function\"===typeof m||\"function\"===typeof g.getSnapshotBeforeUpdate;q||\"function\"!==typeof g.UNSAFE_componentWillReceiveProps&&\"function\"!==typeof g.componentWillReceiveProps||\n(h!==d||k!==l)&&qh(b,g,d,l);$g=!1;var r=b.memoizedState;g.state=r;gh(b,d,g,e);k=b.memoizedState;h!==d||r!==k||Wf.current||$g?(\"function\"===typeof m&&(kh(b,c,m,d),k=b.memoizedState),(h=$g||oh(b,c,h,d,r,k,l))?(q||\"function\"!==typeof g.UNSAFE_componentWillMount&&\"function\"!==typeof g.componentWillMount||(\"function\"===typeof g.componentWillMount&&g.componentWillMount(),\"function\"===typeof g.UNSAFE_componentWillMount&&g.UNSAFE_componentWillMount()),\"function\"===typeof g.componentDidMount&&(b.flags|=4194308)):\n(\"function\"===typeof g.componentDidMount&&(b.flags|=4194308),b.memoizedProps=d,b.memoizedState=k),g.props=d,g.state=k,g.context=l,d=h):(\"function\"===typeof g.componentDidMount&&(b.flags|=4194308),d=!1)}else{g=b.stateNode;bh(a,b);h=b.memoizedProps;l=b.type===b.elementType?h:Lg(b.type,h);g.props=l;q=b.pendingProps;r=g.context;k=c.contextType;\"object\"===typeof k&&null!==k?k=Vg(k):(k=Zf(c)?Xf:H.current,k=Yf(b,k));var y=c.getDerivedStateFromProps;(m=\"function\"===typeof y||\"function\"===typeof g.getSnapshotBeforeUpdate)||\n\"function\"!==typeof g.UNSAFE_componentWillReceiveProps&&\"function\"!==typeof g.componentWillReceiveProps||(h!==q||r!==k)&&qh(b,g,d,k);$g=!1;r=b.memoizedState;g.state=r;gh(b,d,g,e);var n=b.memoizedState;h!==q||r!==n||Wf.current||$g?(\"function\"===typeof y&&(kh(b,c,y,d),n=b.memoizedState),(l=$g||oh(b,c,l,d,r,n,k)||!1)?(m||\"function\"!==typeof g.UNSAFE_componentWillUpdate&&\"function\"!==typeof g.componentWillUpdate||(\"function\"===typeof g.componentWillUpdate&&g.componentWillUpdate(d,n,k),\"function\"===typeof g.UNSAFE_componentWillUpdate&&\ng.UNSAFE_componentWillUpdate(d,n,k)),\"function\"===typeof g.componentDidUpdate&&(b.flags|=4),\"function\"===typeof g.getSnapshotBeforeUpdate&&(b.flags|=1024)):(\"function\"!==typeof g.componentDidUpdate||h===a.memoizedProps&&r===a.memoizedState||(b.flags|=4),\"function\"!==typeof g.getSnapshotBeforeUpdate||h===a.memoizedProps&&r===a.memoizedState||(b.flags|=1024),b.memoizedProps=d,b.memoizedState=n),g.props=d,g.state=n,g.context=k,d=l):(\"function\"!==typeof g.componentDidUpdate||h===a.memoizedProps&&r===\na.memoizedState||(b.flags|=4),\"function\"!==typeof g.getSnapshotBeforeUpdate||h===a.memoizedProps&&r===a.memoizedState||(b.flags|=1024),d=!1)}return kj(a,b,c,d,f,e)}\nfunction kj(a,b,c,d,e,f){hj(a,b);var g=0!==(b.flags&128);if(!d&&!g)return e&&dg(b,c,!1),$i(a,b,f);d=b.stateNode;Xi.current=b;var h=g&&\"function\"!==typeof c.getDerivedStateFromError?null:d.render();b.flags|=1;null!==a&&g?(b.child=Bh(b,a.child,null,f),b.child=Bh(b,null,h,f)):Yi(a,b,h,f);b.memoizedState=d.state;e&&dg(b,c,!0);return b.child}function lj(a){var b=a.stateNode;b.pendingContext?ag(a,b.pendingContext,b.pendingContext!==b.context):b.context&&ag(a,b.context,!1);Ih(a,b.containerInfo)}\nfunction mj(a,b,c,d,e){Ig();Jg(e);b.flags|=256;Yi(a,b,c,d);return b.child}var nj={dehydrated:null,treeContext:null,retryLane:0};function oj(a){return{baseLanes:a,cachePool:null,transitions:null}}\nfunction pj(a,b,c){var d=b.pendingProps,e=M.current,f=!1,g=0!==(b.flags&128),h;(h=g)||(h=null!==a&&null===a.memoizedState?!1:0!==(e&2));if(h)f=!0,b.flags&=-129;else if(null===a||null!==a.memoizedState)e|=1;G(M,e&1);if(null===a){Eg(b);a=b.memoizedState;if(null!==a&&(a=a.dehydrated,null!==a))return 0===(b.mode&1)?b.lanes=1:\"$!\"===a.data?b.lanes=8:b.lanes=1073741824,null;g=d.children;a=d.fallback;return f?(d=b.mode,f=b.child,g={mode:\"hidden\",children:g},0===(d&1)&&null!==f?(f.childLanes=0,f.pendingProps=\ng):f=qj(g,d,0,null),a=Ah(a,d,c,null),f.return=b,a.return=b,f.sibling=a,b.child=f,b.child.memoizedState=oj(c),b.memoizedState=nj,a):rj(b,g)}e=a.memoizedState;if(null!==e&&(h=e.dehydrated,null!==h))return sj(a,b,g,d,h,e,c);if(f){f=d.fallback;g=b.mode;e=a.child;h=e.sibling;var k={mode:\"hidden\",children:d.children};0===(g&1)&&b.child!==e?(d=b.child,d.childLanes=0,d.pendingProps=k,b.deletions=null):(d=wh(e,k),d.subtreeFlags=e.subtreeFlags&14680064);null!==h?f=wh(h,f):(f=Ah(f,g,c,null),f.flags|=2);f.return=\nb;d.return=b;d.sibling=f;b.child=d;d=f;f=b.child;g=a.child.memoizedState;g=null===g?oj(c):{baseLanes:g.baseLanes|c,cachePool:null,transitions:g.transitions};f.memoizedState=g;f.childLanes=a.childLanes&~c;b.memoizedState=nj;return d}f=a.child;a=f.sibling;d=wh(f,{mode:\"visible\",children:d.children});0===(b.mode&1)&&(d.lanes=c);d.return=b;d.sibling=null;null!==a&&(c=b.deletions,null===c?(b.deletions=[a],b.flags|=16):c.push(a));b.child=d;b.memoizedState=null;return d}\nfunction rj(a,b){b=qj({mode:\"visible\",children:b},a.mode,0,null);b.return=a;return a.child=b}function tj(a,b,c,d){null!==d&&Jg(d);Bh(b,a.child,null,c);a=rj(b,b.pendingProps.children);a.flags|=2;b.memoizedState=null;return a}\nfunction sj(a,b,c,d,e,f,g){if(c){if(b.flags&256)return b.flags&=-257,d=Li(Error(p(422))),tj(a,b,g,d);if(null!==b.memoizedState)return b.child=a.child,b.flags|=128,null;f=d.fallback;e=b.mode;d=qj({mode:\"visible\",children:d.children},e,0,null);f=Ah(f,e,g,null);f.flags|=2;d.return=b;f.return=b;d.sibling=f;b.child=d;0!==(b.mode&1)&&Bh(b,a.child,null,g);b.child.memoizedState=oj(g);b.memoizedState=nj;return f}if(0===(b.mode&1))return tj(a,b,g,null);if(\"$!\"===e.data){d=e.nextSibling&&e.nextSibling.dataset;\nif(d)var h=d.dgst;d=h;f=Error(p(419));d=Li(f,d,void 0);return tj(a,b,g,d)}h=0!==(g&a.childLanes);if(Ug||h){d=R;if(null!==d){switch(g&-g){case 4:e=2;break;case 16:e=8;break;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:e=32;break;case 536870912:e=268435456;break;default:e=0}e=0!==(e&(d.suspendedLanes|g))?0:e;\n0!==e&&e!==f.retryLane&&(f.retryLane=e,Zg(a,e),mh(d,a,e,-1))}uj();d=Li(Error(p(421)));return tj(a,b,g,d)}if(\"$?\"===e.data)return b.flags|=128,b.child=a.child,b=vj.bind(null,a),e._reactRetry=b,null;a=f.treeContext;yg=Lf(e.nextSibling);xg=b;I=!0;zg=null;null!==a&&(og[pg++]=rg,og[pg++]=sg,og[pg++]=qg,rg=a.id,sg=a.overflow,qg=b);b=rj(b,d.children);b.flags|=4096;return b}function wj(a,b,c){a.lanes|=b;var d=a.alternate;null!==d&&(d.lanes|=b);Sg(a.return,b,c)}\nfunction xj(a,b,c,d,e){var f=a.memoizedState;null===f?a.memoizedState={isBackwards:b,rendering:null,renderingStartTime:0,last:d,tail:c,tailMode:e}:(f.isBackwards=b,f.rendering=null,f.renderingStartTime=0,f.last=d,f.tail=c,f.tailMode=e)}\nfunction yj(a,b,c){var d=b.pendingProps,e=d.revealOrder,f=d.tail;Yi(a,b,d.children,c);d=M.current;if(0!==(d&2))d=d&1|2,b.flags|=128;else{if(null!==a&&0!==(a.flags&128))a:for(a=b.child;null!==a;){if(13===a.tag)null!==a.memoizedState&&wj(a,c,b);else if(19===a.tag)wj(a,c,b);else if(null!==a.child){a.child.return=a;a=a.child;continue}if(a===b)break a;for(;null===a.sibling;){if(null===a.return||a.return===b)break a;a=a.return}a.sibling.return=a.return;a=a.sibling}d&=1}G(M,d);if(0===(b.mode&1))b.memoizedState=\nnull;else switch(e){case \"forwards\":c=b.child;for(e=null;null!==c;)a=c.alternate,null!==a&&null===Mh(a)&&(e=c),c=c.sibling;c=e;null===c?(e=b.child,b.child=null):(e=c.sibling,c.sibling=null);xj(b,!1,e,c,f);break;case \"backwards\":c=null;e=b.child;for(b.child=null;null!==e;){a=e.alternate;if(null!==a&&null===Mh(a)){b.child=e;break}a=e.sibling;e.sibling=c;c=e;e=a}xj(b,!0,c,null,f);break;case \"together\":xj(b,!1,null,null,void 0);break;default:b.memoizedState=null}return b.child}\nfunction jj(a,b){0===(b.mode&1)&&null!==a&&(a.alternate=null,b.alternate=null,b.flags|=2)}function $i(a,b,c){null!==a&&(b.dependencies=a.dependencies);hh|=b.lanes;if(0===(c&b.childLanes))return null;if(null!==a&&b.child!==a.child)throw Error(p(153));if(null!==b.child){a=b.child;c=wh(a,a.pendingProps);b.child=c;for(c.return=b;null!==a.sibling;)a=a.sibling,c=c.sibling=wh(a,a.pendingProps),c.return=b;c.sibling=null}return b.child}\nfunction zj(a,b,c){switch(b.tag){case 3:lj(b);Ig();break;case 5:Kh(b);break;case 1:Zf(b.type)&&cg(b);break;case 4:Ih(b,b.stateNode.containerInfo);break;case 10:var d=b.type._context,e=b.memoizedProps.value;G(Mg,d._currentValue);d._currentValue=e;break;case 13:d=b.memoizedState;if(null!==d){if(null!==d.dehydrated)return G(M,M.current&1),b.flags|=128,null;if(0!==(c&b.child.childLanes))return pj(a,b,c);G(M,M.current&1);a=$i(a,b,c);return null!==a?a.sibling:null}G(M,M.current&1);break;case 19:d=0!==(c&\nb.childLanes);if(0!==(a.flags&128)){if(d)return yj(a,b,c);b.flags|=128}e=b.memoizedState;null!==e&&(e.rendering=null,e.tail=null,e.lastEffect=null);G(M,M.current);if(d)break;else return null;case 22:case 23:return b.lanes=0,ej(a,b,c)}return $i(a,b,c)}var Aj,Bj,Cj,Dj;\nAj=function(a,b){for(var c=b.child;null!==c;){if(5===c.tag||6===c.tag)a.appendChild(c.stateNode);else if(4!==c.tag&&null!==c.child){c.child.return=c;c=c.child;continue}if(c===b)break;for(;null===c.sibling;){if(null===c.return||c.return===b)return;c=c.return}c.sibling.return=c.return;c=c.sibling}};Bj=function(){};\nCj=function(a,b,c,d){var e=a.memoizedProps;if(e!==d){a=b.stateNode;Hh(Eh.current);var f=null;switch(c){case \"input\":e=Ya(a,e);d=Ya(a,d);f=[];break;case \"select\":e=A({},e,{value:void 0});d=A({},d,{value:void 0});f=[];break;case \"textarea\":e=gb(a,e);d=gb(a,d);f=[];break;default:\"function\"!==typeof e.onClick&&\"function\"===typeof d.onClick&&(a.onclick=Bf)}ub(c,d);var g;c=null;for(l in e)if(!d.hasOwnProperty(l)&&e.hasOwnProperty(l)&&null!=e[l])if(\"style\"===l){var h=e[l];for(g in h)h.hasOwnProperty(g)&&\n(c||(c={}),c[g]=\"\")}else\"dangerouslySetInnerHTML\"!==l&&\"children\"!==l&&\"suppressContentEditableWarning\"!==l&&\"suppressHydrationWarning\"!==l&&\"autoFocus\"!==l&&(ea.hasOwnProperty(l)?f||(f=[]):(f=f||[]).push(l,null));for(l in d){var k=d[l];h=null!=e?e[l]:void 0;if(d.hasOwnProperty(l)&&k!==h&&(null!=k||null!=h))if(\"style\"===l)if(h){for(g in h)!h.hasOwnProperty(g)||k&&k.hasOwnProperty(g)||(c||(c={}),c[g]=\"\");for(g in k)k.hasOwnProperty(g)&&h[g]!==k[g]&&(c||(c={}),c[g]=k[g])}else c||(f||(f=[]),f.push(l,\nc)),c=k;else\"dangerouslySetInnerHTML\"===l?(k=k?k.__html:void 0,h=h?h.__html:void 0,null!=k&&h!==k&&(f=f||[]).push(l,k)):\"children\"===l?\"string\"!==typeof k&&\"number\"!==typeof k||(f=f||[]).push(l,\"\"+k):\"suppressContentEditableWarning\"!==l&&\"suppressHydrationWarning\"!==l&&(ea.hasOwnProperty(l)?(null!=k&&\"onScroll\"===l&&D(\"scroll\",a),f||h===k||(f=[])):(f=f||[]).push(l,k))}c&&(f=f||[]).push(\"style\",c);var l=f;if(b.updateQueue=l)b.flags|=4}};Dj=function(a,b,c,d){c!==d&&(b.flags|=4)};\nfunction Ej(a,b){if(!I)switch(a.tailMode){case \"hidden\":b=a.tail;for(var c=null;null!==b;)null!==b.alternate&&(c=b),b=b.sibling;null===c?a.tail=null:c.sibling=null;break;case \"collapsed\":c=a.tail;for(var d=null;null!==c;)null!==c.alternate&&(d=c),c=c.sibling;null===d?b||null===a.tail?a.tail=null:a.tail.sibling=null:d.sibling=null}}\nfunction S(a){var b=null!==a.alternate&&a.alternate.child===a.child,c=0,d=0;if(b)for(var e=a.child;null!==e;)c|=e.lanes|e.childLanes,d|=e.subtreeFlags&14680064,d|=e.flags&14680064,e.return=a,e=e.sibling;else for(e=a.child;null!==e;)c|=e.lanes|e.childLanes,d|=e.subtreeFlags,d|=e.flags,e.return=a,e=e.sibling;a.subtreeFlags|=d;a.childLanes=c;return b}\nfunction Fj(a,b,c){var d=b.pendingProps;wg(b);switch(b.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return S(b),null;case 1:return Zf(b.type)&&$f(),S(b),null;case 3:d=b.stateNode;Jh();E(Wf);E(H);Oh();d.pendingContext&&(d.context=d.pendingContext,d.pendingContext=null);if(null===a||null===a.child)Gg(b)?b.flags|=4:null===a||a.memoizedState.isDehydrated&&0===(b.flags&256)||(b.flags|=1024,null!==zg&&(Gj(zg),zg=null));Bj(a,b);S(b);return null;case 5:Lh(b);var e=Hh(Gh.current);\nc=b.type;if(null!==a&&null!=b.stateNode)Cj(a,b,c,d,e),a.ref!==b.ref&&(b.flags|=512,b.flags|=2097152);else{if(!d){if(null===b.stateNode)throw Error(p(166));S(b);return null}a=Hh(Eh.current);if(Gg(b)){d=b.stateNode;c=b.type;var f=b.memoizedProps;d[Of]=b;d[Pf]=f;a=0!==(b.mode&1);switch(c){case \"dialog\":D(\"cancel\",d);D(\"close\",d);break;case \"iframe\":case \"object\":case \"embed\":D(\"load\",d);break;case \"video\":case \"audio\":for(e=0;e<lf.length;e++)D(lf[e],d);break;case \"source\":D(\"error\",d);break;case \"img\":case \"image\":case \"link\":D(\"error\",\nd);D(\"load\",d);break;case \"details\":D(\"toggle\",d);break;case \"input\":Za(d,f);D(\"invalid\",d);break;case \"select\":d._wrapperState={wasMultiple:!!f.multiple};D(\"invalid\",d);break;case \"textarea\":hb(d,f),D(\"invalid\",d)}ub(c,f);e=null;for(var g in f)if(f.hasOwnProperty(g)){var h=f[g];\"children\"===g?\"string\"===typeof h?d.textContent!==h&&(!0!==f.suppressHydrationWarning&&Af(d.textContent,h,a),e=[\"children\",h]):\"number\"===typeof h&&d.textContent!==\"\"+h&&(!0!==f.suppressHydrationWarning&&Af(d.textContent,\nh,a),e=[\"children\",\"\"+h]):ea.hasOwnProperty(g)&&null!=h&&\"onScroll\"===g&&D(\"scroll\",d)}switch(c){case \"input\":Va(d);db(d,f,!0);break;case \"textarea\":Va(d);jb(d);break;case \"select\":case \"option\":break;default:\"function\"===typeof f.onClick&&(d.onclick=Bf)}d=e;b.updateQueue=d;null!==d&&(b.flags|=4)}else{g=9===e.nodeType?e:e.ownerDocument;\"http://www.w3.org/1999/xhtml\"===a&&(a=kb(c));\"http://www.w3.org/1999/xhtml\"===a?\"script\"===c?(a=g.createElement(\"div\"),a.innerHTML=\"<script>\\x3c/script>\",a=a.removeChild(a.firstChild)):\n\"string\"===typeof d.is?a=g.createElement(c,{is:d.is}):(a=g.createElement(c),\"select\"===c&&(g=a,d.multiple?g.multiple=!0:d.size&&(g.size=d.size))):a=g.createElementNS(a,c);a[Of]=b;a[Pf]=d;Aj(a,b,!1,!1);b.stateNode=a;a:{g=vb(c,d);switch(c){case \"dialog\":D(\"cancel\",a);D(\"close\",a);e=d;break;case \"iframe\":case \"object\":case \"embed\":D(\"load\",a);e=d;break;case \"video\":case \"audio\":for(e=0;e<lf.length;e++)D(lf[e],a);e=d;break;case \"source\":D(\"error\",a);e=d;break;case \"img\":case \"image\":case \"link\":D(\"error\",\na);D(\"load\",a);e=d;break;case \"details\":D(\"toggle\",a);e=d;break;case \"input\":Za(a,d);e=Ya(a,d);D(\"invalid\",a);break;case \"option\":e=d;break;case \"select\":a._wrapperState={wasMultiple:!!d.multiple};e=A({},d,{value:void 0});D(\"invalid\",a);break;case \"textarea\":hb(a,d);e=gb(a,d);D(\"invalid\",a);break;default:e=d}ub(c,e);h=e;for(f in h)if(h.hasOwnProperty(f)){var k=h[f];\"style\"===f?sb(a,k):\"dangerouslySetInnerHTML\"===f?(k=k?k.__html:void 0,null!=k&&nb(a,k)):\"children\"===f?\"string\"===typeof k?(\"textarea\"!==\nc||\"\"!==k)&&ob(a,k):\"number\"===typeof k&&ob(a,\"\"+k):\"suppressContentEditableWarning\"!==f&&\"suppressHydrationWarning\"!==f&&\"autoFocus\"!==f&&(ea.hasOwnProperty(f)?null!=k&&\"onScroll\"===f&&D(\"scroll\",a):null!=k&&ta(a,f,k,g))}switch(c){case \"input\":Va(a);db(a,d,!1);break;case \"textarea\":Va(a);jb(a);break;case \"option\":null!=d.value&&a.setAttribute(\"value\",\"\"+Sa(d.value));break;case \"select\":a.multiple=!!d.multiple;f=d.value;null!=f?fb(a,!!d.multiple,f,!1):null!=d.defaultValue&&fb(a,!!d.multiple,d.defaultValue,\n!0);break;default:\"function\"===typeof e.onClick&&(a.onclick=Bf)}switch(c){case \"button\":case \"input\":case \"select\":case \"textarea\":d=!!d.autoFocus;break a;case \"img\":d=!0;break a;default:d=!1}}d&&(b.flags|=4)}null!==b.ref&&(b.flags|=512,b.flags|=2097152)}S(b);return null;case 6:if(a&&null!=b.stateNode)Dj(a,b,a.memoizedProps,d);else{if(\"string\"!==typeof d&&null===b.stateNode)throw Error(p(166));c=Hh(Gh.current);Hh(Eh.current);if(Gg(b)){d=b.stateNode;c=b.memoizedProps;d[Of]=b;if(f=d.nodeValue!==c)if(a=\nxg,null!==a)switch(a.tag){case 3:Af(d.nodeValue,c,0!==(a.mode&1));break;case 5:!0!==a.memoizedProps.suppressHydrationWarning&&Af(d.nodeValue,c,0!==(a.mode&1))}f&&(b.flags|=4)}else d=(9===c.nodeType?c:c.ownerDocument).createTextNode(d),d[Of]=b,b.stateNode=d}S(b);return null;case 13:E(M);d=b.memoizedState;if(null===a||null!==a.memoizedState&&null!==a.memoizedState.dehydrated){if(I&&null!==yg&&0!==(b.mode&1)&&0===(b.flags&128))Hg(),Ig(),b.flags|=98560,f=!1;else if(f=Gg(b),null!==d&&null!==d.dehydrated){if(null===\na){if(!f)throw Error(p(318));f=b.memoizedState;f=null!==f?f.dehydrated:null;if(!f)throw Error(p(317));f[Of]=b}else Ig(),0===(b.flags&128)&&(b.memoizedState=null),b.flags|=4;S(b);f=!1}else null!==zg&&(Gj(zg),zg=null),f=!0;if(!f)return b.flags&65536?b:null}if(0!==(b.flags&128))return b.lanes=c,b;d=null!==d;d!==(null!==a&&null!==a.memoizedState)&&d&&(b.child.flags|=8192,0!==(b.mode&1)&&(null===a||0!==(M.current&1)?0===T&&(T=3):uj()));null!==b.updateQueue&&(b.flags|=4);S(b);return null;case 4:return Jh(),\nBj(a,b),null===a&&sf(b.stateNode.containerInfo),S(b),null;case 10:return Rg(b.type._context),S(b),null;case 17:return Zf(b.type)&&$f(),S(b),null;case 19:E(M);f=b.memoizedState;if(null===f)return S(b),null;d=0!==(b.flags&128);g=f.rendering;if(null===g)if(d)Ej(f,!1);else{if(0!==T||null!==a&&0!==(a.flags&128))for(a=b.child;null!==a;){g=Mh(a);if(null!==g){b.flags|=128;Ej(f,!1);d=g.updateQueue;null!==d&&(b.updateQueue=d,b.flags|=4);b.subtreeFlags=0;d=c;for(c=b.child;null!==c;)f=c,a=d,f.flags&=14680066,\ng=f.alternate,null===g?(f.childLanes=0,f.lanes=a,f.child=null,f.subtreeFlags=0,f.memoizedProps=null,f.memoizedState=null,f.updateQueue=null,f.dependencies=null,f.stateNode=null):(f.childLanes=g.childLanes,f.lanes=g.lanes,f.child=g.child,f.subtreeFlags=0,f.deletions=null,f.memoizedProps=g.memoizedProps,f.memoizedState=g.memoizedState,f.updateQueue=g.updateQueue,f.type=g.type,a=g.dependencies,f.dependencies=null===a?null:{lanes:a.lanes,firstContext:a.firstContext}),c=c.sibling;G(M,M.current&1|2);return b.child}a=\na.sibling}null!==f.tail&&B()>Hj&&(b.flags|=128,d=!0,Ej(f,!1),b.lanes=4194304)}else{if(!d)if(a=Mh(g),null!==a){if(b.flags|=128,d=!0,c=a.updateQueue,null!==c&&(b.updateQueue=c,b.flags|=4),Ej(f,!0),null===f.tail&&\"hidden\"===f.tailMode&&!g.alternate&&!I)return S(b),null}else 2*B()-f.renderingStartTime>Hj&&1073741824!==c&&(b.flags|=128,d=!0,Ej(f,!1),b.lanes=4194304);f.isBackwards?(g.sibling=b.child,b.child=g):(c=f.last,null!==c?c.sibling=g:b.child=g,f.last=g)}if(null!==f.tail)return b=f.tail,f.rendering=\nb,f.tail=b.sibling,f.renderingStartTime=B(),b.sibling=null,c=M.current,G(M,d?c&1|2:c&1),b;S(b);return null;case 22:case 23:return Ij(),d=null!==b.memoizedState,null!==a&&null!==a.memoizedState!==d&&(b.flags|=8192),d&&0!==(b.mode&1)?0!==(gj&1073741824)&&(S(b),b.subtreeFlags&6&&(b.flags|=8192)):S(b),null;case 24:return null;case 25:return null}throw Error(p(156,b.tag));}\nfunction Jj(a,b){wg(b);switch(b.tag){case 1:return Zf(b.type)&&$f(),a=b.flags,a&65536?(b.flags=a&-65537|128,b):null;case 3:return Jh(),E(Wf),E(H),Oh(),a=b.flags,0!==(a&65536)&&0===(a&128)?(b.flags=a&-65537|128,b):null;case 5:return Lh(b),null;case 13:E(M);a=b.memoizedState;if(null!==a&&null!==a.dehydrated){if(null===b.alternate)throw Error(p(340));Ig()}a=b.flags;return a&65536?(b.flags=a&-65537|128,b):null;case 19:return E(M),null;case 4:return Jh(),null;case 10:return Rg(b.type._context),null;case 22:case 23:return Ij(),\nnull;case 24:return null;default:return null}}var Kj=!1,U=!1,Lj=\"function\"===typeof WeakSet?WeakSet:Set,V=null;function Mj(a,b){var c=a.ref;if(null!==c)if(\"function\"===typeof c)try{c(null)}catch(d){W(a,b,d)}else c.current=null}function Nj(a,b,c){try{c()}catch(d){W(a,b,d)}}var Oj=!1;\nfunction Pj(a,b){Cf=dd;a=Me();if(Ne(a)){if(\"selectionStart\"in a)var c={start:a.selectionStart,end:a.selectionEnd};else a:{c=(c=a.ownerDocument)&&c.defaultView||window;var d=c.getSelection&&c.getSelection();if(d&&0!==d.rangeCount){c=d.anchorNode;var e=d.anchorOffset,f=d.focusNode;d=d.focusOffset;try{c.nodeType,f.nodeType}catch(F){c=null;break a}var g=0,h=-1,k=-1,l=0,m=0,q=a,r=null;b:for(;;){for(var y;;){q!==c||0!==e&&3!==q.nodeType||(h=g+e);q!==f||0!==d&&3!==q.nodeType||(k=g+d);3===q.nodeType&&(g+=\nq.nodeValue.length);if(null===(y=q.firstChild))break;r=q;q=y}for(;;){if(q===a)break b;r===c&&++l===e&&(h=g);r===f&&++m===d&&(k=g);if(null!==(y=q.nextSibling))break;q=r;r=q.parentNode}q=y}c=-1===h||-1===k?null:{start:h,end:k}}else c=null}c=c||{start:0,end:0}}else c=null;Df={focusedElem:a,selectionRange:c};dd=!1;for(V=b;null!==V;)if(b=V,a=b.child,0!==(b.subtreeFlags&1028)&&null!==a)a.return=b,V=a;else for(;null!==V;){b=V;try{var n=b.alternate;if(0!==(b.flags&1024))switch(b.tag){case 0:case 11:case 15:break;\ncase 1:if(null!==n){var t=n.memoizedProps,J=n.memoizedState,x=b.stateNode,w=x.getSnapshotBeforeUpdate(b.elementType===b.type?t:Lg(b.type,t),J);x.__reactInternalSnapshotBeforeUpdate=w}break;case 3:var u=b.stateNode.containerInfo;1===u.nodeType?u.textContent=\"\":9===u.nodeType&&u.documentElement&&u.removeChild(u.documentElement);break;case 5:case 6:case 4:case 17:break;default:throw Error(p(163));}}catch(F){W(b,b.return,F)}a=b.sibling;if(null!==a){a.return=b.return;V=a;break}V=b.return}n=Oj;Oj=!1;return n}\nfunction Qj(a,b,c){var d=b.updateQueue;d=null!==d?d.lastEffect:null;if(null!==d){var e=d=d.next;do{if((e.tag&a)===a){var f=e.destroy;e.destroy=void 0;void 0!==f&&Nj(b,c,f)}e=e.next}while(e!==d)}}function Rj(a,b){b=b.updateQueue;b=null!==b?b.lastEffect:null;if(null!==b){var c=b=b.next;do{if((c.tag&a)===a){var d=c.create;c.destroy=d()}c=c.next}while(c!==b)}}function Sj(a){var b=a.ref;if(null!==b){var c=a.stateNode;switch(a.tag){case 5:a=c;break;default:a=c}\"function\"===typeof b?b(a):b.current=a}}\nfunction Tj(a){var b=a.alternate;null!==b&&(a.alternate=null,Tj(b));a.child=null;a.deletions=null;a.sibling=null;5===a.tag&&(b=a.stateNode,null!==b&&(delete b[Of],delete b[Pf],delete b[of],delete b[Qf],delete b[Rf]));a.stateNode=null;a.return=null;a.dependencies=null;a.memoizedProps=null;a.memoizedState=null;a.pendingProps=null;a.stateNode=null;a.updateQueue=null}function Uj(a){return 5===a.tag||3===a.tag||4===a.tag}\nfunction Vj(a){a:for(;;){for(;null===a.sibling;){if(null===a.return||Uj(a.return))return null;a=a.return}a.sibling.return=a.return;for(a=a.sibling;5!==a.tag&&6!==a.tag&&18!==a.tag;){if(a.flags&2)continue a;if(null===a.child||4===a.tag)continue a;else a.child.return=a,a=a.child}if(!(a.flags&2))return a.stateNode}}\nfunction Wj(a,b,c){var d=a.tag;if(5===d||6===d)a=a.stateNode,b?8===c.nodeType?c.parentNode.insertBefore(a,b):c.insertBefore(a,b):(8===c.nodeType?(b=c.parentNode,b.insertBefore(a,c)):(b=c,b.appendChild(a)),c=c._reactRootContainer,null!==c&&void 0!==c||null!==b.onclick||(b.onclick=Bf));else if(4!==d&&(a=a.child,null!==a))for(Wj(a,b,c),a=a.sibling;null!==a;)Wj(a,b,c),a=a.sibling}\nfunction Xj(a,b,c){var d=a.tag;if(5===d||6===d)a=a.stateNode,b?c.insertBefore(a,b):c.appendChild(a);else if(4!==d&&(a=a.child,null!==a))for(Xj(a,b,c),a=a.sibling;null!==a;)Xj(a,b,c),a=a.sibling}var X=null,Yj=!1;function Zj(a,b,c){for(c=c.child;null!==c;)ak(a,b,c),c=c.sibling}\nfunction ak(a,b,c){if(lc&&\"function\"===typeof lc.onCommitFiberUnmount)try{lc.onCommitFiberUnmount(kc,c)}catch(h){}switch(c.tag){case 5:U||Mj(c,b);case 6:var d=X,e=Yj;X=null;Zj(a,b,c);X=d;Yj=e;null!==X&&(Yj?(a=X,c=c.stateNode,8===a.nodeType?a.parentNode.removeChild(c):a.removeChild(c)):X.removeChild(c.stateNode));break;case 18:null!==X&&(Yj?(a=X,c=c.stateNode,8===a.nodeType?Kf(a.parentNode,c):1===a.nodeType&&Kf(a,c),bd(a)):Kf(X,c.stateNode));break;case 4:d=X;e=Yj;X=c.stateNode.containerInfo;Yj=!0;\nZj(a,b,c);X=d;Yj=e;break;case 0:case 11:case 14:case 15:if(!U&&(d=c.updateQueue,null!==d&&(d=d.lastEffect,null!==d))){e=d=d.next;do{var f=e,g=f.destroy;f=f.tag;void 0!==g&&(0!==(f&2)?Nj(c,b,g):0!==(f&4)&&Nj(c,b,g));e=e.next}while(e!==d)}Zj(a,b,c);break;case 1:if(!U&&(Mj(c,b),d=c.stateNode,\"function\"===typeof d.componentWillUnmount))try{d.props=c.memoizedProps,d.state=c.memoizedState,d.componentWillUnmount()}catch(h){W(c,b,h)}Zj(a,b,c);break;case 21:Zj(a,b,c);break;case 22:c.mode&1?(U=(d=U)||null!==\nc.memoizedState,Zj(a,b,c),U=d):Zj(a,b,c);break;default:Zj(a,b,c)}}function bk(a){var b=a.updateQueue;if(null!==b){a.updateQueue=null;var c=a.stateNode;null===c&&(c=a.stateNode=new Lj);b.forEach(function(b){var d=ck.bind(null,a,b);c.has(b)||(c.add(b),b.then(d,d))})}}\nfunction dk(a,b){var c=b.deletions;if(null!==c)for(var d=0;d<c.length;d++){var e=c[d];try{var f=a,g=b,h=g;a:for(;null!==h;){switch(h.tag){case 5:X=h.stateNode;Yj=!1;break a;case 3:X=h.stateNode.containerInfo;Yj=!0;break a;case 4:X=h.stateNode.containerInfo;Yj=!0;break a}h=h.return}if(null===X)throw Error(p(160));ak(f,g,e);X=null;Yj=!1;var k=e.alternate;null!==k&&(k.return=null);e.return=null}catch(l){W(e,b,l)}}if(b.subtreeFlags&12854)for(b=b.child;null!==b;)ek(b,a),b=b.sibling}\nfunction ek(a,b){var c=a.alternate,d=a.flags;switch(a.tag){case 0:case 11:case 14:case 15:dk(b,a);fk(a);if(d&4){try{Qj(3,a,a.return),Rj(3,a)}catch(t){W(a,a.return,t)}try{Qj(5,a,a.return)}catch(t){W(a,a.return,t)}}break;case 1:dk(b,a);fk(a);d&512&&null!==c&&Mj(c,c.return);break;case 5:dk(b,a);fk(a);d&512&&null!==c&&Mj(c,c.return);if(a.flags&32){var e=a.stateNode;try{ob(e,\"\")}catch(t){W(a,a.return,t)}}if(d&4&&(e=a.stateNode,null!=e)){var f=a.memoizedProps,g=null!==c?c.memoizedProps:f,h=a.type,k=a.updateQueue;\na.updateQueue=null;if(null!==k)try{\"input\"===h&&\"radio\"===f.type&&null!=f.name&&ab(e,f);vb(h,g);var l=vb(h,f);for(g=0;g<k.length;g+=2){var m=k[g],q=k[g+1];\"style\"===m?sb(e,q):\"dangerouslySetInnerHTML\"===m?nb(e,q):\"children\"===m?ob(e,q):ta(e,m,q,l)}switch(h){case \"input\":bb(e,f);break;case \"textarea\":ib(e,f);break;case \"select\":var r=e._wrapperState.wasMultiple;e._wrapperState.wasMultiple=!!f.multiple;var y=f.value;null!=y?fb(e,!!f.multiple,y,!1):r!==!!f.multiple&&(null!=f.defaultValue?fb(e,!!f.multiple,\nf.defaultValue,!0):fb(e,!!f.multiple,f.multiple?[]:\"\",!1))}e[Pf]=f}catch(t){W(a,a.return,t)}}break;case 6:dk(b,a);fk(a);if(d&4){if(null===a.stateNode)throw Error(p(162));e=a.stateNode;f=a.memoizedProps;try{e.nodeValue=f}catch(t){W(a,a.return,t)}}break;case 3:dk(b,a);fk(a);if(d&4&&null!==c&&c.memoizedState.isDehydrated)try{bd(b.containerInfo)}catch(t){W(a,a.return,t)}break;case 4:dk(b,a);fk(a);break;case 13:dk(b,a);fk(a);e=a.child;e.flags&8192&&(f=null!==e.memoizedState,e.stateNode.isHidden=f,!f||\nnull!==e.alternate&&null!==e.alternate.memoizedState||(gk=B()));d&4&&bk(a);break;case 22:m=null!==c&&null!==c.memoizedState;a.mode&1?(U=(l=U)||m,dk(b,a),U=l):dk(b,a);fk(a);if(d&8192){l=null!==a.memoizedState;if((a.stateNode.isHidden=l)&&!m&&0!==(a.mode&1))for(V=a,m=a.child;null!==m;){for(q=V=m;null!==V;){r=V;y=r.child;switch(r.tag){case 0:case 11:case 14:case 15:Qj(4,r,r.return);break;case 1:Mj(r,r.return);var n=r.stateNode;if(\"function\"===typeof n.componentWillUnmount){d=r;c=r.return;try{b=d,n.props=\nb.memoizedProps,n.state=b.memoizedState,n.componentWillUnmount()}catch(t){W(d,c,t)}}break;case 5:Mj(r,r.return);break;case 22:if(null!==r.memoizedState){hk(q);continue}}null!==y?(y.return=r,V=y):hk(q)}m=m.sibling}a:for(m=null,q=a;;){if(5===q.tag){if(null===m){m=q;try{e=q.stateNode,l?(f=e.style,\"function\"===typeof f.setProperty?f.setProperty(\"display\",\"none\",\"important\"):f.display=\"none\"):(h=q.stateNode,k=q.memoizedProps.style,g=void 0!==k&&null!==k&&k.hasOwnProperty(\"display\")?k.display:null,h.style.display=\nrb(\"display\",g))}catch(t){W(a,a.return,t)}}}else if(6===q.tag){if(null===m)try{q.stateNode.nodeValue=l?\"\":q.memoizedProps}catch(t){W(a,a.return,t)}}else if((22!==q.tag&&23!==q.tag||null===q.memoizedState||q===a)&&null!==q.child){q.child.return=q;q=q.child;continue}if(q===a)break a;for(;null===q.sibling;){if(null===q.return||q.return===a)break a;m===q&&(m=null);q=q.return}m===q&&(m=null);q.sibling.return=q.return;q=q.sibling}}break;case 19:dk(b,a);fk(a);d&4&&bk(a);break;case 21:break;default:dk(b,\na),fk(a)}}function fk(a){var b=a.flags;if(b&2){try{a:{for(var c=a.return;null!==c;){if(Uj(c)){var d=c;break a}c=c.return}throw Error(p(160));}switch(d.tag){case 5:var e=d.stateNode;d.flags&32&&(ob(e,\"\"),d.flags&=-33);var f=Vj(a);Xj(a,f,e);break;case 3:case 4:var g=d.stateNode.containerInfo,h=Vj(a);Wj(a,h,g);break;default:throw Error(p(161));}}catch(k){W(a,a.return,k)}a.flags&=-3}b&4096&&(a.flags&=-4097)}function ik(a,b,c){V=a;jk(a,b,c)}\nfunction jk(a,b,c){for(var d=0!==(a.mode&1);null!==V;){var e=V,f=e.child;if(22===e.tag&&d){var g=null!==e.memoizedState||Kj;if(!g){var h=e.alternate,k=null!==h&&null!==h.memoizedState||U;h=Kj;var l=U;Kj=g;if((U=k)&&!l)for(V=e;null!==V;)g=V,k=g.child,22===g.tag&&null!==g.memoizedState?kk(e):null!==k?(k.return=g,V=k):kk(e);for(;null!==f;)V=f,jk(f,b,c),f=f.sibling;V=e;Kj=h;U=l}lk(a,b,c)}else 0!==(e.subtreeFlags&8772)&&null!==f?(f.return=e,V=f):lk(a,b,c)}}\nfunction lk(a){for(;null!==V;){var b=V;if(0!==(b.flags&8772)){var c=b.alternate;try{if(0!==(b.flags&8772))switch(b.tag){case 0:case 11:case 15:U||Rj(5,b);break;case 1:var d=b.stateNode;if(b.flags&4&&!U)if(null===c)d.componentDidMount();else{var e=b.elementType===b.type?c.memoizedProps:Lg(b.type,c.memoizedProps);d.componentDidUpdate(e,c.memoizedState,d.__reactInternalSnapshotBeforeUpdate)}var f=b.updateQueue;null!==f&&ih(b,f,d);break;case 3:var g=b.updateQueue;if(null!==g){c=null;if(null!==b.child)switch(b.child.tag){case 5:c=\nb.child.stateNode;break;case 1:c=b.child.stateNode}ih(b,g,c)}break;case 5:var h=b.stateNode;if(null===c&&b.flags&4){c=h;var k=b.memoizedProps;switch(b.type){case \"button\":case \"input\":case \"select\":case \"textarea\":k.autoFocus&&c.focus();break;case \"img\":k.src&&(c.src=k.src)}}break;case 6:break;case 4:break;case 12:break;case 13:if(null===b.memoizedState){var l=b.alternate;if(null!==l){var m=l.memoizedState;if(null!==m){var q=m.dehydrated;null!==q&&bd(q)}}}break;case 19:case 17:case 21:case 22:case 23:case 25:break;\ndefault:throw Error(p(163));}U||b.flags&512&&Sj(b)}catch(r){W(b,b.return,r)}}if(b===a){V=null;break}c=b.sibling;if(null!==c){c.return=b.return;V=c;break}V=b.return}}function hk(a){for(;null!==V;){var b=V;if(b===a){V=null;break}var c=b.sibling;if(null!==c){c.return=b.return;V=c;break}V=b.return}}\nfunction kk(a){for(;null!==V;){var b=V;try{switch(b.tag){case 0:case 11:case 15:var c=b.return;try{Rj(4,b)}catch(k){W(b,c,k)}break;case 1:var d=b.stateNode;if(\"function\"===typeof d.componentDidMount){var e=b.return;try{d.componentDidMount()}catch(k){W(b,e,k)}}var f=b.return;try{Sj(b)}catch(k){W(b,f,k)}break;case 5:var g=b.return;try{Sj(b)}catch(k){W(b,g,k)}}}catch(k){W(b,b.return,k)}if(b===a){V=null;break}var h=b.sibling;if(null!==h){h.return=b.return;V=h;break}V=b.return}}\nvar mk=Math.ceil,nk=ua.ReactCurrentDispatcher,ok=ua.ReactCurrentOwner,pk=ua.ReactCurrentBatchConfig,K=0,R=null,Y=null,Z=0,gj=0,fj=Uf(0),T=0,qk=null,hh=0,rk=0,sk=0,tk=null,uk=null,gk=0,Hj=Infinity,vk=null,Pi=!1,Qi=null,Si=null,wk=!1,xk=null,yk=0,zk=0,Ak=null,Bk=-1,Ck=0;function L(){return 0!==(K&6)?B():-1!==Bk?Bk:Bk=B()}\nfunction lh(a){if(0===(a.mode&1))return 1;if(0!==(K&2)&&0!==Z)return Z&-Z;if(null!==Kg.transition)return 0===Ck&&(Ck=yc()),Ck;a=C;if(0!==a)return a;a=window.event;a=void 0===a?16:jd(a.type);return a}function mh(a,b,c,d){if(50<zk)throw zk=0,Ak=null,Error(p(185));Ac(a,c,d);if(0===(K&2)||a!==R)a===R&&(0===(K&2)&&(rk|=c),4===T&&Dk(a,Z)),Ek(a,d),1===c&&0===K&&0===(b.mode&1)&&(Hj=B()+500,fg&&jg())}\nfunction Ek(a,b){var c=a.callbackNode;wc(a,b);var d=uc(a,a===R?Z:0);if(0===d)null!==c&&bc(c),a.callbackNode=null,a.callbackPriority=0;else if(b=d&-d,a.callbackPriority!==b){null!=c&&bc(c);if(1===b)0===a.tag?ig(Fk.bind(null,a)):hg(Fk.bind(null,a)),Jf(function(){0===(K&6)&&jg()}),c=null;else{switch(Dc(d)){case 1:c=fc;break;case 4:c=gc;break;case 16:c=hc;break;case 536870912:c=jc;break;default:c=hc}c=Gk(c,Hk.bind(null,a))}a.callbackPriority=b;a.callbackNode=c}}\nfunction Hk(a,b){Bk=-1;Ck=0;if(0!==(K&6))throw Error(p(327));var c=a.callbackNode;if(Ik()&&a.callbackNode!==c)return null;var d=uc(a,a===R?Z:0);if(0===d)return null;if(0!==(d&30)||0!==(d&a.expiredLanes)||b)b=Jk(a,d);else{b=d;var e=K;K|=2;var f=Kk();if(R!==a||Z!==b)vk=null,Hj=B()+500,Lk(a,b);do try{Mk();break}catch(h){Nk(a,h)}while(1);Qg();nk.current=f;K=e;null!==Y?b=0:(R=null,Z=0,b=T)}if(0!==b){2===b&&(e=xc(a),0!==e&&(d=e,b=Ok(a,e)));if(1===b)throw c=qk,Lk(a,0),Dk(a,d),Ek(a,B()),c;if(6===b)Dk(a,d);\nelse{e=a.current.alternate;if(0===(d&30)&&!Pk(e)&&(b=Jk(a,d),2===b&&(f=xc(a),0!==f&&(d=f,b=Ok(a,f))),1===b))throw c=qk,Lk(a,0),Dk(a,d),Ek(a,B()),c;a.finishedWork=e;a.finishedLanes=d;switch(b){case 0:case 1:throw Error(p(345));case 2:Qk(a,uk,vk);break;case 3:Dk(a,d);if((d&130023424)===d&&(b=gk+500-B(),10<b)){if(0!==uc(a,0))break;e=a.suspendedLanes;if((e&d)!==d){L();a.pingedLanes|=a.suspendedLanes&e;break}a.timeoutHandle=Ff(Qk.bind(null,a,uk,vk),b);break}Qk(a,uk,vk);break;case 4:Dk(a,d);if((d&4194240)===\nd)break;b=a.eventTimes;for(e=-1;0<d;){var g=31-oc(d);f=1<<g;g=b[g];g>e&&(e=g);d&=~f}d=e;d=B()-d;d=(120>d?120:480>d?480:1080>d?1080:1920>d?1920:3E3>d?3E3:4320>d?4320:1960*mk(d/1960))-d;if(10<d){a.timeoutHandle=Ff(Qk.bind(null,a,uk,vk),d);break}Qk(a,uk,vk);break;case 5:Qk(a,uk,vk);break;default:throw Error(p(329));}}}Ek(a,B());return a.callbackNode===c?Hk.bind(null,a):null}\nfunction Ok(a,b){var c=tk;a.current.memoizedState.isDehydrated&&(Lk(a,b).flags|=256);a=Jk(a,b);2!==a&&(b=uk,uk=c,null!==b&&Gj(b));return a}function Gj(a){null===uk?uk=a:uk.push.apply(uk,a)}\nfunction Pk(a){for(var b=a;;){if(b.flags&16384){var c=b.updateQueue;if(null!==c&&(c=c.stores,null!==c))for(var d=0;d<c.length;d++){var e=c[d],f=e.getSnapshot;e=e.value;try{if(!He(f(),e))return!1}catch(g){return!1}}}c=b.child;if(b.subtreeFlags&16384&&null!==c)c.return=b,b=c;else{if(b===a)break;for(;null===b.sibling;){if(null===b.return||b.return===a)return!0;b=b.return}b.sibling.return=b.return;b=b.sibling}}return!0}\nfunction Dk(a,b){b&=~sk;b&=~rk;a.suspendedLanes|=b;a.pingedLanes&=~b;for(a=a.expirationTimes;0<b;){var c=31-oc(b),d=1<<c;a[c]=-1;b&=~d}}function Fk(a){if(0!==(K&6))throw Error(p(327));Ik();var b=uc(a,0);if(0===(b&1))return Ek(a,B()),null;var c=Jk(a,b);if(0!==a.tag&&2===c){var d=xc(a);0!==d&&(b=d,c=Ok(a,d))}if(1===c)throw c=qk,Lk(a,0),Dk(a,b),Ek(a,B()),c;if(6===c)throw Error(p(345));a.finishedWork=a.current.alternate;a.finishedLanes=b;Qk(a,uk,vk);Ek(a,B());return null}\nfunction Rk(a,b){var c=K;K|=1;try{return a(b)}finally{K=c,0===K&&(Hj=B()+500,fg&&jg())}}function Sk(a){null!==xk&&0===xk.tag&&0===(K&6)&&Ik();var b=K;K|=1;var c=pk.transition,d=C;try{if(pk.transition=null,C=1,a)return a()}finally{C=d,pk.transition=c,K=b,0===(K&6)&&jg()}}function Ij(){gj=fj.current;E(fj)}\nfunction Lk(a,b){a.finishedWork=null;a.finishedLanes=0;var c=a.timeoutHandle;-1!==c&&(a.timeoutHandle=-1,Gf(c));if(null!==Y)for(c=Y.return;null!==c;){var d=c;wg(d);switch(d.tag){case 1:d=d.type.childContextTypes;null!==d&&void 0!==d&&$f();break;case 3:Jh();E(Wf);E(H);Oh();break;case 5:Lh(d);break;case 4:Jh();break;case 13:E(M);break;case 19:E(M);break;case 10:Rg(d.type._context);break;case 22:case 23:Ij()}c=c.return}R=a;Y=a=wh(a.current,null);Z=gj=b;T=0;qk=null;sk=rk=hh=0;uk=tk=null;if(null!==Wg){for(b=\n0;b<Wg.length;b++)if(c=Wg[b],d=c.interleaved,null!==d){c.interleaved=null;var e=d.next,f=c.pending;if(null!==f){var g=f.next;f.next=e;d.next=g}c.pending=d}Wg=null}return a}\nfunction Nk(a,b){do{var c=Y;try{Qg();Ph.current=ai;if(Sh){for(var d=N.memoizedState;null!==d;){var e=d.queue;null!==e&&(e.pending=null);d=d.next}Sh=!1}Rh=0;P=O=N=null;Th=!1;Uh=0;ok.current=null;if(null===c||null===c.return){T=1;qk=b;Y=null;break}a:{var f=a,g=c.return,h=c,k=b;b=Z;h.flags|=32768;if(null!==k&&\"object\"===typeof k&&\"function\"===typeof k.then){var l=k,m=h,q=m.tag;if(0===(m.mode&1)&&(0===q||11===q||15===q)){var r=m.alternate;r?(m.updateQueue=r.updateQueue,m.memoizedState=r.memoizedState,\nm.lanes=r.lanes):(m.updateQueue=null,m.memoizedState=null)}var y=Vi(g);if(null!==y){y.flags&=-257;Wi(y,g,h,f,b);y.mode&1&&Ti(f,l,b);b=y;k=l;var n=b.updateQueue;if(null===n){var t=new Set;t.add(k);b.updateQueue=t}else n.add(k);break a}else{if(0===(b&1)){Ti(f,l,b);uj();break a}k=Error(p(426))}}else if(I&&h.mode&1){var J=Vi(g);if(null!==J){0===(J.flags&65536)&&(J.flags|=256);Wi(J,g,h,f,b);Jg(Ki(k,h));break a}}f=k=Ki(k,h);4!==T&&(T=2);null===tk?tk=[f]:tk.push(f);f=g;do{switch(f.tag){case 3:f.flags|=65536;\nb&=-b;f.lanes|=b;var x=Oi(f,k,b);fh(f,x);break a;case 1:h=k;var w=f.type,u=f.stateNode;if(0===(f.flags&128)&&(\"function\"===typeof w.getDerivedStateFromError||null!==u&&\"function\"===typeof u.componentDidCatch&&(null===Si||!Si.has(u)))){f.flags|=65536;b&=-b;f.lanes|=b;var F=Ri(f,h,b);fh(f,F);break a}}f=f.return}while(null!==f)}Tk(c)}catch(na){b=na;Y===c&&null!==c&&(Y=c=c.return);continue}break}while(1)}function Kk(){var a=nk.current;nk.current=ai;return null===a?ai:a}\nfunction uj(){if(0===T||3===T||2===T)T=4;null===R||0===(hh&268435455)&&0===(rk&268435455)||Dk(R,Z)}function Jk(a,b){var c=K;K|=2;var d=Kk();if(R!==a||Z!==b)vk=null,Lk(a,b);do try{Uk();break}catch(e){Nk(a,e)}while(1);Qg();K=c;nk.current=d;if(null!==Y)throw Error(p(261));R=null;Z=0;return T}function Uk(){for(;null!==Y;)Vk(Y)}function Mk(){for(;null!==Y&&!cc();)Vk(Y)}function Vk(a){var b=Wk(a.alternate,a,gj);a.memoizedProps=a.pendingProps;null===b?Tk(a):Y=b;ok.current=null}\nfunction Tk(a){var b=a;do{var c=b.alternate;a=b.return;if(0===(b.flags&32768)){if(c=Fj(c,b,gj),null!==c){Y=c;return}}else{c=Jj(c,b);if(null!==c){c.flags&=32767;Y=c;return}if(null!==a)a.flags|=32768,a.subtreeFlags=0,a.deletions=null;else{T=6;Y=null;return}}b=b.sibling;if(null!==b){Y=b;return}Y=b=a}while(null!==b);0===T&&(T=5)}function Qk(a,b,c){var d=C,e=pk.transition;try{pk.transition=null,C=1,Xk(a,b,c,d)}finally{pk.transition=e,C=d}return null}\nfunction Xk(a,b,c,d){do Ik();while(null!==xk);if(0!==(K&6))throw Error(p(327));c=a.finishedWork;var e=a.finishedLanes;if(null===c)return null;a.finishedWork=null;a.finishedLanes=0;if(c===a.current)throw Error(p(177));a.callbackNode=null;a.callbackPriority=0;var f=c.lanes|c.childLanes;Bc(a,f);a===R&&(Y=R=null,Z=0);0===(c.subtreeFlags&2064)&&0===(c.flags&2064)||wk||(wk=!0,Gk(hc,function(){Ik();return null}));f=0!==(c.flags&15990);if(0!==(c.subtreeFlags&15990)||f){f=pk.transition;pk.transition=null;\nvar g=C;C=1;var h=K;K|=4;ok.current=null;Pj(a,c);ek(c,a);Oe(Df);dd=!!Cf;Df=Cf=null;a.current=c;ik(c,a,e);dc();K=h;C=g;pk.transition=f}else a.current=c;wk&&(wk=!1,xk=a,yk=e);f=a.pendingLanes;0===f&&(Si=null);mc(c.stateNode,d);Ek(a,B());if(null!==b)for(d=a.onRecoverableError,c=0;c<b.length;c++)e=b[c],d(e.value,{componentStack:e.stack,digest:e.digest});if(Pi)throw Pi=!1,a=Qi,Qi=null,a;0!==(yk&1)&&0!==a.tag&&Ik();f=a.pendingLanes;0!==(f&1)?a===Ak?zk++:(zk=0,Ak=a):zk=0;jg();return null}\nfunction Ik(){if(null!==xk){var a=Dc(yk),b=pk.transition,c=C;try{pk.transition=null;C=16>a?16:a;if(null===xk)var d=!1;else{a=xk;xk=null;yk=0;if(0!==(K&6))throw Error(p(331));var e=K;K|=4;for(V=a.current;null!==V;){var f=V,g=f.child;if(0!==(V.flags&16)){var h=f.deletions;if(null!==h){for(var k=0;k<h.length;k++){var l=h[k];for(V=l;null!==V;){var m=V;switch(m.tag){case 0:case 11:case 15:Qj(8,m,f)}var q=m.child;if(null!==q)q.return=m,V=q;else for(;null!==V;){m=V;var r=m.sibling,y=m.return;Tj(m);if(m===\nl){V=null;break}if(null!==r){r.return=y;V=r;break}V=y}}}var n=f.alternate;if(null!==n){var t=n.child;if(null!==t){n.child=null;do{var J=t.sibling;t.sibling=null;t=J}while(null!==t)}}V=f}}if(0!==(f.subtreeFlags&2064)&&null!==g)g.return=f,V=g;else b:for(;null!==V;){f=V;if(0!==(f.flags&2048))switch(f.tag){case 0:case 11:case 15:Qj(9,f,f.return)}var x=f.sibling;if(null!==x){x.return=f.return;V=x;break b}V=f.return}}var w=a.current;for(V=w;null!==V;){g=V;var u=g.child;if(0!==(g.subtreeFlags&2064)&&null!==\nu)u.return=g,V=u;else b:for(g=w;null!==V;){h=V;if(0!==(h.flags&2048))try{switch(h.tag){case 0:case 11:case 15:Rj(9,h)}}catch(na){W(h,h.return,na)}if(h===g){V=null;break b}var F=h.sibling;if(null!==F){F.return=h.return;V=F;break b}V=h.return}}K=e;jg();if(lc&&\"function\"===typeof lc.onPostCommitFiberRoot)try{lc.onPostCommitFiberRoot(kc,a)}catch(na){}d=!0}return d}finally{C=c,pk.transition=b}}return!1}function Yk(a,b,c){b=Ki(c,b);b=Oi(a,b,1);a=dh(a,b,1);b=L();null!==a&&(Ac(a,1,b),Ek(a,b))}\nfunction W(a,b,c){if(3===a.tag)Yk(a,a,c);else for(;null!==b;){if(3===b.tag){Yk(b,a,c);break}else if(1===b.tag){var d=b.stateNode;if(\"function\"===typeof b.type.getDerivedStateFromError||\"function\"===typeof d.componentDidCatch&&(null===Si||!Si.has(d))){a=Ki(c,a);a=Ri(b,a,1);b=dh(b,a,1);a=L();null!==b&&(Ac(b,1,a),Ek(b,a));break}}b=b.return}}\nfunction Ui(a,b,c){var d=a.pingCache;null!==d&&d.delete(b);b=L();a.pingedLanes|=a.suspendedLanes&c;R===a&&(Z&c)===c&&(4===T||3===T&&(Z&130023424)===Z&&500>B()-gk?Lk(a,0):sk|=c);Ek(a,b)}function Zk(a,b){0===b&&(0===(a.mode&1)?b=1:(b=sc,sc<<=1,0===(sc&130023424)&&(sc=4194304)));var c=L();a=Zg(a,b);null!==a&&(Ac(a,b,c),Ek(a,c))}function vj(a){var b=a.memoizedState,c=0;null!==b&&(c=b.retryLane);Zk(a,c)}\nfunction ck(a,b){var c=0;switch(a.tag){case 13:var d=a.stateNode;var e=a.memoizedState;null!==e&&(c=e.retryLane);break;case 19:d=a.stateNode;break;default:throw Error(p(314));}null!==d&&d.delete(b);Zk(a,c)}var Wk;\nWk=function(a,b,c){if(null!==a)if(a.memoizedProps!==b.pendingProps||Wf.current)Ug=!0;else{if(0===(a.lanes&c)&&0===(b.flags&128))return Ug=!1,zj(a,b,c);Ug=0!==(a.flags&131072)?!0:!1}else Ug=!1,I&&0!==(b.flags&1048576)&&ug(b,ng,b.index);b.lanes=0;switch(b.tag){case 2:var d=b.type;jj(a,b);a=b.pendingProps;var e=Yf(b,H.current);Tg(b,c);e=Xh(null,b,d,a,e,c);var f=bi();b.flags|=1;\"object\"===typeof e&&null!==e&&\"function\"===typeof e.render&&void 0===e.$$typeof?(b.tag=1,b.memoizedState=null,b.updateQueue=\nnull,Zf(d)?(f=!0,cg(b)):f=!1,b.memoizedState=null!==e.state&&void 0!==e.state?e.state:null,ah(b),e.updater=nh,b.stateNode=e,e._reactInternals=b,rh(b,d,a,c),b=kj(null,b,d,!0,f,c)):(b.tag=0,I&&f&&vg(b),Yi(null,b,e,c),b=b.child);return b;case 16:d=b.elementType;a:{jj(a,b);a=b.pendingProps;e=d._init;d=e(d._payload);b.type=d;e=b.tag=$k(d);a=Lg(d,a);switch(e){case 0:b=dj(null,b,d,a,c);break a;case 1:b=ij(null,b,d,a,c);break a;case 11:b=Zi(null,b,d,a,c);break a;case 14:b=aj(null,b,d,Lg(d.type,a),c);break a}throw Error(p(306,\nd,\"\"));}return b;case 0:return d=b.type,e=b.pendingProps,e=b.elementType===d?e:Lg(d,e),dj(a,b,d,e,c);case 1:return d=b.type,e=b.pendingProps,e=b.elementType===d?e:Lg(d,e),ij(a,b,d,e,c);case 3:a:{lj(b);if(null===a)throw Error(p(387));d=b.pendingProps;f=b.memoizedState;e=f.element;bh(a,b);gh(b,d,null,c);var g=b.memoizedState;d=g.element;if(f.isDehydrated)if(f={element:d,isDehydrated:!1,cache:g.cache,pendingSuspenseBoundaries:g.pendingSuspenseBoundaries,transitions:g.transitions},b.updateQueue.baseState=\nf,b.memoizedState=f,b.flags&256){e=Ki(Error(p(423)),b);b=mj(a,b,d,c,e);break a}else if(d!==e){e=Ki(Error(p(424)),b);b=mj(a,b,d,c,e);break a}else for(yg=Lf(b.stateNode.containerInfo.firstChild),xg=b,I=!0,zg=null,c=Ch(b,null,d,c),b.child=c;c;)c.flags=c.flags&-3|4096,c=c.sibling;else{Ig();if(d===e){b=$i(a,b,c);break a}Yi(a,b,d,c)}b=b.child}return b;case 5:return Kh(b),null===a&&Eg(b),d=b.type,e=b.pendingProps,f=null!==a?a.memoizedProps:null,g=e.children,Ef(d,e)?g=null:null!==f&&Ef(d,f)&&(b.flags|=32),\nhj(a,b),Yi(a,b,g,c),b.child;case 6:return null===a&&Eg(b),null;case 13:return pj(a,b,c);case 4:return Ih(b,b.stateNode.containerInfo),d=b.pendingProps,null===a?b.child=Bh(b,null,d,c):Yi(a,b,d,c),b.child;case 11:return d=b.type,e=b.pendingProps,e=b.elementType===d?e:Lg(d,e),Zi(a,b,d,e,c);case 7:return Yi(a,b,b.pendingProps,c),b.child;case 8:return Yi(a,b,b.pendingProps.children,c),b.child;case 12:return Yi(a,b,b.pendingProps.children,c),b.child;case 10:a:{d=b.type._context;e=b.pendingProps;f=b.memoizedProps;\ng=e.value;G(Mg,d._currentValue);d._currentValue=g;if(null!==f)if(He(f.value,g)){if(f.children===e.children&&!Wf.current){b=$i(a,b,c);break a}}else for(f=b.child,null!==f&&(f.return=b);null!==f;){var h=f.dependencies;if(null!==h){g=f.child;for(var k=h.firstContext;null!==k;){if(k.context===d){if(1===f.tag){k=ch(-1,c&-c);k.tag=2;var l=f.updateQueue;if(null!==l){l=l.shared;var m=l.pending;null===m?k.next=k:(k.next=m.next,m.next=k);l.pending=k}}f.lanes|=c;k=f.alternate;null!==k&&(k.lanes|=c);Sg(f.return,\nc,b);h.lanes|=c;break}k=k.next}}else if(10===f.tag)g=f.type===b.type?null:f.child;else if(18===f.tag){g=f.return;if(null===g)throw Error(p(341));g.lanes|=c;h=g.alternate;null!==h&&(h.lanes|=c);Sg(g,c,b);g=f.sibling}else g=f.child;if(null!==g)g.return=f;else for(g=f;null!==g;){if(g===b){g=null;break}f=g.sibling;if(null!==f){f.return=g.return;g=f;break}g=g.return}f=g}Yi(a,b,e.children,c);b=b.child}return b;case 9:return e=b.type,d=b.pendingProps.children,Tg(b,c),e=Vg(e),d=d(e),b.flags|=1,Yi(a,b,d,c),\nb.child;case 14:return d=b.type,e=Lg(d,b.pendingProps),e=Lg(d.type,e),aj(a,b,d,e,c);case 15:return cj(a,b,b.type,b.pendingProps,c);case 17:return d=b.type,e=b.pendingProps,e=b.elementType===d?e:Lg(d,e),jj(a,b),b.tag=1,Zf(d)?(a=!0,cg(b)):a=!1,Tg(b,c),ph(b,d,e),rh(b,d,e,c),kj(null,b,d,!0,a,c);case 19:return yj(a,b,c);case 22:return ej(a,b,c)}throw Error(p(156,b.tag));};function Gk(a,b){return ac(a,b)}\nfunction al(a,b,c,d){this.tag=a;this.key=c;this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null;this.index=0;this.ref=null;this.pendingProps=b;this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null;this.mode=d;this.subtreeFlags=this.flags=0;this.deletions=null;this.childLanes=this.lanes=0;this.alternate=null}function Bg(a,b,c,d){return new al(a,b,c,d)}function bj(a){a=a.prototype;return!(!a||!a.isReactComponent)}\nfunction $k(a){if(\"function\"===typeof a)return bj(a)?1:0;if(void 0!==a&&null!==a){a=a.$$typeof;if(a===Da)return 11;if(a===Ga)return 14}return 2}\nfunction wh(a,b){var c=a.alternate;null===c?(c=Bg(a.tag,b,a.key,a.mode),c.elementType=a.elementType,c.type=a.type,c.stateNode=a.stateNode,c.alternate=a,a.alternate=c):(c.pendingProps=b,c.type=a.type,c.flags=0,c.subtreeFlags=0,c.deletions=null);c.flags=a.flags&14680064;c.childLanes=a.childLanes;c.lanes=a.lanes;c.child=a.child;c.memoizedProps=a.memoizedProps;c.memoizedState=a.memoizedState;c.updateQueue=a.updateQueue;b=a.dependencies;c.dependencies=null===b?null:{lanes:b.lanes,firstContext:b.firstContext};\nc.sibling=a.sibling;c.index=a.index;c.ref=a.ref;return c}\nfunction yh(a,b,c,d,e,f){var g=2;d=a;if(\"function\"===typeof a)bj(a)&&(g=1);else if(\"string\"===typeof a)g=5;else a:switch(a){case ya:return Ah(c.children,e,f,b);case za:g=8;e|=8;break;case Aa:return a=Bg(12,c,b,e|2),a.elementType=Aa,a.lanes=f,a;case Ea:return a=Bg(13,c,b,e),a.elementType=Ea,a.lanes=f,a;case Fa:return a=Bg(19,c,b,e),a.elementType=Fa,a.lanes=f,a;case Ia:return qj(c,e,f,b);default:if(\"object\"===typeof a&&null!==a)switch(a.$$typeof){case Ba:g=10;break a;case Ca:g=9;break a;case Da:g=11;\nbreak a;case Ga:g=14;break a;case Ha:g=16;d=null;break a}throw Error(p(130,null==a?a:typeof a,\"\"));}b=Bg(g,c,b,e);b.elementType=a;b.type=d;b.lanes=f;return b}function Ah(a,b,c,d){a=Bg(7,a,d,b);a.lanes=c;return a}function qj(a,b,c,d){a=Bg(22,a,d,b);a.elementType=Ia;a.lanes=c;a.stateNode={isHidden:!1};return a}function xh(a,b,c){a=Bg(6,a,null,b);a.lanes=c;return a}\nfunction zh(a,b,c){b=Bg(4,null!==a.children?a.children:[],a.key,b);b.lanes=c;b.stateNode={containerInfo:a.containerInfo,pendingChildren:null,implementation:a.implementation};return b}\nfunction bl(a,b,c,d,e){this.tag=b;this.containerInfo=a;this.finishedWork=this.pingCache=this.current=this.pendingChildren=null;this.timeoutHandle=-1;this.callbackNode=this.pendingContext=this.context=null;this.callbackPriority=0;this.eventTimes=zc(0);this.expirationTimes=zc(-1);this.entangledLanes=this.finishedLanes=this.mutableReadLanes=this.expiredLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0;this.entanglements=zc(0);this.identifierPrefix=d;this.onRecoverableError=e;this.mutableSourceEagerHydrationData=\nnull}function cl(a,b,c,d,e,f,g,h,k){a=new bl(a,b,c,h,k);1===b?(b=1,!0===f&&(b|=8)):b=0;f=Bg(3,null,null,b);a.current=f;f.stateNode=a;f.memoizedState={element:d,isDehydrated:c,cache:null,transitions:null,pendingSuspenseBoundaries:null};ah(f);return a}function dl(a,b,c){var d=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:wa,key:null==d?null:\"\"+d,children:a,containerInfo:b,implementation:c}}\nfunction el(a){if(!a)return Vf;a=a._reactInternals;a:{if(Vb(a)!==a||1!==a.tag)throw Error(p(170));var b=a;do{switch(b.tag){case 3:b=b.stateNode.context;break a;case 1:if(Zf(b.type)){b=b.stateNode.__reactInternalMemoizedMergedChildContext;break a}}b=b.return}while(null!==b);throw Error(p(171));}if(1===a.tag){var c=a.type;if(Zf(c))return bg(a,c,b)}return b}\nfunction fl(a,b,c,d,e,f,g,h,k){a=cl(c,d,!0,a,e,f,g,h,k);a.context=el(null);c=a.current;d=L();e=lh(c);f=ch(d,e);f.callback=void 0!==b&&null!==b?b:null;dh(c,f,e);a.current.lanes=e;Ac(a,e,d);Ek(a,d);return a}function gl(a,b,c,d){var e=b.current,f=L(),g=lh(e);c=el(c);null===b.context?b.context=c:b.pendingContext=c;b=ch(f,g);b.payload={element:a};d=void 0===d?null:d;null!==d&&(b.callback=d);a=dh(e,b,g);null!==a&&(mh(a,e,g,f),eh(a,e,g));return g}\nfunction hl(a){a=a.current;if(!a.child)return null;switch(a.child.tag){case 5:return a.child.stateNode;default:return a.child.stateNode}}function il(a,b){a=a.memoizedState;if(null!==a&&null!==a.dehydrated){var c=a.retryLane;a.retryLane=0!==c&&c<b?c:b}}function jl(a,b){il(a,b);(a=a.alternate)&&il(a,b)}function kl(){return null}var ll=\"function\"===typeof reportError?reportError:function(a){console.error(a)};function ml(a){this._internalRoot=a}\nnl.prototype.render=ml.prototype.render=function(a){var b=this._internalRoot;if(null===b)throw Error(p(409));gl(a,b,null,null)};nl.prototype.unmount=ml.prototype.unmount=function(){var a=this._internalRoot;if(null!==a){this._internalRoot=null;var b=a.containerInfo;Sk(function(){gl(null,a,null,null)});b[uf]=null}};function nl(a){this._internalRoot=a}\nnl.prototype.unstable_scheduleHydration=function(a){if(a){var b=Hc();a={blockedOn:null,target:a,priority:b};for(var c=0;c<Qc.length&&0!==b&&b<Qc[c].priority;c++);Qc.splice(c,0,a);0===c&&Vc(a)}};function ol(a){return!(!a||1!==a.nodeType&&9!==a.nodeType&&11!==a.nodeType)}function pl(a){return!(!a||1!==a.nodeType&&9!==a.nodeType&&11!==a.nodeType&&(8!==a.nodeType||\" react-mount-point-unstable \"!==a.nodeValue))}function ql(){}\nfunction rl(a,b,c,d,e){if(e){if(\"function\"===typeof d){var f=d;d=function(){var a=hl(g);f.call(a)}}var g=fl(b,d,a,0,null,!1,!1,\"\",ql);a._reactRootContainer=g;a[uf]=g.current;sf(8===a.nodeType?a.parentNode:a);Sk();return g}for(;e=a.lastChild;)a.removeChild(e);if(\"function\"===typeof d){var h=d;d=function(){var a=hl(k);h.call(a)}}var k=cl(a,0,!1,null,null,!1,!1,\"\",ql);a._reactRootContainer=k;a[uf]=k.current;sf(8===a.nodeType?a.parentNode:a);Sk(function(){gl(b,k,c,d)});return k}\nfunction sl(a,b,c,d,e){var f=c._reactRootContainer;if(f){var g=f;if(\"function\"===typeof e){var h=e;e=function(){var a=hl(g);h.call(a)}}gl(b,g,a,e)}else g=rl(c,b,a,e,d);return hl(g)}Ec=function(a){switch(a.tag){case 3:var b=a.stateNode;if(b.current.memoizedState.isDehydrated){var c=tc(b.pendingLanes);0!==c&&(Cc(b,c|1),Ek(b,B()),0===(K&6)&&(Hj=B()+500,jg()))}break;case 13:Sk(function(){var b=Zg(a,1);if(null!==b){var c=L();mh(b,a,1,c)}}),jl(a,1)}};\nFc=function(a){if(13===a.tag){var b=Zg(a,134217728);if(null!==b){var c=L();mh(b,a,134217728,c)}jl(a,134217728)}};Gc=function(a){if(13===a.tag){var b=lh(a),c=Zg(a,b);if(null!==c){var d=L();mh(c,a,b,d)}jl(a,b)}};Hc=function(){return C};Ic=function(a,b){var c=C;try{return C=a,b()}finally{C=c}};\nyb=function(a,b,c){switch(b){case \"input\":bb(a,c);b=c.name;if(\"radio\"===c.type&&null!=b){for(c=a;c.parentNode;)c=c.parentNode;c=c.querySelectorAll(\"input[name=\"+JSON.stringify(\"\"+b)+'][type=\"radio\"]');for(b=0;b<c.length;b++){var d=c[b];if(d!==a&&d.form===a.form){var e=Db(d);if(!e)throw Error(p(90));Wa(d);bb(d,e)}}}break;case \"textarea\":ib(a,c);break;case \"select\":b=c.value,null!=b&&fb(a,!!c.multiple,b,!1)}};Gb=Rk;Hb=Sk;\nvar tl={usingClientEntryPoint:!1,Events:[Cb,ue,Db,Eb,Fb,Rk]},ul={findFiberByHostInstance:Wc,bundleType:0,version:\"18.2.0\",rendererPackageName:\"react-dom\"};\nvar vl={bundleType:ul.bundleType,version:ul.version,rendererPackageName:ul.rendererPackageName,rendererConfig:ul.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setErrorHandler:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:ua.ReactCurrentDispatcher,findHostInstanceByFiber:function(a){a=Zb(a);return null===a?null:a.stateNode},findFiberByHostInstance:ul.findFiberByHostInstance||\nkl,findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null,reconcilerVersion:\"18.2.0-next-9e3b772b8-20220608\"};if(\"undefined\"!==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__){var wl=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!wl.isDisabled&&wl.supportsFiber)try{kc=wl.inject(vl),lc=wl}catch(a){}}exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=tl;\nexports.createPortal=function(a,b){var c=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!ol(b))throw Error(p(200));return dl(a,b,null,c)};exports.createRoot=function(a,b){if(!ol(a))throw Error(p(299));var c=!1,d=\"\",e=ll;null!==b&&void 0!==b&&(!0===b.unstable_strictMode&&(c=!0),void 0!==b.identifierPrefix&&(d=b.identifierPrefix),void 0!==b.onRecoverableError&&(e=b.onRecoverableError));b=cl(a,1,!1,null,null,c,!1,d,e);a[uf]=b.current;sf(8===a.nodeType?a.parentNode:a);return new ml(b)};\nexports.findDOMNode=function(a){if(null==a)return null;if(1===a.nodeType)return a;var b=a._reactInternals;if(void 0===b){if(\"function\"===typeof a.render)throw Error(p(188));a=Object.keys(a).join(\",\");throw Error(p(268,a));}a=Zb(b);a=null===a?null:a.stateNode;return a};exports.flushSync=function(a){return Sk(a)};exports.hydrate=function(a,b,c){if(!pl(b))throw Error(p(200));return sl(null,a,b,!0,c)};\nexports.hydrateRoot=function(a,b,c){if(!ol(a))throw Error(p(405));var d=null!=c&&c.hydratedSources||null,e=!1,f=\"\",g=ll;null!==c&&void 0!==c&&(!0===c.unstable_strictMode&&(e=!0),void 0!==c.identifierPrefix&&(f=c.identifierPrefix),void 0!==c.onRecoverableError&&(g=c.onRecoverableError));b=fl(b,null,a,1,null!=c?c:null,e,!1,f,g);a[uf]=b.current;sf(a);if(d)for(a=0;a<d.length;a++)c=d[a],e=c._getVersion,e=e(c._source),null==b.mutableSourceEagerHydrationData?b.mutableSourceEagerHydrationData=[c,e]:b.mutableSourceEagerHydrationData.push(c,\ne);return new nl(b)};exports.render=function(a,b,c){if(!pl(b))throw Error(p(200));return sl(null,a,b,!1,c)};exports.unmountComponentAtNode=function(a){if(!pl(a))throw Error(p(40));return a._reactRootContainer?(Sk(function(){sl(null,null,a,!1,function(){a._reactRootContainer=null;a[uf]=null})}),!0):!1};exports.unstable_batchedUpdates=Rk;\nexports.unstable_renderSubtreeIntoContainer=function(a,b,c,d){if(!pl(c))throw Error(p(200));if(null==a||void 0===a._reactInternals)throw Error(p(38));return sl(a,b,c,!1,d)};exports.version=\"18.2.0-next-9e3b772b8-20220608\";\n","'use strict';\n\nvar m = require('react-dom');\nif (process.env.NODE_ENV === 'production') {\n  exports.createRoot = m.createRoot;\n  exports.hydrateRoot = m.hydrateRoot;\n} else {\n  var i = m.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;\n  exports.createRoot = function(c, o) {\n    i.usingClientEntryPoint = true;\n    try {\n      return m.createRoot(c, o);\n    } finally {\n      i.usingClientEntryPoint = false;\n    }\n  };\n  exports.hydrateRoot = function(c, h, o) {\n    i.usingClientEntryPoint = true;\n    try {\n      return m.hydrateRoot(c, h, o);\n    } finally {\n      i.usingClientEntryPoint = false;\n    }\n  };\n}\n","'use strict';\n\nfunction checkDCE() {\n  /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */\n  if (\n    typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined' ||\n    typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE !== 'function'\n  ) {\n    return;\n  }\n  if (process.env.NODE_ENV !== 'production') {\n    // This branch is unreachable because this function is only called\n    // in production, but the condition is true only in development.\n    // Therefore if the branch is still here, dead code elimination wasn't\n    // properly applied.\n    // Don't change the message. React DevTools relies on it. Also make sure\n    // this message doesn't occur elsewhere in this function, or it will cause\n    // a false positive.\n    throw new Error('^_^');\n  }\n  try {\n    // Verify that the code above has been dead code eliminated (DCE'd).\n    __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(checkDCE);\n  } catch (err) {\n    // DevTools shouldn't crash React, no matter what.\n    // We should still report in case we break this code.\n    console.error(err);\n  }\n}\n\nif (process.env.NODE_ENV === 'production') {\n  // DCE check should happen before ReactDOM bundle executes so that\n  // DevTools can report bad minification during injection.\n  checkDCE();\n  module.exports = require('./cjs/react-dom.production.min.js');\n} else {\n  module.exports = require('./cjs/react-dom.development.js');\n}\n","\"use strict\";\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") { return { \"default\": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj[\"default\"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction FPSStats(_ref) {\n  var _ref$top = _ref.top,\n      top = _ref$top === void 0 ? 0 : _ref$top,\n      _ref$right = _ref.right,\n      right = _ref$right === void 0 ? 'auto' : _ref$right,\n      _ref$bottom = _ref.bottom,\n      bottom = _ref$bottom === void 0 ? 'auto' : _ref$bottom,\n      _ref$left = _ref.left,\n      left = _ref$left === void 0 ? 0 : _ref$left,\n      _ref$graphHeight = _ref.graphHeight,\n      graphHeight = _ref$graphHeight === void 0 ? 29 : _ref$graphHeight,\n      _ref$graphWidth = _ref.graphWidth,\n      graphWidth = _ref$graphWidth === void 0 ? 70 : _ref$graphWidth;\n\n  var _useReducer = (0, _react.useReducer)(function (state) {\n    var currentTime = Date.now();\n\n    if (currentTime > state.prevTime + 1000) {\n      var nextFPS = [].concat(_toConsumableArray(new Array(Math.floor((currentTime - state.prevTime - 1000) / 1000)).fill(0)), [Math.max(1, Math.round(state.frames * 1000 / (currentTime - state.prevTime)))]);\n      return {\n        max: Math.max.apply(Math, [state.max].concat(_toConsumableArray(nextFPS))),\n        len: Math.min(state.len + nextFPS.length, graphWidth),\n        fps: [].concat(_toConsumableArray(state.fps), _toConsumableArray(nextFPS)).slice(-graphWidth),\n        frames: 1,\n        prevTime: currentTime\n      };\n    } else {\n      return _objectSpread(_objectSpread({}, state), {}, {\n        frames: state.frames + 1\n      });\n    }\n  }, {\n    len: 0,\n    max: 0,\n    frames: 0,\n    prevTime: Date.now(),\n    fps: []\n  }),\n      _useReducer2 = _slicedToArray(_useReducer, 2),\n      state = _useReducer2[0],\n      dispatch = _useReducer2[1];\n\n  var requestRef = (0, _react.useRef)();\n\n  var tick = function tick() {\n    dispatch();\n    requestRef.current = requestAnimationFrame(tick);\n  };\n\n  (0, _react.useEffect)(function () {\n    requestRef.current = requestAnimationFrame(tick);\n    return function () {\n      return cancelAnimationFrame(requestRef.current);\n    };\n  }, []);\n  var fps = state.fps,\n      max = state.max,\n      len = state.len;\n  return /*#__PURE__*/_react[\"default\"].createElement(\"div\", {\n    style: {\n      zIndex: 999999,\n      position: 'fixed',\n      height: 46,\n      width: graphWidth + 6,\n      padding: 3,\n      backgroundColor: '#000',\n      color: '#00ffff',\n      fontSize: '9px',\n      lineHeight: '10px',\n      fontFamily: 'Helvetica, Arial, sans-serif',\n      fontWeight: 'bold',\n      boxSizing: 'border-box',\n      pointerEvents: 'none',\n      top: top,\n      right: right,\n      bottom: bottom,\n      left: left\n    }\n  }, /*#__PURE__*/_react[\"default\"].createElement(\"span\", null, fps[len - 1], \" FPS\"), /*#__PURE__*/_react[\"default\"].createElement(\"div\", {\n    style: {\n      position: 'absolute',\n      left: 3,\n      right: 3,\n      bottom: 3,\n      height: graphHeight,\n      background: '#282844',\n      boxSizing: 'border-box'\n    }\n  }, fps.map(function (frame, i) {\n    return /*#__PURE__*/_react[\"default\"].createElement(\"div\", {\n      key: \"fps-\".concat(i),\n      style: {\n        position: 'absolute',\n        bottom: 0,\n        right: \"\".concat(len - 1 - i, \"px\"),\n        height: \"\".concat(graphHeight * frame / max, \"px\"),\n        width: 1,\n        background: '#00ffff',\n        boxSizing: 'border-box'\n      }\n    });\n  })));\n}\n\nFPSStats.propTypes = {\n  top: _propTypes[\"default\"].oneOfType([_propTypes[\"default\"].string, _propTypes[\"default\"].number]),\n  right: _propTypes[\"default\"].oneOfType([_propTypes[\"default\"].string, _propTypes[\"default\"].number]),\n  bottom: _propTypes[\"default\"].oneOfType([_propTypes[\"default\"].string, _propTypes[\"default\"].number]),\n  left: _propTypes[\"default\"].oneOfType([_propTypes[\"default\"].string, _propTypes[\"default\"].number]),\n  graphHeight: _propTypes[\"default\"].oneOfType([_propTypes[\"default\"].string, _propTypes[\"default\"].number]),\n  graphWidth: _propTypes[\"default\"].oneOfType([_propTypes[\"default\"].string, _propTypes[\"default\"].number])\n};\nvar _default = FPSStats;\nexports[\"default\"] = _default;","/**\n * @license React\n * react-jsx-runtime.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n'use strict';var f=require(\"react\"),k=Symbol.for(\"react.element\"),l=Symbol.for(\"react.fragment\"),m=Object.prototype.hasOwnProperty,n=f.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,p={key:!0,ref:!0,__self:!0,__source:!0};\nfunction q(c,a,g){var b,d={},e=null,h=null;void 0!==g&&(e=\"\"+g);void 0!==a.key&&(e=\"\"+a.key);void 0!==a.ref&&(h=a.ref);for(b in a)m.call(a,b)&&!p.hasOwnProperty(b)&&(d[b]=a[b]);if(c&&c.defaultProps)for(b in a=c.defaultProps,a)void 0===d[b]&&(d[b]=a[b]);return{$$typeof:k,type:c,key:e,ref:h,props:d,_owner:n.current}}exports.Fragment=l;exports.jsx=q;exports.jsxs=q;\n","/**\n * @license React\n * react.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n'use strict';var l=Symbol.for(\"react.element\"),n=Symbol.for(\"react.portal\"),p=Symbol.for(\"react.fragment\"),q=Symbol.for(\"react.strict_mode\"),r=Symbol.for(\"react.profiler\"),t=Symbol.for(\"react.provider\"),u=Symbol.for(\"react.context\"),v=Symbol.for(\"react.forward_ref\"),w=Symbol.for(\"react.suspense\"),x=Symbol.for(\"react.memo\"),y=Symbol.for(\"react.lazy\"),z=Symbol.iterator;function A(a){if(null===a||\"object\"!==typeof a)return null;a=z&&a[z]||a[\"@@iterator\"];return\"function\"===typeof a?a:null}\nvar B={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},C=Object.assign,D={};function E(a,b,e){this.props=a;this.context=b;this.refs=D;this.updater=e||B}E.prototype.isReactComponent={};\nE.prototype.setState=function(a,b){if(\"object\"!==typeof a&&\"function\"!==typeof a&&null!=a)throw Error(\"setState(...): takes an object of state variables to update or a function which returns an object of state variables.\");this.updater.enqueueSetState(this,a,b,\"setState\")};E.prototype.forceUpdate=function(a){this.updater.enqueueForceUpdate(this,a,\"forceUpdate\")};function F(){}F.prototype=E.prototype;function G(a,b,e){this.props=a;this.context=b;this.refs=D;this.updater=e||B}var H=G.prototype=new F;\nH.constructor=G;C(H,E.prototype);H.isPureReactComponent=!0;var I=Array.isArray,J=Object.prototype.hasOwnProperty,K={current:null},L={key:!0,ref:!0,__self:!0,__source:!0};\nfunction M(a,b,e){var d,c={},k=null,h=null;if(null!=b)for(d in void 0!==b.ref&&(h=b.ref),void 0!==b.key&&(k=\"\"+b.key),b)J.call(b,d)&&!L.hasOwnProperty(d)&&(c[d]=b[d]);var g=arguments.length-2;if(1===g)c.children=e;else if(1<g){for(var f=Array(g),m=0;m<g;m++)f[m]=arguments[m+2];c.children=f}if(a&&a.defaultProps)for(d in g=a.defaultProps,g)void 0===c[d]&&(c[d]=g[d]);return{$$typeof:l,type:a,key:k,ref:h,props:c,_owner:K.current}}\nfunction N(a,b){return{$$typeof:l,type:a.type,key:b,ref:a.ref,props:a.props,_owner:a._owner}}function O(a){return\"object\"===typeof a&&null!==a&&a.$$typeof===l}function escape(a){var b={\"=\":\"=0\",\":\":\"=2\"};return\"$\"+a.replace(/[=:]/g,function(a){return b[a]})}var P=/\\/+/g;function Q(a,b){return\"object\"===typeof a&&null!==a&&null!=a.key?escape(\"\"+a.key):b.toString(36)}\nfunction R(a,b,e,d,c){var k=typeof a;if(\"undefined\"===k||\"boolean\"===k)a=null;var h=!1;if(null===a)h=!0;else switch(k){case \"string\":case \"number\":h=!0;break;case \"object\":switch(a.$$typeof){case l:case n:h=!0}}if(h)return h=a,c=c(h),a=\"\"===d?\".\"+Q(h,0):d,I(c)?(e=\"\",null!=a&&(e=a.replace(P,\"$&/\")+\"/\"),R(c,b,e,\"\",function(a){return a})):null!=c&&(O(c)&&(c=N(c,e+(!c.key||h&&h.key===c.key?\"\":(\"\"+c.key).replace(P,\"$&/\")+\"/\")+a)),b.push(c)),1;h=0;d=\"\"===d?\".\":d+\":\";if(I(a))for(var g=0;g<a.length;g++){k=\na[g];var f=d+Q(k,g);h+=R(k,b,e,f,c)}else if(f=A(a),\"function\"===typeof f)for(a=f.call(a),g=0;!(k=a.next()).done;)k=k.value,f=d+Q(k,g++),h+=R(k,b,e,f,c);else if(\"object\"===k)throw b=String(a),Error(\"Objects are not valid as a React child (found: \"+(\"[object Object]\"===b?\"object with keys {\"+Object.keys(a).join(\", \")+\"}\":b)+\"). If you meant to render a collection of children, use an array instead.\");return h}\nfunction S(a,b,e){if(null==a)return a;var d=[],c=0;R(a,d,\"\",\"\",function(a){return b.call(e,a,c++)});return d}function T(a){if(-1===a._status){var b=a._result;b=b();b.then(function(b){if(0===a._status||-1===a._status)a._status=1,a._result=b},function(b){if(0===a._status||-1===a._status)a._status=2,a._result=b});-1===a._status&&(a._status=0,a._result=b)}if(1===a._status)return a._result.default;throw a._result;}\nvar U={current:null},V={transition:null},W={ReactCurrentDispatcher:U,ReactCurrentBatchConfig:V,ReactCurrentOwner:K};exports.Children={map:S,forEach:function(a,b,e){S(a,function(){b.apply(this,arguments)},e)},count:function(a){var b=0;S(a,function(){b++});return b},toArray:function(a){return S(a,function(a){return a})||[]},only:function(a){if(!O(a))throw Error(\"React.Children.only expected to receive a single React element child.\");return a}};exports.Component=E;exports.Fragment=p;\nexports.Profiler=r;exports.PureComponent=G;exports.StrictMode=q;exports.Suspense=w;exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=W;\nexports.cloneElement=function(a,b,e){if(null===a||void 0===a)throw Error(\"React.cloneElement(...): The argument must be a React element, but you passed \"+a+\".\");var d=C({},a.props),c=a.key,k=a.ref,h=a._owner;if(null!=b){void 0!==b.ref&&(k=b.ref,h=K.current);void 0!==b.key&&(c=\"\"+b.key);if(a.type&&a.type.defaultProps)var g=a.type.defaultProps;for(f in b)J.call(b,f)&&!L.hasOwnProperty(f)&&(d[f]=void 0===b[f]&&void 0!==g?g[f]:b[f])}var f=arguments.length-2;if(1===f)d.children=e;else if(1<f){g=Array(f);\nfor(var m=0;m<f;m++)g[m]=arguments[m+2];d.children=g}return{$$typeof:l,type:a.type,key:c,ref:k,props:d,_owner:h}};exports.createContext=function(a){a={$$typeof:u,_currentValue:a,_currentValue2:a,_threadCount:0,Provider:null,Consumer:null,_defaultValue:null,_globalName:null};a.Provider={$$typeof:t,_context:a};return a.Consumer=a};exports.createElement=M;exports.createFactory=function(a){var b=M.bind(null,a);b.type=a;return b};exports.createRef=function(){return{current:null}};\nexports.forwardRef=function(a){return{$$typeof:v,render:a}};exports.isValidElement=O;exports.lazy=function(a){return{$$typeof:y,_payload:{_status:-1,_result:a},_init:T}};exports.memo=function(a,b){return{$$typeof:x,type:a,compare:void 0===b?null:b}};exports.startTransition=function(a){var b=V.transition;V.transition={};try{a()}finally{V.transition=b}};exports.unstable_act=function(){throw Error(\"act(...) is not supported in production builds of React.\");};\nexports.useCallback=function(a,b){return U.current.useCallback(a,b)};exports.useContext=function(a){return U.current.useContext(a)};exports.useDebugValue=function(){};exports.useDeferredValue=function(a){return U.current.useDeferredValue(a)};exports.useEffect=function(a,b){return U.current.useEffect(a,b)};exports.useId=function(){return U.current.useId()};exports.useImperativeHandle=function(a,b,e){return U.current.useImperativeHandle(a,b,e)};\nexports.useInsertionEffect=function(a,b){return U.current.useInsertionEffect(a,b)};exports.useLayoutEffect=function(a,b){return U.current.useLayoutEffect(a,b)};exports.useMemo=function(a,b){return U.current.useMemo(a,b)};exports.useReducer=function(a,b,e){return U.current.useReducer(a,b,e)};exports.useRef=function(a){return U.current.useRef(a)};exports.useState=function(a){return U.current.useState(a)};exports.useSyncExternalStore=function(a,b,e){return U.current.useSyncExternalStore(a,b,e)};\nexports.useTransition=function(){return U.current.useTransition()};exports.version=\"18.2.0\";\n","'use strict';\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./cjs/react.production.min.js');\n} else {\n  module.exports = require('./cjs/react.development.js');\n}\n","'use strict';\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./cjs/react-jsx-runtime.production.min.js');\n} else {\n  module.exports = require('./cjs/react-jsx-runtime.development.js');\n}\n","/**\n * @license React\n * scheduler.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n'use strict';function f(a,b){var c=a.length;a.push(b);a:for(;0<c;){var d=c-1>>>1,e=a[d];if(0<g(e,b))a[d]=b,a[c]=e,c=d;else break a}}function h(a){return 0===a.length?null:a[0]}function k(a){if(0===a.length)return null;var b=a[0],c=a.pop();if(c!==b){a[0]=c;a:for(var d=0,e=a.length,w=e>>>1;d<w;){var m=2*(d+1)-1,C=a[m],n=m+1,x=a[n];if(0>g(C,c))n<e&&0>g(x,C)?(a[d]=x,a[n]=c,d=n):(a[d]=C,a[m]=c,d=m);else if(n<e&&0>g(x,c))a[d]=x,a[n]=c,d=n;else break a}}return b}\nfunction g(a,b){var c=a.sortIndex-b.sortIndex;return 0!==c?c:a.id-b.id}if(\"object\"===typeof performance&&\"function\"===typeof performance.now){var l=performance;exports.unstable_now=function(){return l.now()}}else{var p=Date,q=p.now();exports.unstable_now=function(){return p.now()-q}}var r=[],t=[],u=1,v=null,y=3,z=!1,A=!1,B=!1,D=\"function\"===typeof setTimeout?setTimeout:null,E=\"function\"===typeof clearTimeout?clearTimeout:null,F=\"undefined\"!==typeof setImmediate?setImmediate:null;\n\"undefined\"!==typeof navigator&&void 0!==navigator.scheduling&&void 0!==navigator.scheduling.isInputPending&&navigator.scheduling.isInputPending.bind(navigator.scheduling);function G(a){for(var b=h(t);null!==b;){if(null===b.callback)k(t);else if(b.startTime<=a)k(t),b.sortIndex=b.expirationTime,f(r,b);else break;b=h(t)}}function H(a){B=!1;G(a);if(!A)if(null!==h(r))A=!0,I(J);else{var b=h(t);null!==b&&K(H,b.startTime-a)}}\nfunction J(a,b){A=!1;B&&(B=!1,E(L),L=-1);z=!0;var c=y;try{G(b);for(v=h(r);null!==v&&(!(v.expirationTime>b)||a&&!M());){var d=v.callback;if(\"function\"===typeof d){v.callback=null;y=v.priorityLevel;var e=d(v.expirationTime<=b);b=exports.unstable_now();\"function\"===typeof e?v.callback=e:v===h(r)&&k(r);G(b)}else k(r);v=h(r)}if(null!==v)var w=!0;else{var m=h(t);null!==m&&K(H,m.startTime-b);w=!1}return w}finally{v=null,y=c,z=!1}}var N=!1,O=null,L=-1,P=5,Q=-1;\nfunction M(){return exports.unstable_now()-Q<P?!1:!0}function R(){if(null!==O){var a=exports.unstable_now();Q=a;var b=!0;try{b=O(!0,a)}finally{b?S():(N=!1,O=null)}}else N=!1}var S;if(\"function\"===typeof F)S=function(){F(R)};else if(\"undefined\"!==typeof MessageChannel){var T=new MessageChannel,U=T.port2;T.port1.onmessage=R;S=function(){U.postMessage(null)}}else S=function(){D(R,0)};function I(a){O=a;N||(N=!0,S())}function K(a,b){L=D(function(){a(exports.unstable_now())},b)}\nexports.unstable_IdlePriority=5;exports.unstable_ImmediatePriority=1;exports.unstable_LowPriority=4;exports.unstable_NormalPriority=3;exports.unstable_Profiling=null;exports.unstable_UserBlockingPriority=2;exports.unstable_cancelCallback=function(a){a.callback=null};exports.unstable_continueExecution=function(){A||z||(A=!0,I(J))};\nexports.unstable_forceFrameRate=function(a){0>a||125<a?console.error(\"forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported\"):P=0<a?Math.floor(1E3/a):5};exports.unstable_getCurrentPriorityLevel=function(){return y};exports.unstable_getFirstCallbackNode=function(){return h(r)};exports.unstable_next=function(a){switch(y){case 1:case 2:case 3:var b=3;break;default:b=y}var c=y;y=b;try{return a()}finally{y=c}};exports.unstable_pauseExecution=function(){};\nexports.unstable_requestPaint=function(){};exports.unstable_runWithPriority=function(a,b){switch(a){case 1:case 2:case 3:case 4:case 5:break;default:a=3}var c=y;y=a;try{return b()}finally{y=c}};\nexports.unstable_scheduleCallback=function(a,b,c){var d=exports.unstable_now();\"object\"===typeof c&&null!==c?(c=c.delay,c=\"number\"===typeof c&&0<c?d+c:d):c=d;switch(a){case 1:var e=-1;break;case 2:e=250;break;case 5:e=1073741823;break;case 4:e=1E4;break;default:e=5E3}e=c+e;a={id:u++,callback:b,priorityLevel:a,startTime:c,expirationTime:e,sortIndex:-1};c>d?(a.sortIndex=c,f(t,a),null===h(r)&&a===h(t)&&(B?(E(L),L=-1):B=!0,K(H,c-d))):(a.sortIndex=e,f(r,a),A||z||(A=!0,I(J)));return a};\nexports.unstable_shouldYield=M;exports.unstable_wrapCallback=function(a){var b=y;return function(){var c=y;y=b;try{return a.apply(this,arguments)}finally{y=c}}};\n","'use strict';\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./cjs/scheduler.production.min.js');\n} else {\n  module.exports = require('./cjs/scheduler.development.js');\n}\n","var parse = require('inline-style-parser');\n\n/**\n * Parses inline style to object.\n *\n * @example\n * // returns { 'line-height': '42' }\n * StyleToObject('line-height: 42;');\n *\n * @param  {String}      style      - The inline style.\n * @param  {Function}    [iterator] - The iterator function.\n * @return {null|Object}\n */\nfunction StyleToObject(style, iterator) {\n  var output = null;\n  if (!style || typeof style !== 'string') {\n    return output;\n  }\n\n  var declaration;\n  var declarations = parse(style);\n  var hasIterator = typeof iterator === 'function';\n  var property;\n  var value;\n\n  for (var i = 0, len = declarations.length; i < len; i++) {\n    declaration = declarations[i];\n    property = declaration.property;\n    value = declaration.value;\n\n    if (hasIterator) {\n      iterator(property, value, declaration);\n    } else if (value) {\n      output || (output = {});\n      output[property] = value;\n    }\n  }\n\n  return output;\n}\n\nmodule.exports = StyleToObject;\nmodule.exports.default = StyleToObject; // ESM support\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.f = {};\n// This file contains only the entry chunk.\n// The chunk loading function for additional chunks\n__webpack_require__.e = function(chunkId) {\n\treturn Promise.all(Object.keys(__webpack_require__.f).reduce(function(promises, key) {\n\t\t__webpack_require__.f[key](chunkId, promises);\n\t\treturn promises;\n\t}, []));\n};","// This function allow to reference async chunks\n__webpack_require__.u = function(chunkId) {\n\t// return url for filenames based on template\n\treturn \"static/js/\" + chunkId + \".\" + \"c1112931\" + \".chunk.js\";\n};","// This function allow to reference async chunks\n__webpack_require__.miniCssF = function(chunkId) {\n\t// return url for filenames based on template\n\treturn undefined;\n};","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","var inProgress = {};\nvar dataWebpackPrefix = \"app:\";\n// loadScript function to load a script via script tag\n__webpack_require__.l = function(url, done, key, chunkId) {\n\tif(inProgress[url]) { inProgress[url].push(done); return; }\n\tvar script, needAttach;\n\tif(key !== undefined) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tfor(var i = 0; i < scripts.length; i++) {\n\t\t\tvar s = scripts[i];\n\t\t\tif(s.getAttribute(\"src\") == url || s.getAttribute(\"data-webpack\") == dataWebpackPrefix + key) { script = s; break; }\n\t\t}\n\t}\n\tif(!script) {\n\t\tneedAttach = true;\n\t\tscript = document.createElement('script');\n\n\t\tscript.charset = 'utf-8';\n\t\tscript.timeout = 120;\n\t\tif (__webpack_require__.nc) {\n\t\t\tscript.setAttribute(\"nonce\", __webpack_require__.nc);\n\t\t}\n\t\tscript.setAttribute(\"data-webpack\", dataWebpackPrefix + key);\n\n\t\tscript.src = url;\n\t}\n\tinProgress[url] = [done];\n\tvar onScriptComplete = function(prev, event) {\n\t\t// avoid mem leaks in IE.\n\t\tscript.onerror = script.onload = null;\n\t\tclearTimeout(timeout);\n\t\tvar doneFns = inProgress[url];\n\t\tdelete inProgress[url];\n\t\tscript.parentNode && script.parentNode.removeChild(script);\n\t\tdoneFns && doneFns.forEach(function(fn) { return fn(event); });\n\t\tif(prev) return prev(event);\n\t}\n\tvar timeout = setTimeout(onScriptComplete.bind(null, undefined, { type: 'timeout', target: script }), 120000);\n\tscript.onerror = onScriptComplete.bind(null, script.onerror);\n\tscript.onload = onScriptComplete.bind(null, script.onload);\n\tneedAttach && document.head.appendChild(script);\n};","// define __esModule on exports\n__webpack_require__.r = function(exports) {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","__webpack_require__.p = \"/dnamusic/\";","// no baseURI\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t179: 0\n};\n\n__webpack_require__.f.j = function(chunkId, promises) {\n\t\t// JSONP chunk loading for javascript\n\t\tvar installedChunkData = __webpack_require__.o(installedChunks, chunkId) ? installedChunks[chunkId] : undefined;\n\t\tif(installedChunkData !== 0) { // 0 means \"already installed\".\n\n\t\t\t// a Promise means \"currently loading\".\n\t\t\tif(installedChunkData) {\n\t\t\t\tpromises.push(installedChunkData[2]);\n\t\t\t} else {\n\t\t\t\tif(true) { // all chunks have JS\n\t\t\t\t\t// setup Promise in chunk cache\n\t\t\t\t\tvar promise = new Promise(function(resolve, reject) { installedChunkData = installedChunks[chunkId] = [resolve, reject]; });\n\t\t\t\t\tpromises.push(installedChunkData[2] = promise);\n\n\t\t\t\t\t// start chunk loading\n\t\t\t\t\tvar url = __webpack_require__.p + __webpack_require__.u(chunkId);\n\t\t\t\t\t// create error before stack unwound to get useful stacktrace later\n\t\t\t\t\tvar error = new Error();\n\t\t\t\t\tvar loadingEnded = function(event) {\n\t\t\t\t\t\tif(__webpack_require__.o(installedChunks, chunkId)) {\n\t\t\t\t\t\t\tinstalledChunkData = installedChunks[chunkId];\n\t\t\t\t\t\t\tif(installedChunkData !== 0) installedChunks[chunkId] = undefined;\n\t\t\t\t\t\t\tif(installedChunkData) {\n\t\t\t\t\t\t\t\tvar errorType = event && (event.type === 'load' ? 'missing' : event.type);\n\t\t\t\t\t\t\t\tvar realSrc = event && event.target && event.target.src;\n\t\t\t\t\t\t\t\terror.message = 'Loading chunk ' + chunkId + ' failed.\\n(' + errorType + ': ' + realSrc + ')';\n\t\t\t\t\t\t\t\terror.name = 'ChunkLoadError';\n\t\t\t\t\t\t\t\terror.type = errorType;\n\t\t\t\t\t\t\t\terror.request = realSrc;\n\t\t\t\t\t\t\t\tinstalledChunkData[1](error);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t\t__webpack_require__.l(url, loadingEnded, \"chunk-\" + chunkId, chunkId);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n};\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n// no on chunks loaded\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = function(parentChunkLoadingFunction, data) {\n\tvar chunkIds = data[0];\n\tvar moreModules = data[1];\n\tvar runtime = data[2];\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0;\n\tif(chunkIds.some(function(id) { return installedChunks[id] !== 0; })) {\n\t\tfor(moduleId in moreModules) {\n\t\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t\t}\n\t\t}\n\t\tif(runtime) var result = runtime(__webpack_require__);\n\t}\n\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tinstalledChunks[chunkId][0]();\n\t\t}\n\t\tinstalledChunks[chunkId] = 0;\n\t}\n\n}\n\nvar chunkLoadingGlobal = self[\"webpackChunkapp\"] = self[\"webpackChunkapp\"] || [];\nchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\nchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));","export default function _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n  return arr2;\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}","import arrayLikeToArray from \"./arrayLikeToArray.js\";\nexport default function _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);\n}","import arrayWithoutHoles from \"./arrayWithoutHoles.js\";\nimport iterableToArray from \"./iterableToArray.js\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nimport nonIterableSpread from \"./nonIterableSpread.js\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"./arrayLikeToArray.js\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","export default function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) {\n    return typeof obj;\n  } : function (obj) {\n    return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n  }, _typeof(obj);\n}","import _typeof from \"./typeof.js\";\nexport default function _regeneratorRuntime() {\n  \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */\n  _regeneratorRuntime = function _regeneratorRuntime() {\n    return exports;\n  };\n  var exports = {},\n    Op = Object.prototype,\n    hasOwn = Op.hasOwnProperty,\n    defineProperty = Object.defineProperty || function (obj, key, desc) {\n      obj[key] = desc.value;\n    },\n    $Symbol = \"function\" == typeof Symbol ? Symbol : {},\n    iteratorSymbol = $Symbol.iterator || \"@@iterator\",\n    asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\",\n    toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n  function define(obj, key, value) {\n    return Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: !0,\n      configurable: !0,\n      writable: !0\n    }), obj[key];\n  }\n  try {\n    define({}, \"\");\n  } catch (err) {\n    define = function define(obj, key, value) {\n      return obj[key] = value;\n    };\n  }\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator,\n      generator = Object.create(protoGenerator.prototype),\n      context = new Context(tryLocsList || []);\n    return defineProperty(generator, \"_invoke\", {\n      value: makeInvokeMethod(innerFn, self, context)\n    }), generator;\n  }\n  function tryCatch(fn, obj, arg) {\n    try {\n      return {\n        type: \"normal\",\n        arg: fn.call(obj, arg)\n      };\n    } catch (err) {\n      return {\n        type: \"throw\",\n        arg: err\n      };\n    }\n  }\n  exports.wrap = wrap;\n  var ContinueSentinel = {};\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n  var IteratorPrototype = {};\n  define(IteratorPrototype, iteratorSymbol, function () {\n    return this;\n  });\n  var getProto = Object.getPrototypeOf,\n    NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype);\n  var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function (method) {\n      define(prototype, method, function (arg) {\n        return this._invoke(method, arg);\n      });\n    });\n  }\n  function AsyncIterator(generator, PromiseImpl) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (\"throw\" !== record.type) {\n        var result = record.arg,\n          value = result.value;\n        return value && \"object\" == _typeof(value) && hasOwn.call(value, \"__await\") ? PromiseImpl.resolve(value.__await).then(function (value) {\n          invoke(\"next\", value, resolve, reject);\n        }, function (err) {\n          invoke(\"throw\", err, resolve, reject);\n        }) : PromiseImpl.resolve(value).then(function (unwrapped) {\n          result.value = unwrapped, resolve(result);\n        }, function (error) {\n          return invoke(\"throw\", error, resolve, reject);\n        });\n      }\n      reject(record.arg);\n    }\n    var previousPromise;\n    defineProperty(this, \"_invoke\", {\n      value: function value(method, arg) {\n        function callInvokeWithMethodAndArg() {\n          return new PromiseImpl(function (resolve, reject) {\n            invoke(method, arg, resolve, reject);\n          });\n        }\n        return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();\n      }\n    });\n  }\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = \"suspendedStart\";\n    return function (method, arg) {\n      if (\"executing\" === state) throw new Error(\"Generator is already running\");\n      if (\"completed\" === state) {\n        if (\"throw\" === method) throw arg;\n        return doneResult();\n      }\n      for (context.method = method, context.arg = arg;;) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n        if (\"next\" === context.method) context.sent = context._sent = context.arg;else if (\"throw\" === context.method) {\n          if (\"suspendedStart\" === state) throw state = \"completed\", context.arg;\n          context.dispatchException(context.arg);\n        } else \"return\" === context.method && context.abrupt(\"return\", context.arg);\n        state = \"executing\";\n        var record = tryCatch(innerFn, self, context);\n        if (\"normal\" === record.type) {\n          if (state = context.done ? \"completed\" : \"suspendedYield\", record.arg === ContinueSentinel) continue;\n          return {\n            value: record.arg,\n            done: context.done\n          };\n        }\n        \"throw\" === record.type && (state = \"completed\", context.method = \"throw\", context.arg = record.arg);\n      }\n    };\n  }\n  function maybeInvokeDelegate(delegate, context) {\n    var methodName = context.method,\n      method = delegate.iterator[methodName];\n    if (undefined === method) return context.delegate = null, \"throw\" === methodName && delegate.iterator[\"return\"] && (context.method = \"return\", context.arg = undefined, maybeInvokeDelegate(delegate, context), \"throw\" === context.method) || \"return\" !== methodName && (context.method = \"throw\", context.arg = new TypeError(\"The iterator does not provide a '\" + methodName + \"' method\")), ContinueSentinel;\n    var record = tryCatch(method, delegate.iterator, context.arg);\n    if (\"throw\" === record.type) return context.method = \"throw\", context.arg = record.arg, context.delegate = null, ContinueSentinel;\n    var info = record.arg;\n    return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, \"return\" !== context.method && (context.method = \"next\", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = \"throw\", context.arg = new TypeError(\"iterator result is not an object\"), context.delegate = null, ContinueSentinel);\n  }\n  function pushTryEntry(locs) {\n    var entry = {\n      tryLoc: locs[0]\n    };\n    1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry);\n  }\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\", delete record.arg, entry.completion = record;\n  }\n  function Context(tryLocsList) {\n    this.tryEntries = [{\n      tryLoc: \"root\"\n    }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0);\n  }\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) return iteratorMethod.call(iterable);\n      if (\"function\" == typeof iterable.next) return iterable;\n      if (!isNaN(iterable.length)) {\n        var i = -1,\n          next = function next() {\n            for (; ++i < iterable.length;) if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next;\n            return next.value = undefined, next.done = !0, next;\n          };\n        return next.next = next;\n      }\n    }\n    return {\n      next: doneResult\n    };\n  }\n  function doneResult() {\n    return {\n      value: undefined,\n      done: !0\n    };\n  }\n  return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, \"constructor\", {\n    value: GeneratorFunctionPrototype,\n    configurable: !0\n  }), defineProperty(GeneratorFunctionPrototype, \"constructor\", {\n    value: GeneratorFunction,\n    configurable: !0\n  }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"), exports.isGeneratorFunction = function (genFun) {\n    var ctor = \"function\" == typeof genFun && genFun.constructor;\n    return !!ctor && (ctor === GeneratorFunction || \"GeneratorFunction\" === (ctor.displayName || ctor.name));\n  }, exports.mark = function (genFun) {\n    return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, \"GeneratorFunction\")), genFun.prototype = Object.create(Gp), genFun;\n  }, exports.awrap = function (arg) {\n    return {\n      __await: arg\n    };\n  }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () {\n    return this;\n  }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) {\n    void 0 === PromiseImpl && (PromiseImpl = Promise);\n    var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl);\n    return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) {\n      return result.done ? result.value : iter.next();\n    });\n  }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, \"Generator\"), define(Gp, iteratorSymbol, function () {\n    return this;\n  }), define(Gp, \"toString\", function () {\n    return \"[object Generator]\";\n  }), exports.keys = function (val) {\n    var object = Object(val),\n      keys = [];\n    for (var key in object) keys.push(key);\n    return keys.reverse(), function next() {\n      for (; keys.length;) {\n        var key = keys.pop();\n        if (key in object) return next.value = key, next.done = !1, next;\n      }\n      return next.done = !0, next;\n    };\n  }, exports.values = values, Context.prototype = {\n    constructor: Context,\n    reset: function reset(skipTempReset) {\n      if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) \"t\" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined);\n    },\n    stop: function stop() {\n      this.done = !0;\n      var rootRecord = this.tryEntries[0].completion;\n      if (\"throw\" === rootRecord.type) throw rootRecord.arg;\n      return this.rval;\n    },\n    dispatchException: function dispatchException(exception) {\n      if (this.done) throw exception;\n      var context = this;\n      function handle(loc, caught) {\n        return record.type = \"throw\", record.arg = exception, context.next = loc, caught && (context.method = \"next\", context.arg = undefined), !!caught;\n      }\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i],\n          record = entry.completion;\n        if (\"root\" === entry.tryLoc) return handle(\"end\");\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\"),\n            hasFinally = hasOwn.call(entry, \"finallyLoc\");\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0);\n            if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0);\n          } else {\n            if (!hasFinally) throw new Error(\"try statement without catch or finally\");\n            if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);\n          }\n        }\n      }\n    },\n    abrupt: function abrupt(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n      finallyEntry && (\"break\" === type || \"continue\" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null);\n      var record = finallyEntry ? finallyEntry.completion : {};\n      return record.type = type, record.arg = arg, finallyEntry ? (this.method = \"next\", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record);\n    },\n    complete: function complete(record, afterLoc) {\n      if (\"throw\" === record.type) throw record.arg;\n      return \"break\" === record.type || \"continue\" === record.type ? this.next = record.arg : \"return\" === record.type ? (this.rval = this.arg = record.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel;\n    },\n    finish: function finish(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel;\n      }\n    },\n    \"catch\": function _catch(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (\"throw\" === record.type) {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n      throw new Error(\"illegal catch attempt\");\n    },\n    delegateYield: function delegateYield(iterable, resultName, nextLoc) {\n      return this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      }, \"next\" === this.method && (this.arg = undefined), ContinueSentinel;\n    }\n  }, exports;\n}","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n      args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n      _next(undefined);\n    });\n  };\n}","import _typeof from \"./typeof.js\";\nimport toPrimitive from \"./toPrimitive.js\";\nexport default function _toPropertyKey(arg) {\n  var key = toPrimitive(arg, \"string\");\n  return _typeof(key) === \"symbol\" ? key : String(key);\n}","import _typeof from \"./typeof.js\";\nexport default function _toPrimitive(input, hint) {\n  if (_typeof(input) !== \"object\" || input === null) return input;\n  var prim = input[Symbol.toPrimitive];\n  if (prim !== undefined) {\n    var res = prim.call(input, hint || \"default\");\n    if (_typeof(res) !== \"object\") return res;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (hint === \"string\" ? String : Number)(input);\n}","import toPropertyKey from \"./toPropertyKey.js\";\nexport default function _defineProperty(obj, key, value) {\n  key = toPropertyKey(key);\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}","import defineProperty from \"./defineProperty.js\";\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nexport default function _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n  return target;\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import arrayWithHoles from \"./arrayWithHoles.js\";\nimport iterableToArrayLimit from \"./iterableToArrayLimit.js\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nimport nonIterableRest from \"./nonIterableRest.js\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _iterableToArrayLimit(arr, i) {\n  var _i = null == arr ? null : \"undefined\" != typeof Symbol && arr[Symbol.iterator] || arr[\"@@iterator\"];\n  if (null != _i) {\n    var _s,\n      _e,\n      _x,\n      _r,\n      _arr = [],\n      _n = !0,\n      _d = !1;\n    try {\n      if (_x = (_i = _i.call(arr)).next, 0 === i) {\n        if (Object(_i) !== _i) return;\n        _n = !1;\n      } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0);\n    } catch (err) {\n      _d = !0, _e = err;\n    } finally {\n      try {\n        if (!_n && null != _i[\"return\"] && (_r = _i[\"return\"](), Object(_r) !== _r)) return;\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n    return _arr;\n  }\n}","'use strict';\nexport var WebAudioFontChannel = /** @class */ (function () {\n    function WebAudioFontChannel(audioContext) {\n        this.audioContext = audioContext;\n        this.input = audioContext.createGain();\n        this.band32 = this.bandEqualizer(this.input, 32);\n        this.band64 = this.bandEqualizer(this.band32, 64);\n        this.band128 = this.bandEqualizer(this.band64, 128);\n        this.band256 = this.bandEqualizer(this.band128, 256);\n        this.band512 = this.bandEqualizer(this.band256, 512);\n        this.band1k = this.bandEqualizer(this.band512, 1024);\n        this.band2k = this.bandEqualizer(this.band1k, 2048);\n        this.band4k = this.bandEqualizer(this.band2k, 4096);\n        this.band8k = this.bandEqualizer(this.band4k, 8192);\n        this.band16k = this.bandEqualizer(this.band8k, 16384);\n        this.output = audioContext.createGain();\n        this.band16k.connect(this.output);\n    }\n    WebAudioFontChannel.prototype.bandEqualizer = function (from, frequency) {\n        var filter = this.audioContext.createBiquadFilter();\n        filter.frequency.setTargetAtTime(frequency, 0, 0.0001);\n        filter.type = \"peaking\";\n        filter.gain.setTargetAtTime(0, 0, 0.0001);\n        filter.Q.setTargetAtTime(1.0, 0, 0.0001);\n        from.connect(filter);\n        return filter;\n    };\n    ;\n    return WebAudioFontChannel;\n}());\nexport var WebAudioFontLoader = /** @class */ (function () {\n    function WebAudioFontLoader(player) {\n        this.cached = [];\n        this.instrumentKeyArray = [];\n        this.instrumentNamesArray = [];\n        this.choosenInfos = [];\n        this.drumNamesArray = [];\n        this.drumKeyArray = [];\n        this.instrumentTitles = function () {\n            if (this.instrumentNamesArray.length == 0) {\n                var insNames = [];\n                insNames[0] = \"Acoustic Grand Piano: Piano\";\n                insNames[1] = \"Bright Acoustic Piano: Piano\";\n                insNames[2] = \"Electric Grand Piano: Piano\";\n                insNames[3] = \"Honky-tonk Piano: Piano\";\n                insNames[4] = \"Electric Piano 1: Piano\";\n                insNames[5] = \"Electric Piano 2: Piano\";\n                insNames[6] = \"Harpsichord: Piano\";\n                insNames[7] = \"Clavinet: Piano\";\n                insNames[8] = \"Celesta: Chromatic Percussion\";\n                insNames[9] = \"Glockenspiel: Chromatic Percussion\";\n                insNames[10] = \"Music Box: Chromatic Percussion\";\n                insNames[11] = \"Vibraphone: Chromatic Percussion\";\n                insNames[12] = \"Marimba: Chromatic Percussion\";\n                insNames[13] = \"Xylophone: Chromatic Percussion\";\n                insNames[14] = \"Tubular Bells: Chromatic Percussion\";\n                insNames[15] = \"Dulcimer: Chromatic Percussion\";\n                insNames[16] = \"Drawbar Organ: Organ\";\n                insNames[17] = \"Percussive Organ: Organ\";\n                insNames[18] = \"Rock Organ: Organ\";\n                insNames[19] = \"Church Organ: Organ\";\n                insNames[20] = \"Reed Organ: Organ\";\n                insNames[21] = \"Accordion: Organ\";\n                insNames[22] = \"Harmonica: Organ\";\n                insNames[23] = \"Tango Accordion: Organ\";\n                insNames[24] = \"Acoustic Guitar (nylon): Guitar\";\n                insNames[25] = \"Acoustic Guitar (steel): Guitar\";\n                insNames[26] = \"Electric Guitar (jazz): Guitar\";\n                insNames[27] = \"Electric Guitar (clean): Guitar\";\n                insNames[28] = \"Electric Guitar (muted): Guitar\";\n                insNames[29] = \"Overdriven Guitar: Guitar\";\n                insNames[30] = \"Distortion Guitar: Guitar\";\n                insNames[31] = \"Guitar Harmonics: Guitar\";\n                insNames[32] = \"Acoustic Bass: Bass\";\n                insNames[33] = \"Electric Bass (finger): Bass\";\n                insNames[34] = \"Electric Bass (pick): Bass\";\n                insNames[35] = \"Fretless Bass: Bass\";\n                insNames[36] = \"Slap Bass 1: Bass\";\n                insNames[37] = \"Slap Bass 2: Bass\";\n                insNames[38] = \"Synth Bass 1: Bass\";\n                insNames[39] = \"Synth Bass 2: Bass\";\n                insNames[40] = \"Violin: Strings\";\n                insNames[41] = \"Viola: Strings\";\n                insNames[42] = \"Cello: Strings\";\n                insNames[43] = \"Contrabass: Strings\";\n                insNames[44] = \"Tremolo Strings: Strings\";\n                insNames[45] = \"Pizzicato Strings: Strings\";\n                insNames[46] = \"Orchestral Harp: Strings\";\n                insNames[47] = \"Timpani: Strings\";\n                insNames[48] = \"String Ensemble 1: Ensemble\";\n                insNames[49] = \"String Ensemble 2: Ensemble\";\n                insNames[50] = \"Synth Strings 1: Ensemble\";\n                insNames[51] = \"Synth Strings 2: Ensemble\";\n                insNames[52] = \"Choir Aahs: Ensemble\";\n                insNames[53] = \"Voice Oohs: Ensemble\";\n                insNames[54] = \"Synth Choir: Ensemble\";\n                insNames[55] = \"Orchestra Hit: Ensemble\";\n                insNames[56] = \"Trumpet: Brass\";\n                insNames[57] = \"Trombone: Brass\";\n                insNames[58] = \"Tuba: Brass\";\n                insNames[59] = \"Muted Trumpet: Brass\";\n                insNames[60] = \"French Horn: Brass\";\n                insNames[61] = \"Brass Section: Brass\";\n                insNames[62] = \"Synth Brass 1: Brass\";\n                insNames[63] = \"Synth Brass 2: Brass\";\n                insNames[64] = \"Soprano Sax: Reed\";\n                insNames[65] = \"Alto Sax: Reed\";\n                insNames[66] = \"Tenor Sax: Reed\";\n                insNames[67] = \"Baritone Sax: Reed\";\n                insNames[68] = \"Oboe: Reed\";\n                insNames[69] = \"English Horn: Reed\";\n                insNames[70] = \"Bassoon: Reed\";\n                insNames[71] = \"Clarinet: Reed\";\n                insNames[72] = \"Piccolo: Pipe\";\n                insNames[73] = \"Flute: Pipe\";\n                insNames[74] = \"Recorder: Pipe\";\n                insNames[75] = \"Pan Flute: Pipe\";\n                insNames[76] = \"Blown bottle: Pipe\";\n                insNames[77] = \"Shakuhachi: Pipe\";\n                insNames[78] = \"Whistle: Pipe\";\n                insNames[79] = \"Ocarina: Pipe\";\n                insNames[80] = \"Lead 1 (square): Synth Lead\";\n                insNames[81] = \"Lead 2 (sawtooth): Synth Lead\";\n                insNames[82] = \"Lead 3 (calliope): Synth Lead\";\n                insNames[83] = \"Lead 4 (chiff): Synth Lead\";\n                insNames[84] = \"Lead 5 (charang): Synth Lead\";\n                insNames[85] = \"Lead 6 (voice): Synth Lead\";\n                insNames[86] = \"Lead 7 (fifths): Synth Lead\";\n                insNames[87] = \"Lead 8 (bass + lead): Synth Lead\";\n                insNames[88] = \"Pad 1 (new age): Synth Pad\";\n                insNames[89] = \"Pad 2 (warm): Synth Pad\";\n                insNames[90] = \"Pad 3 (polysynth): Synth Pad\";\n                insNames[91] = \"Pad 4 (choir): Synth Pad\";\n                insNames[92] = \"Pad 5 (bowed): Synth Pad\";\n                insNames[93] = \"Pad 6 (metallic): Synth Pad\";\n                insNames[94] = \"Pad 7 (halo): Synth Pad\";\n                insNames[95] = \"Pad 8 (sweep): Synth Pad\";\n                insNames[96] = \"FX 1 (rain): Synth Effects\";\n                insNames[97] = \"FX 2 (soundtrack): Synth Effects\";\n                insNames[98] = \"FX 3 (crystal): Synth Effects\";\n                insNames[99] = \"FX 4 (atmosphere): Synth Effects\";\n                insNames[100] = \"FX 5 (brightness): Synth Effects\";\n                insNames[101] = \"FX 6 (goblins): Synth Effects\";\n                insNames[102] = \"FX 7 (echoes): Synth Effects\";\n                insNames[103] = \"FX 8 (sci-fi): Synth Effects\";\n                insNames[104] = \"Sitar: Ethnic\";\n                insNames[105] = \"Banjo: Ethnic\";\n                insNames[106] = \"Shamisen: Ethnic\";\n                insNames[107] = \"Koto: Ethnic\";\n                insNames[108] = \"Kalimba: Ethnic\";\n                insNames[109] = \"Bagpipe: Ethnic\";\n                insNames[110] = \"Fiddle: Ethnic\";\n                insNames[111] = \"Shanai: Ethnic\";\n                insNames[112] = \"Tinkle Bell: Percussive\";\n                insNames[113] = \"Agogo: Percussive\";\n                insNames[114] = \"Steel Drums: Percussive\";\n                insNames[115] = \"Woodblock: Percussive\";\n                insNames[116] = \"Taiko Drum: Percussive\";\n                insNames[117] = \"Melodic Tom: Percussive\";\n                insNames[118] = \"Synth Drum: Percussive\";\n                insNames[119] = \"Reverse Cymbal: Percussive\";\n                insNames[120] = \"Guitar Fret Noise: Sound effects\";\n                insNames[121] = \"Breath Noise: Sound effects\";\n                insNames[122] = \"Seashore: Sound effects\";\n                insNames[123] = \"Bird Tweet: Sound effects\";\n                insNames[124] = \"Telephone Ring: Sound effects\";\n                insNames[125] = \"Helicopter: Sound effects\";\n                insNames[126] = \"Applause: Sound effects\";\n                insNames[127] = \"Gunshot: Sound effects\";\n                this.instrumentNamesArray = insNames;\n            }\n            return this.instrumentNamesArray;\n        };\n        this.player = player;\n    }\n    WebAudioFontLoader.prototype.startLoad = function (audioContext, filePath, variableName) {\n        if (window[variableName]) {\n            return;\n        }\n        for (var i = 0; i < this.cached.length; i++) {\n            if (this.cached[i].variableName == variableName) {\n                return;\n            }\n        }\n        this.cached.push({\n            filePath: filePath,\n            variableName: variableName\n        });\n        var r = document.createElement('script');\n        r.setAttribute(\"type\", \"text/javascript\");\n        r.setAttribute(\"src\", filePath);\n        document.getElementsByTagName(\"head\")[0].appendChild(r);\n        this.decodeAfterLoading(audioContext, variableName);\n    };\n    ;\n    WebAudioFontLoader.prototype.decodeAfterLoading = function (audioContext, variableName) {\n        var me = this;\n        this.waitOrFinish(variableName, function () {\n            me.player.adjustPreset(audioContext, window[variableName]);\n        });\n    };\n    ;\n    WebAudioFontLoader.prototype.waitOrFinish = function (variableName, onFinish) {\n        if (window[variableName]) {\n            onFinish();\n        }\n        else {\n            var me = this;\n            setTimeout(function () {\n                me.waitOrFinish(variableName, onFinish);\n            }, 111);\n        }\n    };\n    ;\n    WebAudioFontLoader.prototype.loaded = function (variableName) {\n        if (!(window[variableName])) {\n            return false;\n        }\n        var preset = window[variableName];\n        for (var i = 0; i < preset.zones.length; i++) {\n            if (!(preset.zones[i].buffer)) {\n                return false;\n            }\n        }\n        return true;\n    };\n    ;\n    WebAudioFontLoader.prototype.progress = function () {\n        if (this.cached.length > 0) {\n            for (var k = 0; k < this.cached.length; k++) {\n                if (!this.loaded(this.cached[k].variableName)) {\n                    return k / this.cached.length;\n                }\n            }\n            return 1;\n        }\n        else {\n            return 1;\n        }\n    };\n    ;\n    WebAudioFontLoader.prototype.waitLoad = function (onFinish) {\n        var me = this;\n        if (this.progress() >= 1) {\n            onFinish();\n        }\n        else {\n            setTimeout(function () {\n                me.waitLoad(onFinish);\n            }, 333);\n        }\n    };\n    ;\n    WebAudioFontLoader.prototype.instrumentKeys = function () {\n        if (this.instrumentKeyArray.length == 0) {\n            this.instrumentKeyArray = [\n                '0000_JCLive_sf2_file', '0000_Aspirin_sf2_file', '0000_Chaos_sf2_file', '0000_FluidR3_GM_sf2_file', '0000_GeneralUserGS_sf2_file', '0000_SBLive_sf2', '0000_SoundBlasterOld_sf2',\n                '0001_FluidR3_GM_sf2_file', '0001_GeneralUserGS_sf2_file', '0002_GeneralUserGS_sf2_file', '0003_GeneralUserGS_sf2_file', '0010_Aspirin_sf2_file', '0010_Chaos_sf2_file', '0010_FluidR3_GM_sf2_file',\n                '0010_GeneralUserGS_sf2_file', '0010_JCLive_sf2_file', '0010_SBLive_sf2', '0010_SoundBlasterOld_sf2', '0011_Aspirin_sf2_file', '0011_FluidR3_GM_sf2_file', '0011_GeneralUserGS_sf2_file',\n                '0012_GeneralUserGS_sf2_file', '0020_Aspirin_sf2_file', '0020_Chaos_sf2_file', '0020_FluidR3_GM_sf2_file', '0020_GeneralUserGS_sf2_file', '0020_JCLive_sf2_file', '0020_SBLive_sf2',\n                '0020_SoundBlasterOld_sf2', '0021_Aspirin_sf2_file', '0021_GeneralUserGS_sf2_file', '0022_Aspirin_sf2_file', '0030_Aspirin_sf2_file', '0030_Chaos_sf2_file', '0030_FluidR3_GM_sf2_file',\n                '0030_GeneralUserGS_sf2_file', '0030_JCLive_sf2_file', '0030_SBLive_sf2', '0030_SoundBlasterOld_sf2', '0031_Aspirin_sf2_file', '0031_FluidR3_GM_sf2_file', '0031_GeneralUserGS_sf2_file',\n                '0031_SoundBlasterOld_sf2', '0040_Aspirin_sf2_file', '0040_Chaos_sf2_file', '0040_FluidR3_GM_sf2_file', '0040_GeneralUserGS_sf2_file', '0040_JCLive_sf2_file', '0040_SBLive_sf2',\n                '0040_SoundBlasterOld_sf2', '0041_FluidR3_GM_sf2_file', '0041_GeneralUserGS_sf2_file', '0041_SoundBlasterOld_sf2', '0042_GeneralUserGS_sf2_file', '0043_GeneralUserGS_sf2_file',\n                '0044_GeneralUserGS_sf2_file', '0045_GeneralUserGS_sf2_file', '0046_GeneralUserGS_sf2_file', '0050_Aspirin_sf2_file', '0050_Chaos_sf2_file', '0050_FluidR3_GM_sf2_file',\n                '0050_GeneralUserGS_sf2_file', '0050_JCLive_sf2_file', '0050_SBLive_sf2', '0050_SoundBlasterOld_sf2', '0051_FluidR3_GM_sf2_file', '0051_GeneralUserGS_sf2_file', '0052_GeneralUserGS_sf2_file',\n                '0053_GeneralUserGS_sf2_file', '0054_GeneralUserGS_sf2_file', '0060_Aspirin_sf2_file', '0060_Chaos_sf2_file', '0060_FluidR3_GM_sf2_file', '0060_GeneralUserGS_sf2_file', '0060_JCLive_sf2_file',\n                '0060_SBLive_sf2', '0060_SoundBlasterOld_sf2', '0061_Aspirin_sf2_file', '0061_GeneralUserGS_sf2_file', '0061_SoundBlasterOld_sf2', '0062_GeneralUserGS_sf2_file', '0070_Aspirin_sf2_file',\n                '0070_Chaos_sf2_file', '0070_FluidR3_GM_sf2_file', '0070_GeneralUserGS_sf2_file', '0070_JCLive_sf2_file', '0070_SBLive_sf2', '0070_SoundBlasterOld_sf2', '0071_GeneralUserGS_sf2_file',\n                '0080_Aspirin_sf2_file', '0080_Chaos_sf2_file', '0080_FluidR3_GM_sf2_file', '0080_GeneralUserGS_sf2_file', '0080_JCLive_sf2_file', '0080_SBLive_sf2', '0080_SoundBlasterOld_sf2',\n                '0081_FluidR3_GM_sf2_file', '0081_GeneralUserGS_sf2_file', '0081_SoundBlasterOld_sf2', '0090_Aspirin_sf2_file', '0090_Chaos_sf2_file', '0090_FluidR3_GM_sf2_file', '0090_GeneralUserGS_sf2_file',\n                '0090_JCLive_sf2_file', '0090_SBLive_sf2', '0090_SoundBlasterOld_sf2', '0091_SoundBlasterOld_sf2', '0100_Aspirin_sf2_file', '0100_Chaos_sf2_file', '0100_FluidR3_GM_sf2_file',\n                '0100_GeneralUserGS_sf2_file', '0100_JCLive_sf2_file', '0100_SBLive_sf2', '0100_SoundBlasterOld_sf2', '0101_GeneralUserGS_sf2_file', '0101_SoundBlasterOld_sf2', '0110_Aspirin_sf2_file',\n                '0110_Chaos_sf2_file', '0110_FluidR3_GM_sf2_file', '0110_GeneralUserGS_sf2_file', '0110_JCLive_sf2_file', '0110_SBLive_sf2', '0110_SoundBlasterOld_sf2', '0111_FluidR3_GM_sf2_file',\n                '0120_Aspirin_sf2_file', '0120_Chaos_sf2_file', '0120_FluidR3_GM_sf2_file', '0120_GeneralUserGS_sf2_file', '0120_JCLive_sf2_file', '0120_SBLive_sf2', '0120_SoundBlasterOld_sf2',\n                '0121_FluidR3_GM_sf2_file', '0121_GeneralUserGS_sf2_file', '0130_Aspirin_sf2_file', '0130_Chaos_sf2_file', '0130_FluidR3_GM_sf2_file', '0130_GeneralUserGS_sf2_file', '0130_JCLive_sf2_file',\n                '0130_SBLive_sf2', '0130_SoundBlasterOld_sf2', '0131_FluidR3_GM_sf2_file', '0140_Aspirin_sf2_file', '0140_Chaos_sf2_file', '0140_FluidR3_GM_sf2_file', '0140_GeneralUserGS_sf2_file',\n                '0140_JCLive_sf2_file', '0140_SBLive_sf2', '0140_SoundBlasterOld_sf2', '0141_FluidR3_GM_sf2_file', '0141_GeneralUserGS_sf2_file', '0142_GeneralUserGS_sf2_file', '0143_GeneralUserGS_sf2_file',\n                '0150_Aspirin_sf2_file', '0150_Chaos_sf2_file', '0150_FluidR3_GM_sf2_file', '0150_GeneralUserGS_sf2_file', '0150_JCLive_sf2_file', '0150_SBLive_sf2', '0150_SoundBlasterOld_sf2',\n                '0151_FluidR3_GM_sf2_file', '0160_Aspirin_sf2_file', '0160_Chaos_sf2_file', '0160_FluidR3_GM_sf2_file', '0160_GeneralUserGS_sf2_file', '0160_JCLive_sf2_file', '0160_SBLive_sf2',\n                '0160_SoundBlasterOld_sf2', '0161_Aspirin_sf2_file', '0161_FluidR3_GM_sf2_file', '0161_SoundBlasterOld_sf2', '0170_Aspirin_sf2_file', '0170_Chaos_sf2_file', '0170_FluidR3_GM_sf2_file',\n                '0170_GeneralUserGS_sf2_file', '0170_JCLive_sf2_file', '0170_SBLive_sf2', '0170_SoundBlasterOld_sf2', '0171_FluidR3_GM_sf2_file', '0171_GeneralUserGS_sf2_file', '0172_FluidR3_GM_sf2_file',\n                '0180_Aspirin_sf2_file', '0180_Chaos_sf2_file', '0180_FluidR3_GM_sf2_file', '0180_GeneralUserGS_sf2_file', '0180_JCLive_sf2_file', '0180_SBLive_sf2', '0180_SoundBlasterOld_sf2',\n                '0181_Aspirin_sf2_file', '0181_GeneralUserGS_sf2_file', '0181_SoundBlasterOld_sf2', '0190_Aspirin_sf2_file', '0190_Chaos_sf2_file', '0190_FluidR3_GM_sf2_file', '0190_GeneralUserGS_sf2_file',\n                '0190_JCLive_sf2_file', '0190_SBLive_sf2', '0190_SoundBlasterOld_sf2', '0191_Aspirin_sf2_file', '0191_GeneralUserGS_sf2_file', '0191_SoundBlasterOld_sf2', '0200_Aspirin_sf2_file',\n                '0200_Chaos_sf2_file', '0200_FluidR3_GM_sf2_file', '0200_GeneralUserGS_sf2_file', '0200_JCLive_sf2_file', '0200_SBLive_sf2', '0200_SoundBlasterOld_sf2', '0201_Aspirin_sf2_file',\n                '0201_FluidR3_GM_sf2_file', '0201_GeneralUserGS_sf2_file', '0201_SoundBlasterOld_sf2', '0210_Aspirin_sf2_file', '0210_Chaos_sf2_file', '0210_FluidR3_GM_sf2_file', '0210_GeneralUserGS_sf2_file',\n                '0210_JCLive_sf2_file', '0210_SBLive_sf2', '0210_SoundBlasterOld_sf2', '0211_Aspirin_sf2_file', '0211_FluidR3_GM_sf2_file', '0211_GeneralUserGS_sf2_file', '0211_SoundBlasterOld_sf2',\n                '0212_GeneralUserGS_sf2_file', '0220_Aspirin_sf2_file', '0220_Chaos_sf2_file', '0220_FluidR3_GM_sf2_file', '0220_GeneralUserGS_sf2_file', '0220_JCLive_sf2_file', '0220_SBLive_sf2',\n                '0220_SoundBlasterOld_sf2', '0221_FluidR3_GM_sf2_file', '0230_Aspirin_sf2_file', '0230_Chaos_sf2_file', '0230_FluidR3_GM_sf2_file', '0230_GeneralUserGS_sf2_file', '0230_JCLive_sf2_file',\n                '0230_SBLive_sf2', '0230_SoundBlasterOld_sf2', '0231_FluidR3_GM_sf2_file', '0231_GeneralUserGS_sf2_file', '0231_JCLive_sf2_file', '0231_SoundBlasterOld_sf2', '0232_FluidR3_GM_sf2_file',\n                '0233_FluidR3_GM_sf2_file', '0240_Aspirin_sf2_file', '0240_Chaos_sf2_file', '0240_FluidR3_GM_sf2_file', '0240_GeneralUserGS_sf2_file', '0240_JCLive_sf2_file', '0240_LK_Godin_Nylon_SF2_file',\n                '0240_SBLive_sf2', '0240_SoundBlasterOld_sf2', '0241_GeneralUserGS_sf2_file', '0241_JCLive_sf2_file', '0242_JCLive_sf2_file', '0243_JCLive_sf2_file', '0253_Acoustic_Guitar_sf2_file',\n                '0250_Aspirin_sf2_file', '0250_Chaos_sf2_file', '0250_FluidR3_GM_sf2_file', '0250_GeneralUserGS_sf2_file', '0250_JCLive_sf2_file', '0250_LK_AcousticSteel_SF2_file', '0250_SBLive_sf2',\n                '0250_SoundBlasterOld_sf2', '0251_Acoustic_Guitar_sf2_file', '0251_GeneralUserGS_sf2_file', '0252_Acoustic_Guitar_sf2_file', '0252_GeneralUserGS_sf2_file', '0253_Acoustic_Guitar_sf2_file',\n                '0253_GeneralUserGS_sf2_file', '0254_Acoustic_Guitar_sf2_file', '0254_GeneralUserGS_sf2_file', '0255_GeneralUserGS_sf2_file', '0260_Aspirin_sf2_file', '0260_Chaos_sf2_file',\n                '0260_FluidR3_GM_sf2_file', '0260_GeneralUserGS_sf2_file', '0260_JCLive_sf2_file', '0260_SBLive_sf2', '0260_SoundBlasterOld_sf2', '0260_Stratocaster_sf2_file', '0261_GeneralUserGS_sf2_file',\n                '0261_SoundBlasterOld_sf2', '0261_Stratocaster_sf2_file', '0262_Stratocaster_sf2_file', '0270_Aspirin_sf2_file', '0270_Chaos_sf2_file', '0270_FluidR3_GM_sf2_file', '0270_GeneralUserGS_sf2_file',\n                '0270_Gibson_Les_Paul_sf2_file', '0270_JCLive_sf2_file', '0270_SBAWE32_sf2_file', '0270_SBLive_sf2', '0270_SoundBlasterOld_sf2', '0270_Stratocaster_sf2_file', '0271_GeneralUserGS_sf2_file',\n                '0271_Stratocaster_sf2_file', '0272_Stratocaster_sf2_file', '0280_Aspirin_sf2_file', '0280_Chaos_sf2_file', '0280_FluidR3_GM_sf2_file', '0280_GeneralUserGS_sf2_file', '0280_JCLive_sf2_file',\n                '0280_LesPaul_sf2', '0280_LesPaul_sf2_file', '0280_SBAWE32_sf2_file', '0280_SBLive_sf2', '0280_SoundBlasterOld_sf2', '0281_Aspirin_sf2_file', '0281_FluidR3_GM_sf2_file',\n                '0281_GeneralUserGS_sf2_file', '0282_FluidR3_GM_sf2_file', '0282_GeneralUserGS_sf2_file', '0283_GeneralUserGS_sf2_file', '0290_Aspirin_sf2_file', '0290_Chaos_sf2_file', '0290_FluidR3_GM_sf2_file',\n                '0290_GeneralUserGS_sf2_file', '0290_JCLive_sf2_file', '0290_LesPaul_sf2', '0290_LesPaul_sf2_file', '0290_SBAWE32_sf2_file', '0290_SBLive_sf2', '0290_SoundBlasterOld_sf2', '0291_Aspirin_sf2_file',\n                '0291_LesPaul_sf2', '0291_LesPaul_sf2_file', '0291_SBAWE32_sf2_file', '0291_SoundBlasterOld_sf2', '0292_Aspirin_sf2_file', '0292_LesPaul_sf2', '0292_LesPaul_sf2_file', '0300_Aspirin_sf2_file',\n                '0300_Chaos_sf2_file', '0300_FluidR3_GM_sf2_file', '0300_GeneralUserGS_sf2_file', '0300_JCLive_sf2_file', '0300_LesPaul_sf2', '0300_LesPaul_sf2_file', '0300_SBAWE32_sf2_file', '0300_SBLive_sf2',\n                '0300_SoundBlasterOld_sf2', '0301_Aspirin_sf2_file', '0301_FluidR3_GM_sf2_file', '0301_GeneralUserGS_sf2_file', '0301_JCLive_sf2_file', '0301_LesPaul_sf2', '0301_LesPaul_sf2_file',\n                '0302_Aspirin_sf2_file', '0302_GeneralUserGS_sf2_file', '0302_JCLive_sf2_file', '0303_Aspirin_sf2_file', '0304_Aspirin_sf2_file', '0310_Aspirin_sf2_file', '0310_Chaos_sf2_file',\n                '0310_FluidR3_GM_sf2_file', '0310_GeneralUserGS_sf2_file', '0310_JCLive_sf2_file', '0310_LesPaul_sf2', '0310_LesPaul_sf2_file', '0310_SBAWE32_sf2_file', '0310_SBLive_sf2',\n                '0310_SoundBlasterOld_sf2', '0311_FluidR3_GM_sf2_file', '0311_GeneralUserGS_sf2_file', '0320_Aspirin_sf2_file', '0320_Chaos_sf2_file', '0320_FluidR3_GM_sf2_file', '0320_GeneralUserGS_sf2_file',\n                '0320_JCLive_sf2_file', '0320_SBLive_sf2', '0320_SoundBlasterOld_sf2', '0321_GeneralUserGS_sf2_file', '0322_GeneralUserGS_sf2_file', '0330_Aspirin_sf2_file', '0330_Chaos_sf2_file',\n                '0330_FluidR3_GM_sf2_file', '0330_GeneralUserGS_sf2_file', '0330_JCLive_sf2_file', '0330_SBLive_sf2', '0330_SoundBlasterOld_sf2', '0331_GeneralUserGS_sf2_file', '0332_GeneralUserGS_sf2_file',\n                '0340_Aspirin_sf2_file', '0340_Chaos_sf2_file', '0340_FluidR3_GM_sf2_file', '0340_GeneralUserGS_sf2_file', '0340_JCLive_sf2_file', '0340_SBLive_sf2', '0340_SoundBlasterOld_sf2',\n                '0341_Aspirin_sf2_file', '0341_GeneralUserGS_sf2_file', '0350_Aspirin_sf2_file', '0350_Chaos_sf2_file', '0350_FluidR3_GM_sf2_file', '0350_GeneralUserGS_sf2_file', '0350_JCLive_sf2_file',\n                '0350_SBLive_sf2', '0350_SoundBlasterOld_sf2', '0351_GeneralUserGS_sf2_file', '0360_Aspirin_sf2_file', '0360_Chaos_sf2_file', '0360_FluidR3_GM_sf2_file', '0360_GeneralUserGS_sf2_file',\n                '0360_JCLive_sf2_file', '0360_SBLive_sf2', '0360_SoundBlasterOld_sf2', '0361_GeneralUserGS_sf2_file', '0370_Aspirin_sf2_file', '0370_Chaos_sf2_file', '0370_FluidR3_GM_sf2_file',\n                '0370_GeneralUserGS_sf2_file', '0370_JCLive_sf2_file', '0370_SBLive_sf2', '0370_SoundBlasterOld_sf2', '0371_GeneralUserGS_sf2_file', '0372_GeneralUserGS_sf2_file',\n                '0385_GeneralUserGS_sf2_file',\n                '0380_Aspirin_sf2_file',\n                '0380_Chaos_sf2_file',\n                '0380_FluidR3_GM_sf2_file',\n                '0380_GeneralUserGS_sf2_file',\n                '0380_JCLive_sf2_file',\n                '0380_SBLive_sf2',\n                '0380_SoundBlasterOld_sf2',\n                '0381_FluidR3_GM_sf2_file',\n                '0381_GeneralUserGS_sf2_file',\n                '0382_FluidR3_GM_sf2_file',\n                '0382_GeneralUserGS_sf2_file',\n                '0383_GeneralUserGS_sf2_file',\n                '0384_GeneralUserGS_sf2_file',\n                '0386_GeneralUserGS_sf2_file',\n                '0387_GeneralUserGS_sf2_file',\n                '0390_Aspirin_sf2_file', '0390_Chaos_sf2_file', '0390_FluidR3_GM_sf2_file',\n                '0390_GeneralUserGS_sf2_file', '0390_JCLive_sf2_file', '0390_SBLive_sf2', '0390_SoundBlasterOld_sf2', '0391_FluidR3_GM_sf2_file',\n                '0391_GeneralUserGS_sf2_file', '0391_SoundBlasterOld_sf2', '0392_FluidR3_GM_sf2_file', '0392_GeneralUserGS_sf2_file',\n                '0393_GeneralUserGS_sf2_file', '0400_Aspirin_sf2_file', '0400_Chaos_sf2_file', '0400_FluidR3_GM_sf2_file', '0400_GeneralUserGS_sf2_file',\n                '0400_JCLive_sf2_file', '0400_SBLive_sf2', '0400_SoundBlasterOld_sf2', '0401_Aspirin_sf2_file', '0401_FluidR3_GM_sf2_file',\n                '0401_GeneralUserGS_sf2_file', '0402_GeneralUserGS_sf2_file', '0410_Aspirin_sf2_file', '0410_Chaos_sf2_file', '0410_FluidR3_GM_sf2_file',\n                '0410_GeneralUserGS_sf2_file', '0410_JCLive_sf2_file', '0410_SBLive_sf2', '0410_SoundBlasterOld_sf2', '0411_FluidR3_GM_sf2_file',\n                '0420_Aspirin_sf2_file', '0420_Chaos_sf2_file', '0420_FluidR3_GM_sf2_file', '0420_GeneralUserGS_sf2_file', '0420_JCLive_sf2_file',\n                '0420_SBLive_sf2', '0420_SoundBlasterOld_sf2', '0421_FluidR3_GM_sf2_file', '0421_GeneralUserGS_sf2_file', '0430_Aspirin_sf2_file',\n                '0430_Chaos_sf2_file', '0430_FluidR3_GM_sf2_file', '0430_GeneralUserGS_sf2_file', '0430_JCLive_sf2_file', '0430_SBLive_sf2',\n                '0430_SoundBlasterOld_sf2', '0431_FluidR3_GM_sf2_file', '0440_Aspirin_sf2_file', '0440_Chaos_sf2_file', '0440_FluidR3_GM_sf2_file',\n                '0440_GeneralUserGS_sf2_file', '0440_JCLive_sf2_file', '0440_SBLive_sf2',\n                '0440_SoundBlasterOld_sf2', '0441_GeneralUserGS_sf2_file', '0442_GeneralUserGS_sf2_file', '0450_Aspirin_sf2_file', '0450_Chaos_sf2_file',\n                '0450_FluidR3_GM_sf2_file',\n                '0450_GeneralUserGS_sf2_file', '0450_JCLive_sf2_file', '0450_SBLive_sf2', '0450_SoundBlasterOld_sf2', '0451_FluidR3_GM_sf2_file', '0460_Aspirin_sf2_file',\n                '0460_Chaos_sf2_file', '0460_FluidR3_GM_sf2_file', '0460_GeneralUserGS_sf2_file', '0460_JCLive_sf2_file', '0460_SBLive_sf2', '0460_SoundBlasterOld_sf2',\n                '0461_FluidR3_GM_sf2_file', '0470_Aspirin_sf2_file', '0470_Chaos_sf2_file', '0470_FluidR3_GM_sf2_file', '0470_GeneralUserGS_sf2_file', '0470_JCLive_sf2_file',\n                '0470_SBLive_sf2', '0470_SoundBlasterOld_sf2', '0471_FluidR3_GM_sf2_file', '0471_GeneralUserGS_sf2_file', '0480_Aspirin_sf2_file', '0480_Chaos_sf2_file',\n                '0480_FluidR3_GM_sf2_file', '0480_GeneralUserGS_sf2_file', '0480_JCLive_sf2_file', '0480_SBLive_sf2', '0480_SoundBlasterOld_sf2', '04810_GeneralUserGS_sf2_file',\n                '04811_GeneralUserGS_sf2_file', '04812_GeneralUserGS_sf2_file', '04813_GeneralUserGS_sf2_file', '04814_GeneralUserGS_sf2_file', '04815_GeneralUserGS_sf2_file', '04816_GeneralUserGS_sf2_file',\n                '04817_GeneralUserGS_sf2_file', '0481_Aspirin_sf2_file', '0481_FluidR3_GM_sf2_file', '0481_GeneralUserGS_sf2_file', '0482_Aspirin_sf2_file', '0482_GeneralUserGS_sf2_file',\n                '0483_GeneralUserGS_sf2_file', '0484_GeneralUserGS_sf2_file', '0485_GeneralUserGS_sf2_file', '0486_GeneralUserGS_sf2_file', '0487_GeneralUserGS_sf2_file', '0488_GeneralUserGS_sf2_file',\n                '0489_GeneralUserGS_sf2_file', '0490_Aspirin_sf2_file', '0490_Chaos_sf2_file', '0490_FluidR3_GM_sf2_file', '0490_GeneralUserGS_sf2_file', '0490_JCLive_sf2_file', '0490_SBLive_sf2',\n                '0490_SoundBlasterOld_sf2', '0491_GeneralUserGS_sf2_file', '0492_GeneralUserGS_sf2_file', '0500_Aspirin_sf2_file', '0500_Chaos_sf2_file', '0500_FluidR3_GM_sf2_file', '0500_GeneralUserGS_sf2_file',\n                '0500_JCLive_sf2_file', '0500_SBLive_sf2', '0500_SoundBlasterOld_sf2', '0501_FluidR3_GM_sf2_file', '0501_GeneralUserGS_sf2_file', '0502_FluidR3_GM_sf2_file', '0502_GeneralUserGS_sf2_file',\n                '0503_FluidR3_GM_sf2_file', '0504_FluidR3_GM_sf2_file', '0505_FluidR3_GM_sf2_file', '0510_Aspirin_sf2_file', '0510_Chaos_sf2_file', '0510_FluidR3_GM_sf2_file', '0510_GeneralUserGS_sf2_file',\n                '0510_JCLive_sf2_file', '0510_SBLive_sf2', '0510_SoundBlasterOld_sf2', '0511_GeneralUserGS_sf2_file', '0511_SoundBlasterOld_sf2', '0520_Aspirin_sf2_file', '0520_Chaos_sf2_file',\n                '0520_FluidR3_GM_sf2_file', '0520_GeneralUserGS_sf2_file', '0520_JCLive_sf2_file', '0520_SBLive_sf2', '0520_Soul_Ahhs_sf2_file', '0520_SoundBlasterOld_sf2', '0521_FluidR3_GM_sf2_file',\n                '0521_Soul_Ahhs_sf2_file', '0521_SoundBlasterOld_sf2', '0522_Soul_Ahhs_sf2_file', '0530_Aspirin_sf2_file', '0530_Chaos_sf2_file', '0530_FluidR3_GM_sf2_file', '0530_GeneralUserGS_sf2_file',\n                '0530_JCLive_sf2_file', '0530_SBLive_sf2', '0530_Soul_Ahhs_sf2_file', '0530_SoundBlasterOld_sf2', '0531_FluidR3_GM_sf2_file', '0531_GeneralUserGS_sf2_file', '0531_JCLive_sf2_file',\n                '0531_SoundBlasterOld_sf2', '0540_Aspirin_sf2_file', '0540_Chaos_sf2_file', '0540_FluidR3_GM_sf2_file', '0540_GeneralUserGS_sf2_file', '0540_JCLive_sf2_file', '0540_SBLive_sf2',\n                '0540_SoundBlasterOld_sf2', '0541_FluidR3_GM_sf2_file', '0550_Aspirin_sf2_file', '0550_Chaos_sf2_file', '0550_FluidR3_GM_sf2_file', '0550_GeneralUserGS_sf2_file', '0550_JCLive_sf2_file',\n                '0550_SBLive_sf2', '0550_SoundBlasterOld_sf2', '0551_Aspirin_sf2_file', '0551_FluidR3_GM_sf2_file', '0560_Aspirin_sf2_file', '0560_Chaos_sf2_file', '0560_FluidR3_GM_sf2_file',\n                '0560_GeneralUserGS_sf2_file', '0560_JCLive_sf2_file', '0560_SBLive_sf2', '0560_SoundBlasterOld_sf2', '0570_Aspirin_sf2_file', '0570_Chaos_sf2_file', '0570_FluidR3_GM_sf2_file',\n                '0570_GeneralUserGS_sf2_file', '0570_JCLive_sf2_file', '0570_SBLive_sf2', '0570_SoundBlasterOld_sf2', '0571_GeneralUserGS_sf2_file', '0580_Aspirin_sf2_file', '0580_Chaos_sf2_file',\n                '0580_FluidR3_GM_sf2_file', '0580_GeneralUserGS_sf2_file', '0580_JCLive_sf2_file', '0580_SBLive_sf2', '0580_SoundBlasterOld_sf2', '0581_GeneralUserGS_sf2_file', '0590_Aspirin_sf2_file',\n                '0590_Chaos_sf2_file', '0590_FluidR3_GM_sf2_file', '0590_GeneralUserGS_sf2_file', '0590_JCLive_sf2_file', '0590_SBLive_sf2', '0590_SoundBlasterOld_sf2', '0591_GeneralUserGS_sf2_file',\n                '0600_Aspirin_sf2_file', '0600_Chaos_sf2_file', '0600_FluidR3_GM_sf2_file', '0600_GeneralUserGS_sf2_file', '0600_JCLive_sf2_file', '0600_SBLive_sf2', '0600_SoundBlasterOld_sf2',\n                '0601_FluidR3_GM_sf2_file', '0601_GeneralUserGS_sf2_file', '0602_GeneralUserGS_sf2_file', '0603_GeneralUserGS_sf2_file', '0610_Aspirin_sf2_file', '0610_Chaos_sf2_file', '0610_FluidR3_GM_sf2_file',\n                '0610_GeneralUserGS_sf2_file', '0610_JCLive_sf2_file', '0610_SBLive_sf2', '0610_SoundBlasterOld_sf2', '0611_GeneralUserGS_sf2_file', '0612_GeneralUserGS_sf2_file', '0613_GeneralUserGS_sf2_file',\n                '0614_GeneralUserGS_sf2_file', '0615_GeneralUserGS_sf2_file', '0620_Aspirin_sf2_file', '0620_Chaos_sf2_file', '0620_FluidR3_GM_sf2_file', '0620_GeneralUserGS_sf2_file', '0620_JCLive_sf2_file',\n                '0620_SBLive_sf2', '0620_SoundBlasterOld_sf2', '0621_Aspirin_sf2_file', '0621_FluidR3_GM_sf2_file', '0621_GeneralUserGS_sf2_file', '0622_FluidR3_GM_sf2_file', '0622_GeneralUserGS_sf2_file',\n                '0630_Aspirin_sf2_file', '0630_Chaos_sf2_file', '0630_FluidR3_GM_sf2_file', '0630_GeneralUserGS_sf2_file', '0630_JCLive_sf2_file', '0630_SBLive_sf2', '0630_SoundBlasterOld_sf2',\n                '0631_Aspirin_sf2_file', '0631_FluidR3_GM_sf2_file', '0631_GeneralUserGS_sf2_file', '0632_FluidR3_GM_sf2_file', '0633_FluidR3_GM_sf2_file', '0640_Aspirin_sf2_file', '0640_Chaos_sf2_file',\n                '0640_FluidR3_GM_sf2_file', '0640_GeneralUserGS_sf2_file', '0640_JCLive_sf2_file', '0640_SBLive_sf2', '0640_SoundBlasterOld_sf2', '0641_FluidR3_GM_sf2_file', '0650_Aspirin_sf2_file',\n                '0650_Chaos_sf2_file', '0650_FluidR3_GM_sf2_file', '0650_GeneralUserGS_sf2_file', '0650_JCLive_sf2_file', '0650_SBLive_sf2', '0650_SoundBlasterOld_sf2', '0651_Aspirin_sf2_file',\n                '0651_FluidR3_GM_sf2_file', '0660_Aspirin_sf2_file', '0660_Chaos_sf2_file', '0660_FluidR3_GM_sf2_file', '0660_GeneralUserGS_sf2_file', '0660_JCLive_sf2_file', '0660_SBLive_sf2',\n                '0660_SoundBlasterOld_sf2', '0661_FluidR3_GM_sf2_file', '0661_GeneralUserGS_sf2_file', '0670_Aspirin_sf2_file', '0670_Chaos_sf2_file', '0670_FluidR3_GM_sf2_file', '0670_GeneralUserGS_sf2_file',\n                '0670_JCLive_sf2_file', '0670_SBLive_sf2', '0670_SoundBlasterOld_sf2', '0671_FluidR3_GM_sf2_file', '0680_Aspirin_sf2_file', '0680_Chaos_sf2_file', '0680_FluidR3_GM_sf2_file',\n                '0680_GeneralUserGS_sf2_file', '0680_JCLive_sf2_file', '0680_SBLive_sf2', '0680_SoundBlasterOld_sf2', '0681_FluidR3_GM_sf2_file', '0690_Aspirin_sf2_file', '0690_Chaos_sf2_file',\n                '0690_FluidR3_GM_sf2_file', '0690_GeneralUserGS_sf2_file', '0690_JCLive_sf2_file', '0690_SBLive_sf2', '0690_SoundBlasterOld_sf2', '0691_FluidR3_GM_sf2_file', '0700_Aspirin_sf2_file',\n                '0700_Chaos_sf2_file', '0700_FluidR3_GM_sf2_file', '0700_GeneralUserGS_sf2_file', '0700_JCLive_sf2_file', '0700_SBLive_sf2', '0700_SoundBlasterOld_sf2', '0701_FluidR3_GM_sf2_file',\n                '0701_GeneralUserGS_sf2_file', '0710_Aspirin_sf2_file', '0710_Chaos_sf2_file', '0710_FluidR3_GM_sf2_file', '0710_GeneralUserGS_sf2_file', '0710_JCLive_sf2_file', '0710_SBLive_sf2',\n                '0710_SoundBlasterOld_sf2', '0711_FluidR3_GM_sf2_file', '0720_Aspirin_sf2_file', '0720_Chaos_sf2_file', '0720_FluidR3_GM_sf2_file', '0720_GeneralUserGS_sf2_file', '0720_JCLive_sf2_file',\n                '0720_SBLive_sf2', '0720_SoundBlasterOld_sf2', '0721_FluidR3_GM_sf2_file', '0721_SoundBlasterOld_sf2', '0730_Aspirin_sf2_file', '0730_Chaos_sf2_file', '0730_FluidR3_GM_sf2_file',\n                '0730_GeneralUserGS_sf2_file', '0730_JCLive_sf2_file', '0730_SBLive_sf2', '0730_SoundBlasterOld_sf2', '0731_Aspirin_sf2_file', '0731_FluidR3_GM_sf2_file', '0731_SoundBlasterOld_sf2',\n                '0740_Aspirin_sf2_file', '0740_Chaos_sf2_file', '0740_FluidR3_GM_sf2_file', '0740_GeneralUserGS_sf2_file', '0740_JCLive_sf2_file', '0740_SBLive_sf2', '0740_SoundBlasterOld_sf2',\n                '0741_GeneralUserGS_sf2_file', '0750_Aspirin_sf2_file', '0750_Chaos_sf2_file', '0750_FluidR3_GM_sf2_file', '0750_GeneralUserGS_sf2_file', '0750_JCLive_sf2_file', '0750_SBLive_sf2',\n                '0750_SoundBlasterOld_sf2', '0751_Aspirin_sf2_file', '0751_FluidR3_GM_sf2_file', '0751_GeneralUserGS_sf2_file', '0751_SoundBlasterOld_sf2', '0760_Aspirin_sf2_file', '0760_Chaos_sf2_file',\n                '0760_FluidR3_GM_sf2_file', '0760_GeneralUserGS_sf2_file', '0760_JCLive_sf2_file', '0760_SBLive_sf2', '0760_SoundBlasterOld_sf2', '0761_FluidR3_GM_sf2_file', '0761_GeneralUserGS_sf2_file',\n                '0761_SoundBlasterOld_sf2', '0762_GeneralUserGS_sf2_file', '0770_Aspirin_sf2_file', '0770_Chaos_sf2_file', '0770_FluidR3_GM_sf2_file', '0770_GeneralUserGS_sf2_file', '0770_JCLive_sf2_file',\n                '0770_SBLive_sf2', '0770_SoundBlasterOld_sf2', '0771_FluidR3_GM_sf2_file', '0771_GeneralUserGS_sf2_file', '0772_GeneralUserGS_sf2_file', '0780_Aspirin_sf2_file', '0780_Chaos_sf2_file',\n                '0780_FluidR3_GM_sf2_file', '0780_GeneralUserGS_sf2_file', '0780_JCLive_sf2_file', '0780_SBLive_sf2', '0780_SoundBlasterOld_sf2', '0781_GeneralUserGS_sf2_file', '0790_Aspirin_sf2_file',\n                '0790_Chaos_sf2_file', '0790_FluidR3_GM_sf2_file', '0790_GeneralUserGS_sf2_file', '0790_JCLive_sf2_file', '0790_SBLive_sf2', '0790_SoundBlasterOld_sf2', '0791_GeneralUserGS_sf2_file',\n                '0800_Aspirin_sf2_file', '0800_Chaos_sf2_file', '0800_FluidR3_GM_sf2_file', '0800_GeneralUserGS_sf2_file', '0800_JCLive_sf2_file', '0800_SBLive_sf2', '0800_SoundBlasterOld_sf2',\n                '0801_FluidR3_GM_sf2_file', '0801_GeneralUserGS_sf2_file', '0810_Aspirin_sf2_file', '0810_Chaos_sf2_file', '0810_FluidR3_GM_sf2_file', '0810_GeneralUserGS_sf2_file', '0810_JCLive_sf2_file',\n                '0810_SBLive_sf2', '0810_SoundBlasterOld_sf2', '0811_Aspirin_sf2_file', '0811_GeneralUserGS_sf2_file', '0811_SoundBlasterOld_sf2', '0820_Aspirin_sf2_file', '0820_Chaos_sf2_file',\n                '0820_FluidR3_GM_sf2_file', '0820_GeneralUserGS_sf2_file', '0820_JCLive_sf2_file', '0820_SBLive_sf2', '0820_SoundBlasterOld_sf2', '0821_FluidR3_GM_sf2_file', '0821_GeneralUserGS_sf2_file',\n                '0821_SoundBlasterOld_sf2', '0822_GeneralUserGS_sf2_file', '0823_GeneralUserGS_sf2_file', '0830_Aspirin_sf2_file', '0830_Chaos_sf2_file', '0830_FluidR3_GM_sf2_file', '0830_GeneralUserGS_sf2_file',\n                '0830_JCLive_sf2_file', '0830_SBLive_sf2', '0830_SoundBlasterOld_sf2', '0831_FluidR3_GM_sf2_file', '0831_GeneralUserGS_sf2_file', '0831_SoundBlasterOld_sf2', '0840_Aspirin_sf2_file',\n                '0840_Chaos_sf2_file', '0840_FluidR3_GM_sf2_file', '0840_GeneralUserGS_sf2_file', '0840_JCLive_sf2_file', '0840_SBLive_sf2', '0840_SoundBlasterOld_sf2', '0841_Aspirin_sf2_file',\n                '0841_Chaos_sf2_file', '0841_FluidR3_GM_sf2_file', '0841_GeneralUserGS_sf2_file', '0841_JCLive_sf2_file', '0841_SoundBlasterOld_sf2', '0842_FluidR3_GM_sf2_file', '0850_Aspirin_sf2_file',\n                '0850_Chaos_sf2_file', '0850_FluidR3_GM_sf2_file', '0850_GeneralUserGS_sf2_file', '0850_JCLive_sf2_file', '0850_SBLive_sf2', '0850_SoundBlasterOld_sf2', '0851_FluidR3_GM_sf2_file',\n                '0851_GeneralUserGS_sf2_file', '0851_JCLive_sf2_file', '0851_SoundBlasterOld_sf2', '0860_Aspirin_sf2_file', '0860_Chaos_sf2_file', '0860_FluidR3_GM_sf2_file', '0860_GeneralUserGS_sf2_file',\n                '0860_JCLive_sf2_file', '0860_SBLive_sf2', '0860_SoundBlasterOld_sf2', '0861_Aspirin_sf2_file', '0861_FluidR3_GM_sf2_file', '0861_SoundBlasterOld_sf2', '0870_Aspirin_sf2_file',\n                '0870_Chaos_sf2_file', '0870_FluidR3_GM_sf2_file', '0870_GeneralUserGS_sf2_file', '0870_JCLive_sf2_file', '0870_SBLive_sf2', '0870_SoundBlasterOld_sf2', '0871_GeneralUserGS_sf2_file',\n                '0872_GeneralUserGS_sf2_file', '0873_GeneralUserGS_sf2_file', '0880_Aspirin_sf2_file', '0880_Chaos_sf2_file', '0880_FluidR3_GM_sf2_file', '0880_GeneralUserGS_sf2_file', '0880_JCLive_sf2_file',\n                '0880_SBLive_sf2', '0880_SoundBlasterOld_sf2', '0881_Aspirin_sf2_file', '0881_FluidR3_GM_sf2_file', '0881_GeneralUserGS_sf2_file', '0881_SoundBlasterOld_sf2', '0882_Aspirin_sf2_file',\n                '0882_FluidR3_GM_sf2_file', '0882_GeneralUserGS_sf2_file', '0883_GeneralUserGS_sf2_file', '0884_GeneralUserGS_sf2_file', '0885_GeneralUserGS_sf2_file', '0886_GeneralUserGS_sf2_file',\n                '0887_GeneralUserGS_sf2_file', '0888_GeneralUserGS_sf2_file', '0889_GeneralUserGS_sf2_file', '0890_Aspirin_sf2_file', '0890_Chaos_sf2_file', '0890_FluidR3_GM_sf2_file',\n                '0890_GeneralUserGS_sf2_file', '0890_JCLive_sf2_file', '0890_SBLive_sf2', '0890_SoundBlasterOld_sf2', '0891_Aspirin_sf2_file', '0891_FluidR3_GM_sf2_file', '0891_GeneralUserGS_sf2_file',\n                '0900_Aspirin_sf2_file', '0900_Chaos_sf2_file', '0900_FluidR3_GM_sf2_file', '0900_GeneralUserGS_sf2_file', '0900_JCLive_sf2_file', '0900_SBLive_sf2', '0900_SoundBlasterOld_sf2',\n                '0901_Aspirin_sf2_file', '0901_FluidR3_GM_sf2_file', '0901_GeneralUserGS_sf2_file', '0901_SoundBlasterOld_sf2', '0910_Aspirin_sf2_file', '0910_Chaos_sf2_file', '0910_FluidR3_GM_sf2_file',\n                '0910_GeneralUserGS_sf2_file', '0910_JCLive_sf2_file', '0910_SBLive_sf2', '0910_SoundBlasterOld_sf2', '0911_Aspirin_sf2_file', '0911_GeneralUserGS_sf2_file', '0911_JCLive_sf2_file',\n                '0911_SoundBlasterOld_sf2', '0920_Aspirin_sf2_file', '0920_Chaos_sf2_file', '0920_FluidR3_GM_sf2_file', '0920_GeneralUserGS_sf2_file', '0920_JCLive_sf2_file', '0920_SBLive_sf2',\n                '0920_SoundBlasterOld_sf2', '0921_Aspirin_sf2_file', '0921_GeneralUserGS_sf2_file', '0921_SoundBlasterOld_sf2', '0930_Aspirin_sf2_file', '0930_Chaos_sf2_file', '0930_FluidR3_GM_sf2_file',\n                '0930_GeneralUserGS_sf2_file', '0930_JCLive_sf2_file', '0930_SBLive_sf2', '0930_SoundBlasterOld_sf2', '0931_Aspirin_sf2_file', '0931_FluidR3_GM_sf2_file', '0931_GeneralUserGS_sf2_file',\n                '0931_SoundBlasterOld_sf2', '0940_Aspirin_sf2_file', '0940_Chaos_sf2_file', '0940_FluidR3_GM_sf2_file', '0940_GeneralUserGS_sf2_file', '0940_JCLive_sf2_file', '0940_SBLive_sf2',\n                '0940_SoundBlasterOld_sf2', '0941_Aspirin_sf2_file', '0941_FluidR3_GM_sf2_file', '0941_GeneralUserGS_sf2_file', '0941_JCLive_sf2_file', '0950_Aspirin_sf2_file', '0950_Chaos_sf2_file',\n                '0950_FluidR3_GM_sf2_file', '0950_GeneralUserGS_sf2_file', '0950_JCLive_sf2_file', '0950_SBLive_sf2', '0950_SoundBlasterOld_sf2', '0951_FluidR3_GM_sf2_file', '0951_GeneralUserGS_sf2_file',\n                '0960_Aspirin_sf2_file', '0960_Chaos_sf2_file', '0960_FluidR3_GM_sf2_file', '0960_GeneralUserGS_sf2_file', '0960_JCLive_sf2_file', '0960_SBLive_sf2', '0960_SoundBlasterOld_sf2',\n                '0961_Aspirin_sf2_file', '0961_FluidR3_GM_sf2_file', '0961_GeneralUserGS_sf2_file', '0961_SoundBlasterOld_sf2', '0962_GeneralUserGS_sf2_file', '0970_Aspirin_sf2_file', '0970_Chaos_sf2_file',\n                '0970_FluidR3_GM_sf2_file', '0970_GeneralUserGS_sf2_file', '0970_JCLive_sf2_file', '0970_SBLive_sf2', '0970_SoundBlasterOld_sf2', '0971_FluidR3_GM_sf2_file', '0971_GeneralUserGS_sf2_file',\n                '0971_SoundBlasterOld_sf2', '0980_Aspirin_sf2_file', '0980_Chaos_sf2_file', '0980_FluidR3_GM_sf2_file', '0980_GeneralUserGS_sf2_file', '0980_JCLive_sf2_file', '0980_SBLive_sf2',\n                '0980_SoundBlasterOld_sf2', '0981_Aspirin_sf2_file', '0981_FluidR3_GM_sf2_file', '0981_GeneralUserGS_sf2_file', '0981_SoundBlasterOld_sf2', '0982_GeneralUserGS_sf2_file',\n                '0983_GeneralUserGS_sf2_file', '0984_GeneralUserGS_sf2_file', '0990_Aspirin_sf2_file', '0990_Chaos_sf2_file', '0990_FluidR3_GM_sf2_file', '0990_GeneralUserGS_sf2_file', '0990_JCLive_sf2_file',\n                '0990_SBLive_sf2', '0990_SoundBlasterOld_sf2', '0991_Aspirin_sf2_file', '0991_FluidR3_GM_sf2_file', '0991_GeneralUserGS_sf2_file', '0991_JCLive_sf2_file', '0991_SoundBlasterOld_sf2',\n                '0992_FluidR3_GM_sf2_file', '0992_JCLive_sf2_file', '0993_JCLive_sf2_file', '0994_JCLive_sf2_file', '1000_Aspirin_sf2_file', '1000_Chaos_sf2_file', '1000_FluidR3_GM_sf2_file',\n                '1000_GeneralUserGS_sf2_file', '1000_JCLive_sf2_file', '1000_SBLive_sf2', '1000_SoundBlasterOld_sf2', '1001_Aspirin_sf2_file', '1001_FluidR3_GM_sf2_file', '1001_GeneralUserGS_sf2_file',\n                '1001_JCLive_sf2_file', '1001_SoundBlasterOld_sf2', '1002_Aspirin_sf2_file', '1002_FluidR3_GM_sf2_file', '1002_GeneralUserGS_sf2_file', '1010_Aspirin_sf2_file', '1010_Chaos_sf2_file',\n                '1010_FluidR3_GM_sf2_file', '1010_GeneralUserGS_sf2_file', '1010_JCLive_sf2_file', '1010_SBLive_sf2', '1010_SoundBlasterOld_sf2', '1011_Aspirin_sf2_file', '1011_FluidR3_GM_sf2_file',\n                '1011_JCLive_sf2_file', '1012_Aspirin_sf2_file', '1020_Aspirin_sf2_file', '1020_Chaos_sf2_file', '1020_FluidR3_GM_sf2_file', '1020_GeneralUserGS_sf2_file', '1020_JCLive_sf2_file',\n                '1020_SBLive_sf2', '1020_SoundBlasterOld_sf2', '1021_Aspirin_sf2_file', '1021_FluidR3_GM_sf2_file', '1021_GeneralUserGS_sf2_file', '1021_JCLive_sf2_file', '1021_SoundBlasterOld_sf2',\n                '1022_GeneralUserGS_sf2_file', '1030_Aspirin_sf2_file', '1030_Chaos_sf2_file', '1030_FluidR3_GM_sf2_file', '1030_GeneralUserGS_sf2_file', '1030_JCLive_sf2_file', '1030_SBLive_sf2',\n                '1030_SoundBlasterOld_sf2', '1031_Aspirin_sf2_file', '1031_FluidR3_GM_sf2_file', '1031_GeneralUserGS_sf2_file', '1031_SoundBlasterOld_sf2', '1032_FluidR3_GM_sf2_file', '1040_Aspirin_sf2_file',\n                '1040_Chaos_sf2_file', '1040_FluidR3_GM_sf2_file', '1040_GeneralUserGS_sf2_file', '1040_JCLive_sf2_file', '1040_SBLive_sf2', '1040_SoundBlasterOld_sf2', '1041_FluidR3_GM_sf2_file',\n                '1041_GeneralUserGS_sf2_file', '1050_Aspirin_sf2_file', '1050_Chaos_sf2_file', '1050_FluidR3_GM_sf2_file', '1050_GeneralUserGS_sf2_file', '1050_JCLive_sf2_file', '1050_SBLive_sf2',\n                '1050_SoundBlasterOld_sf2', '1051_GeneralUserGS_sf2_file', '1060_Aspirin_sf2_file', '1060_Chaos_sf2_file', '1060_FluidR3_GM_sf2_file', '1060_GeneralUserGS_sf2_file', '1060_JCLive_sf2_file',\n                '1060_SBLive_sf2', '1060_SoundBlasterOld_sf2', '1061_FluidR3_GM_sf2_file', '1061_GeneralUserGS_sf2_file', '1061_SoundBlasterOld_sf2', '1070_Aspirin_sf2_file', '1070_Chaos_sf2_file',\n                '1070_FluidR3_GM_sf2_file', '1070_GeneralUserGS_sf2_file', '1070_JCLive_sf2_file', '1070_SBLive_sf2', '1070_SoundBlasterOld_sf2', '1071_FluidR3_GM_sf2_file', '1071_GeneralUserGS_sf2_file',\n                '1072_GeneralUserGS_sf2_file', '1073_GeneralUserGS_sf2_file', '1080_Aspirin_sf2_file', '1080_Chaos_sf2_file', '1080_FluidR3_GM_sf2_file', '1080_GeneralUserGS_sf2_file', '1080_JCLive_sf2_file',\n                '1080_SBLive_sf2', '1080_SoundBlasterOld_sf2', '1081_SoundBlasterOld_sf2', '1090_Aspirin_sf2_file', '1090_Chaos_sf2_file', '1090_FluidR3_GM_sf2_file', '1090_GeneralUserGS_sf2_file',\n                '1090_JCLive_sf2_file', '1090_SBLive_sf2', '1090_SoundBlasterOld_sf2', '1091_SoundBlasterOld_sf2', '1100_Aspirin_sf2_file', '1100_Chaos_sf2_file', '1100_FluidR3_GM_sf2_file',\n                '1100_GeneralUserGS_sf2_file', '1100_JCLive_sf2_file', '1100_SBLive_sf2', '1100_SoundBlasterOld_sf2', '1101_Aspirin_sf2_file', '1101_FluidR3_GM_sf2_file', '1101_GeneralUserGS_sf2_file',\n                '1102_GeneralUserGS_sf2_file', '1110_Aspirin_sf2_file', '1110_Chaos_sf2_file', '1110_FluidR3_GM_sf2_file', '1110_GeneralUserGS_sf2_file', '1110_JCLive_sf2_file', '1110_SBLive_sf2',\n                '1110_SoundBlasterOld_sf2', '1120_Aspirin_sf2_file', '1120_Chaos_sf2_file', '1120_FluidR3_GM_sf2_file', '1120_GeneralUserGS_sf2_file', '1120_JCLive_sf2_file', '1120_SBLive_sf2',\n                '1120_SoundBlasterOld_sf2', '1121_SoundBlasterOld_sf2', '1130_Aspirin_sf2_file', '1130_Chaos_sf2_file', '1130_FluidR3_GM_sf2_file', '1130_GeneralUserGS_sf2_file', '1130_JCLive_sf2_file',\n                '1130_SBLive_sf2', '1130_SoundBlasterOld_sf2', '1131_FluidR3_GM_sf2_file', '1131_SoundBlasterOld_sf2', '1140_Aspirin_sf2_file', '1140_Chaos_sf2_file', '1140_FluidR3_GM_sf2_file',\n                '1140_GeneralUserGS_sf2_file', '1140_JCLive_sf2_file', '1140_SBLive_sf2', '1140_SoundBlasterOld_sf2', '1141_FluidR3_GM_sf2_file', '1150_Aspirin_sf2_file', '1150_Chaos_sf2_file',\n                '1150_FluidR3_GM_sf2_file', '1150_GeneralUserGS_sf2_file', '1150_JCLive_sf2_file', '1150_SBLive_sf2', '1150_SoundBlasterOld_sf2', '1151_FluidR3_GM_sf2_file', '1151_GeneralUserGS_sf2_file',\n                '1152_FluidR3_GM_sf2_file', '1152_GeneralUserGS_sf2_file', '1160_Aspirin_sf2_file', '1160_Chaos_sf2_file', '1160_FluidR3_GM_sf2_file', '1160_GeneralUserGS_sf2_file', '1160_JCLive_sf2_file',\n                '1160_SBLive_sf2', '1160_SoundBlasterOld_sf2', '1161_FluidR3_GM_sf2_file', '1161_GeneralUserGS_sf2_file', '1161_SoundBlasterOld_sf2', '1162_FluidR3_GM_sf2_file', '1162_GeneralUserGS_sf2_file',\n                '1163_FluidR3_GM_sf2_file', '1170_Aspirin_sf2_file', '1170_Chaos_sf2_file', '1170_FluidR3_GM_sf2_file', '1170_GeneralUserGS_sf2_file', '1170_JCLive_sf2_file', '1170_SBLive_sf2',\n                '1170_SoundBlasterOld_sf2', '1171_FluidR3_GM_sf2_file', '1171_GeneralUserGS_sf2_file', '1172_FluidR3_GM_sf2_file', '1173_FluidR3_GM_sf2_file', '1180_Aspirin_sf2_file', '1180_Chaos_sf2_file',\n                '1180_FluidR3_GM_sf2_file', '1180_GeneralUserGS_sf2_file', '1180_JCLive_sf2_file', '1180_SBLive_sf2', '1180_SoundBlasterOld_sf2', '1181_FluidR3_GM_sf2_file', '1181_GeneralUserGS_sf2_file',\n                '1181_SoundBlasterOld_sf2', '1190_Aspirin_sf2_file', '1190_Chaos_sf2_file', '1190_FluidR3_GM_sf2_file', '1190_GeneralUserGS_sf2_file', '1190_JCLive_sf2_file', '1190_SBLive_sf2',\n                '1190_SoundBlasterOld_sf2', '1191_GeneralUserGS_sf2_file', '1192_GeneralUserGS_sf2_file', '1193_GeneralUserGS_sf2_file', '1194_GeneralUserGS_sf2_file', '1200_Aspirin_sf2_file',\n                '1200_Chaos_sf2_file', '1200_FluidR3_GM_sf2_file', '1200_GeneralUserGS_sf2_file', '1200_JCLive_sf2_file', '1200_SBLive_sf2', '1200_SoundBlasterOld_sf2', '1201_Aspirin_sf2_file',\n                '1201_GeneralUserGS_sf2_file', '1202_GeneralUserGS_sf2_file', '1210_Aspirin_sf2_file', '1210_Chaos_sf2_file', '1210_FluidR3_GM_sf2_file', '1210_GeneralUserGS_sf2_file', '1210_JCLive_sf2_file',\n                '1210_SBLive_sf2', '1210_SoundBlasterOld_sf2', '1211_Aspirin_sf2_file', '1211_GeneralUserGS_sf2_file', '1212_GeneralUserGS_sf2_file', '1220_Aspirin_sf2_file', '1220_Chaos_sf2_file',\n                '1220_FluidR3_GM_sf2_file', '1220_GeneralUserGS_sf2_file', '1220_JCLive_sf2_file', '1220_SBLive_sf2', '1220_SoundBlasterOld_sf2', '1221_Aspirin_sf2_file', '1221_GeneralUserGS_sf2_file',\n                '1221_JCLive_sf2_file', '1222_Aspirin_sf2_file', '1222_GeneralUserGS_sf2_file', '1223_Aspirin_sf2_file', '1223_GeneralUserGS_sf2_file', '1224_Aspirin_sf2_file', '1224_GeneralUserGS_sf2_file',\n                '1225_GeneralUserGS_sf2_file', '1226_GeneralUserGS_sf2_file', '1230_Aspirin_sf2_file', '1230_Chaos_sf2_file', '1230_FluidR3_GM_sf2_file', '1230_GeneralUserGS_sf2_file', '1230_JCLive_sf2_file',\n                '1230_SBLive_sf2', '1230_SoundBlasterOld_sf2', '1231_Aspirin_sf2_file', '1231_GeneralUserGS_sf2_file', '1232_Aspirin_sf2_file', '1232_GeneralUserGS_sf2_file', '1233_GeneralUserGS_sf2_file',\n                '1234_GeneralUserGS_sf2_file', '1240_Aspirin_sf2_file', '1240_Chaos_sf2_file', '1240_FluidR3_GM_sf2_file', '1240_GeneralUserGS_sf2_file', '1240_JCLive_sf2_file', '1240_SBLive_sf2',\n                '1240_SoundBlasterOld_sf2', '1241_Aspirin_sf2_file', '1241_GeneralUserGS_sf2_file', '1242_Aspirin_sf2_file', '1242_GeneralUserGS_sf2_file', '1243_Aspirin_sf2_file', '1243_GeneralUserGS_sf2_file',\n                '1244_Aspirin_sf2_file', '1244_GeneralUserGS_sf2_file', '1250_Aspirin_sf2_file', '1250_Chaos_sf2_file', '1250_FluidR3_GM_sf2_file', '1250_GeneralUserGS_sf2_file', '1250_JCLive_sf2_file',\n                '1250_SBLive_sf2', '1250_SoundBlasterOld_sf2', '1251_Aspirin_sf2_file', '1251_FluidR3_GM_sf2_file', '1251_GeneralUserGS_sf2_file', '1252_Aspirin_sf2_file', '1252_FluidR3_GM_sf2_file',\n                '1252_GeneralUserGS_sf2_file', '1253_Aspirin_sf2_file', '1253_GeneralUserGS_sf2_file', '1254_Aspirin_sf2_file', '1254_GeneralUserGS_sf2_file', '1255_Aspirin_sf2_file',\n                '1255_GeneralUserGS_sf2_file', '1256_Aspirin_sf2_file', '1256_GeneralUserGS_sf2_file', '1257_Aspirin_sf2_file', '1257_GeneralUserGS_sf2_file', '1258_Aspirin_sf2_file',\n                '1258_GeneralUserGS_sf2_file', '1259_GeneralUserGS_sf2_file', '1260_Aspirin_sf2_file', '1260_Chaos_sf2_file', '1260_FluidR3_GM_sf2_file', '1260_GeneralUserGS_sf2_file', '1260_JCLive_sf2_file',\n                '1260_SBLive_sf2', '1260_SoundBlasterOld_sf2', '1261_Aspirin_sf2_file', '1261_GeneralUserGS_sf2_file', '1262_Aspirin_sf2_file', '1262_GeneralUserGS_sf2_file', '1263_Aspirin_sf2_file',\n                '1263_GeneralUserGS_sf2_file', '1264_Aspirin_sf2_file', '1264_GeneralUserGS_sf2_file', '1265_Aspirin_sf2_file', '1265_GeneralUserGS_sf2_file', '1270_Aspirin_sf2_file', '1270_Chaos_sf2_file',\n                '1270_FluidR3_GM_sf2_file', '1270_GeneralUserGS_sf2_file', '1270_JCLive_sf2_file', '1270_SBLive_sf2', '1270_SoundBlasterOld_sf2', '1271_Aspirin_sf2_file', '1271_GeneralUserGS_sf2_file',\n                '1272_Aspirin_sf2_file', '1272_GeneralUserGS_sf2_file', '1273_GeneralUserGS_sf2_file', '1274_GeneralUserGS_sf2_file'\n            ];\n        }\n        return this.instrumentKeyArray;\n    };\n    ;\n    WebAudioFontLoader.prototype.instrumentInfo = function (n) {\n        var key = this.instrumentKeys()[n];\n        var p = 1 * parseInt(key.substring(0, 3));\n        return {\n            variable: '_tone_' + key,\n            url: 'https://surikov.github.io/webaudiofontdata/sound/' + key + '.js',\n            title: this.instrumentTitles()[p],\n            pitch: -1\n        };\n    };\n    ;\n    WebAudioFontLoader.prototype.findInstrument = function (program) {\n        if (this.choosenInfos.length == 0) {\n            this.choosenInfos = [\n                [1, 2] //Accoustic Grand Piano\n                ,\n                [2, 14] //Bright Accoustic Piano\n                ,\n                [3, 25] //Electric Grand Piano\n                ,\n                [4, 37] //Honky-Tonk Piano\n                ,\n                [5, 48] //Electric Pino 1\n                ,\n                [6, 58] //Electric Piano 2\n                ,\n                [7, 70] //HarpsiChord Piano\n                ,\n                [8, 83] //Cravinet\n                ,\n                [9, 91] //Celesta\n                ,\n                [10, 99] //Glockenspiel\n                ,\n                [11, 107] //Music Box\n                ,\n                [12, 118] //Vibraphone\n                ,\n                [13, 127] // Marimba\n                ,\n                [14, 136] // Xylophone\n                ,\n                [15, 144] // Tubular Bells\n                ,\n                [16, 152] // Dulcimer\n                ,\n                [17, 164] // Drawbar Organ\n                ,\n                [18, 170] // Percussive Organ\n                ,\n                [19, 183] //Rock Organ\n                ,\n                [20, 194] // Church Organ\n                ,\n                [21, 205] //Reed Organ\n                ,\n                [22, 215] //Accordion\n                ,\n                [23, 228] //\n                ,\n                [24, 241] //\n                ,\n                [25, 254] //\n                ,\n                [26, 263] //\n                ,\n                [27, 277] //\n                ,\n                [28, 296] //\n                ,\n                [29, 308] //\n                ,\n                [30, 319] //\n                ,\n                [31, 350] //\n                ,\n                [32, 356] //\n                ,\n                [33, 369] //\n                ,\n                [34, 379] //\n                ,\n                [35, 385] //\n                ,\n                [36, 399] // Fretless Bass\n                ,\n                [37, 403] // Slap Bass 1\n                ,\n                [38, 412] // Slap Bass 2\n                ,\n                [39, 421] // Synth Bass 1\n                ,\n                [40, 438] // Synth Bass 2\n                ,\n                [41, 452] // Violin\n                ,\n                [42, 461] // Viola\n                ,\n                [43, 467] // Cello\n                ,\n                [44, 477] // Contrabass\n                ,\n                [45, 488] // Tremolo Strings\n                ,\n                [46, 493] // Pizzicato Strings\n                ,\n                [47, 501] // Orchestral Harp\n                ,\n                [48, 511] // Timpani\n                ,\n                [49, 518] // String Ensemble 1\n                ,\n                [50, 547] //String Ensemble 2\n            ];\n        }\n        for (var i = 0; i < this.instrumentKeys().length; i++) {\n            if (program == 1 * parseInt(this.instrumentKeys()[i].substring(0, 3))) {\n                return i;\n            }\n        }\n        console.log('program', program, 'not found');\n        return 0;\n    };\n    ;\n    WebAudioFontLoader.prototype.drumTitles = function () {\n        if (this.drumNamesArray.length == 0) {\n            var drumNames = [];\n            drumNames[35] = \"Bass Drum 2\";\n            drumNames[36] = \"Bass Drum 1\";\n            drumNames[37] = \"Side Stick/Rimshot\";\n            drumNames[38] = \"Snare Drum 1\";\n            drumNames[39] = \"Hand Clap\";\n            drumNames[40] = \"Snare Drum 2\";\n            drumNames[41] = \"Low Tom 2\";\n            drumNames[42] = \"Closed Hi-hat\";\n            drumNames[43] = \"Low Tom 1\";\n            drumNames[44] = \"Pedal Hi-hat\";\n            drumNames[45] = \"Mid Tom 2\";\n            drumNames[46] = \"Open Hi-hat\";\n            drumNames[47] = \"Mid Tom 1\";\n            drumNames[48] = \"High Tom 2\";\n            drumNames[49] = \"Crash Cymbal 1\";\n            drumNames[50] = \"High Tom 1\";\n            drumNames[51] = \"Ride Cymbal 1\";\n            drumNames[52] = \"Chinese Cymbal\";\n            drumNames[53] = \"Ride Bell\";\n            drumNames[54] = \"Tambourine\";\n            drumNames[55] = \"Splash Cymbal\";\n            drumNames[56] = \"Cowbell\";\n            drumNames[57] = \"Crash Cymbal 2\";\n            drumNames[58] = \"Vibra Slap\";\n            drumNames[59] = \"Ride Cymbal 2\";\n            drumNames[60] = \"High Bongo\";\n            drumNames[61] = \"Low Bongo\";\n            drumNames[62] = \"Mute High Conga\";\n            drumNames[63] = \"Open High Conga\";\n            drumNames[64] = \"Low Conga\";\n            drumNames[65] = \"High Timbale\";\n            drumNames[66] = \"Low Timbale\";\n            drumNames[67] = \"High Agogo\";\n            drumNames[68] = \"Low Agogo\";\n            drumNames[69] = \"Cabasa\";\n            drumNames[70] = \"Maracas\";\n            drumNames[71] = \"Short Whistle\";\n            drumNames[72] = \"Long Whistle\";\n            drumNames[73] = \"Short Guiro\";\n            drumNames[74] = \"Long Guiro\";\n            drumNames[75] = \"Claves\";\n            drumNames[76] = \"High Wood Block\";\n            drumNames[77] = \"Low Wood Block\";\n            drumNames[78] = \"Mute Cuica\";\n            drumNames[79] = \"Open Cuica\";\n            drumNames[80] = \"Mute Triangle\";\n            drumNames[81] = \"Open Triangle\";\n            this.drumNamesArray = drumNames;\n        }\n        return this.drumNamesArray;\n    };\n    ;\n    WebAudioFontLoader.prototype.drumKeys = function () {\n        if (this.drumKeyArray.length == 0) {\n            this.drumKeyArray = [\n                //'35_0_SBLive_sf2'\n                '35_0_Chaos_sf2_file',\n                '35_12_JCLive_sf2_file', '35_16_JCLive_sf2_file', '35_18_JCLive_sf2_file', '35_4_Chaos_sf2_file', '36_0_SBLive_sf2', '36_12_JCLive_sf2_file', '36_16_JCLive_sf2_file', '36_18_JCLive_sf2_file',\n                '36_4_Chaos_sf2_file', '37_0_SBLive_sf2', '37_12_JCLive_sf2_file', '37_16_JCLive_sf2_file', '37_18_JCLive_sf2_file', '37_4_Chaos_sf2_file', '38_0_SBLive_sf2', '38_12_JCLive_sf2_file',\n                '38_16_JCLive_sf2_file', '38_18_JCLive_sf2_file', '38_4_Chaos_sf2_file', '39_0_SBLive_sf2', '39_12_JCLive_sf2_file', '39_16_JCLive_sf2_file', '39_18_JCLive_sf2_file', '39_4_Chaos_sf2_file',\n                '40_0_SBLive_sf2', '40_12_JCLive_sf2_file', '40_16_JCLive_sf2_file', '40_18_JCLive_sf2_file', '40_4_Chaos_sf2_file', '41_0_SBLive_sf2', '41_12_JCLive_sf2_file', '41_16_JCLive_sf2_file',\n                '41_18_JCLive_sf2_file', '41_4_Chaos_sf2_file', '42_0_SBLive_sf2', '42_12_JCLive_sf2_file', '42_16_JCLive_sf2_file', '42_18_JCLive_sf2_file', '42_4_Chaos_sf2_file', '43_0_SBLive_sf2',\n                '43_12_JCLive_sf2_file', '43_16_JCLive_sf2_file', '43_18_JCLive_sf2_file', '43_4_Chaos_sf2_file', '44_0_SBLive_sf2', '44_12_JCLive_sf2_file', '44_16_JCLive_sf2_file', '44_18_JCLive_sf2_file',\n                '44_4_Chaos_sf2_file', '45_0_SBLive_sf2', '45_12_JCLive_sf2_file', '45_16_JCLive_sf2_file', '45_18_JCLive_sf2_file', '45_4_Chaos_sf2_file', '46_0_SBLive_sf2', '46_12_JCLive_sf2_file',\n                '46_16_JCLive_sf2_file', '46_18_JCLive_sf2_file', '46_4_Chaos_sf2_file', '47_0_SBLive_sf2', '47_12_JCLive_sf2_file', '47_16_JCLive_sf2_file', '47_18_JCLive_sf2_file', '47_4_Chaos_sf2_file',\n                '48_0_SBLive_sf2', '48_12_JCLive_sf2_file', '48_16_JCLive_sf2_file', '48_18_JCLive_sf2_file', '48_4_Chaos_sf2_file', '49_0_SBLive_sf2', '49_12_JCLive_sf2_file', '49_16_JCLive_sf2_file',\n                '49_18_JCLive_sf2_file', '49_4_Chaos_sf2_file', '50_0_SBLive_sf2', '50_12_JCLive_sf2_file', '50_16_JCLive_sf2_file', '50_18_JCLive_sf2_file', '50_4_Chaos_sf2_file', '51_0_SBLive_sf2',\n                '51_12_JCLive_sf2_file', '51_16_JCLive_sf2_file', '51_18_JCLive_sf2_file', '51_4_Chaos_sf2_file', '52_0_SBLive_sf2', '52_12_JCLive_sf2_file', '52_16_JCLive_sf2_file', '52_18_JCLive_sf2_file',\n                '52_4_Chaos_sf2_file', '53_0_SBLive_sf2', '53_12_JCLive_sf2_file', '53_16_JCLive_sf2_file', '53_18_JCLive_sf2_file', '53_4_Chaos_sf2_file', '54_0_SBLive_sf2', '54_12_JCLive_sf2_file',\n                '54_16_JCLive_sf2_file', '54_18_JCLive_sf2_file', '54_4_Chaos_sf2_file', '55_0_SBLive_sf2', '55_12_JCLive_sf2_file', '55_16_JCLive_sf2_file', '55_18_JCLive_sf2_file', '55_4_Chaos_sf2_file',\n                '56_0_SBLive_sf2', '56_12_JCLive_sf2_file', '56_16_JCLive_sf2_file', '56_18_JCLive_sf2_file', '56_4_Chaos_sf2_file', '57_0_SBLive_sf2', '57_12_JCLive_sf2_file', '57_16_JCLive_sf2_file',\n                '57_18_JCLive_sf2_file', '57_4_Chaos_sf2_file', '58_0_SBLive_sf2', '58_12_JCLive_sf2_file', '58_16_JCLive_sf2_file', '58_18_JCLive_sf2_file', '58_4_Chaos_sf2_file', '59_0_SBLive_sf2',\n                '59_12_JCLive_sf2_file', '59_16_JCLive_sf2_file', '59_18_JCLive_sf2_file', '59_4_Chaos_sf2_file', '60_0_SBLive_sf2', '60_12_JCLive_sf2_file', '60_16_JCLive_sf2_file', '60_18_JCLive_sf2_file',\n                '60_4_Chaos_sf2_file', '61_0_SBLive_sf2', '61_12_JCLive_sf2_file', '61_16_JCLive_sf2_file', '61_18_JCLive_sf2_file', '61_4_Chaos_sf2_file', '62_0_SBLive_sf2', '62_12_JCLive_sf2_file',\n                '62_16_JCLive_sf2_file', '62_18_JCLive_sf2_file', '62_4_Chaos_sf2_file', '63_0_SBLive_sf2', '63_12_JCLive_sf2_file', '63_16_JCLive_sf2_file', '63_18_JCLive_sf2_file', '63_4_Chaos_sf2_file',\n                '64_0_SBLive_sf2', '64_12_JCLive_sf2_file', '64_16_JCLive_sf2_file', '64_18_JCLive_sf2_file', '64_4_Chaos_sf2_file', '65_0_SBLive_sf2', '65_12_JCLive_sf2_file', '65_16_JCLive_sf2_file',\n                '65_18_JCLive_sf2_file', '65_4_Chaos_sf2_file', '66_0_SBLive_sf2', '66_12_JCLive_sf2_file', '66_16_JCLive_sf2_file', '66_18_JCLive_sf2_file', '66_4_Chaos_sf2_file', '67_0_SBLive_sf2',\n                '67_12_JCLive_sf2_file', '67_16_JCLive_sf2_file', '67_18_JCLive_sf2_file', '67_4_Chaos_sf2_file', '68_0_SBLive_sf2', '68_12_JCLive_sf2_file', '68_16_JCLive_sf2_file', '68_18_JCLive_sf2_file',\n                '68_4_Chaos_sf2_file', '69_0_SBLive_sf2', '69_12_JCLive_sf2_file', '69_16_JCLive_sf2_file', '69_18_JCLive_sf2_file', '69_4_Chaos_sf2_file', '70_0_SBLive_sf2', '70_12_JCLive_sf2_file',\n                '70_16_JCLive_sf2_file', '70_18_JCLive_sf2_file', '70_4_Chaos_sf2_file', '71_0_SBLive_sf2', '71_12_JCLive_sf2_file', '71_16_JCLive_sf2_file', '71_18_JCLive_sf2_file', '71_4_Chaos_sf2_file',\n                '72_0_SBLive_sf2', '72_12_JCLive_sf2_file', '72_16_JCLive_sf2_file', '72_18_JCLive_sf2_file', '72_4_Chaos_sf2_file', '73_0_SBLive_sf2', '73_12_JCLive_sf2_file', '73_16_JCLive_sf2_file',\n                '73_18_JCLive_sf2_file', '73_4_Chaos_sf2_file', '74_0_SBLive_sf2', '74_12_JCLive_sf2_file', '74_16_JCLive_sf2_file', '74_18_JCLive_sf2_file', '74_4_Chaos_sf2_file', '75_0_SBLive_sf2',\n                '75_12_JCLive_sf2_file', '75_16_JCLive_sf2_file', '75_18_JCLive_sf2_file', '75_4_Chaos_sf2_file', '76_0_SBLive_sf2', '76_12_JCLive_sf2_file', '76_16_JCLive_sf2_file', '76_18_JCLive_sf2_file',\n                '76_4_Chaos_sf2_file', '77_0_SBLive_sf2', '77_12_JCLive_sf2_file', '77_16_JCLive_sf2_file', '77_18_JCLive_sf2_file', '77_4_Chaos_sf2_file', '78_0_SBLive_sf2', '78_12_JCLive_sf2_file',\n                '78_16_JCLive_sf2_file', '78_18_JCLive_sf2_file', '78_4_Chaos_sf2_file', '79_0_SBLive_sf2', '79_12_JCLive_sf2_file', '79_16_JCLive_sf2_file', '79_18_JCLive_sf2_file', '79_4_Chaos_sf2_file',\n                '80_0_SBLive_sf2', '80_12_JCLive_sf2_file', '80_16_JCLive_sf2_file', '80_18_JCLive_sf2_file', '80_4_Chaos_sf2_file', '81_0_SBLive_sf2', '81_12_JCLive_sf2_file', '81_16_JCLive_sf2_file',\n                '81_18_JCLive_sf2_file', '81_4_Chaos_sf2_file'\n            ];\n        }\n        return this.drumKeyArray;\n    };\n    ;\n    WebAudioFontLoader.prototype.drumInfo = function (n) {\n        var key = this.drumKeys()[n];\n        var p = 1 * parseInt(key.substring(0, 2));\n        return {\n            variable: '_drum_' + key,\n            url: 'https://surikov.github.io/webaudiofontdata/sound/128' + key + '.js',\n            pitch: p,\n            title: this.drumTitles()[p]\n        };\n    };\n    ;\n    WebAudioFontLoader.prototype.findDrum = function (nn) {\n        for (var i = 0; i < this.drumKeys().length; i++) {\n            if (nn == 1 * parseInt(this.drumKeys()[i].substring(0, 2))) {\n                return i;\n            }\n        }\n        return 0;\n    };\n    return WebAudioFontLoader;\n}());\nconsole.log('WebAudioFont Engine v3.0.04 GPL3');\n//docs \n//npm link typescript\n//npx typedoc player.ts otypes.ts channel.ts loader.ts reverberator.ts ticker.ts\nexport var WebAudioFontPlayer = /** @class */ (function () {\n    function WebAudioFontPlayer() {\n        this.envelopes = [];\n        this.loader = new WebAudioFontLoader(this);\n        //onCacheFinish = null;\n        //onCacheProgress = null;\n        this.afterTime = 0.05;\n        this.nearZero = 0.000001;\n        this.adjustPreset = function (audioContext, preset) {\n            for (var i = 0; i < preset.zones.length; i++) {\n                this.adjustZone(audioContext, preset.zones[i]);\n            }\n        };\n        this.adjustZone = function (audioContext, zone) {\n            if (zone.buffer) {\n                //\n            }\n            else {\n                zone.delay = 0;\n                if (zone.sample) {\n                    var decoded = atob(zone.sample);\n                    zone.buffer = audioContext.createBuffer(1, decoded.length / 2, zone.sampleRate);\n                    var float32Array = zone.buffer.getChannelData(0);\n                    var b1, b2, n;\n                    for (var i = 0; i < decoded.length / 2; i++) {\n                        b1 = decoded.charCodeAt(i * 2);\n                        b2 = decoded.charCodeAt(i * 2 + 1);\n                        if (b1 < 0) {\n                            b1 = 256 + b1;\n                        }\n                        if (b2 < 0) {\n                            b2 = 256 + b2;\n                        }\n                        n = b2 * 256 + b1;\n                        if (n >= 65536 / 2) {\n                            n = n - 65536;\n                        }\n                        float32Array[i] = n / 65536.0;\n                    }\n                }\n                else {\n                    if (zone.file) {\n                        var datalen = zone.file.length;\n                        var arraybuffer = new ArrayBuffer(datalen);\n                        var view = new Uint8Array(arraybuffer);\n                        var decoded = atob(zone.file);\n                        var b;\n                        for (var i = 0; i < decoded.length; i++) {\n                            b = decoded.charCodeAt(i);\n                            view[i] = b;\n                        }\n                        audioContext.decodeAudioData(arraybuffer, function (audioBuffer) {\n                            zone.buffer = audioBuffer;\n                        });\n                    }\n                }\n                zone.loopStart = this.numValue(zone.loopStart, 0);\n                zone.loopEnd = this.numValue(zone.loopEnd, 0);\n                zone.coarseTune = this.numValue(zone.coarseTune, 0);\n                zone.fineTune = this.numValue(zone.fineTune, 0);\n                zone.originalPitch = this.numValue(zone.originalPitch, 6000);\n                zone.sampleRate = this.numValue(zone.sampleRate, 44100);\n                zone.sustain = this.numValue(zone.originalPitch, 0);\n            }\n        };\n    }\n    WebAudioFontPlayer.prototype.createChannel = function (audioContext) {\n        return new WebAudioFontChannel(audioContext);\n    };\n    ;\n    WebAudioFontPlayer.prototype.createReverberator = function (audioContext) {\n        return new WebAudioFontReverberator(audioContext);\n    };\n    ;\n    WebAudioFontPlayer.prototype.limitVolume = function (volume) {\n        if (volume) {\n            volume = 1.0 * volume;\n        }\n        else {\n            volume = 0.5;\n        }\n        return volume;\n    };\n    ;\n    WebAudioFontPlayer.prototype.queueChord = function (audioContext, target, preset, when, pitches, duration, volume, slides) {\n        volume = this.limitVolume(volume);\n        var envelopes = [];\n        for (var i = 0; i < pitches.length; i++) {\n            var singleSlide = undefined;\n            if (slides) {\n                singleSlide = slides[i];\n            }\n            var envlp = this.queueWaveTable(audioContext, target, preset, when, pitches[i], duration, volume - Math.random() * 0.01, singleSlide);\n            if (envlp)\n                envelopes.push(envlp);\n        }\n        return envelopes;\n    };\n    ;\n    WebAudioFontPlayer.prototype.queueStrumUp = function (audioContext, target, preset, when, pitches, duration, volume, slides) {\n        pitches.sort(function (a, b) {\n            return b - a;\n        });\n        return this.queueStrum(audioContext, target, preset, when, pitches, duration, volume, slides);\n    };\n    ;\n    WebAudioFontPlayer.prototype.queueStrumDown = function (audioContext, target, preset, when, pitches, duration, volume, slides) {\n        pitches.sort(function (a, b) {\n            return a - b;\n        });\n        return this.queueStrum(audioContext, target, preset, when, pitches, duration, volume, slides);\n    };\n    ;\n    WebAudioFontPlayer.prototype.queueStrum = function (audioContext, target, preset, when, pitches, duration, volume, slides) {\n        volume = this.limitVolume(volume);\n        if (when < audioContext.currentTime) {\n            when = audioContext.currentTime;\n        }\n        var envelopes = [];\n        for (var i = 0; i < pitches.length; i++) {\n            var singleSlide = undefined;\n            if (slides) {\n                singleSlide = slides[i];\n            }\n            var envlp = this.queueWaveTable(audioContext, target, preset, when + i * 0.01, pitches[i], duration, volume - Math.random() * 0.01, singleSlide);\n            if (envlp)\n                envelopes.push(envlp);\n            volume = 0.9 * volume;\n        }\n        return envelopes;\n    };\n    ;\n    WebAudioFontPlayer.prototype.queueSnap = function (audioContext, target, preset, when, pitches, duration, volume, slides) {\n        volume = this.limitVolume(volume);\n        volume = 1.5 * (volume || 1.0);\n        duration = 0.05;\n        return this.queueChord(audioContext, target, preset, when, pitches, duration, volume, slides);\n    };\n    ;\n    WebAudioFontPlayer.prototype.resumeContext = function (audioContext) {\n        try {\n            if (audioContext.state == 'suspended') {\n                console.log('audioContext.resume', audioContext);\n                audioContext.resume();\n            }\n        }\n        catch (e) {\n            //don't care\n        }\n    };\n    WebAudioFontPlayer.prototype.queueWaveTable = function (audioContext, target, preset, when, pitch, duration, volume, slides) {\n        this.resumeContext(audioContext);\n        volume = this.limitVolume(volume);\n        var zone = this.findZone(audioContext, preset, pitch);\n        if (zone) {\n            if (!(zone.buffer)) {\n                console.log('empty buffer ', zone);\n                return null;\n            }\n            var baseDetune = zone.originalPitch - 100.0 * zone.coarseTune - zone.fineTune;\n            var playbackRate = 1.0 * Math.pow(2, (100.0 * pitch - baseDetune) / 1200.0);\n            var startWhen = when;\n            if (startWhen < audioContext.currentTime) {\n                startWhen = audioContext.currentTime;\n            }\n            var waveDuration = duration + this.afterTime;\n            var loop = true;\n            if (zone.loopStart < 1 || zone.loopStart >= zone.loopEnd) {\n                loop = false;\n            }\n            if (!loop) {\n                if (waveDuration > zone.buffer.duration / playbackRate) {\n                    waveDuration = zone.buffer.duration / playbackRate;\n                }\n            }\n            var envelope = this.findEnvelope(audioContext, target);\n            this.setupEnvelope(audioContext, envelope, zone, volume, startWhen, waveDuration, duration);\n            envelope.audioBufferSourceNode = audioContext.createBufferSource();\n            envelope.audioBufferSourceNode.playbackRate.setValueAtTime(playbackRate, 0);\n            if (slides) {\n                if (slides.length > 0) {\n                    envelope.audioBufferSourceNode.playbackRate.setValueAtTime(playbackRate, when);\n                    for (var i = 0; i < slides.length; i++) {\n                        var nextPitch = pitch + slides[i].delta;\n                        var newPlaybackRate = 1.0 * Math.pow(2, (100.0 * nextPitch - baseDetune) / 1200.0);\n                        var newWhen = when + slides[i].when;\n                        envelope.audioBufferSourceNode.playbackRate.linearRampToValueAtTime(newPlaybackRate, newWhen);\n                    }\n                }\n            }\n            envelope.audioBufferSourceNode.buffer = zone.buffer;\n            if (loop) {\n                envelope.audioBufferSourceNode.loop = true;\n                envelope.audioBufferSourceNode.loopStart = zone.loopStart / zone.sampleRate + ((zone.delay) ? zone.delay : 0);\n                envelope.audioBufferSourceNode.loopEnd = zone.loopEnd / zone.sampleRate + ((zone.delay) ? zone.delay : 0);\n            }\n            else {\n                envelope.audioBufferSourceNode.loop = false;\n            }\n            envelope.audioBufferSourceNode.connect(envelope);\n            envelope.audioBufferSourceNode.start(startWhen, zone.delay);\n            envelope.audioBufferSourceNode.stop(startWhen + waveDuration);\n            envelope.when = startWhen;\n            envelope.duration = waveDuration;\n            envelope.pitch = pitch;\n            envelope.preset = preset;\n            return envelope;\n        }\n        else {\n            return null;\n        }\n    };\n    ;\n    WebAudioFontPlayer.prototype.noZeroVolume = function (n) {\n        if (n > this.nearZero) {\n            return n;\n        }\n        else {\n            return this.nearZero;\n        }\n    };\n    ;\n    WebAudioFontPlayer.prototype.setupEnvelope = function (audioContext, envelope, zone, volume, when, sampleDuration, noteDuration) {\n        envelope.gain.setValueAtTime(this.noZeroVolume(0), audioContext.currentTime);\n        var lastTime = 0;\n        var lastVolume = 0;\n        var duration = noteDuration;\n        var zoneahdsr = zone.ahdsr;\n        if (sampleDuration < duration + this.afterTime) {\n            duration = sampleDuration - this.afterTime;\n        }\n        if (zoneahdsr) {\n            if (!(zoneahdsr.length > 0)) {\n                zoneahdsr = [{\n                        duration: 0,\n                        volume: 1\n                    }, {\n                        duration: 0.5,\n                        volume: 1\n                    }, {\n                        duration: 1.5,\n                        volume: 0.5\n                    }, {\n                        duration: 3,\n                        volume: 0\n                    }\n                ];\n            }\n        }\n        else {\n            zoneahdsr = [{\n                    duration: 0,\n                    volume: 1\n                }, {\n                    duration: duration,\n                    volume: 1\n                }\n            ];\n        }\n        var ahdsr = zoneahdsr;\n        envelope.gain.cancelScheduledValues(when);\n        envelope.gain.setValueAtTime(this.noZeroVolume(ahdsr[0].volume * volume), when);\n        for (var i = 0; i < ahdsr.length; i++) {\n            if (ahdsr[i].duration > 0) {\n                if (ahdsr[i].duration + lastTime > duration) {\n                    var r = 1 - (ahdsr[i].duration + lastTime - duration) / ahdsr[i].duration;\n                    var n = lastVolume - r * (lastVolume - ahdsr[i].volume);\n                    envelope.gain.linearRampToValueAtTime(this.noZeroVolume(volume * n), when + duration);\n                    break;\n                }\n                lastTime = lastTime + ahdsr[i].duration;\n                lastVolume = ahdsr[i].volume;\n                envelope.gain.linearRampToValueAtTime(this.noZeroVolume(volume * lastVolume), when + lastTime);\n            }\n        }\n        envelope.gain.linearRampToValueAtTime(this.noZeroVolume(0), when + duration + this.afterTime);\n    };\n    ;\n    WebAudioFontPlayer.prototype.numValue = function (aValue, defValue) {\n        if (typeof aValue === \"number\") {\n            return aValue;\n        }\n        else {\n            return defValue;\n        }\n    };\n    ;\n    WebAudioFontPlayer.prototype.findEnvelope = function (audioContext, target) {\n        var envelope = null;\n        for (var i = 0; i < this.envelopes.length; i++) {\n            var e = this.envelopes[i];\n            if (e.target == target && audioContext.currentTime > e.when + e.duration + 0.001) {\n                try {\n                    if (e.audioBufferSourceNode) {\n                        e.audioBufferSourceNode.disconnect();\n                        e.audioBufferSourceNode.stop(0);\n                        e.audioBufferSourceNode = null;\n                    }\n                }\n                catch (x) {\n                    //audioBufferSourceNode is dead already\n                }\n                envelope = e;\n                break;\n            }\n        }\n        if (!(envelope)) {\n            envelope = audioContext.createGain();\n            envelope.target = target;\n            envelope.connect(target);\n            envelope.cancel = function () {\n                if (envelope && (envelope.when + envelope.duration > audioContext.currentTime)) {\n                    envelope.gain.cancelScheduledValues(0);\n                    envelope.gain.setTargetAtTime(0.00001, audioContext.currentTime, 0.1);\n                    envelope.when = audioContext.currentTime + 0.00001;\n                    envelope.duration = 0;\n                }\n            };\n            this.envelopes.push(envelope);\n        }\n        return envelope;\n    };\n    ;\n    WebAudioFontPlayer.prototype.findZone = function (audioContext, preset, pitch) {\n        var zone = null;\n        for (var i = preset.zones.length - 1; i >= 0; i--) {\n            zone = preset.zones[i];\n            if (zone.keyRangeLow <= pitch && zone.keyRangeHigh + 1 >= pitch) {\n                break;\n            }\n        }\n        try {\n            if (zone)\n                this.adjustZone(audioContext, zone);\n        }\n        catch (ex) {\n            console.log('adjustZone', ex);\n        }\n        return zone;\n    };\n    ;\n    WebAudioFontPlayer.prototype.cancelQueue = function (audioContext) {\n        for (var i = 0; i < this.envelopes.length; i++) {\n            var e = this.envelopes[i];\n            e.gain.cancelScheduledValues(0);\n            e.gain.setValueAtTime(this.nearZero, audioContext.currentTime);\n            e.when = -1;\n            try {\n                if (e.audioBufferSourceNode)\n                    e.audioBufferSourceNode.disconnect();\n            }\n            catch (ex) {\n                console.log(ex);\n            }\n        }\n    };\n    ;\n    return WebAudioFontPlayer;\n}());\nexport var WebAudioFontReverberator = /** @class */ (function () {\n    function WebAudioFontReverberator(audioContext) {\n        this.irr = \"\"; //http://www.openairlib.net/\n        var me = this;\n        this.audioContext = audioContext;\n        this.output = audioContext.createGain();\n        this.input = this.audioContext.createBiquadFilter();\n        this.compressor = audioContext.createDynamicsCompressor();\n        this.compressorWet = audioContext.createGain();\n        this.compressorDry = audioContext.createGain();\n        this.convolver = null;\n        this.convolverInput = audioContext.createGain();\n        this.dry = audioContext.createGain();\n        this.wet = audioContext.createGain();\n        this.input.type = \"lowpass\";\n        this.input.frequency.setTargetAtTime(18000, 0, 0.0001);\n        this.compressorWet.gain.setTargetAtTime(1.0, 0, 0.0001);\n        this.compressorDry.gain.setTargetAtTime(0.0, 0, 0.0001);\n        var threshold = -35;\n        var knee = 35;\n        var ratio = 8;\n        var attack = 0.02;\n        var release = 0.1;\n        this.compressor.threshold.setValueAtTime(threshold, 0.0001); //-100,0\n        this.compressor.knee.setValueAtTime(knee, 0.0001); //0,40\n        this.compressor.ratio.setValueAtTime(ratio, 0.0001); //2,20\n        this.compressor.attack.setValueAtTime(attack, 0.0001); //0,1\n        this.compressor.release.setValueAtTime(release, 0.0001); //0,1\n        this.dry.gain.setTargetAtTime(0.6, 0, 0.0001);\n        this.wet.gain.setTargetAtTime(0.4, 0, 0.0001);\n        this.input.connect(this.compressorDry);\n        this.compressorDry.connect(this.convolverInput);\n        this.input.connect(this.compressorWet);\n        this.compressorWet.connect(this.compressor);\n        this.compressor.connect(this.convolverInput);\n        this.convolverInput.connect(this.dry);\n        this.dry.connect(this.output);\n        this.convolverInput.connect(this.wet);\n        var datalen = this.irr.length / 2;\n        this.irrArrayBuffer = new ArrayBuffer(datalen);\n        var view = new Uint8Array(this.irrArrayBuffer);\n        var decoded = atob(this.irr);\n        var b;\n        for (var i = 0; i < decoded.length; i++) {\n            b = decoded.charCodeAt(i);\n            view[i] = b;\n        }\n        this.audioContext.decodeAudioData(this.irrArrayBuffer, function (audioBuffer) {\n            var c = audioContext.createConvolver();\n            c.buffer = audioBuffer;\n            me.wet.connect(c);\n            c.connect(me.output);\n            me.convolver = c;\n            console.log('convolver audioBuffer', audioBuffer);\n        });\n    }\n    return WebAudioFontReverberator;\n}());\nexport var WebAudioFontTicker = /** @class */ (function () {\n    function WebAudioFontTicker() {\n        this.stateStop = 1;\n        this.statePlay = 2;\n        this.stateEnd = 3;\n        this.state = this.stateStop;\n        this.stepDuration = 0.1;\n        this.lastPosition = 0;\n    }\n    WebAudioFontTicker.prototype.playLoop = function (player, audioContext, loopStart, loopPosition, loopEnd, queue) {\n        this.startTicks(audioContext, function (when, from, to) {\n            for (var i = 0; i < queue.length; i++) {\n                var note = queue[i];\n                if (note.when >= from && note.when < to) {\n                    var start = when + note.when - from;\n                    player.queueWaveTable(audioContext, note.destination, note.preset, start, note.pitch, note.duration, note.volume, note.slides);\n                }\n            }\n        }, loopStart, loopPosition, loopEnd, function (at) {\n            player.cancelQueue(audioContext);\n        });\n    };\n    ;\n    WebAudioFontTicker.prototype.startTicks = function (audioContext, onTick, loopStart, loopPosition, loopEnd, onEnd) {\n        if (this.state == this.stateStop) {\n            this.state = this.statePlay;\n            this.tick(audioContext, audioContext.currentTime, onTick, loopStart, loopPosition, loopEnd, onEnd);\n        }\n    };\n    ;\n    WebAudioFontTicker.prototype.tick = function (audioContext, nextAudioTime, onTick, loopStart, loopPosition, loopEnd, onEnd) {\n        this.lastPosition = loopPosition;\n        if (this.state == this.stateEnd) {\n            this.state = this.stateStop;\n            onEnd(loopPosition);\n        }\n        else {\n            if (this.state == this.statePlay) {\n                if (nextAudioTime - this.stepDuration < audioContext.currentTime) {\n                    if (loopPosition + this.stepDuration < loopEnd) {\n                        var from = loopPosition;\n                        var to = loopPosition + this.stepDuration;\n                        onTick(nextAudioTime, from, to);\n                        loopPosition = to;\n                    }\n                    else {\n                        var from = loopPosition;\n                        var to = loopEnd;\n                        onTick(nextAudioTime, from, to);\n                        from = loopStart;\n                        to = loopStart + this.stepDuration - (loopEnd - loopPosition);\n                        if (to < loopEnd) {\n                            onTick(nextAudioTime + (loopEnd - loopPosition), from, to);\n                            loopPosition = to;\n                        }\n                        else {\n                            loopPosition = loopEnd;\n                        }\n                    }\n                    nextAudioTime = nextAudioTime + this.stepDuration;\n                    if (nextAudioTime < audioContext.currentTime) {\n                        nextAudioTime = audioContext.currentTime;\n                    }\n                }\n                var me = this;\n                window.requestAnimationFrame(function (time) {\n                    me.tick(audioContext, nextAudioTime, onTick, loopStart, loopPosition, loopEnd, onEnd);\n                });\n            }\n        }\n    };\n    WebAudioFontTicker.prototype.cancel = function () {\n        if (this.state == this.statePlay) {\n            this.state = this.stateEnd;\n        }\n    };\n    ;\n    return WebAudioFontTicker;\n}());","export default function _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}","import superPropBase from \"./superPropBase.js\";\nexport default function _get() {\n  if (typeof Reflect !== \"undefined\" && Reflect.get) {\n    _get = Reflect.get.bind();\n  } else {\n    _get = function _get(target, property, receiver) {\n      var base = superPropBase(target, property);\n      if (!base) return;\n      var desc = Object.getOwnPropertyDescriptor(base, property);\n      if (desc.get) {\n        return desc.get.call(arguments.length < 3 ? target : receiver);\n      }\n      return desc.value;\n    };\n  }\n  return _get.apply(this, arguments);\n}","import getPrototypeOf from \"./getPrototypeOf.js\";\nexport default function _superPropBase(object, property) {\n  while (!Object.prototype.hasOwnProperty.call(object, property)) {\n    object = getPrototypeOf(object);\n    if (object === null) break;\n  }\n  return object;\n}","export default function _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n  return self;\n}","import unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nexport default function _createForOfIteratorHelper(o, allowArrayLike) {\n  var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n  if (!it) {\n    if (Array.isArray(o) || (it = unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n      var F = function F() {};\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n  var normalCompletion = true,\n    didErr = false,\n    err;\n  return {\n    s: function s() {\n      it = it.call(o);\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it[\"return\"] != null) it[\"return\"]();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}","export default function _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n  return _setPrototypeOf(o, p);\n}","import setPrototypeOf from \"./setPrototypeOf.js\";\nexport default function _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  Object.defineProperty(subClass, \"prototype\", {\n    writable: false\n  });\n  if (superClass) setPrototypeOf(subClass, superClass);\n}","export default function _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}","import getPrototypeOf from \"./getPrototypeOf.js\";\nimport isNativeReflectConstruct from \"./isNativeReflectConstruct.js\";\nimport possibleConstructorReturn from \"./possibleConstructorReturn.js\";\nexport default function _createSuper(Derived) {\n  var hasNativeReflectConstruct = isNativeReflectConstruct();\n  return function _createSuperInternal() {\n    var Super = getPrototypeOf(Derived),\n      result;\n    if (hasNativeReflectConstruct) {\n      var NewTarget = getPrototypeOf(this).constructor;\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n    return possibleConstructorReturn(this, result);\n  };\n}","import _typeof from \"./typeof.js\";\nimport assertThisInitialized from \"./assertThisInitialized.js\";\nexport default function _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  } else if (call !== void 0) {\n    throw new TypeError(\"Derived constructors may only return object or undefined\");\n  }\n  return assertThisInitialized(self);\n}","export default function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}","import toPropertyKey from \"./toPropertyKey.js\";\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, toPropertyKey(descriptor.key), descriptor);\n  }\n}\nexport default function _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}","/**\n * WEBMIDI.js v3.1.6\n * A JavaScript library to kickstart your MIDI projects\n * https://webmidijs.org\n * Build generated on June 4th, 2023.\n *\n * © Copyright 2015-2023, Jean-Philippe Côté.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License. You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under the License\n * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n * or implied. See the License for the specific language governing permissions and limitations under\n * the License.\n */\n\n/* Version: 3.1.6 - June 4, 2023 10:51:41 */\n/**\n * The `EventEmitter` class provides methods to implement the _observable_ design pattern. This\n * pattern allows one to _register_ a function to execute when a specific event is _emitted_ by the\n * emitter.\n *\n * It is intended to be an abstract class meant to be extended by (or mixed into) other objects.\n */\nclass EventEmitter {\n\n  /**\n   * Creates a new `EventEmitter`object.\n   *\n   * @param {boolean} [eventsSuspended=false] Whether the `EventEmitter` is initially in a suspended\n   * state (i.e. not executing callbacks).\n   */\n  constructor(eventsSuspended = false) {\n\n    /**\n     * An object containing a property for each event with at least one registered listener. Each\n     * event property contains an array of all the [`Listener`]{@link Listener} objects registered\n     * for the event.\n     *\n     * @type {Object}\n     * @readonly\n     */\n    this.eventMap = {};\n\n    /**\n     * Whether or not the execution of callbacks is currently suspended for this emitter.\n     *\n     * @type {boolean}\n     */\n    this.eventsSuspended = eventsSuspended == true ? true : false;\n\n  }\n\n  /**\n   * The callback function is executed when the associated event is triggered via [`emit()`](#emit).\n   * The [`emit()`](#emit) method relays all additional arguments it received to the callback\n   * functions. Since [`emit()`](#emit) can be passed a variable number of arguments, it is up to\n   * the developer to make sure the arguments match those of the associated callback. In addition,\n   * the callback also separately receives all the arguments present in the listener's\n   * [`arguments`](Listener#arguments) property. This makes it easy to pass data from where the\n   * listener is added to where the listener is executed.\n   *\n   * @callback EventEmitter~callback\n   * @param {...*} [args] A variable number of arguments matching the ones (if any) that were passed\n   * to the [`emit()`](#emit) method (except, the first one) followed by the arguments found in the\n   * listener's [`arguments`](Listener#arguments) array.\n   */\n\n  /**\n   * Adds a listener for the specified event. It returns the [`Listener`]{@link Listener} object\n   * that was created and attached to the event.\n   *\n   * To attach a global listener that will be triggered for any events, use\n   * [`EventEmitter.ANY_EVENT`]{@link #ANY_EVENT} as the first parameter. Note that a global\n   * listener will also be triggered by non-registered events.\n   *\n   * @param {string|Symbol} event The event to listen to.\n   * @param {EventEmitter~callback} callback The callback function to execute when the event occurs.\n   * @param {Object} [options={}]\n   * @param {Object} [options.context=this] The value of `this` in the callback function.\n   * @param {boolean} [options.prepend=false] Whether the listener should be added at the beginning\n   * of the listeners array and thus executed first.\n   * @param {number} [options.duration=Infinity] The number of milliseconds before the listener\n   * automatically expires.\n   * @param {number} [options.remaining=Infinity] The number of times after which the callback\n   * should automatically be removed.\n   * @param {array} [options.arguments] An array of arguments which will be passed separately to the\n   * callback function. This array is stored in the [`arguments`]{@link Listener#arguments}\n   * property of the [`Listener`]{@link Listener} object and can be retrieved or modified as\n   * desired.\n   *\n   * @returns {Listener} The newly created [`Listener`]{@link Listener} object.\n   *\n   * @throws {TypeError} The `event` parameter must be a string or\n   * [`EventEmitter.ANY_EVENT`]{@link EventEmitter#ANY_EVENT}.\n   * @throws {TypeError} The `callback` parameter must be a function.\n   */\n  addListener(event, callback, options = {}) {\n\n    if (\n      (typeof event === \"string\" && event.length < 1) ||\n      (event instanceof String && event.length < 1) ||\n      (typeof event !== \"string\" && !(event instanceof String) && event !== EventEmitter.ANY_EVENT)\n    ) {\n      throw new TypeError(\"The 'event' parameter must be a string or EventEmitter.ANY_EVENT.\");\n    }\n\n    if (typeof callback !== \"function\") throw new TypeError(\"The callback must be a function.\");\n\n    const listener = new Listener(event, this, callback, options);\n\n    if (!this.eventMap[event]) this.eventMap[event] = [];\n\n    if (options.prepend) {\n      this.eventMap[event].unshift(listener);\n    } else {\n      this.eventMap[event].push(listener);\n    }\n\n    return listener;\n\n  }\n\n  /**\n   * Adds a one-time listener for the specified event. The listener will be executed once and then\n   * destroyed. It returns the [`Listener`]{@link Listener} object that was created and attached\n   * to the event.\n   *\n   * To attach a global listener that will be triggered for any events, use\n   * [`EventEmitter.ANY_EVENT`]{@link EventEmitter#ANY_EVENT} as the first parameter. Note that a\n   * global listener will also be triggered by non-registered events.\n   *\n   * @param {string|Symbol} event The event to listen to\n   * @param {EventEmitter~callback} callback The callback function to execute when the event occurs\n   * @param {Object} [options={}]\n   * @param {Object} [options.context=this] The context to invoke the callback function in.\n   * @param {boolean} [options.prepend=false] Whether the listener should be added at the beginning\n   * of the listeners array and thus executed first.\n   * @param {number} [options.duration=Infinity] The number of milliseconds before the listener\n   * automatically expires.\n   * @param {array} [options.arguments] An array of arguments which will be passed separately to the\n   * callback function. This array is stored in the [`arguments`]{@link Listener#arguments}\n   * property of the [`Listener`]{@link Listener} object and can be retrieved or modified as\n   * desired.\n   *\n   * @returns {Listener} The newly created [`Listener`]{@link Listener} object.\n   *\n   * @throws {TypeError} The `event` parameter must be a string or\n   * [`EventEmitter.ANY_EVENT`]{@link EventEmitter#ANY_EVENT}.\n   * @throws {TypeError} The `callback` parameter must be a function.\n   */\n  addOneTimeListener(event, callback, options = {}) {\n    options.remaining = 1;\n    this.addListener(event, callback, options);\n  }\n\n  /**\n   * Identifier to use when adding or removing a listener that should be triggered when any events\n   * occur.\n   *\n   * @type {Symbol}\n   */\n  static get ANY_EVENT() {\n    return Symbol.for(\"Any event\");\n  }\n\n  /**\n   * Returns `true` if the specified event has at least one registered listener. If no event is\n   * specified, the method returns `true` if any event has at least one listener registered (this\n   * includes global listeners registered to\n   * [`EventEmitter.ANY_EVENT`]{@link EventEmitter#ANY_EVENT}).\n   *\n   * Note: to specifically check for global listeners added with\n   * [`EventEmitter.ANY_EVENT`]{@link EventEmitter#ANY_EVENT}, use\n   * [`EventEmitter.ANY_EVENT`]{@link EventEmitter#ANY_EVENT} as the parameter.\n   *\n   * @param {string|Symbol} [event=(any event)] The event to check\n   * @param {function|Listener} [callback=(any callback)] The actual function that was added to the\n   * event or the {@link Listener} object returned by `addListener()`.\n   * @returns {boolean}\n   */\n  hasListener(event, callback) {\n\n    if (event === undefined) {\n\n      // Check for ANY_EVENT\n      if (\n        this.eventMap[EventEmitter.ANY_EVENT] && this.eventMap[EventEmitter.ANY_EVENT].length > 0\n      ) {\n        return true;\n      }\n\n      // Check for any regular events\n      return Object.entries(this.eventMap).some(([, value]) => {\n        return value.length > 0;\n      });\n\n    } else {\n\n      if (this.eventMap[event] && this.eventMap[event].length > 0) {\n\n        if (callback instanceof Listener) {\n          let result = this.eventMap[event].filter(listener => listener === callback);\n          return result.length > 0;\n        } else if (typeof callback === \"function\") {\n          let result = this.eventMap[event].filter(listener => listener.callback === callback);\n          return result.length > 0;\n        } else if (callback != undefined) {\n          return false;\n        }\n\n        return true;\n\n      } else {\n        return false;\n      }\n\n\n    }\n\n  }\n\n  /**\n   * An array of all the unique event names for which the emitter has at least one registered\n   * listener.\n   *\n   * Note: this excludes global events registered with\n   * [`EventEmitter.ANY_EVENT`]{@link EventEmitter#ANY_EVENT} because they are not tied to a\n   * specific event.\n   *\n   * @type {string[]}\n   * @readonly\n   */\n  get eventNames() {\n    return Object.keys(this.eventMap);\n  }\n\n  /**\n   * Returns an array of all the [`Listener`]{@link Listener} objects that have been registered for\n   * a specific event.\n   *\n   * Please note that global events (those added with\n   * [`EventEmitter.ANY_EVENT`]{@link EventEmitter#ANY_EVENT}) are not returned for \"regular\"\n   * events. To get the list of global listeners, specifically use\n   * [`EventEmitter.ANY_EVENT`]{@link EventEmitter#ANY_EVENT} as the parameter.\n   *\n   * @param {string|Symbol} event The event to get listeners for.\n   * @returns {Listener[]} An array of [`Listener`]{@link Listener} objects.\n   */\n  getListeners(event) {\n    return this.eventMap[event] || [];\n  }\n\n  /**\n   * Suspends execution of all callbacks functions registered for the specified event type.\n   *\n   * You can suspend execution of callbacks registered with\n   * [`EventEmitter.ANY_EVENT`]{@link EventEmitter#ANY_EVENT} by passing\n   * [`EventEmitter.ANY_EVENT`]{@link EventEmitter#ANY_EVENT} to `suspendEvent()`. Beware that this\n   * will not suspend all callbacks but only those registered with\n   * [`EventEmitter.ANY_EVENT`]{@link EventEmitter#ANY_EVENT}. While this may seem counter-intuitive\n   * at first glance, it allows the selective suspension of global listeners while leaving other\n   * listeners alone. If you truly want to suspends all callbacks for a specific\n   * [`EventEmitter`]{@link EventEmitter}, simply set its `eventsSuspended` property to `true`.\n   *\n   * @param {string|Symbol} event The event name (or `EventEmitter.ANY_EVENT`) for which to suspend\n   * execution of all callback functions.\n   */\n  suspendEvent(event) {\n    this.getListeners(event).forEach(listener => {\n      listener.suspended = true;\n    });\n  }\n\n  /**\n   * Resumes execution of all suspended callback functions registered for the specified event type.\n   *\n   * You can resume execution of callbacks registered with\n   * [`EventEmitter.ANY_EVENT`]{@link EventEmitter#ANY_EVENT} by passing\n   * [`EventEmitter.ANY_EVENT`]{@link EventEmitter#ANY_EVENT} to `unsuspendEvent()`. Beware that\n   * this will not resume all callbacks but only those registered with\n   * [`EventEmitter.ANY_EVENT`]{@link EventEmitter#ANY_EVENT}. While this may seem\n   * counter-intuitive, it allows the selective unsuspension of global listeners while leaving other\n   * callbacks alone.\n   *\n   * @param {string|Symbol} event The event name (or `EventEmitter.ANY_EVENT`) for which to resume\n   * execution of all callback functions.\n   */\n  unsuspendEvent(event) {\n    this.getListeners(event).forEach(listener => {\n      listener.suspended = false;\n    });\n  }\n\n  /**\n   * Returns the number of listeners registered for a specific event.\n   *\n   * Please note that global events (those added with\n   * [`EventEmitter.ANY_EVENT`]{@link EventEmitter#ANY_EVENT}) do not count towards the remaining\n   * number for a \"regular\" event. To get the number of global listeners, specifically use\n   * [`EventEmitter.ANY_EVENT`]{@link EventEmitter#ANY_EVENT} as the parameter.\n   *\n   * @param {string|Symbol} event The event which is usually a string but can also be the special\n   * [`EventEmitter.ANY_EVENT`]{@link EventEmitter#ANY_EVENT} symbol.\n   * @returns {number} An integer representing the number of listeners registered for the specified\n   * event.\n   */\n  getListenerCount(event) {\n    return this.getListeners(event).length;\n  }\n\n  /**\n   * Executes the callback function of all the [`Listener`]{@link Listener} objects registered for\n   * a given event. The callback functions are passed the additional arguments passed to `emit()`\n   * (if any) followed by the arguments present in the [`arguments`](Listener#arguments) property of\n   * the [`Listener`](Listener) object (if any).\n   *\n   * If the [`eventsSuspended`]{@link #eventsSuspended} property is `true` or the\n   * [`Listener.suspended`]{@link Listener#suspended} property is `true`, the callback functions\n   * will not be executed.\n   *\n   * This function returns an array containing the return values of each of the callbacks.\n   *\n   * It should be noted that the regular listeners are triggered first followed by the global\n   * listeners (those added with [`EventEmitter.ANY_EVENT`]{@link EventEmitter#ANY_EVENT}).\n   *\n   * @param {string} event The event\n   * @param {...*} args Arbitrary number of arguments to pass along to the callback functions\n   *\n   * @returns {Array} An array containing the return value of each of the executed listener\n   * functions.\n   *\n   * @throws {TypeError} The `event` parameter must be a string.\n   */\n  emit(event, ...args) {\n\n    if (typeof event !== \"string\" && !(event instanceof String)) {\n      throw new TypeError(\"The 'event' parameter must be a string.\");\n    }\n\n    if (this.eventsSuspended) return;\n\n    // We collect return values from all listeners here\n    let results = [];\n\n    // We must make sure that we do not have undefined otherwise concat() will add an undefined\n    // entry in the array.\n    let listeners = this.eventMap[EventEmitter.ANY_EVENT] || [];\n    if (this.eventMap[event]) listeners = listeners.concat(this.eventMap[event]);\n\n    listeners.forEach(listener => {\n\n      // This is the per-listener suspension check\n      if (listener.suspended) return;\n\n      let params = [...args];\n      if (Array.isArray(listener.arguments)) params = params.concat(listener.arguments);\n\n      if (listener.remaining > 0) {\n        results.push(listener.callback.apply(listener.context, params));\n        listener.count++;\n      }\n\n      if (--listener.remaining < 1) listener.remove();\n\n    });\n\n    return results;\n\n  }\n\n  /**\n   * Removes all the listeners that were added to the object upon which the method is called and\n   * that match the specified criterias. If no parameters are passed, all listeners added to this\n   * object will be removed. If only the `event` parameter is passed, all listeners for that event\n   * will be removed from that object. You can remove global listeners by using\n   * [`EventEmitter.ANY_EVENT`]{@link EventEmitter#ANY_EVENT} as the first parameter.\n   *\n   * To use more granular options, you must at least define the `event`. Then, you can specify the\n   * callback to match or one or more of the additional options.\n   *\n   * @param {string} [event] The event name.\n   * @param {EventEmitter~callback} [callback] Only remove the listeners that match this exact\n   * callback function.\n   * @param {Object} [options]\n   * @param {*} [options.context] Only remove the listeners that have this exact context.\n   * @param {number} [options.remaining] Only remove the listener if it has exactly that many\n   * remaining times to be executed.\n   */\n  removeListener(event, callback, options = {}) {\n\n    if (event === undefined) {\n      this.eventMap = {};\n      return;\n    } else if (!this.eventMap[event]) {\n      return;\n    }\n\n    // Find listeners that do not match the criterias (those are the ones we will keep)\n    let listeners = this.eventMap[event].filter(listener => {\n\n      return (callback && listener.callback !== callback) ||\n        (options.remaining && options.remaining !== listener.remaining) ||\n        (options.context && options.context !== listener.context);\n\n    });\n\n    if (listeners.length) {\n      this.eventMap[event] = listeners;\n    } else {\n      delete this.eventMap[event];\n    }\n\n  }\n\n  /**\n   * The `waitFor()` method is an async function which returns a promise. The promise is fulfilled\n   * when the specified event occurs. The event can be a regular event or\n   * [`EventEmitter.ANY_EVENT`]{@link EventEmitter#ANY_EVENT} (if you want to resolve as soon as any\n   * event is emitted).\n   *\n   * If the `duration` option is set, the promise will only be fulfilled if the event is emitted\n   * within the specified duration. If the event has not been fulfilled after the specified\n   * duration, the promise is rejected. This makes it super easy to wait for an event and timeout\n   * after a certain time if the event is not triggered.\n   *\n   * @param {string|Symbol} event The event to wait for\n   * @param {Object} [options={}]\n   * @param {number} [options.duration=Infinity] The number of milliseconds to wait before the\n   * promise is automatically rejected.\n   */\n  async waitFor(event, options = {}) {\n\n    options.duration = parseInt(options.duration);\n    if (isNaN(options.duration) || options.duration <= 0) options.duration = Infinity;\n\n    return new Promise((resolve, reject) => {\n\n      let timeout;\n\n      let listener = this.addListener(event, () => {\n        clearTimeout(timeout);\n        resolve();\n      }, {remaining: 1});\n\n      if (options.duration !== Infinity) {\n        timeout = setTimeout(() => {\n          listener.remove();\n          reject(\"The duration expired before the event was emitted.\");\n        }, options.duration);\n      }\n\n    });\n\n  }\n\n  /**\n   * The number of unique events that have registered listeners.\n   *\n   * Note: this excludes global events registered with\n   * [`EventEmitter.ANY_EVENT`]{@link EventEmitter#ANY_EVENT} because they are not tied to a\n   * specific event.\n   *\n   * @type {number}\n   * @readonly\n   */\n  get eventCount() {\n    return Object.keys(this.eventMap).length;\n  }\n\n}\n\n/**\n * The `Listener` class represents a single event listener object. Such objects keep all relevant\n * contextual information such as the event being listened to, the object the listener was attached\n * to, the callback function and so on.\n *\n */\nclass Listener {\n\n  /**\n   * Creates a new `Listener` object\n   *\n   * @param {string|Symbol} event The event being listened to\n   * @param {EventEmitter} target The [`EventEmitter`]{@link EventEmitter} object that the listener\n   * is attached to.\n   * @param {EventEmitter~callback} callback The function to call when the listener is triggered\n   * @param {Object} [options={}]\n   * @param {Object} [options.context=target] The context to invoke the listener in (a.k.a. the\n   * value of `this` inside the callback function).\n   * @param {number} [options.remaining=Infinity] The remaining number of times after which the\n   * callback should automatically be removed.\n   * @param {array} [options.arguments] An array of arguments that will be passed separately to the\n   * callback function upon execution. The array is stored in the [`arguments`]{@link #arguments}\n   * property and can be retrieved or modified as desired.\n   *\n   * @throws {TypeError} The `event` parameter must be a string or\n   * [`EventEmitter.ANY_EVENT`]{@link EventEmitter#ANY_EVENT}.\n   * @throws {ReferenceError} The `target` parameter is mandatory.\n   * @throws {TypeError} The `callback` must be a function.\n   */\n  constructor(event, target, callback, options = {}) {\n\n    if (\n      typeof event !== \"string\" &&\n      !(event instanceof String) &&\n      event !== EventEmitter.ANY_EVENT\n    ) {\n      throw new TypeError(\"The 'event' parameter must be a string or EventEmitter.ANY_EVENT.\");\n    }\n\n    if (!target) {\n      throw new ReferenceError(\"The 'target' parameter is mandatory.\");\n    }\n\n    if (typeof callback !== \"function\") {\n      throw new TypeError(\"The 'callback' must be a function.\");\n    }\n\n    // Convert single value argument to array\n    if (options.arguments !== undefined && !Array.isArray(options.arguments)) {\n      options.arguments = [options.arguments];\n    }\n\n    // Define default options and merge declared options into them,\n    options = Object.assign({\n      context: target,\n      remaining: Infinity,\n      arguments: undefined,\n      duration: Infinity,\n    }, options);\n\n    // Make sure it is eventually deleted if a duration is supplied\n    if (options.duration !== Infinity) {\n      setTimeout(() => this.remove(), options.duration);\n    }\n\n    /**\n     * An array of arguments to pass to the callback function upon execution.\n     * @type {array}\n     */\n    this.arguments = options.arguments;\n\n    /**\n     * The callback function to execute.\n     * @type {Function}\n     */\n    this.callback = callback;\n\n    /**\n     * The context to execute the callback function in (a.k.a. the value of `this` inside the\n     * callback function)\n     * @type {Object}\n     */\n    this.context = options.context;\n\n    /**\n     * The number of times the listener function was executed.\n     * @type {number}\n     */\n    this.count = 0;\n\n    /**\n     * The event name.\n     * @type {string}\n     */\n    this.event = event;\n\n    /**\n     * The remaining number of times after which the callback should automatically be removed.\n     * @type {number}\n     */\n    this.remaining = parseInt(options.remaining) >= 1 ? parseInt(options.remaining) : Infinity;\n\n    /**\n     * Whether this listener is currently suspended or not.\n     * @type {boolean}\n     */\n    this.suspended = false;\n\n    /**\n     * The object that the event is attached to (or that emitted the event).\n     * @type {EventEmitter}\n     */\n    this.target = target;\n\n  }\n\n  /**\n   * Removes the listener from its target.\n   */\n  remove() {\n    this.target.removeListener(\n      this.event,\n      this.callback,\n      {context: this.context, remaining: this.remaining}\n    );\n  }\n\n}\n\n/**\n * The `Enumerations` class contains enumerations and arrays of elements used throughout the\n * library. All its properties are static and should be referenced using the class name. For\n * example: `Enumerations.CHANNEL_MESSAGES`.\n *\n * @license Apache-2.0\n * @since 3.0.0\n */\nclass Enumerations {\n\n  /**\n   * @enum {Object.<string, number>}\n   * @readonly\n   * @deprecated since 3.1 (use Enumerations.CHANNEL_MESSAGES instead)\n   * @private\n   * @static\n   */\n  static get MIDI_CHANNEL_MESSAGES() {\n\n    if (this.validation) {\n      console.warn(\n        \"The MIDI_CHANNEL_MESSAGES enum has been deprecated. Use the \" +\n        \"Enumerations.CHANNEL_MESSAGES enum instead.\"\n      );\n    }\n\n    return Enumerations.CHANNEL_MESSAGES;\n\n  }\n\n  /**\n   * Enumeration of all MIDI channel message names and their associated 4-bit numerical value:\n   *\n   * | Message Name        | Hexadecimal | Decimal |\n   * |---------------------|-------------|---------|\n   * | `noteoff`           | 0x8         | 8       |\n   * | `noteon`            | 0x9         | 9       |\n   * | `keyaftertouch`     | 0xA         | 10      |\n   * | `controlchange`     | 0xB         | 11      |\n   * | `programchange`     | 0xC         | 12      |\n   * | `channelaftertouch` | 0xD         | 13      |\n   * | `pitchbend`         | 0xE         | 14      |\n   *\n   * @enum {Object.<string, number>}\n   * @readonly\n   * @since 3.1\n   * @static\n   */\n  static get CHANNEL_MESSAGES() {\n\n    return {\n      noteoff: 0x8,           // 8\n      noteon: 0x9,            // 9\n      keyaftertouch: 0xA,     // 10\n      controlchange: 0xB,     // 11\n      programchange: 0xC,     // 12\n      channelaftertouch: 0xD, // 13\n      pitchbend: 0xE          // 14\n    };\n\n  }\n\n  /**\n   * A simple array of the 16 valid MIDI channel numbers (`1` to `16`):\n   *\n   * @type {number[]}\n   * @readonly\n   * @since 3.1\n   * @static\n   */\n  static get CHANNEL_NUMBERS() {\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16];\n  }\n\n  /**\n   * @type {number[]}\n   * @readonly\n   * @deprecated since 3.1 (use Enumerations.CHANNEL_NUMBERS instead)\n   * @private\n   * @static\n   */\n  static get MIDI_CHANNEL_NUMBERS() {\n\n    if (this.validation) {\n      console.warn(\n        \"The MIDI_CHANNEL_NUMBERS array has been deprecated. Use the \" +\n        \"Enumerations.CHANNEL_NUMBERS array instead.\"\n      );\n    }\n\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16];\n\n  }\n\n  /**\n   * Enumeration of all MIDI channel mode message names and their associated numerical value:\n   *\n   *\n   * | Message Name          | Hexadecimal | Decimal |\n   * |-----------------------|-------------|---------|\n   * | `allsoundoff`         | 0x78        | 120     |\n   * | `resetallcontrollers` | 0x79        | 121     |\n   * | `localcontrol`        | 0x7A        | 122     |\n   * | `allnotesoff`         | 0x7B        | 123     |\n   * | `omnimodeoff`         | 0x7C        | 124     |\n   * | `omnimodeon`          | 0x7D        | 125     |\n   * | `monomodeon`          | 0x7E        | 126     |\n   * | `polymodeon`          | 0x7F        | 127     |\n   *\n   * @enum {Object.<string, number>}\n   * @readonly\n   * @since 3.1\n   * @static\n   */\n  static get CHANNEL_MODE_MESSAGES() {\n\n    return {\n      allsoundoff: 120,\n      resetallcontrollers: 121,\n      localcontrol: 122,\n      allnotesoff: 123,\n      omnimodeoff: 124,\n      omnimodeon: 125,\n      monomodeon: 126,\n      polymodeon: 127\n    };\n\n  }\n\n  /**\n   * @enum {Object.<string, number>}\n   * @deprecated since 3.1 (use Enumerations.CHANNEL_MODE_MESSAGES instead)\n   * @private\n   * @readonly\n   * @static\n   */\n  static get MIDI_CHANNEL_MODE_MESSAGES() {\n\n    if (this.validation) {\n      console.warn(\n        \"The MIDI_CHANNEL_MODE_MESSAGES enum has been deprecated. Use the \" +\n        \"Enumerations.CHANNEL_MODE_MESSAGES enum instead.\"\n      );\n    }\n\n    return Enumerations.CHANNEL_MODE_MESSAGES;\n\n  }\n\n  /**\n   * @enum {Object.<string, number>}\n   * @readonly\n   * @static\n   * @private\n   * @deprecated since version 3.0.26 (use `CONTROL_CHANGE_MESSAGES` instead)\n   */\n  static get MIDI_CONTROL_CHANGE_MESSAGES() {\n\n    if (this.validation) {\n      console.warn(\n        \"The MIDI_CONTROL_CHANGE_MESSAGES enum has been deprecated. Use the \" +\n        \"Enumerations.CONTROL_CHANGE_MESSAGES array instead.\"\n      );\n    }\n\n    return {\n\n      bankselectcoarse: 0,\n      modulationwheelcoarse: 1,\n      breathcontrollercoarse: 2,\n      controller3: 3,\n      footcontrollercoarse: 4,\n      portamentotimecoarse: 5,\n      dataentrycoarse: 6,\n      volumecoarse: 7,\n      balancecoarse: 8,\n      controller9: 9,\n      pancoarse: 10,\n      expressioncoarse: 11,\n      effectcontrol1coarse: 12,\n      effectcontrol2coarse: 13,\n      controller14: 14,\n      controller15: 15,\n      generalpurposeslider1: 16,\n      generalpurposeslider2: 17,\n      generalpurposeslider3: 18,\n      generalpurposeslider4: 19,\n      controller20: 20,\n      controller21: 21,\n      controller22: 22,\n      controller23: 23,\n      controller24: 24,\n      controller25: 25,\n      controller26: 26,\n      controller27: 27,\n      controller28: 28,\n      controller29: 29,\n      controller30: 30,\n      controller31: 31,\n      bankselectfine: 32,\n      modulationwheelfine: 33,\n      breathcontrollerfine: 34,\n      controller35: 35,\n      footcontrollerfine: 36,\n      portamentotimefine: 37,\n      dataentryfine: 38,\n      volumefine: 39,\n      balancefine: 40,\n      controller41: 41,\n      panfine: 42,\n      expressionfine: 43,\n      effectcontrol1fine: 44,\n      effectcontrol2fine: 45,\n      controller46: 46,\n      controller47: 47,\n      controller48: 48,\n      controller49: 49,\n      controller50: 50,\n      controller51: 51,\n      controller52: 52,\n      controller53: 53,\n      controller54: 54,\n      controller55: 55,\n      controller56: 56,\n      controller57: 57,\n      controller58: 58,\n      controller59: 59,\n      controller60: 60,\n      controller61: 61,\n      controller62: 62,\n      controller63: 63,\n      holdpedal: 64,\n      portamento: 65,\n      sustenutopedal: 66,\n      softpedal: 67,\n      legatopedal: 68,\n      hold2pedal: 69,\n      soundvariation: 70,\n      resonance: 71,\n      soundreleasetime: 72,\n      soundattacktime: 73,\n      brightness: 74,\n      soundcontrol6: 75,\n      soundcontrol7: 76,\n      soundcontrol8: 77,\n      soundcontrol9: 78,\n      soundcontrol10: 79,\n      generalpurposebutton1: 80,\n      generalpurposebutton2: 81,\n      generalpurposebutton3: 82,\n      generalpurposebutton4: 83,\n      controller84: 84,\n      controller85: 85,\n      controller86: 86,\n      controller87: 87,\n      controller88: 88,\n      controller89: 89,\n      controller90: 90,\n      reverblevel: 91,\n      tremololevel: 92,\n      choruslevel: 93,\n      celestelevel: 94,\n      phaserlevel: 95,\n      databuttonincrement: 96,\n      databuttondecrement: 97,\n      nonregisteredparametercoarse: 98,\n      nonregisteredparameterfine: 99,\n      registeredparametercoarse: 100,\n      registeredparameterfine: 101,\n      controller102: 102,\n      controller103: 103,\n      controller104: 104,\n      controller105: 105,\n      controller106: 106,\n      controller107: 107,\n      controller108: 108,\n      controller109: 109,\n      controller110: 110,\n      controller111: 111,\n      controller112: 112,\n      controller113: 113,\n      controller114: 114,\n      controller115: 115,\n      controller116: 116,\n      controller117: 117,\n      controller118: 118,\n      controller119: 119,\n      allsoundoff: 120,\n      resetallcontrollers: 121,\n      localcontrol: 122,\n      allnotesoff: 123,\n      omnimodeoff: 124,\n      omnimodeon: 125,\n      monomodeon: 126,\n      polymodeon: 127\n\n    };\n\n  }\n\n  /**\n   * An array of objects, ordered by control number, describing control change messages. Each object\n   * in the array has 3 properties with some objects having a fourth one (`position`) :\n   *\n   *  * `number`: MIDI control number (0-127);\n   *  * `name`: name of emitted event (eg: `bankselectcoarse`, `choruslevel`, etc) that can be\n   *  listened to;\n   *  * `description`: user-friendly description of the controller's purpose;\n   *  * `position` (optional): whether this controller's value should be considered an `msb` or\n   *  `lsb`\n   *\n   * Not all controllers have a predefined function. For those that don't, `name` is the word\n   * \"controller\" followed by the number (e.g. `controller112`).\n   *\n   * | Event name                     | Control Number |\n   * |--------------------------------|----------------|\n   * | `bankselectcoarse`             | 0              |\n   * | `modulationwheelcoarse`        | 1              |\n   * | `breathcontrollercoarse`       | 2              |\n   * | `controller3`                  | 3              |\n   * | `footcontrollercoarse`         | 4              |\n   * | `portamentotimecoarse`         | 5              |\n   * | `dataentrycoarse`              | 6              |\n   * | `volumecoarse`                 | 7              |\n   * | `balancecoarse`                | 8              |\n   * | `controller9`                  | 9              |\n   * | `pancoarse`                    | 10             |\n   * | `expressioncoarse`             | 11             |\n   * | `effectcontrol1coarse`         | 12             |\n   * | `effectcontrol2coarse`         | 13             |\n   * | `controller14`                 | 14             |\n   * | `controller15`                 | 15             |\n   * | `generalpurposecontroller1`    | 16             |\n   * | `generalpurposecontroller2`    | 17             |\n   * | `generalpurposecontroller3`    | 18             |\n   * | `generalpurposecontroller4`    | 19             |\n   * | `controller20`                 | 20             |\n   * | `controller21`                 | 21             |\n   * | `controller22`                 | 22             |\n   * | `controller23`                 | 23             |\n   * | `controller24`                 | 24             |\n   * | `controller25`                 | 25             |\n   * | `controller26`                 | 26             |\n   * | `controller27`                 | 27             |\n   * | `controller28`                 | 28             |\n   * | `controller29`                 | 29             |\n   * | `controller30`                 | 30             |\n   * | `controller31`                 | 31             |\n   * | `bankselectfine`               | 32             |\n   * | `modulationwheelfine`          | 33             |\n   * | `breathcontrollerfine`         | 34             |\n   * | `controller35`                 | 35             |\n   * | `footcontrollerfine`           | 36             |\n   * | `portamentotimefine`           | 37             |\n   * | `dataentryfine`                | 38             |\n   * | `channelvolumefine`            | 39             |\n   * | `balancefine`                  | 40             |\n   * | `controller41`                 | 41             |\n   * | `panfine`                      | 42             |\n   * | `expressionfine`               | 43             |\n   * | `effectcontrol1fine`           | 44             |\n   * | `effectcontrol2fine`           | 45             |\n   * | `controller46`                 | 46             |\n   * | `controller47`                 | 47             |\n   * | `controller48`                 | 48             |\n   * | `controller49`                 | 49             |\n   * | `controller50`                 | 50             |\n   * | `controller51`                 | 51             |\n   * | `controller52`                 | 52             |\n   * | `controller53`                 | 53             |\n   * | `controller54`                 | 54             |\n   * | `controller55`                 | 55             |\n   * | `controller56`                 | 56             |\n   * | `controller57`                 | 57             |\n   * | `controller58`                 | 58             |\n   * | `controller59`                 | 59             |\n   * | `controller60`                 | 60             |\n   * | `controller61`                 | 61             |\n   * | `controller62`                 | 62             |\n   * | `controller63`                 | 63             |\n   * | `damperpedal`                  | 64             |\n   * | `portamento`                   | 65             |\n   * | `sostenuto`                    | 66             |\n   * | `softpedal`                    | 67             |\n   * | `legatopedal`                  | 68             |\n   * | `hold2`                        | 69             |\n   * | `soundvariation`               | 70             |\n   * | `resonance`                    | 71             |\n   * | `releasetime`                  | 72             |\n   * | `attacktime`                   | 73             |\n   * | `brightness`                   | 74             |\n   * | `decaytime`                    | 75             |\n   * | `vibratorate`                  | 76             |\n   * | `vibratodepth`                 | 77             |\n   * | `vibratodelay`                 | 78             |\n   * | `controller79`                 | 79             |\n   * | `generalpurposecontroller5`    | 80             |\n   * | `generalpurposecontroller6`    | 81             |\n   * | `generalpurposecontroller7`    | 82             |\n   * | `generalpurposecontroller8`    | 83             |\n   * | `portamentocontrol`            | 84             |\n   * | `controller85`                 | 85             |\n   * | `controller86`                 | 86             |\n   * | `controller87`                 | 87             |\n   * | `highresolutionvelocityprefix` | 88             |\n   * | `controller89`                 | 89             |\n   * | `controller90`                 | 90             |\n   * | `effect1depth`                 | 91             |\n   * | `effect2depth`                 | 92             |\n   * | `effect3depth`                 | 93             |\n   * | `effect4depth`                 | 94             |\n   * | `effect5depth`                 | 95             |\n   * | `dataincrement`                | 96             |\n   * | `datadecrement`                | 97             |\n   * | `nonregisteredparameterfine`   | 98             |\n   * | `nonregisteredparametercoarse` | 99             |\n   * | `nonregisteredparameterfine`   | 100            |\n   * | `registeredparametercoarse`    | 101            |\n   * | `controller102`                | 102            |\n   * | `controller103`                | 103            |\n   * | `controller104`                | 104            |\n   * | `controller105`                | 105            |\n   * | `controller106`                | 106            |\n   * | `controller107`                | 107            |\n   * | `controller108`                | 108            |\n   * | `controller109`                | 109            |\n   * | `controller110`                | 110            |\n   * | `controller111`                | 111            |\n   * | `controller112`                | 112            |\n   * | `controller113`                | 113            |\n   * | `controller114`                | 114            |\n   * | `controller115`                | 115            |\n   * | `controller116`                | 116            |\n   * | `controller117`                | 117            |\n   * | `controller118`                | 118            |\n   * | `controller119`                | 119            |\n   * | `allsoundoff`                  | 120            |\n   * | `resetallcontrollers`          | 121            |\n   * | `localcontrol`                 | 122            |\n   * | `allnotesoff`                  | 123            |\n   * | `omnimodeoff`                  | 124            |\n   * | `omnimodeon`                   | 125            |\n   * | `monomodeon`                   | 126            |\n   * | `polymodeon`                   | 127            |\n   *\n   * @type {object[]}\n   * @readonly\n   * @static\n   * @since 3.1\n   */\n  static get CONTROL_CHANGE_MESSAGES() {\n\n    return [\n      {\n        number: 0,\n        name: \"bankselectcoarse\",\n        description: \"Bank Select (Coarse)\",\n        position: \"msb\"\n      },\n      {\n        number: 1,\n        name: \"modulationwheelcoarse\",\n        description: \"Modulation Wheel (Coarse)\",\n        position: \"msb\"\n      },\n      {\n        number: 2,\n        name: \"breathcontrollercoarse\",\n        description: \"Breath Controller (Coarse)\",\n        position: \"msb\"\n      },\n      {\n        number: 3,\n        name: \"controller3\",\n        description: \"Undefined\",\n        position: \"msb\"\n      },\n      {\n        number: 4,\n        name: \"footcontrollercoarse\",\n        description: \"Foot Controller (Coarse)\",\n        position: \"msb\"\n      },\n      {\n        number: 5,\n        name: \"portamentotimecoarse\",\n        description: \"Portamento Time (Coarse)\",\n        position: \"msb\"\n      },\n      {\n        number: 6,\n        name: \"dataentrycoarse\",\n        description: \"Data Entry (Coarse)\",\n        position: \"msb\"\n      },\n      {\n        number: 7,\n        name: \"volumecoarse\",\n        description: \"Channel Volume (Coarse)\",\n        position: \"msb\"\n      },\n      {\n        number: 8,\n        name: \"balancecoarse\",\n        description: \"Balance (Coarse)\",\n        position: \"msb\"\n      },\n      {\n        number: 9,\n        name: \"controller9\",\n        description: \"Controller 9 (Coarse)\",\n        position: \"msb\"\n      },\n      {\n        number: 10,\n        name: \"pancoarse\",\n        description: \"Pan (Coarse)\",\n        position: \"msb\"\n      },\n      {\n        number: 11,\n        name: \"expressioncoarse\",\n        description: \"Expression Controller (Coarse)\",\n        position: \"msb\"\n      },\n      {\n        number: 12,\n        name: \"effectcontrol1coarse\",\n        description: \"Effect Control 1 (Coarse)\",\n        position: \"msb\"\n      },\n      {\n        number: 13,\n        name: \"effectcontrol2coarse\",\n        description: \"Effect Control 2 (Coarse)\",\n        position: \"msb\"\n      },\n      {\n        number: 14,\n        name: \"controller14\",\n        description: \"Undefined\",\n        position: \"msb\"\n      },\n      {\n        number: 15,\n        name: \"controller15\",\n        description: \"Undefined\",\n        position: \"msb\"\n      },\n      {\n        number: 16,\n        name: \"generalpurposecontroller1\",\n        description: \"General Purpose Controller 1 (Coarse)\",\n        position: \"msb\"\n      },\n      {\n        number: 17,\n        name: \"generalpurposecontroller2\",\n        description: \"General Purpose Controller 2 (Coarse)\",\n        position: \"msb\"\n      },\n      {\n        number: 18,\n        name: \"generalpurposecontroller3\",\n        description: \"General Purpose Controller 3 (Coarse)\",\n        position: \"msb\"\n      },\n      {\n        number: 19,\n        name: \"generalpurposecontroller4\",\n        description: \"General Purpose Controller 4 (Coarse)\",\n        position: \"msb\"\n      },\n      {\n        number: 20,\n        name: \"controller20\",\n        description: \"Undefined\",\n        position: \"msb\"\n      },\n      {\n        number: 21,\n        name: \"controller21\",\n        description: \"Undefined\",\n        position: \"msb\"\n      },\n      {\n        number: 22,\n        name: \"controller22\",\n        description: \"Undefined\",\n        position: \"msb\"\n      },\n      {\n        number: 23,\n        name: \"controller23\",\n        description: \"Undefined\",\n        position: \"msb\"\n      },\n      {\n        number: 24,\n        name: \"controller24\",\n        description: \"Undefined\",\n        position: \"msb\"\n      },\n      {\n        number: 25,\n        name: \"controller25\",\n        description: \"Undefined\",\n        position: \"msb\"\n      },\n      {\n        number: 26,\n        name: \"controller26\",\n        description: \"Undefined\",\n        position: \"msb\"\n      },\n      {\n        number: 27,\n        name: \"controller27\",\n        description: \"Undefined\",\n        position: \"msb\"\n      },\n      {\n        number: 28,\n        name: \"controller28\",\n        description: \"Undefined\",\n        position: \"msb\"\n      },\n      {\n        number: 29,\n        name: \"controller29\",\n        description: \"Undefined\",\n        position: \"msb\"\n      },\n      {\n        number: 30,\n        name: \"controller30\",\n        description: \"Undefined\",\n        position: \"msb\"\n      },\n      {\n        number: 31,\n        name: \"controller31\",\n        description: \"Undefined\",\n        position: \"msb\"\n      },\n      {\n        number: 32,\n        name: \"bankselectfine\",\n        description: \"Bank Select (Fine)\",\n        position: \"lsb\"\n      },\n      {\n        number: 33,\n        name: \"modulationwheelfine\",\n        description: \"Modulation Wheel (Fine)\",\n        position: \"lsb\"\n      },\n      {\n        number: 34,\n        name: \"breathcontrollerfine\",\n        description: \"Breath Controller (Fine)\",\n        position: \"lsb\"\n      },\n      {\n        number: 35,\n        name: \"controller35\",\n        description: \"Undefined\",\n        position: \"lsb\"\n      },\n      {\n        number: 36,\n        name: \"footcontrollerfine\",\n        description: \"Foot Controller (Fine)\",\n        position: \"lsb\"\n      },\n      {\n        number: 37,\n        name: \"portamentotimefine\",\n        description: \"Portamento Time (Fine)\",\n        position: \"lsb\"\n      },\n      {\n        number: 38,\n        name: \"dataentryfine\",\n        description: \"Data Entry (Fine)\",\n        position: \"lsb\"\n      },\n      {\n        number: 39,\n        name: \"channelvolumefine\",\n        description: \"Channel Volume (Fine)\",\n        position: \"lsb\"\n      },\n      {\n        number: 40,\n        name: \"balancefine\",\n        description: \"Balance (Fine)\",\n        position: \"lsb\"\n      },\n      {\n        number: 41,\n        name: \"controller41\",\n        description: \"Undefined\",\n        position: \"lsb\"\n      },\n      {\n        number: 42,\n        name: \"panfine\",\n        description: \"Pan (Fine)\",\n        position: \"lsb\"\n      },\n      {\n        number: 43,\n        name: \"expressionfine\",\n        description: \"Expression Controller (Fine)\",\n        position: \"lsb\"\n      },\n      {\n        number: 44,\n        name: \"effectcontrol1fine\",\n        description: \"Effect control 1 (Fine)\",\n        position: \"lsb\"\n      },\n      {\n        number: 45,\n        name: \"effectcontrol2fine\",\n        description: \"Effect control 2 (Fine)\",\n        position: \"lsb\"\n      },\n      {\n        number: 46,\n        name: \"controller46\",\n        description: \"Undefined\",\n        position: \"lsb\"\n      },\n      {\n        number: 47,\n        name: \"controller47\",\n        description: \"Undefined\",\n        position: \"lsb\"\n      },\n      {\n        number: 48,\n        name: \"controller48\",\n        description: \"General Purpose Controller 1 (Fine)\",\n        position: \"lsb\"\n      },\n      {\n        number: 49,\n        name: \"controller49\",\n        description: \"General Purpose Controller 2 (Fine)\",\n        position: \"lsb\"\n      },\n      {\n        number: 50,\n        name: \"controller50\",\n        description: \"General Purpose Controller 3 (Fine)\",\n        position: \"lsb\"\n      },\n      {\n        number: 51,\n        name: \"controller51\",\n        description: \"General Purpose Controller 4 (Fine)\",\n        position: \"lsb\"\n      },\n      {\n        number: 52,\n        name: \"controller52\",\n        description: \"Undefined\",\n        position: \"lsb\"\n      },\n      {\n        number: 53,\n        name: \"controller53\",\n        description: \"Undefined\",\n        position: \"lsb\"\n      },\n      {\n        number: 54,\n        name: \"controller54\",\n        description: \"Undefined\",\n        position: \"lsb\"\n      },\n      {\n        number: 55,\n        name: \"controller55\",\n        description: \"Undefined\",\n        position: \"lsb\"\n      },\n      {\n        number: 56,\n        name: \"controller56\",\n        description: \"Undefined\",\n        position: \"lsb\"\n      },\n      {\n        number: 57,\n        name: \"controller57\",\n        description: \"Undefined\",\n        position: \"lsb\"\n      },\n      {\n        number: 58,\n        name: \"controller58\",\n        description: \"Undefined\",\n        position: \"lsb\"\n      },\n      {\n        number: 59,\n        name: \"controller59\",\n        description: \"Undefined\",\n        position: \"lsb\"\n      },\n      {\n        number: 60,\n        name: \"controller60\",\n        description: \"Undefined\",\n        position: \"lsb\"\n      },\n      {\n        number: 61,\n        name: \"controller61\",\n        description: \"Undefined\",\n        position: \"lsb\"\n      },\n      {\n        number: 62,\n        name: \"controller62\",\n        description: \"Undefined\",\n        position: \"lsb\"\n      },\n      {\n        number: 63,\n        name: \"controller63\",\n        description: \"Undefined\",\n        position: \"lsb\"\n      },\n      {\n        number: 64,\n        name: \"damperpedal\",\n        description: \"Damper Pedal On/Off\"\n      },\n      {\n        number: 65,\n        name: \"portamento\",\n        description: \"Portamento On/Off\"\n      },\n      {\n        number: 66,\n        name: \"sostenuto\",\n        description: \"Sostenuto On/Off\"\n      },\n      {\n        number: 67,\n        name: \"softpedal\",\n        description: \"Soft Pedal On/Off\"\n      },\n      {\n        number: 68,\n        name: \"legatopedal\",\n        description: \"Legato Pedal On/Off\"\n      },\n      {\n        number: 69,\n        name: \"hold2\",\n        description: \"Hold 2 On/Off\"\n      },\n      {\n        number: 70,\n        name: \"soundvariation\",\n        description: \"Sound Variation\",\n        position: \"lsb\"\n      },\n      {\n        number: 71,\n        name: \"resonance\",\n        description: \"Resonance\",\n        position: \"lsb\"\n      },\n      {\n        number: 72,\n        name: \"releasetime\",\n        description: \"Release Time\",\n        position: \"lsb\"\n      },\n      {\n        number: 73,\n        name: \"attacktime\",\n        description: \"Attack Time\",\n        position: \"lsb\"\n      },\n      {\n        number: 74,\n        name: \"brightness\",\n        description: \"Brightness\",\n        position: \"lsb\"\n      },\n      {\n        number: 75,\n        name: \"decaytime\",\n        description: \"Decay Time\",\n        position: \"lsb\"\n      },\n      {\n        number: 76,\n        name: \"vibratorate\",\n        description: \"Vibrato Rate\",\n        position: \"lsb\"\n      },\n      {\n        number: 77,\n        name: \"vibratodepth\",\n        description: \"Vibrato Depth\",\n        position: \"lsb\"\n      },\n      {\n        number: 78,\n        name: \"vibratodelay\",\n        description: \"Vibrato Delay\",\n        position: \"lsb\"\n      },\n      {\n        number: 79,\n        name: \"controller79\",\n        description: \"Undefined\",\n        position: \"lsb\"\n      },\n      {\n        number: 80,\n        name: \"generalpurposecontroller5\",\n        description: \"General Purpose Controller 5\",\n        position: \"lsb\"\n      },\n      {\n        number: 81,\n        name: \"generalpurposecontroller6\",\n        description: \"General Purpose Controller 6\",\n        position: \"lsb\"\n      },\n      {\n        number: 82,\n        name: \"generalpurposecontroller7\",\n        description: \"General Purpose Controller 7\",\n        position: \"lsb\"\n      },\n      {\n        number: 83,\n        name: \"generalpurposecontroller8\",\n        description: \"General Purpose Controller 8\",\n        position: \"lsb\"\n      },\n      {\n        number: 84,\n        name: \"portamentocontrol\",\n        description: \"Portamento Control\",\n        position: \"lsb\"\n      },\n      {\n        number: 85,\n        name: \"controller85\",\n        description: \"Undefined\"\n      },\n      {\n        number: 86,\n        name: \"controller86\",\n        description: \"Undefined\"\n      },\n      {\n        number: 87,\n        name: \"controller87\",\n        description: \"Undefined\"\n      },\n      {\n        number: 88,\n        name: \"highresolutionvelocityprefix\",\n        description: \"High Resolution Velocity Prefix\",\n        position: \"lsb\"\n      },\n      {\n        number: 89,\n        name: \"controller89\",\n        description: \"Undefined\"\n      },\n      {\n        number: 90,\n        name: \"controller90\",\n        description: \"Undefined\"\n      },\n      {\n        number: 91,\n        name: \"effect1depth\",\n        description: \"Effects 1 Depth (Reverb Send Level)\"\n      },\n      {\n        number: 92,\n        name: \"effect2depth\",\n        description: \"Effects 2 Depth\"\n      },\n      {\n        number: 93,\n        name: \"effect3depth\",\n        description: \"Effects 3 Depth (Chorus Send Level)\"\n      },\n      {\n        number: 94,\n        name: \"effect4depth\",\n        description: \"Effects 4 Depth\"\n      },\n      {\n        number: 95,\n        name: \"effect5depth\",\n        description: \"Effects 5 Depth\"\n      },\n      {\n        number: 96,\n        name: \"dataincrement\",\n        description: \"Data Increment\"\n      },\n      {\n        number: 97,\n        name: \"datadecrement\",\n        description: \"Data Decrement\"\n      },\n      {\n        number: 98,\n        name: \"nonregisteredparameterfine\",\n        description: \"Non-Registered Parameter Number (Fine)\",\n        position: \"lsb\"\n      },\n      {\n        number: 99,\n        name: \"nonregisteredparametercoarse\",\n        description: \"Non-Registered Parameter Number (Coarse)\",\n        position: \"msb\"\n      },\n      {\n        number: 100,\n        name: \"registeredparameterfine\",\n        description: \"Registered Parameter Number (Fine)\",\n        position: \"lsb\"\n      },\n      {\n        number: 101,\n        name: \"registeredparametercoarse\",\n        description: \"Registered Parameter Number (Coarse)\",\n        position: \"msb\"\n      },\n      {\n        number: 102,\n        name: \"controller102\",\n        description: \"Undefined\"\n      },\n      {\n        number: 103,\n        name: \"controller103\",\n        description: \"Undefined\"\n      },\n      {\n        number: 104,\n        name: \"controller104\",\n        description: \"Undefined\"\n      },\n      {\n        number: 105,\n        name: \"controller105\",\n        description: \"Undefined\"\n      },\n      {\n        number: 106,\n        name: \"controller106\",\n        description: \"Undefined\"\n      },\n      {\n        number: 107,\n        name: \"controller107\",\n        description: \"Undefined\"\n      },\n      {\n        number: 108,\n        name: \"controller108\",\n        description: \"Undefined\"\n      },\n      {\n        number: 109,\n        name: \"controller109\",\n        description: \"Undefined\"\n      },\n      {\n        number: 110,\n        name: \"controller110\",\n        description: \"Undefined\"\n      },\n      {\n        number: 111,\n        name: \"controller111\",\n        description: \"Undefined\"\n      },\n      {\n        number: 112,\n        name: \"controller112\",\n        description: \"Undefined\"\n      },\n      {\n        number: 113,\n        name: \"controller113\",\n        description: \"Undefined\"\n      },\n      {\n        number: 114,\n        name: \"controller114\",\n        description: \"Undefined\"\n      },\n      {\n        number: 115,\n        name: \"controller115\",\n        description: \"Undefined\"\n      },\n      {\n        number: 116,\n        name: \"controller116\",\n        description: \"Undefined\"\n      },\n      {\n        number: 117,\n        name: \"controller117\",\n        description: \"Undefined\"\n      },\n      {\n        number: 118,\n        name: \"controller118\",\n        description: \"Undefined\"\n      },\n      {\n        number: 119,\n        name: \"controller119\",\n        description: \"Undefined\"\n      },\n      {\n        number: 120,\n        name: \"allsoundoff\",\n        description: \"All Sound Off\"\n      },\n      {\n        number: 121,\n        name: \"resetallcontrollers\",\n        description: \"Reset All Controllers\"\n      },\n      {\n        number: 122,\n        name: \"localcontrol\",\n        description: \"Local Control On/Off\"\n      },\n      {\n        number: 123,\n        name: \"allnotesoff\",\n        description: \"All Notes Off\"\n      },\n      {\n        number: 124,\n        name: \"omnimodeoff\",\n        description: \"Omni Mode Off\"\n      },\n      {\n        number: 125,\n        name: \"omnimodeon\",\n        description: \"Omni Mode On\"\n      },\n      {\n        number: 126,\n        name: \"monomodeon\",\n        description: \"Mono Mode On\"\n      },\n      {\n        number: 127,\n        name: \"polymodeon\",\n        description: \"Poly Mode On\"\n      },\n    ];\n\n  }\n\n  /**\n   * Enumeration of all MIDI registered parameters and their associated pair of numerical values.\n   * MIDI registered parameters extend the original list of control change messages. Currently,\n   * there are only a limited number of them:\n   *\n   *\n   * | Control Function             | [LSB, MSB]   |\n   * |------------------------------|--------------|\n   * | `pitchbendrange`             | [0x00, 0x00] |\n   * | `channelfinetuning`          | [0x00, 0x01] |\n   * | `channelcoarsetuning`        | [0x00, 0x02] |\n   * | `tuningprogram`              | [0x00, 0x03] |\n   * | `tuningbank`                 | [0x00, 0x04] |\n   * | `modulationrange`            | [0x00, 0x05] |\n   * | `azimuthangle`               | [0x3D, 0x00] |\n   * | `elevationangle`             | [0x3D, 0x01] |\n   * | `gain`                       | [0x3D, 0x02] |\n   * | `distanceratio`              | [0x3D, 0x03] |\n   * | `maximumdistance`            | [0x3D, 0x04] |\n   * | `maximumdistancegain`        | [0x3D, 0x05] |\n   * | `referencedistanceratio`     | [0x3D, 0x06] |\n   * | `panspreadangle`             | [0x3D, 0x07] |\n   * | `rollangle`                  | [0x3D, 0x08] |\n   *\n   * @enum {Object.<string, number[]>}\n   * @readonly\n   * @since 3.1\n   * @static\n   */\n  static get REGISTERED_PARAMETERS() {\n\n    return {\n      pitchbendrange: [0x00, 0x00],\n      channelfinetuning: [0x00, 0x01],\n      channelcoarsetuning: [0x00, 0x02],\n      tuningprogram: [0x00, 0x03],\n      tuningbank: [0x00, 0x04],\n\n      modulationrange: [0x00, 0x05],\n      azimuthangle: [0x3D, 0x00],\n      elevationangle: [0x3D, 0x01],\n      gain: [0x3D, 0x02],\n      distanceratio: [0x3D, 0x03],\n      maximumdistance: [0x3D, 0x04],\n      maximumdistancegain: [0x3D, 0x05],\n      referencedistanceratio: [0x3D, 0x06],\n      panspreadangle: [0x3D, 0x07],\n      rollangle: [0x3D, 0x08]\n    };\n\n  }\n\n  /**\n   * @enum {Object.<string, number[]>}\n   * @readonly\n   * @deprecated since 3.1 (use Enumerations.REGISTERED_PARAMETERS instead)\n   * @private\n   * @static\n   */\n  static get MIDI_REGISTERED_PARAMETERS() {\n\n    if (this.validation) {\n      console.warn(\n        \"The MIDI_REGISTERED_PARAMETERS enum has been deprecated. Use the \" +\n        \"Enumerations.REGISTERED_PARAMETERS enum instead.\"\n      );\n    }\n\n    return Enumerations.MIDI_REGISTERED_PARAMETERS;\n\n  }\n\n  /**\n   * Enumeration of all valid MIDI system messages and matching numerical values. This library also\n   * uses two additional custom messages.\n   *\n   * **System Common Messages**\n   *\n   * | Function               | Hexadecimal | Decimal |\n   * |------------------------|-------------|---------|\n   * | `sysex`                | 0xF0        |  240    |\n   * | `timecode`             | 0xF1        |  241    |\n   * | `songposition`         | 0xF2        |  242    |\n   * | `songselect`           | 0xF3        |  243    |\n   * | `tunerequest`          | 0xF6        |  246    |\n   * | `sysexend`             | 0xF7        |  247    |\n   *\n   * The `sysexend` message is never actually received. It simply ends a sysex stream.\n   *\n   * **System Real-Time Messages**\n   *\n   * | Function               | Hexadecimal | Decimal |\n   * |------------------------|-------------|---------|\n   * | `clock`                | 0xF8        |  248    |\n   * | `start`                | 0xFA        |  250    |\n   * | `continue`             | 0xFB        |  251    |\n   * | `stop`                 | 0xFC        |  252    |\n   * | `activesensing`        | 0xFE        |  254    |\n   * | `reset`                | 0xFF        |  255    |\n   *\n   * Values 249 and 253 are relayed by the\n   * [Web MIDI API](https://developer.mozilla.org/en-US/docs/Web/API/Web_MIDI_API) but they do not\n   * serve any specific purpose. The\n   * [MIDI 1.0 spec](https://www.midi.org/specifications/item/table-1-summary-of-midi-message)\n   * simply states that they are undefined/reserved.\n   *\n   * **Custom Messages**\n   *\n   * These two messages are mostly for internal use. They are not MIDI messages and cannot be sent\n   * or forwarded.\n   *\n   * | Function               | Hexadecimal | Decimal |\n   * |------------------------|-------------|---------|\n   * | `midimessage`          |             |  0      |\n   * | `unknownsystemmessage` |             |  -1     |\n   *\n   * @enum {Object.<string, number>}\n   * @readonly\n   * @since 3.1\n   * @static\n   */\n  static get SYSTEM_MESSAGES() {\n\n    return {\n\n      // System common messages\n      sysex: 0xF0,            // 240\n      timecode: 0xF1,         // 241\n      songposition: 0xF2,     // 242\n      songselect: 0xF3,       // 243\n      tunerequest: 0xF6,      // 246\n      tuningrequest: 0xF6,    // for backwards-compatibility (deprecated in version 3.0)\n      sysexend: 0xF7,         // 247 (never actually received - simply ends a sysex)\n\n      // System real-time messages\n      clock: 0xF8,            // 248\n      start: 0xFA,            // 250\n      continue: 0xFB,         // 251\n      stop: 0xFC,             // 252\n      activesensing: 0xFE,    // 254\n      reset: 0xFF,            // 255\n\n      // Custom WebMidi.js messages\n      midimessage: 0,\n      unknownsystemmessage: -1\n\n    };\n\n  }\n\n  /**\n   * @enum {Object.<string, number>}\n   * @readonly\n   * @deprecated since 3.1 (use Enumerations.SYSTEM_MESSAGES instead)\n   * @private\n   * @static\n   */\n  static get MIDI_SYSTEM_MESSAGES() {\n\n    if (this.validation) {\n      console.warn(\n        \"The MIDI_SYSTEM_MESSAGES enum has been deprecated. Use the \" +\n        \"Enumerations.SYSTEM_MESSAGES enum instead.\"\n      );\n    }\n\n    return Enumerations.SYSTEM_MESSAGES;\n\n  }\n\n  /**\n   * Array of channel-specific event names that can be listened for. This includes channel mode\n   * events and RPN/NRPN events.\n   *\n   * @type {string[]}\n   * @readonly\n   */\n  static get CHANNEL_EVENTS() {\n\n    return [\n\n      // MIDI channel message events\n      \"noteoff\",\n      \"controlchange\",\n      \"noteon\",\n      \"keyaftertouch\",\n      \"programchange\",\n      \"channelaftertouch\",\n      \"pitchbend\",\n\n      // MIDI channel mode events\n      \"allnotesoff\",\n      \"allsoundoff\",\n      \"localcontrol\",\n      \"monomode\",\n      \"omnimode\",\n      \"resetallcontrollers\",\n\n      // RPN/NRPN events\n      \"nrpn\",\n      \"nrpn-dataentrycoarse\",\n      \"nrpn-dataentryfine\",\n      \"nrpn-dataincrement\",\n      \"nrpn-datadecrement\",\n      \"rpn\",\n      \"rpn-dataentrycoarse\",\n      \"rpn-dataentryfine\",\n      \"rpn-dataincrement\",\n      \"rpn-datadecrement\",\n\n      // Legacy (remove in v4)\n      \"nrpn-databuttonincrement\",\n      \"nrpn-databuttondecrement\",\n      \"rpn-databuttonincrement\",\n      \"rpn-databuttondecrement\",\n\n    ];\n  }\n\n}\n\n/**\n * The `Note` class represents a single musical note such as `\"D3\"`, `\"G#4\"`, `\"F-1\"`, `\"Gb7\"`, etc.\n *\n * `Note` objects can be played back on a single channel by calling\n * [`OutputChannel.playNote()`]{@link OutputChannel#playNote} or, on multiple channels of the same\n * output, by calling [`Output.playNote()`]{@link Output#playNote}.\n *\n * The note has [`attack`](#attack) and [`release`](#release) velocities set at `0.5` by default.\n * These can be changed by passing in the appropriate option. It is also possible to set a\n * system-wide default for attack and release velocities by using the\n * [`WebMidi.defaults`](WebMidi#defaults) property.\n *\n * If you prefer to work with raw MIDI values (`0` to `127`), you can use [`rawAttack`](#rawAttack) and\n * [`rawRelease`](#rawRelease) to both get and set the values.\n *\n * The note may have a [`duration`](#duration). If it does, playback will be automatically stopped\n * when the duration has elapsed by sending a `\"noteoff\"` event. By default, the duration is set to\n * `Infinity`. In this case, it will never stop playing unless explicitly stopped by calling a\n * method such as [`OutputChannel.stopNote()`]{@link OutputChannel#stopNote},\n * [`Output.stopNote()`]{@link Output#stopNote} or similar.\n *\n * @license Apache-2.0\n * @since 3.0.0\n */\nclass Note {\n\n  /**\n   * Creates a `Note` object.\n   *\n   * @param value {string|number} The value used to create the note. If an identifier string is used,\n   * it must start with the note letter, optionally followed by an accidental and followed by the\n   * octave number (`\"C3\"`, `\"G#4\"`, `\"F-1\"`, `\"Db7\"`, etc.). If a number is used, it must be an\n   * integer between 0 and 127. In this case, middle C is considered to be C4 (note number 60).\n   *\n   * @param {object} [options={}]\n   *\n   * @param {number} [options.duration=Infinity] The number of milliseconds before the note should be\n   * explicitly stopped.\n   *\n   * @param {number} [options.attack=0.5] The note's attack velocity as a float between 0 and 1. If\n   * you wish to use an integer between 0 and 127, use the `rawAttack` option instead. If both\n   * `attack` and `rawAttack` are specified, the latter has precedence.\n   *\n   * @param {number} [options.release=0.5] The note's release velocity as a float between 0 and 1. If\n   * you wish to use an integer between 0 and 127, use the `rawRelease` option instead. If both\n   * `release` and `rawRelease` are specified, the latter has precedence.\n   *\n   * @param {number} [options.rawAttack=64] The note's attack velocity as an integer between 0 and\n   * 127. If you wish to use a float between 0 and 1, use the `release` option instead. If both\n   * `attack` and `rawAttack` are specified, the latter has precedence.\n   *\n   * @param {number} [options.rawRelease=64] The note's release velocity as an integer between 0 and\n   * 127. If you wish to use a float between 0 and 1, use the `release` option instead. If both\n   * `release` and `rawRelease` are specified, the latter has precedence.\n   *\n   * @throws {Error} Invalid note identifier\n   * @throws {RangeError} Invalid name value\n   * @throws {RangeError} Invalid accidental value\n   * @throws {RangeError} Invalid octave value\n   * @throws {RangeError} Invalid duration value\n   * @throws {RangeError} Invalid attack value\n   * @throws {RangeError} Invalid release value\n   */\n  constructor(value, options = {}) {\n\n    // Assign property defaults\n    this.duration = wm.defaults.note.duration;\n    this.attack = wm.defaults.note.attack;\n    this.release = wm.defaults.note.release;\n\n    // Assign property values from options (validation occurs in setter)\n    if (options.duration != undefined) this.duration = options.duration;\n    if (options.attack != undefined) this.attack = options.attack;\n    if (options.rawAttack != undefined) this.attack = Utilities.from7bitToFloat(options.rawAttack);\n    if (options.release != undefined) this.release = options.release;\n    if (options.rawRelease != undefined) {\n      this.release = Utilities.from7bitToFloat(options.rawRelease);\n    }\n\n    // Assign note depending on the way it was specified (name or number)\n    if (Number.isInteger(value)) {\n      this.identifier = Utilities.toNoteIdentifier(value);\n    } else {\n      this.identifier = value;\n    }\n\n  }\n\n  /**\n   * The name, optional accidental and octave of the note, as a string.\n   * @type {string}\n   * @since 3.0.0\n   */\n  get identifier() {\n    return this._name + (this._accidental || \"\") + this._octave;\n  }\n  set identifier(value) {\n\n    const fragments = Utilities.getNoteDetails(value);\n\n    if (wm.validation) {\n      if (!value) throw new Error(\"Invalid note identifier\");\n    }\n\n    this._name = fragments.name;\n    this._accidental = fragments.accidental;\n    this._octave = fragments.octave;\n\n  }\n\n  /**\n   * The name (letter) of the note. If you need the full name with octave and accidental, you can\n   * use the [`identifier`]{@link Note#identifier} property instead.\n   * @type {string}\n   * @since 3.0.0\n   */\n  get name() {\n    return this._name;\n  }\n  set name(value) {\n\n    if (wm.validation) {\n      value = value.toUpperCase();\n      if (![\"C\", \"D\", \"E\", \"F\", \"G\", \"A\", \"B\"].includes(value)) {\n        throw new Error(\"Invalid name value\");\n      }\n    }\n\n    this._name = value;\n\n  }\n\n  /**\n   * The accidental (#, ##, b or bb) of the note.\n   * @type {string}\n   * @since 3.0.0\n   */\n  get accidental() {\n    return this._accidental;\n  }\n  set accidental(value) {\n\n    if (wm.validation) {\n      value = value.toLowerCase();\n      if (![\"#\", \"##\", \"b\", \"bb\"].includes(value)) throw new Error(\"Invalid accidental value\");\n    }\n\n    this._accidental = value;\n\n  }\n\n  /**\n   * The octave of the note.\n   * @type {number}\n   * @since 3.0.0\n   */\n  get octave() {\n    return this._octave;\n  }\n  set octave(value) {\n\n    if (wm.validation) {\n      value = parseInt(value);\n      if (isNaN(value)) throw new Error(\"Invalid octave value\");\n    }\n\n    this._octave = value;\n\n  }\n\n  /**\n   * The duration of the note as a positive decimal number representing the number of milliseconds\n   * that the note should play for.\n   *\n   * @type {number}\n   * @since 3.0.0\n   */\n  get duration() {\n    return this._duration;\n  }\n  set duration(value) {\n\n    if (wm.validation) {\n      value = parseFloat(value);\n      if (isNaN(value) || value === null || value < 0) {\n        throw new RangeError(\"Invalid duration value.\");\n      }\n    }\n\n    this._duration = value;\n\n  }\n\n  /**\n   * The attack velocity of the note as an integer between 0 and 1.\n   * @type {number}\n   * @since 3.0.0\n   */\n  get attack() {\n    return this._attack;\n  }\n  set attack(value) {\n\n    if (wm.validation) {\n      value = parseFloat(value);\n      if (isNaN(value) || !(value >= 0 && value <= 1)) {\n        throw new RangeError(\"Invalid attack value.\");\n      }\n    }\n\n    this._attack = value;\n\n  }\n\n  /**\n   * The release velocity of the note as an integer between 0 and 1.\n   * @type {number}\n   * @since 3.0.0\n   */\n  get release() {\n    return this._release;\n  }\n  set release(value) {\n\n    if (wm.validation) {\n      value = parseFloat(value);\n      if (isNaN(value) || !(value >= 0 && value <= 1)) {\n        throw new RangeError(\"Invalid release value.\");\n      }\n    }\n\n    this._release = value;\n\n  }\n\n  /**\n   * The attack velocity of the note as a positive integer between 0 and 127.\n   * @type {number}\n   * @since 3.0.0\n   */\n  get rawAttack() {\n    return Utilities.fromFloatTo7Bit(this._attack);\n  }\n  set rawAttack(value) {\n    this._attack = Utilities.from7bitToFloat(value);\n  }\n\n  /**\n   * The release velocity of the note as a positive integer between 0 and 127.\n   * @type {number}\n   * @since 3.0.0\n   */\n  get rawRelease() {\n    return Utilities.fromFloatTo7Bit(this._release);\n  }\n  set rawRelease(value) {\n    this._release = Utilities.from7bitToFloat(value);\n  }\n\n  /**\n   * The MIDI number of the note (`0` - `127`). This number is derived from the note identifier\n   * using C4 as a reference for middle C.\n   *\n   * @type {number}\n   * @readonly\n   * @since 3.0.0\n   */\n  get number() {\n    return Utilities.toNoteNumber(this.identifier);\n  }\n\n  /**\n   * Returns a MIDI note number offset by octave and/or semitone. If the calculated value is less\n   * than 0, 0 will be returned. If the calculated value is more than 127, 127 will be returned. If\n   * an invalid value is supplied, 0 will be used.\n   *\n   * @param [octaveOffset] {number} An integer to offset the note number by octave.\n   * @param [semitoneOffset] {number} An integer to offset the note number by semitone.\n   * @returns {number} An integer between 0 and 127\n   */\n  getOffsetNumber(octaveOffset = 0, semitoneOffset = 0) {\n\n    if (wm.validation) {\n      octaveOffset = parseInt(octaveOffset) || 0;\n      semitoneOffset = parseInt(semitoneOffset) || 0;\n    }\n\n    return Math.min(Math.max(this.number + (octaveOffset * 12) + semitoneOffset, 0), 127);\n\n  }\n\n}\n\n/**\n * The `Utilities` class contains general-purpose utility methods. All methods are static and\n * should be called using the class name. For example: `Utilities.getNoteDetails(\"C4\")`.\n *\n * @license Apache-2.0\n * @since 3.0.0\n */\nclass Utilities {\n\n  /**\n   * Returns a MIDI note number matching the identifier passed in the form of a string. The\n   * identifier must include the octave number. The identifier also optionally include a sharp (#),\n   * a double sharp (##), a flat (b) or a double flat (bb) symbol. For example, these are all valid\n   * identifiers: C5, G4, D#-1, F0, Gb7, Eb-1, Abb4, B##6, etc.\n   *\n   * When converting note identifiers to numbers, C4 is considered to be middle C (MIDI note number\n   * 60) as per the scientific pitch notation standard.\n   *\n   * The resulting note number can be offset by using the `octaveOffset` parameter.\n   *\n   * @param identifier {string} The identifier in the form of a letter, followed by an optional \"#\",\n   * \"##\", \"b\" or \"bb\" followed by the octave number. For exemple: C5, G4, D#-1, F0, Gb7, Eb-1,\n   * Abb4, B##6, etc.\n   *\n   * @param {number} [octaveOffset=0] A integer to offset the octave by.\n   *\n   * @returns {number} The MIDI note number (an integer between 0 and 127).\n   *\n   * @throws RangeError Invalid 'octaveOffset' value\n   *\n   * @throws TypeError Invalid note identifier\n   *\n   * @license Apache-2.0\n   * @since 3.0.0\n   * @static\n   */\n  static toNoteNumber(identifier, octaveOffset = 0) {\n\n    // Validation\n    octaveOffset = octaveOffset == undefined ? 0 : parseInt(octaveOffset);\n    if (isNaN(octaveOffset)) throw new RangeError(\"Invalid 'octaveOffset' value\");\n    if (typeof identifier !== \"string\") identifier = \"\";\n\n    const fragments = this.getNoteDetails(identifier);\n    if (!fragments) throw new TypeError(\"Invalid note identifier\");\n\n    const notes = { C: 0, D: 2, E: 4, F: 5, G: 7, A: 9, B: 11 };\n    let result = (fragments.octave + 1 + octaveOffset) * 12;\n    result += notes[fragments.name];\n\n    if (fragments.accidental) {\n      if (fragments.accidental.startsWith(\"b\")) {\n        result -= fragments.accidental.length;\n      } else {\n        result += fragments.accidental.length;\n      }\n    }\n\n    if (result < 0 || result > 127) throw new RangeError(\"Invalid octaveOffset value\");\n\n    return result;\n\n  }\n\n  /**\n   * Given a proper note identifier (`C#4`, `Gb-1`, etc.) or a valid MIDI note number (0-127), this\n   * method returns an object containing broken down details about the specified note (uppercase\n   * letter, accidental and octave).\n   *\n   * When a number is specified, the translation to note is done using a value of 60 for middle C\n   * (C4 = middle C).\n   *\n   * @param value {string|number} A note identifier A  atring (\"C#4\", \"Gb-1\", etc.) or a MIDI note\n   * number (0-127).\n   *\n   * @returns {{accidental: string, identifier: string, name: string, octave: number }}\n   *\n   * @throws TypeError Invalid note identifier\n   *\n   * @since 3.0.0\n   * @static\n   */\n  static getNoteDetails(value) {\n\n    if (Number.isInteger(value)) value = this.toNoteIdentifier(value);\n\n    const matches = value.match(/^([CDEFGAB])(#{0,2}|b{0,2})(-?\\d+)$/i);\n    if (!matches) throw new TypeError(\"Invalid note identifier\");\n\n    const name = matches[1].toUpperCase();\n    const octave = parseInt(matches[3]);\n    let accidental = matches[2].toLowerCase();\n    accidental = accidental === \"\" ? undefined : accidental;\n\n    const fragments = {\n      accidental: accidental,\n      identifier: name + (accidental || \"\") + octave,\n      name: name,\n      octave: octave\n    };\n\n    return fragments;\n\n  }\n\n  /**\n   * Returns a sanitized array of valid MIDI channel numbers (1-16). The parameter should be a\n   * single integer or an array of integers.\n   *\n   * For backwards-compatibility, passing `undefined` as a parameter to this method results in all\n   * channels being returned (1-16). Otherwise, parameters that cannot successfully be parsed to\n   * integers between 1 and 16 are silently ignored.\n   *\n   * @param [channel] {number|number[]} An integer or an array of integers to parse as channel\n   * numbers.\n   *\n   * @returns {number[]} An array of 0 or more valid MIDI channel numbers.\n   *\n   * @since 3.0.0\n   * @static\n   */\n  static sanitizeChannels(channel) {\n\n    let channels;\n\n    if (wm.validation) {\n\n      if (channel === \"all\") { // backwards-compatibility\n        channels = [\"all\"];\n      } else if (channel === \"none\") { // backwards-compatibility\n        return [];\n      }\n\n    }\n\n    if (!Array.isArray(channel)) {\n      channels = [channel];\n    } else {\n      channels = channel;\n    }\n\n    // In order to preserve backwards-compatibility, we let this assignment as it is.\n    if (channels.indexOf(\"all\") > -1) {\n      channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n    }\n\n    return channels\n      .map(function(ch) {\n        return parseInt(ch);\n      })\n      .filter(function(ch) {\n        return (ch >= 1 && ch <= 16);\n      });\n\n  }\n\n  /**\n   * Returns a valid timestamp, relative to the navigation start of the document, derived from the\n   * `time` parameter. If the parameter is a string starting with the \"+\" sign and followed by a\n   * number, the resulting timestamp will be the sum of the current timestamp plus that number. If\n   * the parameter is a positive number, it will be returned as is. Otherwise, false will be\n   * returned.\n   *\n   * @param [time] {number|string} The time string (e.g. `\"+2000\"`) or number to parse\n   * @return {number|false} A positive number or `false` (if the time cannot be converted)\n   *\n   * @since 3.0.0\n   * @static\n   */\n  static toTimestamp(time) {\n\n    let value = false;\n\n    const parsed = parseFloat(time);\n    if (isNaN(parsed)) return false;\n\n    if (typeof time === \"string\" && time.substring(0, 1) === \"+\") {\n      if (parsed >= 0) value = wm.time + parsed;\n    } else {\n      if (parsed >= 0) value = parsed;\n    }\n\n    return value;\n\n  }\n\n  /**\n   * Returns a valid MIDI note number (0-127) given the specified input. The input usually is a\n   * string containing a note identifier (`\"C3\"`, `\"F#4\"`, `\"D-2\"`, `\"G8\"`, etc.). If an integer\n   * between 0 and 127 is passed, it will simply be returned as is (for convenience). Other strings\n   * will be parsed for integer value, if possible.\n   *\n   * If the input is an identifier, the resulting note number is offset by the `octaveOffset`\n   * parameter. For example, if you pass in \"C4\" (note number 60) and the `octaveOffset` value is\n   * -2, the resulting MIDI note number will be 36.\n   *\n   * @param input {string|number} A string or number to extract the MIDI note number from.\n   * @param octaveOffset {number} An integer to offset the octave by\n   *\n   * @returns {number|false} A valid MIDI note number (0-127) or `false` if the input could not\n   * successfully be parsed to a note number.\n   *\n   * @since 3.0.0\n   * @static\n   */\n  static guessNoteNumber(input, octaveOffset) {\n\n    // Validate and, if necessary, assign default\n    octaveOffset = parseInt(octaveOffset) || 0;\n\n    let output = false;\n\n    // Check input type\n    if (Number.isInteger(input) && input >= 0 && input <= 127) {        // uint\n      output = parseInt(input);\n    } else if (parseInt(input) >= 0 && parseInt(input) <= 127) {        // float or uint as string\n      output = parseInt(input);\n    } else if (typeof input === \"string\" || input instanceof String) {  // string\n      try {\n        output = this.toNoteNumber(input.trim(), octaveOffset);\n      } catch (e) {\n        return false;\n      }\n    }\n\n    return output;\n\n  }\n\n  /**\n   * Returns an identifier string representing a note name (with optional accidental) followed by an\n   * octave number. The octave can be offset by using the `octaveOffset` parameter.\n   *\n   * @param {number} number The MIDI note number to convert to a note identifier\n   * @param {number} octaveOffset An offset to apply to the resulting octave\n   *\n   * @returns {string}\n   *\n   * @throws RangeError Invalid note number\n   * @throws RangeError Invalid octaveOffset value\n   *\n   * @since 3.0.0\n   * @static\n   */\n  static toNoteIdentifier(number, octaveOffset) {\n\n    number = parseInt(number);\n    if (isNaN(number) || number < 0 || number > 127) throw new RangeError(\"Invalid note number\");\n\n    octaveOffset = octaveOffset == undefined ? 0 : parseInt(octaveOffset);\n    if (isNaN(octaveOffset)) throw new RangeError(\"Invalid octaveOffset value\");\n\n    const notes = [\"C\", \"C#\", \"D\", \"D#\", \"E\", \"F\", \"F#\", \"G\", \"G#\", \"A\", \"A#\", \"B\"];\n    const octave = Math.floor(number / 12 - 1) + octaveOffset;\n    return notes[number % 12] + octave.toString();\n\n  }\n\n  /**\n   * Converts the `input` parameter to a valid [`Note`]{@link Note} object. The input usually is an\n   * unsigned integer (0-127) or a note identifier (`\"C4\"`, `\"G#5\"`, etc.). If the input is a\n   * [`Note`]{@link Note} object, it will be returned as is.\n   *\n   * If the input is a note number or identifier, it is possible to specify options by providing the\n   * `options` parameter.\n   *\n   * @param [input] {number|string|Note}\n   *\n   * @param {object} [options={}]\n   *\n   * @param {number} [options.duration=Infinity] The number of milliseconds before the note should\n   * be explicitly stopped.\n   *\n   * @param {number} [options.attack=0.5] The note's attack velocity as a float between 0 and 1. If\n   * you wish to use an integer between 0 and 127, use the `rawAttack` option instead. If both\n   * `attack` and `rawAttack` are specified, the latter has precedence.\n   *\n   * @param {number} [options.release=0.5] The note's release velocity as a float between 0 and 1. If\n   * you wish to use an integer between 0 and 127, use the `rawRelease` option instead. If both\n   * `release` and `rawRelease` are specified, the latter has precedence.\n   *\n   * @param {number} [options.rawAttack=64] The note's attack velocity as an integer between 0 and\n   * 127. If you wish to use a float between 0 and 1, use the `release` option instead. If both\n   * `attack` and `rawAttack` are specified, the latter has precedence.\n   *\n   * @param {number} [options.rawRelease=64] The note's release velocity as an integer between 0 and\n   * 127. If you wish to use a float between 0 and 1, use the `release` option instead. If both\n   * `release` and `rawRelease` are specified, the latter has precedence.\n   *\n   * @param {number} [options.octaveOffset=0] An integer to offset the octave by. **This is only\n   * used when the input value is a note identifier.**\n   *\n   * @returns {Note}\n   *\n   * @throws TypeError The input could not be parsed to a note\n   *\n   * @since version 3.0.0\n   * @static\n   */\n  static buildNote(input, options= {}) {\n\n    options.octaveOffset = parseInt(options.octaveOffset) || 0;\n\n    // If it's already a Note, we're done\n    if (input instanceof Note) return input;\n\n    let number = this.guessNoteNumber(input, options.octaveOffset);\n\n    if (number === false) { // We use a comparison b/c the note can be 0 (which equates to false)\n      throw new TypeError(`The input could not be parsed as a note (${input})`);\n    }\n\n    // If we got here, we have a proper note number. Before creating the new note, we strip out\n    // 'octaveOffset' because it has already been factored in when calling guessNoteNumber().\n    options.octaveOffset = undefined;\n    return new Note(number, options);\n\n  }\n\n  /**\n   * Converts an input value, which can be an unsigned integer (0-127), a note identifier, a\n   * [`Note`]{@link Note}  object or an array of the previous types, to an array of\n   * [`Note`]{@link Note}  objects.\n   *\n   * [`Note`]{@link Note}  objects are returned as is. For note numbers and identifiers, a\n   * [`Note`]{@link Note} object is created with the options specified. An error will be thrown when\n   * encountering invalid input.\n   *\n   * Note: if both the `attack` and `rawAttack` options are specified, the later has priority. The\n   * same goes for `release` and `rawRelease`.\n   *\n   * @param [notes] {number|string|Note|number[]|string[]|Note[]}\n   *\n   * @param {object} [options={}]\n   *\n   * @param {number} [options.duration=Infinity] The number of milliseconds before the note should\n   * be explicitly stopped.\n   *\n   * @param {number} [options.attack=0.5] The note's attack velocity as a float between 0 and 1. If\n   * you wish to use an integer between 0 and 127, use the `rawAttack` option instead. If both\n   * `attack` and `rawAttack` are specified, the latter has precedence.\n   *\n   * @param {number} [options.release=0.5] The note's release velocity as a float between 0 and 1. If\n   * you wish to use an integer between 0 and 127, use the `rawRelease` option instead. If both\n   * `release` and `rawRelease` are specified, the latter has precedence.\n   *\n   * @param {number} [options.rawAttack=64] The note's attack velocity as an integer between 0 and\n   * 127. If you wish to use a float between 0 and 1, use the `release` option instead. If both\n   * `attack` and `rawAttack` are specified, the latter has precedence.\n   *\n   * @param {number} [options.rawRelease=64] The note's release velocity as an integer between 0 and\n   * 127. If you wish to use a float between 0 and 1, use the `release` option instead. If both\n   * `release` and `rawRelease` are specified, the latter has precedence.\n   *\n   * @param {number} [options.octaveOffset=0] An integer to offset the octave by. **This is only\n   * used when the input value is a note identifier.**\n   *\n   * @returns {Note[]}\n   *\n   * @throws TypeError An element could not be parsed as a note.\n   *\n   * @since 3.0.0\n   * @static\n   */\n  static buildNoteArray(notes, options = {}) {\n\n    let result = [];\n    if (!Array.isArray(notes)) notes = [notes];\n\n    notes.forEach(note => {\n      result.push(this.buildNote(note, options));\n    });\n\n    return result;\n\n  }\n\n  /**\n   * Returns a number between 0 and 1 representing the ratio of the input value divided by 127 (7\n   * bit). The returned value is restricted between 0 and 1 even if the input is greater than 127 or\n   * smaller than 0.\n   *\n   * Passing `Infinity` will return `1` and passing `-Infinity` will return `0`. Otherwise, when the\n   * input value cannot be converted to an integer, the method returns 0.\n   *\n   * @param value {number} A positive integer between 0 and 127 (inclusive)\n   * @returns {number} A number between 0 and 1 (inclusive)\n   * @static\n   */\n  static from7bitToFloat(value) {\n    if (value === Infinity) value = 127;\n    value = parseInt(value) || 0;\n    return Math.min(Math.max(value / 127, 0), 1);\n  }\n\n  /**\n   * Returns an integer between 0 and 127 which is the result of multiplying the input value by\n   * 127. The input value should be a number between 0 and 1 (inclusively). The returned value is\n   * restricted between 0 and 127 even if the input is greater than 1 or smaller than 0.\n   *\n   * Passing `Infinity` will return `127` and passing `-Infinity` will return `0`. Otherwise, when\n   * the input value cannot be converted to a number, the method returns 0.\n   *\n   * @param value {number} A positive float between 0 and 1 (inclusive)\n   * @returns {number} A number between 0 and 127 (inclusive)\n   * @static\n   */\n  static fromFloatTo7Bit(value) {\n    if (value === Infinity) value = 1;\n    value = parseFloat(value) || 0;\n    return Math.min(Math.max(Math.round(value * 127), 0), 127);\n  }\n\n  /**\n   * Combines and converts MSB and LSB values (0-127) to a float between 0 and 1. The returned value\n   * is within between 0 and 1 even if the result is greater than 1 or smaller than 0.\n   *\n   * @param msb {number} The most significant byte as a integer between 0 and 127.\n   * @param [lsb=0] {number} The least significant byte as a integer between 0 and 127.\n   * @returns {number} A float between 0 and 1.\n   */\n  static fromMsbLsbToFloat(msb, lsb = 0) {\n\n    if (wm.validation) {\n      msb = Math.min(Math.max(parseInt(msb) || 0, 0), 127);\n      lsb = Math.min(Math.max(parseInt(lsb) || 0, 0), 127);\n    }\n\n    const value = ((msb << 7) + lsb) / 16383;\n    return Math.min(Math.max(value, 0), 1);\n\n  }\n\n  /**\n   * Extracts 7bit MSB and LSB values from the supplied float.\n   *\n   * @param value {number} A float between 0 and 1\n   * @returns {{lsb: number, msb: number}}\n   */\n  static fromFloatToMsbLsb(value) {\n\n    if (wm.validation) {\n      value = Math.min(Math.max(parseFloat(value) || 0, 0), 1);\n    }\n\n    const multiplied = Math.round(value * 16383);\n\n    return {\n      msb: multiplied >> 7,\n      lsb: multiplied & 0x7F\n    };\n\n  }\n\n  /**\n   * Returns the supplied MIDI note number offset by the requested octave and semitone values. If\n   * the calculated value is less than 0, 0 will be returned. If the calculated value is more than\n   * 127, 127 will be returned. If an invalid offset value is supplied, 0 will be used.\n   *\n   * @param number {number} The MIDI note to offset as an integer between 0 and 127.\n   * @param octaveOffset {number} An integer to offset the note by (in octave)\n   * @param octaveOffset {number} An integer to offset the note by (in semitones)\n   * @returns {number} An integer between 0 and 127\n   *\n   * @throws {Error} Invalid note number\n   * @static\n   */\n  static offsetNumber(number, octaveOffset = 0, semitoneOffset = 0) {\n\n    if (wm.validation) {\n      number = parseInt(number);\n      if (isNaN(number)) throw new Error(\"Invalid note number\");\n      octaveOffset = parseInt(octaveOffset) || 0;\n      semitoneOffset = parseInt(semitoneOffset) || 0;\n    }\n\n    return Math.min(Math.max(number + (octaveOffset * 12) + semitoneOffset, 0), 127);\n\n  }\n\n  /**\n   * Returns the name of the first property of the supplied object whose value is equal to the one\n   * supplied. If nothing is found, `undefined` is returned.\n   *\n   * @param object {object} The object to look for the property in.\n   * @param value {*} Any value that can be expected to be found in the object's properties.\n   * @returns {string|undefined} The name of the matching property or `undefined` if nothing is\n   * found.\n   * @static\n   */\n  static getPropertyByValue(object, value) {\n    return Object.keys(object).find(key => object[key] === value);\n  }\n\n  /**\n   * Returns the name of a control change message matching the specified number (0-127). Some valid\n   * control change numbers do not have a specific name or purpose assigned in the MIDI\n   * [spec](https://midi.org/specifications-old/item/table-3-control-change-messages-data-bytes-2).\n   * In these cases, the method returns `controllerXXX` (where XXX is the number).\n   *\n   * @param {number} number An integer (0-127) representing the control change message\n   * @returns {string|undefined} The matching control change name or `undefined` if no match was\n   * found.\n   *\n   * @static\n   */\n  static getCcNameByNumber(number) {\n\n    if (wm.validation) {\n      number = parseInt(number);\n      if (!(number >= 0 && number <= 127)) return undefined;\n    }\n\n    return Enumerations.CONTROL_CHANGE_MESSAGES[number].name;\n\n  }\n\n  /**\n   * Returns the number of a control change message matching the specified name.\n   *\n   * @param {string} name A string representing the control change message\n   * @returns {string|undefined} The matching control change number or `undefined` if no match was\n   * found.\n   *\n   * @since 3.1\n   * @static\n   */\n  static getCcNumberByName(name) {\n    let message = Enumerations.CONTROL_CHANGE_MESSAGES.find(element => element.name === name);\n    if (message) {\n      return message.number;\n    } else {\n      // Legacy (remove in v4)\n      return Enumerations.MIDI_CONTROL_CHANGE_MESSAGES[name];\n    }\n  }\n\n  /**\n   * Returns the channel mode name matching the specified number. If no match is found, the function\n   * returns `false`.\n   *\n   * @param {number} number An integer representing the channel mode message (120-127)\n   * @returns {string|false} The name of the matching channel mode or `false` if no match could be\n   * found.\n   *\n   * @since 2.0.0\n   */\n  static getChannelModeByNumber(number) {\n\n    if ( !(number >= 120 && number <= 127) ) return false;\n\n    for (let cm in Enumerations.CHANNEL_MODE_MESSAGES) {\n\n      if (\n        Enumerations.CHANNEL_MODE_MESSAGES.hasOwnProperty(cm) &&\n        number === Enumerations.CHANNEL_MODE_MESSAGES[cm]\n      ) {\n        return cm;\n      }\n\n    }\n\n    return false;\n\n  }\n\n  /**\n   * Indicates whether the execution environment is Node.js (`true`) or not (`false`)\n   * @type {boolean}\n   */\n  static get isNode() {\n    return typeof process !== \"undefined\" &&\n      process.versions != null &&\n      process.versions.node != null;\n  }\n\n  /**\n   * Indicates whether the execution environment is a browser (`true`) or not (`false`)\n   * @type {boolean}\n   */\n  static get isBrowser() {\n    return typeof window !== \"undefined\" && typeof window.document !== \"undefined\";\n  }\n\n}\n\n/**\n * The `OutputChannel` class represents a single output MIDI channel. `OutputChannel` objects are\n * provided by an [`Output`](Output) port which, itself, is made available by a device. The\n * `OutputChannel` object is derived from the host's MIDI subsystem and should not be instantiated\n * directly.\n *\n * All 16 `OutputChannel` objects can be found inside the parent output's\n * [`channels`]{@link Output#channels} property.\n *\n * @param {Output} output The [`Output`](Output) this channel belongs to.\n * @param {number} number The MIDI channel number (`1` - `16`).\n *\n * @extends EventEmitter\n * @license Apache-2.0\n * @since 3.0.0\n */\nclass OutputChannel extends EventEmitter {\n\n  /**\n   * Creates an `OutputChannel` object.\n   *\n   * @param {Output} output The [`Output`](Output) this channel belongs to.\n   * @param {number} number The MIDI channel number (`1` - `16`).\n   */\n  constructor(output, number) {\n\n    super();\n\n    /**\n     * @type {Output}\n     * @private\n     */\n    this._output = output;\n\n    /**\n     * @type {number}\n     * @private\n     */\n    this._number = number;\n\n    /**\n     * @type {number}\n     * @private\n     */\n    this._octaveOffset = 0;\n\n  }\n\n  /**\n   * Unlinks the MIDI subsystem, removes all listeners attached to the channel and nulls the channel\n   * number. This method is mostly for internal use. It has not been prefixed with an underscore\n   * since it is called by other objects such as the `Output` object.\n   *\n   * @private\n   */\n  destroy() {\n    this._output = null;\n    this._number = null;\n    this._octaveOffset = 0;\n    this.removeListener();\n  }\n\n  /**\n   * Sends a MIDI message on the MIDI output port. If no time is specified, the message will be\n   * sent immediately. The message should be an array of 8-bit unsigned integers (`0` - `225`),\n   * a\n   * [`Uint8Array`]{@link https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array}\n   * object or a [`Message`](Message) object.\n   *\n   * It is usually not necessary to use this method directly as you can use one of the simpler\n   * helper methods such as [`playNote()`](#playNote), [`stopNote()`](#stopNote),\n   * [`sendControlChange()`](#sendControlChange), etc.\n   *\n   * Details on the format of MIDI messages are available in the summary of\n   * [MIDI messages]{@link https://www.midi.org/specifications-old/item/table-1-summary-of-midi-message}\n   * from the MIDI Manufacturers Association.\n   *\n   * @param message {number[]|Uint8Array|Message} A `Message` object, an array of 8-bit unsigned\n   * integers or a `Uint8Array` object (not available in Node.js) containing the message bytes.\n   *\n   * @param {object} [options={}]\n   *\n   * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n   * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n   * positive number\n   * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n   * the operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @throws {RangeError} The first byte (status) must be an integer between 128 and 255.\n   *\n   * @throws {RangeError} Data bytes must be integers between 0 and 255.\n   *\n   * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n   */\n  send(message, options = {time: 0}) {\n    this.output.send(message, options);\n    return this;\n  }\n\n  /**\n   * Sends a MIDI **key aftertouch** message at the scheduled time. This is a key-specific\n   * aftertouch. For a channel-wide aftertouch message, use\n   * [`sendChannelAftertouch()`]{@link #sendChannelAftertouch}.\n   *\n   * @param target {number|Note|string|number[]|Note[]|string[]} The note(s) for which you are sending\n   * an aftertouch value. The notes can be specified by using a MIDI note number (`0` - `127`), a\n   * [`Note`](Note) object, a note identifier (e.g. `C3`, `G#4`, `F-1`, `Db7`) or an array of the\n   * previous types. When using a note identifier, octave range must be between `-1` and `9`. The\n   * lowest note is `C-1` (MIDI note number `0`) and the highest note is `G9` (MIDI note number\n   * `127`).\n   *\n   * When using a note identifier, the octave value will be offset by the local\n   * [`octaveOffset`](#octaveOffset) and by\n   * [`Output.octaveOffset`](Output#octaveOffset) and [`WebMidi.octaveOffset`](WebMidi#octaveOffset)\n   * (if those values are not `0`). When using a key number, `octaveOffset` values are ignored.\n   *\n   * @param [pressure=0.5] {number} The pressure level (between `0` and `1`). An invalid pressure\n   * value will silently trigger the default behaviour. If the `rawValue` option is set to `true`,\n   * the pressure is defined by using an integer between `0` and `127`.\n   *\n   * @param {object} [options={}]\n   *\n   * @param {boolean} [options.rawValue=false] A boolean indicating whether the value should be\n   * considered a float between `0` and `1.0` (default) or a raw integer between `0` and `127`.\n   *\n   * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n   * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n   * positive number\n   * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n   * the operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @return {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n   *\n   * @throws RangeError Invalid key aftertouch value.\n   */\n  sendKeyAftertouch(target, pressure, options = {}) {\n\n    if (wm.validation) {\n\n      // Legacy support\n      if (options.useRawValue) options.rawValue = options.useRawValue;\n\n      if (isNaN(parseFloat(pressure))) {\n        throw new RangeError(\"Invalid key aftertouch value.\");\n      }\n      if (options.rawValue) {\n        if (!(pressure >= 0 && pressure <= 127 && Number.isInteger(pressure))) {\n          throw new RangeError(\"Key aftertouch raw value must be an integer between 0 and 127.\");\n        }\n      } else {\n        if (!(pressure >= 0 && pressure <= 1)) {\n          throw new RangeError(\"Key aftertouch value must be a float between 0 and 1.\");\n        }\n      }\n\n    }\n\n    // Normalize pressure to integer\n    if (!options.rawValue) pressure = Utilities.fromFloatTo7Bit(pressure);\n\n    // Plot total offset\n    const offset = wm.octaveOffset + this.output.octaveOffset + this.octaveOffset;\n\n    // Make sure we are dealing with an array\n    if (!Array.isArray(target)) target = [target];\n\n    Utilities.buildNoteArray(target).forEach(n => {\n      this.send(\n        [\n          (Enumerations.CHANNEL_MESSAGES.keyaftertouch << 4) + (this.number - 1),\n          n.getOffsetNumber(offset),\n          pressure\n        ],\n        {time: Utilities.toTimestamp(options.time)}\n      );\n    });\n\n    return this;\n\n  }\n\n  /**\n   * Sends a MIDI **control change** message to the channel at the scheduled time. The control\n   * change message to send can be specified numerically (`0` to `127`) or by using one of the\n   * following common names:\n   *\n   * | Number | Name                          |\n   * |--------|-------------------------------|\n   * | 0      |`bankselectcoarse`             |\n   * | 1      |`modulationwheelcoarse`        |\n   * | 2      |`breathcontrollercoarse`       |\n   * | 4      |`footcontrollercoarse`         |\n   * | 5      |`portamentotimecoarse`         |\n   * | 6      |`dataentrycoarse`              |\n   * | 7      |`volumecoarse`                 |\n   * | 8      |`balancecoarse`                |\n   * | 10     |`pancoarse`                    |\n   * | 11     |`expressioncoarse`             |\n   * | 12     |`effectcontrol1coarse`         |\n   * | 13     |`effectcontrol2coarse`         |\n   * | 18     |`generalpurposeslider3`        |\n   * | 19     |`generalpurposeslider4`        |\n   * | 32     |`bankselectfine`               |\n   * | 33     |`modulationwheelfine`          |\n   * | 34     |`breathcontrollerfine`         |\n   * | 36     |`footcontrollerfine`           |\n   * | 37     |`portamentotimefine`           |\n   * | 38     |`dataentryfine`                |\n   * | 39     |`volumefine`                   |\n   * | 40     |`balancefine`                  |\n   * | 42     |`panfine`                      |\n   * | 43     |`expressionfine`               |\n   * | 44     |`effectcontrol1fine`           |\n   * | 45     |`effectcontrol2fine`           |\n   * | 64     |`holdpedal`                    |\n   * | 65     |`portamento`                   |\n   * | 66     |`sustenutopedal`               |\n   * | 67     |`softpedal`                    |\n   * | 68     |`legatopedal`                  |\n   * | 69     |`hold2pedal`                   |\n   * | 70     |`soundvariation`               |\n   * | 71     |`resonance`                    |\n   * | 72     |`soundreleasetime`             |\n   * | 73     |`soundattacktime`              |\n   * | 74     |`brightness`                   |\n   * | 75     |`soundcontrol6`                |\n   * | 76     |`soundcontrol7`                |\n   * | 77     |`soundcontrol8`                |\n   * | 78     |`soundcontrol9`                |\n   * | 79     |`soundcontrol10`               |\n   * | 80     |`generalpurposebutton1`        |\n   * | 81     |`generalpurposebutton2`        |\n   * | 82     |`generalpurposebutton3`        |\n   * | 83     |`generalpurposebutton4`        |\n   * | 91     |`reverblevel`                  |\n   * | 92     |`tremololevel`                 |\n   * | 93     |`choruslevel`                  |\n   * | 94     |`celestelevel`                 |\n   * | 95     |`phaserlevel`                  |\n   * | 96     |`dataincrement`                |\n   * | 97     |`datadecrement`                |\n   * | 98     |`nonregisteredparametercoarse` |\n   * | 99     |`nonregisteredparameterfine`   |\n   * | 100    |`registeredparametercoarse`    |\n   * | 101    |`registeredparameterfine`      |\n   * | 120    |`allsoundoff`                  |\n   * | 121    |`resetallcontrollers`          |\n   * | 122    |`localcontrol`                 |\n   * | 123    |`allnotesoff`                  |\n   * | 124    |`omnimodeoff`                  |\n   * | 125    |`omnimodeon`                   |\n   * | 126    |`monomodeon`                   |\n   * | 127    |`polymodeon`                   |\n   *\n   * As you can see above, not all control change message have a matching name. This does not mean\n   * you cannot use the others. It simply means you will need to use their number\n   * (`0` to `127`) instead of their name. While you can still use them, numbers `120` to `127` are\n   * usually reserved for *channel mode* messages. See\n   * [`sendChannelMode()`]{@link OutputChannel#sendChannelMode} method for more info.\n   *\n   * To view a detailed list of all available **control change** messages, please consult \"Table 3 -\n   * Control Change Messages\" from the [MIDI Messages](\n   * https://www.midi.org/specifications/item/table-3-control-change-messages-data-bytes-2)\n   * specification.\n   *\n   * **Note**: messages #0-31 (MSB) are paired with messages #32-63 (LSB). For example, message #1\n   * (`modulationwheelcoarse`) can be accompanied by a second control change message for\n   * `modulationwheelfine` to achieve a greater level of precision. if you want to specify both MSB\n   * and LSB for messages between `0` and `31`, you can do so by passing a 2-value array as the\n   * second parameter.\n   *\n   * @param {number|string} controller The MIDI controller name or number (`0` - `127`).\n   *\n   * @param {number|number[]} value The value to send (0-127). You can also use a two-position array\n   * for controllers 0 to 31. In this scenario, the first value will be sent as usual and the second\n   * value will be sent to the matching LSB controller (which is obtained by adding 32 to the first\n   * controller)\n   *\n   * @param {object} [options={}]\n   *\n   * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n   * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n   * positive number\n   * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n   * the operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @throws {RangeError} Controller numbers must be between 0 and 127.\n   * @throws {RangeError} Invalid controller name.\n   * @throws {TypeError} The value array must have a length of 2.\n   *\n   * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n   *\n   * @license Apache-2.0\n   * @since 3.0.0\n   */\n  sendControlChange(controller, value, options = {}) {\n\n    if (typeof controller === \"string\") {\n      controller = Utilities.getCcNumberByName(controller);\n    }\n\n    if (!Array.isArray(value)) value = [value];\n\n    if (wm.validation) {\n\n      if (controller === undefined) {\n        throw new TypeError(\n          \"Control change must be identified with a valid name or an integer between 0 and 127.\"\n        );\n      }\n\n      if (!Number.isInteger(controller) || !(controller >= 0 && controller <= 127)) {\n        throw new TypeError(\"Control change number must be an integer between 0 and 127.\");\n      }\n\n      value = value.map(item => {\n        const output = Math.min(Math.max(parseInt(item), 0), 127);\n        if (isNaN(output)) throw new TypeError(\"Values must be integers between 0 and 127\");\n        return output;\n      });\n\n      if (value.length === 2 && controller >= 32) {\n        throw new TypeError(\"To use a value array, the controller must be between 0 and 31\");\n      }\n\n    }\n\n    value.forEach((item, index) => {\n\n      this.send(\n        [\n          (Enumerations.CHANNEL_MESSAGES.controlchange << 4) + (this.number - 1),\n          controller + (index * 32),\n          value[index]\n        ],\n        {time: Utilities.toTimestamp(options.time)}\n      );\n\n    });\n\n    return this;\n\n  }\n\n  /**\n   * Selects a MIDI non-registered parameter so it is affected by upcoming data entry, data\n   * increment and data decrement messages.\n   *\n   * @param parameter {number[]} A two-position array specifying the two control bytes that identify\n   * the registered parameter. The NRPN MSB (99 or 0x63) is a position 0. The NRPN LSB (98 or 0x62)\n   * is at position 1.\n   *\n   * @private\n   *\n   * @param {object} [options={}]\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number, the\n   * operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n   */\n  _selectNonRegisteredParameter(parameter, options = {}) {\n\n    // parameter[0] = Math.floor(parameter[0]);\n    // if (!(parameter[0] >= 0 && parameter[0] <= 127)) {\n    //   throw new RangeError(\"The control63 value must be between 0 and 127.\");\n    // }\n    //\n    // parameter[1] = Math.floor(parameter[1]);\n    // if (!(parameter[1] >= 0 && parameter[1] <= 127)) {\n    //   throw new RangeError(\"The control62 value must be between 0 and 127.\");\n    // }\n\n    this.sendControlChange(0x63, parameter[0], options);\n    this.sendControlChange(0x62, parameter[1], options);\n\n    return this;\n\n  }\n\n  /**\n   * Deselects the currently active MIDI registered parameter so it is no longer affected by data\n   * entry, data increment and data decrement messages.\n   *\n   * Current best practice recommends doing that after each call to\n   * [_setCurrentParameter()]{@link #_setCurrentParameter}.\n   *\n   * @private\n   *\n   * @param {object} [options={}]\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number, the\n   * operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n   */\n  _deselectRegisteredParameter(options = {}) {\n    this.sendControlChange(0x65, 0x7F, options);\n    this.sendControlChange(0x64, 0x7F, options);\n    return this;\n  }\n\n  /**\n   * Deselects the currently active MIDI non-registered parameter so it is no longer affected by\n   * data entry, data increment and data decrement messages.\n   *\n   * @private\n   *\n   * @param {object} [options={}]\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number, the\n   * operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n   */\n  _deselectNonRegisteredParameter(options = {}) {\n    this.sendControlChange(0x65, 0x7F, options);\n    this.sendControlChange(0x64, 0x7F, options);\n    return this;\n  }\n\n  /**\n   * Selects a MIDI registered parameter so it is affected by upcoming data entry, data increment\n   * and data decrement messages.\n   *\n   * @private\n   *\n   * @param parameter {number[]} A two-position array of integers specifying the two control bytes\n   * (0x65, 0x64) that identify the registered parameter. The integers must be between 0 and 127.\n   *\n   * @param {object} [options={}]\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number, the\n   * operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n   */\n  _selectRegisteredParameter(parameter, options = {}) {\n    this.sendControlChange(0x65, parameter[0], options);\n    this.sendControlChange(0x64, parameter[1], options);\n    return this;\n  }\n\n  /**\n   * Sets the value of the currently selected MIDI registered parameter.\n   *\n   * @private\n   *\n   * @param data {number|number[]}\n   *\n   * @param {object} [options={}]\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number, the\n   * operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n   */\n  _setCurrentParameter(data, options = {}) {\n\n    data = [].concat(data);\n\n    // MSB\n    // data[0] = parseInt(data[0]);\n    // if (!isNaN(data[0]) && data[0] >= 0 && data[0] <= 127) {\n    this.sendControlChange(0x06, data[0], options);\n    // } else {\n    //   throw new RangeError(\"The msb value must be between 0 and 127.\");\n    // }\n\n    if (data.length < 2) return this;\n\n    // LSB\n    // data[1] = parseInt(data[1]);\n\n    // if (!isNaN(data[1]) && data[1] >= 0 && data[1] <= 127) {\n    this.sendControlChange(0x26, data[1], options);\n    // } else {\n    //   throw new RangeError(\"The lsb value must be between 0 and 127.\");\n    // }\n\n    return this;\n\n  }\n\n  /**\n   * Decrements the specified MIDI registered parameter by 1. Here is the full list of parameter\n   * names that can be used with this function:\n   *\n   *  * Pitchbend Range (0x00, 0x00): `\"pitchbendrange\"`\n   *  * Channel Fine Tuning (0x00, 0x01): `\"channelfinetuning\"`\n   *  * Channel Coarse Tuning (0x00, 0x02): `\"channelcoarsetuning\"`\n   *  * Tuning Program (0x00, 0x03): `\"tuningprogram\"`\n   *  * Tuning Bank (0x00, 0x04): `\"tuningbank\"`\n   *  * Modulation Range (0x00, 0x05): `\"modulationrange\"`\n   *  * Azimuth Angle (0x3D, 0x00): `\"azimuthangle\"`\n   *  * Elevation Angle (0x3D, 0x01): `\"elevationangle\"`\n   *  * Gain (0x3D, 0x02): `\"gain\"`\n   *  * Distance Ratio (0x3D, 0x03): `\"distanceratio\"`\n   *  * Maximum Distance (0x3D, 0x04): `\"maximumdistance\"`\n   *  * Maximum Distance Gain (0x3D, 0x05): `\"maximumdistancegain\"`\n   *  * Reference Distance Ratio (0x3D, 0x06): `\"referencedistanceratio\"`\n   *  * Pan Spread Angle (0x3D, 0x07): `\"panspreadangle\"`\n   *  * Roll Angle (0x3D, 0x08): `\"rollangle\"`\n   *\n   * @param parameter {String|number[]} A string identifying the parameter's name (see above) or a\n   * two-position array specifying the two control bytes (0x65, 0x64) that identify the registered\n   * parameter.\n   *\n   * @param {object} [options={}]\n   *\n   * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n   * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n   * positive number\n   * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n   * the operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @throws TypeError The specified registered parameter is invalid.\n   *\n   * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n   */\n  sendRpnDecrement(parameter, options = {}) {\n\n    if (!Array.isArray(parameter)) parameter = Enumerations.REGISTERED_PARAMETERS[parameter];\n\n    if (wm.validation) {\n\n      if (parameter === undefined) {\n        throw new TypeError(\"The specified registered parameter is invalid.\");\n      }\n\n      let valid = false;\n\n      Object.getOwnPropertyNames(Enumerations.REGISTERED_PARAMETERS).forEach(p => {\n        if (\n          Enumerations.REGISTERED_PARAMETERS[p][0] === parameter[0] &&\n          Enumerations.REGISTERED_PARAMETERS[p][1] === parameter[1]\n        ) {\n          valid = true;\n        }\n      });\n\n      if (!valid) throw new TypeError(\"The specified registered parameter is invalid.\");\n\n    }\n\n    this._selectRegisteredParameter(parameter, options);\n    this.sendControlChange(0x61, 0, options);\n    this._deselectRegisteredParameter(options);\n\n    return this;\n\n  }\n\n  /**\n   * Increments the specified MIDI registered parameter by 1. Here is the full list of parameter\n   * names that can be used with this function:\n   *\n   *  * Pitchbend Range (0x00, 0x00): `\"pitchbendrange\"`\n   *  * Channel Fine Tuning (0x00, 0x01): `\"channelfinetuning\"`\n   *  * Channel Coarse Tuning (0x00, 0x02): `\"channelcoarsetuning\"`\n   *  * Tuning Program (0x00, 0x03): `\"tuningprogram\"`\n   *  * Tuning Bank (0x00, 0x04): `\"tuningbank\"`\n   *  * Modulation Range (0x00, 0x05): `\"modulationrange\"`\n   *  * Azimuth Angle (0x3D, 0x00): `\"azimuthangle\"`\n   *  * Elevation Angle (0x3D, 0x01): `\"elevationangle\"`\n   *  * Gain (0x3D, 0x02): `\"gain\"`\n   *  * Distance Ratio (0x3D, 0x03): `\"distanceratio\"`\n   *  * Maximum Distance (0x3D, 0x04): `\"maximumdistance\"`\n   *  * Maximum Distance Gain (0x3D, 0x05): `\"maximumdistancegain\"`\n   *  * Reference Distance Ratio (0x3D, 0x06): `\"referencedistanceratio\"`\n   *  * Pan Spread Angle (0x3D, 0x07): `\"panspreadangle\"`\n   *  * Roll Angle (0x3D, 0x08): `\"rollangle\"`\n   *\n   * @param parameter {String|number[]} A string identifying the parameter's name (see above) or a\n   * two-position array specifying the two control bytes (0x65, 0x64) that identify the registered\n   * parameter.\n   *\n   * @param {object} [options={}]\n   *\n   * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n   * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n   * positive number\n   * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n   * the operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @throws TypeError The specified registered parameter is invalid.\n   *\n   * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n   */\n  sendRpnIncrement(parameter, options = {}) {\n\n    if (!Array.isArray(parameter)) parameter = Enumerations.REGISTERED_PARAMETERS[parameter];\n\n    if (wm.validation) {\n\n      if (parameter === undefined) {\n        throw new TypeError(\"The specified registered parameter is invalid.\");\n      }\n\n      let valid = false;\n\n      Object.getOwnPropertyNames(Enumerations.REGISTERED_PARAMETERS).forEach(p => {\n        if (\n          Enumerations.REGISTERED_PARAMETERS[p][0] === parameter[0] &&\n          Enumerations.REGISTERED_PARAMETERS[p][1] === parameter[1]\n        ) {\n          valid = true;\n        }\n      });\n\n      if (!valid) throw new TypeError(\"The specified registered parameter is invalid.\");\n\n    }\n\n    this._selectRegisteredParameter(parameter, options);\n    this.sendControlChange(0x60, 0, options);\n    this._deselectRegisteredParameter(options);\n\n    return this;\n\n  }\n\n  /**\n   * Plays a note or an array of notes on the channel. The first parameter is the note to play. It\n   * can be a single value or an array of the following valid values:\n   *\n   *  - A [`Note`]{@link Note} object\n   *  - A MIDI note number (integer between `0` and `127`)\n   *  - A note name, followed by the octave (e.g. `\"C3\"`, `\"G#4\"`, `\"F-1\"`, `\"Db7\"`)\n   *\n   * The `playNote()` method sends a **note on** MIDI message for all specified notes. If a\n   * `duration` is set in the `options` parameter or in the [`Note`]{@link Note} object's\n   * [`duration`]{@link Note#duration} property, it will also schedule a **note off** message\n   * to end the note after said duration. If no `duration` is set, the note will simply play until\n   * a matching **note off** message is sent with [`stopNote()`]{@link OutputChannel#stopNote} or\n   * [`sendNoteOff()`]{@link OutputChannel#sendNoteOff}.\n   *\n   *  The execution of the **note on** command can be delayed by using the `time` property of the\n   * `options` parameter.\n   *\n   * When using [`Note`]{@link Note} objects, the durations and velocities defined in the\n   * [`Note`]{@link Note} objects have precedence over the ones specified via the method's `options`\n   * parameter.\n   *\n   * **Note**: per the MIDI standard, a **note on** message with an attack velocity of `0` is\n   * functionally equivalent to a **note off** message.\n   *\n   * @param note {number|string|Note|number[]|string[]|Note[]} The note(s) to play. The notes can be\n   * specified by using a MIDI note number (`0` - `127`), a note identifier (e.g. `C3`, `G#4`,\n   * `F-1`, `Db7`), a [`Note`]{@link Note} object or an array of the previous types. When using a\n   * note identifier, the octave range must be between `-1` and `9`. The lowest note is `C-1` (MIDI\n   * note number `0`) and the highest note is `G9` (MIDI note number `127`).\n   *\n   * @param {object} [options={}]\n   *\n   * @param {number} [options.duration] A positive decimal number larger than `0` representing the\n   * number of milliseconds to wait before sending a **note off** message. If invalid or left\n   * undefined, only a **note on** message will be sent.\n   *\n   * @param {number} [options.attack=0.5] The velocity at which to play the note (between `0` and\n   * `1`). If the `rawAttack` option is also defined, it will have priority. An invalid velocity\n   * value will silently trigger the default of `0.5`.\n   *\n   * @param {number} [options.rawAttack=64] The attack velocity at which to play the note (between\n   * `0` and `127`). This has priority over the `attack` property. An invalid velocity value will\n   * silently trigger the default of 64.\n   *\n   * @param {number} [options.release=0.5] The velocity at which to release the note (between `0`\n   * and `1`). If the `rawRelease` option is also defined, it will have priority. An invalid\n   * velocity value will silently trigger the default of `0.5`. This is only used with the\n   * **note off** event triggered when `options.duration` is set.\n   *\n   * @param {number} [options.rawRelease=64] The velocity at which to release the note (between `0`\n   * and `127`). This has priority over the `release` property. An invalid velocity value will\n   * silently trigger the default of 64. This is only used with the **note off** event triggered\n   * when `options.duration` is set.\n   *\n   * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n   * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n   * positive number\n   * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n   * the operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n   */\n  playNote(note, options = {}) {\n\n    // Send note on and, optionally, note off message (if duration is a positive number)\n    this.sendNoteOn(note, options);\n\n    const notes = Array.isArray(note) ? note : [note];\n\n    for(let note of notes) {\n      if (parseInt(note.duration) > 0) {\n        const noteOffOptions = {\n          time: (Utilities.toTimestamp(options.time) || wm.time) + parseInt(note.duration),\n          release: note.release,\n          rawRelease: note.rawRelease\n        };\n        this.sendNoteOff(note, noteOffOptions);\n      } else if (parseInt(options.duration) > 0) {\n        const noteOffOptions = {\n          time: (Utilities.toTimestamp(options.time) || wm.time) + parseInt(options.duration),\n          release: options.release,\n          rawRelease: options.rawRelease\n        };\n        this.sendNoteOff(note, noteOffOptions);\n      }\n    }\n\n    return this;\n\n  }\n\n  /**\n   * Sends a **note off** message for the specified notes on the channel. The first parameter is the\n   * note. It can be a single value or an array of the following valid values:\n   *\n   *  - A MIDI note number (integer between `0` and `127`)\n   *  - A note name, followed by the octave (e.g. `\"C3\"`, `\"G#4\"`, `\"F-1\"`, `\"Db7\"`)\n   *  - A [`Note`]{@link Note} object\n   *\n   * The execution of the **note off** command can be delayed by using the `time` property of the\n   * `options` parameter.\n   *\n   * When using [`Note`]{@link Note} objects, the release velocity defined in the\n   * [`Note`]{@link Note} objects has precedence over the one specified via the method's `options`\n   * parameter.\n   *\n   * @param note {number|string|Note|number[]|string[]|Note[]} The note(s) to stop. The notes can be\n   * specified by using a MIDI note number (0-127), a note identifier (e.g. C3, G#4, F-1, Db7), a\n   * [`Note`]{@link Note} object or an array of the previous types. When using a note name, octave\n   * range must be between -1 and 9. The lowest note is C-1 (MIDI note number 0) and the highest\n   * note is G9 (MIDI note number 127).\n   *\n   * @param {object} [options={}]\n   *\n   * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n   * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n   * positive number\n   * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n   * the operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @param {number} [options.release=0.5] The velocity at which to release the note\n   * (between `0` and `1`).  If the `rawRelease` option is also defined, `rawRelease` will have\n   * priority. An invalid velocity value will silently trigger the default of `0.5`.\n   *\n   * @param {number} [options.rawRelease=64] The velocity at which to release the note\n   * (between `0` and `127`). If the `release` option is also defined, `rawRelease` will have\n   * priority. An invalid velocity value will silently trigger the default of `64`.\n   *\n   * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n   */\n  sendNoteOff(note, options = {}) {\n\n    if (wm.validation) {\n\n      if (\n        options.rawRelease != undefined &&\n        !(options.rawRelease >= 0 && options.rawRelease <= 127)\n      ) {\n        throw new RangeError(\"The 'rawRelease' option must be an integer between 0 and 127\");\n      }\n\n      if (options.release != undefined && !(options.release >= 0 && options.release <= 1)) {\n        throw new RangeError(\"The 'release' option must be an number between 0 and 1\");\n      }\n\n      // Legacy compatibility warnings\n      if (options.rawVelocity) {\n        options.rawRelease = options.velocity;\n        console.warn(\"The 'rawVelocity' option is deprecated. Use 'rawRelease' instead.\");\n      }\n      if (options.velocity) {\n        options.release = options.velocity;\n        console.warn(\"The 'velocity' option is deprecated. Use 'attack' instead.\");\n      }\n\n    }\n\n    let nVelocity = 64;\n\n    if (options.rawRelease != undefined) {\n      nVelocity = options.rawRelease;\n    } else {\n      if (!isNaN(options.release)) nVelocity = Math.round(options.release * 127);\n    }\n\n    // Plot total octave offset\n    const offset = wm.octaveOffset + this.output.octaveOffset + this.octaveOffset;\n\n    Utilities.buildNoteArray(note, {rawRelease: parseInt(nVelocity)}).forEach(n => {\n      this.send(\n        [\n          (Enumerations.CHANNEL_MESSAGES.noteoff << 4) + (this.number - 1),\n          n.getOffsetNumber(offset),\n          n.rawRelease,\n        ],\n        {time: Utilities.toTimestamp(options.time)}\n      );\n    });\n\n    return this;\n\n  }\n\n  /**\n   * Sends a **note off** message for the specified MIDI note number. The first parameter is the\n   * note to stop. It can be a single value or an array of the following valid values:\n   *\n   *  - A MIDI note number (integer between `0` and `127`)\n   *  - A note identifier (e.g. `\"C3\"`, `\"G#4\"`, `\"F-1\"`, `\"Db7\"`)\n   *  - A [`Note`](Note) object\n   *\n   * The execution of the **note off** command can be delayed by using the `time` property of the\n   * `options` parameter.\n   *\n   * @param note {number|Note|string|number[]|Note[]|string[]} The note(s) to stop. The notes can be\n   * specified by using a MIDI note number (`0` - `127`), a note identifier (e.g. `C3`, `G#4`, `F-1`,\n   * `Db7`) or an array of the previous types. When using a note identifier, octave range must be\n   * between `-1` and `9`. The lowest note is `C-1` (MIDI note number `0`) and the highest note is\n   * `G9` (MIDI note number `127`).\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number} [options.release=0.5] The velocity at which to release the note\n   * (between `0` and `1`).  If the `rawRelease` option is also defined, `rawRelease` will have\n   * priority. An invalid velocity value will silently trigger the default of `0.5`.\n   *\n   * @param {number} [options.rawRelease=64] The velocity at which to release the note\n   * (between `0` and `127`). If the `release` option is also defined, `rawRelease` will have\n   * priority. An invalid velocity value will silently trigger the default of `64`.\n   *\n   * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n   * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n   * positive number\n   * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n   * the operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @returns {Output} Returns the `Output` object so methods can be chained.\n   */\n  stopNote(note, options = {}) {\n    return this.sendNoteOff(note, options);\n  }\n\n  /**\n   * Sends a **note on** message for the specified note(s) on the channel. The first parameter is\n   * the note. It can be a single value or an array of the following valid values:\n   *\n   *  - A [`Note`]{@link Note} object\n   *  - A MIDI note number (integer between `0` and `127`)\n   *  - A note identifier (e.g. `\"C3\"`, `\"G#4\"`, `\"F-1\"`, `\"Db7\"`)\n   *\n   *  When passing a [`Note`]{@link Note}object or a note name, the `octaveOffset` will be applied.\n   *  This is not the case when using a note number. In this case, we assume you know exactly which\n   *  MIDI note number should be sent out.\n   *\n   * The execution of the **note on** command can be delayed by using the `time` property of the\n   * `options` parameter.\n   *\n   * When using [`Note`]{@link Note} objects, the attack velocity defined in the\n   * [`Note`]{@link Note} objects has precedence over the one specified via the method's `options`\n   * parameter. Also, the `duration` is ignored. If you want to also send a **note off** message,\n   * use the [`playNote()`]{@link #playNote} method instead.\n   *\n   * **Note**: As per the MIDI standard, a **note on** message with an attack velocity of `0` is\n   * functionally equivalent to a **note off** message.\n   *\n   * @param note {number|string|Note|number[]|string[]|Note[]} The note(s) to play. The notes can be\n   * specified by using a MIDI note number (0-127), a note identifier (e.g. C3, G#4, F-1, Db7), a\n   * [`Note`]{@link Note} object or an array of the previous types.\n   *\n   * @param {object} [options={}]\n   *\n   * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n   * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n   * positive number\n   * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n   * the operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @param {number} [options.attack=0.5] The velocity at which to play the note (between `0` and\n   * `1`).  If the `rawAttack` option is also defined, `rawAttack` will have priority. An invalid\n   * velocity value will silently trigger the default of `0.5`.\n   *\n   * @param {number} [options.rawAttack=64] The velocity at which to release the note (between `0`\n   * and `127`). If the `attack` option is also defined, `rawAttack` will have priority. An invalid\n   * velocity value will silently trigger the default of `64`.\n   *\n   * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n   */\n  sendNoteOn(note, options = {}) {\n\n    if (wm.validation) {\n\n      if (options.rawAttack != undefined && !(options.rawAttack >= 0 && options.rawAttack <= 127)) {\n        throw new RangeError(\"The 'rawAttack' option must be an integer between 0 and 127\");\n      }\n\n      if (options.attack != undefined && !(options.attack >= 0 && options.attack <= 1)) {\n        throw new RangeError(\"The 'attack' option must be an number between 0 and 1\");\n      }\n\n      // Legacy compatibility warnings\n      if (options.rawVelocity) {\n        options.rawAttack = options.velocity;\n        options.rawRelease = options.release;\n        console.warn(\"The 'rawVelocity' option is deprecated. Use 'rawAttack' or 'rawRelease'.\");\n      }\n      if (options.velocity) {\n        options.attack = options.velocity;\n        console.warn(\"The 'velocity' option is deprecated. Use 'attack' instead.\");\n      }\n\n    }\n\n    let nVelocity = 64;\n\n    if (options.rawAttack != undefined) {\n      nVelocity = options.rawAttack;\n    } else {\n      if (!isNaN(options.attack)) nVelocity = Math.round(options.attack * 127);\n    }\n\n    // Plot total octave offset\n    const offset = wm.octaveOffset + this.output.octaveOffset + this.octaveOffset;\n\n    Utilities.buildNoteArray(note, {rawAttack: nVelocity}).forEach(n => {\n      this.send(\n        [\n          (Enumerations.CHANNEL_MESSAGES.noteon << 4) + (this.number - 1),\n          n.getOffsetNumber(offset),\n          n.rawAttack\n        ],\n        {time: Utilities.toTimestamp(options.time)}\n      );\n    });\n\n    return this;\n\n  }\n\n  /**\n   * Sends a MIDI **channel mode** message. The channel mode message to send can be specified\n   * numerically or by using one of the following common names:\n   *\n   * |  Type                |Number| Shortcut Method                                               |\n   * | ---------------------|------|-------------------------------------------------------------- |\n   * | `allsoundoff`        | 120  | [`sendAllSoundOff()`]{@link #sendAllSoundOff}                 |\n   * | `resetallcontrollers`| 121  | [`sendResetAllControllers()`]{@link #sendResetAllControllers} |\n   * | `localcontrol`       | 122  | [`sendLocalControl()`]{@link #sendLocalControl}               |\n   * | `allnotesoff`        | 123  | [`sendAllNotesOff()`]{@link #sendAllNotesOff}                 |\n   * | `omnimodeoff`        | 124  | [`sendOmniMode(false)`]{@link #sendOmniMode}                  |\n   * | `omnimodeon`         | 125  | [`sendOmniMode(true)`]{@link #sendOmniMode}                   |\n   * | `monomodeon`         | 126  | [`sendPolyphonicMode(\"mono\")`]{@link #sendPolyphonicMode}     |\n   * | `polymodeon`         | 127  | [`sendPolyphonicMode(\"poly\")`]{@link #sendPolyphonicMode}     |\n   *\n   * **Note**: as you can see above, to make it easier, all channel mode messages also have a matching\n   * helper method.\n   *\n   * It should be noted that, per the MIDI specification, only `localcontrol` and `monomodeon` may\n   * require a value that's not zero. For that reason, the `value` parameter is optional and\n   * defaults to 0.\n   *\n   * @param {number|string} command The numerical identifier of the channel mode message (integer\n   * between `120` and `127`) or its name as a string.\n   *\n   * @param {number} [value=0] The value to send (integer between `0` - `127`).\n   *\n   * @param {object} [options={}]\n   *\n   * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n   * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n   * positive number\n   * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n   * the operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n   */\n  sendChannelMode(command, value = 0, options = {}) {\n\n    // Normalize command to integer\n    if (typeof command === \"string\") command = Enumerations.CHANNEL_MODE_MESSAGES[command];\n\n    if (wm.validation) {\n\n      if (command === undefined) {\n        throw new TypeError(\"Invalid channel mode message name or number.\");\n      }\n\n      if (isNaN(command) || !(command >= 120 && command <= 127)) {\n        throw new TypeError(\"Invalid channel mode message number.\");\n      }\n\n      if (isNaN(parseInt(value)) || value < 0 || value > 127) {\n        throw new RangeError(\"Value must be an integer between 0 and 127.\");\n      }\n\n    }\n\n    this.send(\n      [\n        (Enumerations.CHANNEL_MESSAGES.controlchange << 4) + (this.number - 1),\n        command,\n        value\n      ],\n      {time: Utilities.toTimestamp(options.time)}\n    );\n\n    return this;\n\n  }\n\n  /**\n   * Sets OMNI mode to `\"on\"` or `\"off\"`. MIDI's OMNI mode causes the instrument to respond to\n   * messages from all channels.\n   *\n   * It should be noted that support for OMNI mode is not as common as it used to be.\n   *\n   * @param [state=true] {boolean} Whether to activate OMNI mode (`true`) or not (`false`).\n   *\n   * @param {object} [options={}]\n   *\n   * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n   * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n   * positive number\n   * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n   * the operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @throws {TypeError} Invalid channel mode message name.\n   * @throws {RangeError} Channel mode controller numbers must be between 120 and 127.\n   * @throws {RangeError} Value must be an integer between 0 and 127.\n   *\n   * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n   */\n  sendOmniMode(state, options = {}) {\n\n    if (state === undefined || state) {\n      this.sendChannelMode(\"omnimodeon\", 0, options);\n    } else {\n      this.sendChannelMode(\"omnimodeoff\", 0, options);\n    }\n\n    return this;\n\n  }\n\n  /**\n   * Sends a MIDI **channel aftertouch** message. For key-specific aftertouch, you should instead\n   * use [`sendKeyAftertouch()`]{@link #sendKeyAftertouch}.\n   *\n   * @param [pressure] {number} The pressure level (between `0` and `1`). If the `rawValue` option\n   * is set to `true`, the pressure can be defined by using an integer between `0` and `127`.\n   *\n   * @param {object} [options={}]\n   *\n   * @param {boolean} [options.rawValue=false] A boolean indicating whether the value should be\n   * considered a float between `0` and `1.0` (default) or a raw integer between `0` and `127`.\n   *\n   * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n   * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n   * positive number\n   * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n   * the operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n   *\n   * @throws RangeError Invalid channel aftertouch value.\n   */\n  sendChannelAftertouch(pressure, options = {}) {\n\n    if (wm.validation) {\n\n      if (isNaN(parseFloat(pressure))) {\n        throw new RangeError(\"Invalid channel aftertouch value.\");\n      }\n\n      if (options.rawValue) {\n        if (!(pressure >= 0 && pressure <= 127 && Number.isInteger(pressure))) {\n          throw new RangeError(\n            \"Channel aftertouch raw value must be an integer between 0 and 127.\")\n          ;\n        }\n      } else {\n        if (!(pressure >= 0 && pressure <= 1)) {\n          throw new RangeError(\"Channel aftertouch value must be a float between 0 and 1.\");\n        }\n      }\n\n    }\n\n    this.send(\n      [\n        (Enumerations.CHANNEL_MESSAGES.channelaftertouch << 4) + (this.number - 1),\n        Math.round(pressure * 127)\n      ],\n      {time: Utilities.toTimestamp(options.time)}\n    );\n\n    return this;\n\n  }\n\n  /**\n   * Sends a **master tuning** message. The value is decimal and must be larger than -65 semitones\n   * and smaller than 64 semitones.\n   *\n   * Because of the way the MIDI specification works, the decimal portion of the value will be\n   * encoded with a resolution of 14bit. The integer portion must be between -64 and 63\n   * inclusively. This function actually generates two MIDI messages: a **Master Coarse Tuning** and\n   * a **Master Fine Tuning** RPN messages.\n   *\n   * @param [value=0.0] {number} The desired decimal adjustment value in semitones (-65 < x < 64)\n   *\n   * @param {object} [options={}]\n   *\n   * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n   * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n   * positive number\n   * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n   * the operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @throws {RangeError} The value must be a decimal number between larger than -65 and smaller\n   * than 64.\n   *\n   * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n   */\n  sendMasterTuning(value, options = {}) {\n\n    // @todo allow passing value as msb/lsb pair (the same as pitch bend range)\n\n    value = parseFloat(value) || 0.0;\n\n    if (wm.validation) {\n\n      if (!(value > -65 && value < 64)) {\n        throw new RangeError(\n          \"The value must be a decimal number larger than -65 and smaller than 64.\"\n        );\n      }\n\n    }\n\n    let coarse = Math.floor(value) + 64;\n    let fine = value - Math.floor(value);\n\n    // Calculate MSB and LSB for fine adjustment (14bit resolution)\n    fine = Math.round((fine + 1) / 2 * 16383);\n    let msb = (fine >> 7) & 0x7F;\n    let lsb = fine & 0x7F;\n\n    this.sendRpnValue(\"channelcoarsetuning\", coarse, options);\n    this.sendRpnValue(\"channelfinetuning\", [msb, lsb], options);\n\n    return this;\n\n  }\n\n  /**\n   * Sends a **modulation depth range** message to adjust the depth of the modulation wheel's range.\n   * The range can be specified with the `semitones` parameter, the `cents` parameter or by\n   * specifying both parameters at the same time.\n   *\n   * @param {number} semitones The desired adjustment value in semitones (integer between 0 and\n   * 127).\n   *\n   * @param {number} [cents=0] The desired adjustment value in cents (integer between 0 and 127).\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n   * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n   * positive number\n   * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n   * the operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n   */\n  sendModulationRange(semitones, cents, options = {}) {\n\n    // @todo allow passing value as msb/lsb pair (the same as pitch bend range)\n    // when passing a single argument, semitones and cents shoud be combined\n\n    if (wm.validation) {\n\n      if (!Number.isInteger(semitones) || !(semitones >= 0 && semitones <= 127)) {\n        throw new RangeError(\"The semitones value must be an integer between 0 and 127.\");\n      }\n\n      if (!(cents == undefined) && (!Number.isInteger(cents) || !(cents >= 0 && cents <= 127))) {\n        throw new RangeError(\"If specified, the cents value must be an integer between 0 and 127.\");\n      }\n\n    }\n\n    // Default value for cents\n    if (!(cents >= 0 && cents <= 127)) cents = 0;\n\n    this.sendRpnValue(\"modulationrange\", [semitones, cents], options);\n\n    return this;\n\n  }\n\n  /**\n   * Sets a non-registered parameter (NRPN) to the specified value. The NRPN is selected by passing\n   * in a two-position array specifying the values of the two control bytes. The value is specified\n   * by passing in a single integer (most cases) or an array of two integers.\n   *\n   * NRPNs are not standardized in any way. Each manufacturer is free to implement them any way\n   * they see fit. For example, according to the Roland GS specification, you can control the\n   * **vibrato rate** using NRPN (1, 8). Therefore, to set the **vibrato rate** value to **123** you\n   * would use:\n   *\n   * ```js\n   * WebMidi.outputs[0].channels[0].sendNrpnValue([1, 8], 123);\n   * ```\n   *\n   * In some rarer cases, you need to send two values with your NRPN messages. In such cases, you\n   * would use a 2-position array. For example, for its **ClockBPM** parameter (2, 63), Novation\n   * uses a 14-bit value that combines an MSB and an LSB (7-bit values). So, for example, if the\n   * value to send was 10, you could use:\n   *\n   * ```js\n   * WebMidi.outputs[0].channels[0].sendNrpnValue([2, 63], [0, 10]);\n   * ```\n   *\n   * For further implementation details, refer to the manufacturer's documentation.\n   *\n   * @param nrpn {number[]} A two-position array specifying the two control bytes (0x63,\n   * 0x62) that identify the non-registered parameter.\n   *\n   * @param [data=[]] {number|number[]} An integer or an array of integers with a length of 1 or 2\n   * specifying the desired data.\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n   * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n   * positive number\n   * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n   * the operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @throws {RangeError} The control value must be between 0 and 127.\n   * @throws {RangeError} The msb value must be between 0 and 127\n   *\n   * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n   */\n  sendNrpnValue(nrpn, data, options = {}) {\n\n    data = [].concat(data);\n\n    if (wm.validation) {\n\n      if (!Array.isArray(nrpn) || !Number.isInteger(nrpn[0]) || !Number.isInteger(nrpn[1])) {\n        throw new TypeError(\"The specified NRPN is invalid.\");\n      }\n\n      if (!(nrpn[0] >= 0 && nrpn[0] <= 127)) {\n        throw new RangeError(\"The first byte of the NRPN must be between 0 and 127.\");\n      }\n\n      if (!(nrpn[1] >= 0 && nrpn[1] <= 127)) {\n        throw new RangeError(\"The second byte of the NRPN must be between 0 and 127.\");\n      }\n\n      data.forEach(value => {\n        if (!(value >= 0 && value <= 127)) {\n          throw new RangeError(\"The data bytes of the NRPN must be between 0 and 127.\");\n        }\n      });\n\n    }\n\n    this._selectNonRegisteredParameter(nrpn, options);\n    this._setCurrentParameter(data, options);\n    this._deselectNonRegisteredParameter(options);\n\n    return this;\n\n  }\n\n  /**\n   * Sends a MIDI **pitch bend** message at the scheduled time. The resulting bend is relative to\n   * the pitch bend range that has been defined. The range can be set with\n   * [`sendPitchBendRange()`]{@link #sendPitchBendRange}. So, for example, if the pitch\n   * bend range has been set to 12 semitones, using a bend value of -1 will bend the note 1 octave\n   * below its nominal value.\n   *\n   * @param {number|number[]} [value] The intensity of the bend (between -1.0 and 1.0). A value of\n   * zero means no bend. If the `rawValue` option is set to `true`, the intensity of the bend can be\n   * defined by either using a single integer between 0 and 127 (MSB) or an array of two integers\n   * between 0 and 127 representing, respectively, the MSB (most significant byte) and the LSB\n   * (least significant byte). The MSB is expressed in semitones with `64` meaning no bend. A value\n   * lower than `64` bends downwards while a value higher than `64` bends upwards. The LSB is\n   * expressed in cents (1/100 of a semitone). An LSB of `64` also means no bend.\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {boolean} [options.rawValue=false] A boolean indicating whether the value should be\n   * considered as a float between -1.0 and 1.0 (default) or as raw integer between 0 and 127 (or\n   * an array of 2 integers if using both MSB and LSB).\n   *\n   * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n   * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n   * positive number\n   * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n   * the operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n   */\n  sendPitchBend(value, options = {}) {\n\n    // @todo standardize the way msb/lsb are passed in\n\n    if (wm.validation) {\n\n      if (options.rawValue && Array.isArray(value)) {\n\n        if (!(value[0] >= 0 && value[0] <= 127)) {\n          throw new RangeError(\"The pitch bend MSB must be an integer between 0 and 127.\");\n        }\n        if (!(value[1] >= 0 && value[1] <= 127)) {\n          throw new RangeError(\"The pitch bend LSB must be an integer between 0 and 127.\");\n        }\n\n      } else if (options.rawValue && !Array.isArray(value)) {\n\n        if (!(value >= 0 && value <= 127)) {\n          throw new RangeError(\"The pitch bend MSB must be an integer between 0 and 127.\");\n        }\n\n      } else {\n\n        if (isNaN(value) || value === null) {\n          throw new RangeError(\"Invalid pitch bend value.\");\n        }\n\n        if (!(value >= -1 && value <= 1)) {\n          throw new RangeError(\"The pitch bend value must be a float between -1 and 1.\");\n        }\n\n      }\n\n    }\n\n    let msb = 0;\n    let lsb = 0;\n\n    // Calculate MSB and LSB for both scenarios\n    if (options.rawValue && Array.isArray(value)) {\n      msb = value[0];\n      lsb = value[1];\n    } else if (options.rawValue && !Array.isArray(value)) {\n      msb = value;\n    } else {\n      const result = Utilities.fromFloatToMsbLsb((value + 1) / 2); // b/c value is -1 to 1\n      msb = result.msb;\n      lsb = result.lsb;\n    }\n\n    this.send(\n      [\n        (Enumerations.CHANNEL_MESSAGES.pitchbend << 4) + (this.number - 1),\n        lsb,\n        msb\n      ],\n      {time: Utilities.toTimestamp(options.time)}\n    );\n\n    return this;\n\n  }\n\n  /**\n   * Sends a **pitch bend range** message at the scheduled time to adjust the range used by the\n   * pitch bend lever. The range is specified by using the `semitones` and `cents` parameters. For\n   * example, setting the `semitones` parameter to `12` means that the pitch bend range will be 12\n   * semitones above and below the nominal pitch.\n   *\n   * @param semitones {number} The desired adjustment value in semitones (between 0 and 127). While\n   * nothing imposes that in the specification, it is very common for manufacturers to limit the\n   * range to 2 octaves (-12 semitones to 12 semitones).\n   *\n   * @param [cents=0] {number} The desired adjustment value in cents (integer between 0-127).\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n   * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n   * positive number\n   * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n   * the operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @throws {RangeError} The semitones value must be an integer between 0 and 127.\n   * @throws {RangeError} The cents value must be an integer between 0 and 127.\n   *\n   * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n   */\n  sendPitchBendRange(semitones, cents, options = {}) {\n\n    // @todo use single value as parameter or pair of msb/lsb\n\n    if (wm.validation) {\n\n      if (!Number.isInteger(semitones) || !(semitones >= 0 && semitones <= 127)) {\n        throw new RangeError(\"The semitones value must be an integer between 0 and 127.\");\n      }\n\n      if (!Number.isInteger(cents) || !(cents >= 0 && cents <= 127)) {\n        throw new RangeError(\"The cents value must be an integer between 0 and 127.\");\n      }\n\n    }\n\n    this.sendRpnValue(\"pitchbendrange\", [semitones, cents], options);\n    return this;\n\n  }\n\n  /**\n   * Sends a MIDI **program change** message at the scheduled time.\n   *\n   * @param [program=1] {number} The MIDI patch (program) number (integer between `0` and `127`).\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n   * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n   * positive number\n   * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n   * the operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @throws {TypeError} Failed to execute 'send' on 'MIDIOutput': The value at index 1 is greater\n   * than 0xFF.\n   *\n   * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n   *\n   */\n  sendProgramChange(program, options = {}) {\n\n    program = parseInt(program) || 0;\n\n    if (wm.validation) {\n\n      if (!(program >= 0 && program <= 127)) {\n        throw new RangeError(\"The program number must be between 0 and 127.\");\n      }\n\n    }\n\n    this.send(\n      [\n        (Enumerations.CHANNEL_MESSAGES.programchange << 4) + (this.number - 1),\n        program\n      ],\n      {time: Utilities.toTimestamp(options.time)}\n    );\n\n    return this;\n\n  }\n\n  /**\n   * Sets the specified MIDI registered parameter to the desired value. The value is defined with\n   * up to two bytes of data (msb, lsb) that each can go from 0 to 127.\n   *\n   * MIDI\n   * [registered parameters](https://www.midi.org/specifications-old/item/table-3-control-change-messages-data-bytes-2)\n   * extend the original list of control change messages. The MIDI 1.0 specification lists only a\n   * limited number of them:\n   *\n   * | Numbers      | Function                 |\n   * |--------------|--------------------------|\n   * | (0x00, 0x00) | `pitchbendrange`         |\n   * | (0x00, 0x01) | `channelfinetuning`      |\n   * | (0x00, 0x02) | `channelcoarsetuning`    |\n   * | (0x00, 0x03) | `tuningprogram`          |\n   * | (0x00, 0x04) | `tuningbank`             |\n   * | (0x00, 0x05) | `modulationrange`        |\n   * | (0x3D, 0x00) | `azimuthangle`           |\n   * | (0x3D, 0x01) | `elevationangle`         |\n   * | (0x3D, 0x02) | `gain`                   |\n   * | (0x3D, 0x03) | `distanceratio`          |\n   * | (0x3D, 0x04) | `maximumdistance`        |\n   * | (0x3D, 0x05) | `maximumdistancegain`    |\n   * | (0x3D, 0x06) | `referencedistanceratio` |\n   * | (0x3D, 0x07) | `panspreadangle`         |\n   * | (0x3D, 0x08) | `rollangle`              |\n   *\n   * Note that the **Tuning Program** and **Tuning Bank** parameters are part of the *MIDI Tuning\n   * Standard*, which is not widely implemented.\n   *\n   * @param rpn {string|number[]} A string identifying the parameter's name (see above) or a\n   * two-position array specifying the two control bytes (e.g. `[0x65, 0x64]`) that identify the\n   * registered parameter.\n   *\n   * @param [data=[]] {number|number[]} An single integer or an array of integers with a maximum\n   * length of 2 specifying the desired data.\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n   * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n   * positive number\n   * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n   * the operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n   */\n  sendRpnValue(rpn, data, options = {}) {\n\n    if (!Array.isArray(rpn)) rpn = Enumerations.REGISTERED_PARAMETERS[rpn];\n\n    if (wm.validation) {\n\n      if (!Number.isInteger(rpn[0]) || !Number.isInteger(rpn[1])) {\n        throw new TypeError(\"The specified NRPN is invalid.\");\n      }\n\n      if (!(rpn[0] >= 0 && rpn[0] <= 127)) {\n        throw new RangeError(\"The first byte of the RPN must be between 0 and 127.\");\n      }\n\n      if (!(rpn[1] >= 0 && rpn[1] <= 127)) {\n        throw new RangeError(\"The second byte of the RPN must be between 0 and 127.\");\n      }\n\n      [].concat(data).forEach(value => {\n        if (!(value >= 0 && value <= 127)) {\n          throw new RangeError(\"The data bytes of the RPN must be between 0 and 127.\");\n        }\n      });\n\n    }\n\n    this._selectRegisteredParameter(rpn, options);\n    this._setCurrentParameter(data, options);\n    this._deselectRegisteredParameter(options);\n\n    return this;\n\n  }\n\n  /**\n   * Sets the MIDI tuning bank to use. Note that the **Tuning Bank** parameter is part of the\n   * *MIDI Tuning Standard*, which is not widely implemented.\n   *\n   * @param value {number} The desired tuning bank (integer between `0` and `127`).\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n   * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n   * positive number\n   * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n   * the operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @throws {RangeError} The bank value must be between 0 and 127.\n   *\n   * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n   */\n  sendTuningBank(value, options = {}) {\n\n    if (wm.validation) {\n\n      if (!Number.isInteger(value) || !(value >= 0 && value <= 127)) {\n        throw new RangeError(\"The tuning bank number must be between 0 and 127.\");\n      }\n\n    }\n\n    this.sendRpnValue(\"tuningbank\", value, options);\n    return this;\n\n  }\n\n  /**\n   * Sets the MIDI tuning program to use. Note that the **Tuning Program** parameter is part of the\n   * *MIDI Tuning Standard*, which is not widely implemented.\n   *\n   * @param value {number} The desired tuning program (integer between `0` and `127`).\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n   * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n   * positive number\n   * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n   * the operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @throws {RangeError} The program value must be between 0 and 127.\n   *\n   * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n   */\n  sendTuningProgram(value, options = {}) {\n\n    if (wm.validation) {\n\n      if (!Number.isInteger(value) || !(value >= 0 && value <= 127)) {\n        throw new RangeError(\"The tuning program number must be between 0 and 127.\");\n      }\n\n    }\n\n    this.sendRpnValue(\"tuningprogram\", value, options);\n    return this;\n\n  }\n\n  /**\n   * Turns local control on or off. Local control is usually enabled by default. If you disable it,\n   * the instrument will no longer trigger its own sounds. It will only send the MIDI messages to\n   * its out port.\n   *\n   * @param [state=false] {boolean} Whether to activate local control (`true`) or disable it\n   * (`false`).\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n   * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n   * positive number\n   * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n   * the operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n   */\n  sendLocalControl(state, options = {}) {\n    if (state) {\n      return this.sendChannelMode(\"localcontrol\", 127, options);\n    } else {\n      return this.sendChannelMode(\"localcontrol\", 0, options);\n    }\n  }\n\n  /**\n   * Sends an **all notes off** channel mode message. This will make all currently playing notes\n   * fade out just as if their key had been released. This is different from the\n   * [`sendAllSoundOff()`]{@link #sendAllSoundOff} method which mutes all sounds immediately.\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n   * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n   * positive number\n   * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n   * the operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n   */\n  sendAllNotesOff(options = {}) {\n    return this.sendChannelMode(\"allnotesoff\", 0, options);\n  }\n\n  /**\n   * Sends an **all sound off** channel mode message. This will silence all sounds playing on that\n   * channel but will not prevent new sounds from being triggered.\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n   * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n   * positive number\n   * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n   * the operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n   */\n  sendAllSoundOff(options = {}) {\n    return this.sendChannelMode(\"allsoundoff\", 0, options);\n  }\n\n  /**\n   * Sends a **reset all controllers** channel mode message. This resets all controllers, such as\n   * the pitch bend, to their default value.\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n   * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n   * positive number\n   * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n   * the operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n   */\n  sendResetAllControllers(options = {}) {\n    return this.sendChannelMode(\"resetallcontrollers\", 0, options);\n  }\n\n  /**\n   * Sets the polyphonic mode. In `\"poly\"` mode (usually the default), multiple notes can be played\n   * and heard at the same time. In `\"mono\"` mode, only one note will be heard at once even if\n   * multiple notes are being played.\n   *\n   * @param {string} [mode=poly] The mode to use: `\"mono\"` or `\"poly\"`.\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n   * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n   * positive number\n   * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n   * the operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n   */\n  sendPolyphonicMode(mode, options = {}) {\n    if (mode === \"mono\") {\n      return this.sendChannelMode(\"monomodeon\", 0, options);\n    } else {\n      return this.sendChannelMode(\"polymodeon\", 0, options);\n    }\n  }\n\n  /**\n   * An integer to offset the reported octave of outgoing note-specific messages (`noteon`,\n   * `noteoff` and `keyaftertouch`). By default, middle C (MIDI note number 60) is placed on the 4th\n   * octave (C4).\n   *\n   * Note that this value is combined with the global offset value defined in\n   * [`WebMidi.octaveOffset`](WebMidi#octaveOffset) and with the parent value defined in\n   * [`Output.octaveOffset`]{@link Output#octaveOffset}.\n   *\n   * @type {number}\n   *\n   * @since 3.0\n   */\n  get octaveOffset() {\n    return this._octaveOffset;\n  }\n  set octaveOffset(value) {\n\n    if (this.validation) {\n      value = parseInt(value);\n      if (isNaN(value)) throw new TypeError(\"The 'octaveOffset' property must be an integer.\");\n    }\n\n    this._octaveOffset = value;\n\n  }\n\n  /**\n   * The parent [`Output`]{@link Output} this channel belongs to.\n   * @type {Output}\n   * @since 3.0\n   */\n  get output() {\n    return this._output;\n  }\n\n  /**\n   * This channel's MIDI number (`1` - `16`).\n   * @type {number}\n   * @since 3.0\n   */\n  get number() {\n    return this._number;\n  }\n\n}\n\n/**\n * The `Output` class represents a single MIDI output port (not to be confused with a MIDI channel).\n * A port is made available by a MIDI device. A MIDI device can advertise several input and output\n * ports. Each port has 16 MIDI channels which can be accessed via the [`channels`](#channels)\n * property.\n *\n * The `Output` object is automatically instantiated by the library according to the host's MIDI\n * subsystem and should not be directly instantiated.\n *\n * You can access all available `Output` objects by referring to the\n * [`WebMidi.outputs`](WebMidi#outputs) array or by using methods such as\n * [`WebMidi.getOutputByName()`](WebMidi#getOutputByName) or\n * [`WebMidi.getOutputById()`](WebMidi#getOutputById).\n *\n * @fires Output#opened\n * @fires Output#disconnected\n * @fires Output#closed\n *\n * @extends EventEmitter\n * @license Apache-2.0\n */\nclass Output extends EventEmitter {\n\n  /**\n   * Creates an `Output` object.\n   *\n   * @param {MIDIOutput} midiOutput [`MIDIOutput`](https://developer.mozilla.org/en-US/docs/Web/API/MIDIOutput)\n   * object as provided by the MIDI subsystem.\n   */\n  constructor(midiOutput) {\n\n    super();\n\n    /**\n     * A reference to the `MIDIOutput` object\n     * @type {MIDIOutput}\n     * @private\n     */\n    this._midiOutput = midiOutput;\n\n    /**\n     * @type {number}\n     * @private\n     */\n    this._octaveOffset = 0;\n\n    /**\n     * Array containing the 16 [`OutputChannel`]{@link OutputChannel} objects available provided by\n     * this `Output`. The channels are numbered 1 through 16.\n     *\n     * @type {OutputChannel[]}\n     */\n    this.channels = [];\n    for (let i = 1; i <= 16; i++) this.channels[i] = new OutputChannel(this, i);\n\n    this._midiOutput.onstatechange = this._onStateChange.bind(this);\n\n  }\n\n  /**\n   * Destroys the `Output`. All listeners are removed, all channels are destroyed and the MIDI\n   * subsystem is unlinked.\n   * @returns {Promise<void>}\n   */\n  async destroy() {\n    this.removeListener();\n    this.channels.forEach(ch => ch.destroy());\n    this.channels = [];\n    if (this._midiOutput) this._midiOutput.onstatechange = null;\n    await this.close();\n    this._midiOutput = null;\n  }\n\n  /**\n   * @private\n   */\n  _onStateChange(e) {\n\n    let event = {\n      timestamp: wm.time\n    };\n\n    if (e.port.connection === \"open\") {\n\n      /**\n       * Event emitted when the {@link Output} has been opened by calling the\n       * [open()]{@link Output#open} method.\n       *\n       * @event Output#opened\n       * @type {object}\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       * @property {string} type `\"opened\"`\n       * @property {Output} target The object to which the listener was originally added (`Output`).\n       * @property {Output} port The port that was opened\n       */\n      event.type = \"opened\";\n      event.target = this;\n      event.port = event.target; // for consistency\n      this.emit(\"opened\", event);\n\n    } else if (e.port.connection === \"closed\" && e.port.state === \"connected\") {\n\n      /**\n       * Event emitted when the {@link Output} has been closed by calling the\n       * [close()]{@link Output#close} method.\n       *\n       * @event Output#closed\n       * @type {object}\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       * @property {string} type `\"closed\"`\n       * @property {Output} target The object to which the listener was originally added (`Output`).\n       * @property {Output} port The port that was closed\n       */\n      event.type = \"closed\";\n      event.target = this;\n      event.port = event.target; // for consistency\n      this.emit(\"closed\", event);\n\n    } else if (e.port.connection === \"closed\" && e.port.state === \"disconnected\") {\n\n      /**\n       * Event emitted when the {@link Output} becomes unavailable. This event is typically fired\n       * when the MIDI device is unplugged.\n       *\n       * @event Output#disconnected\n       * @type {object}\n       * @property {number} timestamp The moment (DOMHighResTimeStamp0 when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       * @property {string} type `\"disconnected\"`\n       * @property {Output} target The object to which the listener was originally added (`Output`).\n       * @property {object} port Object with properties describing the {@link Output} that was\n       * disconnected. This is not the actual `Output` as it is no longer available.\n       */\n      event.type = \"disconnected\";\n      event.port = {\n        connection: e.port.connection,\n        id: e.port.id,\n        manufacturer: e.port.manufacturer,\n        name: e.port.name,\n        state: e.port.state,\n        type: e.port.type\n      };\n      this.emit(\"disconnected\", event);\n\n    } else if (e.port.connection === \"pending\" && e.port.state === \"disconnected\") ; else {\n      console.warn(\"This statechange event was not caught:\", e.port.connection, e.port.state);\n    }\n\n  }\n\n  /**\n   * Opens the output for usage. When the library is enabled, all ports are automatically opened.\n   * This method is only useful for ports that have been manually closed.\n   *\n   * @returns {Promise<Output>} The promise is fulfilled with the `Output` object.\n   */\n  async open() {\n\n    // Explicitly opens the port for usage. This is not mandatory. When the port is not explicitly\n    // opened, it is implicitly opened (asynchronously) when calling `send()` on the `MIDIOutput`.\n    // We do it explicitly so that 'connected' events are dispatched immediately and we are ready to\n    // send.\n    try {\n      await this._midiOutput.open();\n      return Promise.resolve(this);\n    } catch (err) {\n      return Promise.reject(err);\n    }\n\n  }\n\n  /**\n   * Closes the output connection. When an output is closed, it cannot be used to send MIDI messages\n   * until the output is opened again by calling [`open()`]{@link #open}. You can check\n   * the connection status by looking at the [`connection`]{@link #connection} property.\n   *\n   * @returns {Promise<void>}\n   */\n  async close() {\n\n    // We close the port. This triggers a 'statechange' event which we listen to to re-trigger the\n    // 'closed' event.\n    if (this._midiOutput) {\n      await this._midiOutput.close();\n    } else {\n      await Promise.resolve();\n    }\n\n  }\n\n  /**\n   * Sends a MIDI message on the MIDI output port. If no time is specified, the message will be\n   * sent immediately. The message should be an array of 8 bit unsigned integers (0-225), a\n   * [`Uint8Array`]{@link https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array}\n   * object or a [`Message`](Message) object.\n   *\n   * It is usually not necessary to use this method directly as you can use one of the simpler\n   * helper methods such as [`playNote()`](#playNote), [`stopNote()`](#stopNote),\n   * [`sendControlChange()`](#sendControlChange), etc.\n   *\n   * Details on the format of MIDI messages are available in the summary of\n   * [MIDI messages]{@link https://www.midi.org/specifications-old/item/table-1-summary-of-midi-message}\n   * from the MIDI Manufacturers Association.\n   *\n   * @param message {number[]|Uint8Array|Message} An array of 8bit unsigned integers, a `Uint8Array`\n   * object (not available in Node.js) containing the message bytes or a `Message` object.\n   *\n   * @param {object} [options={}]\n   *\n   * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n   * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n   * positive number\n   * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n   * the operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @throws {RangeError} The first byte (status) must be an integer between 128 and 255.\n   *\n   * @returns {Output} Returns the `Output` object so methods can be chained.\n   *\n   * @license Apache-2.0\n   */\n  send(message, options = {time: 0}, legacy = 0) {\n\n    // If a Message object is passed in we extract the message data (the jzz plugin used on Node.js\n    // does not support using Uint8Array).\n    if (message instanceof Message) {\n      message = Utilities.isNode ? message.data : message.rawData;\n    }\n\n    // If the data is a Uint8Array and we are on Node, we must convert it to array so it works with\n    // the jzz module.\n    if (message instanceof Uint8Array && Utilities.isNode) {\n      message = Array.from(message);\n    }\n\n    // Validation\n    if (wm.validation) {\n\n      // If message is neither an array nor a Uint8Array, then we are in legacy mode\n      if (!Array.isArray(message) && !(message instanceof Uint8Array)) {\n        message = [message];\n        if (Array.isArray(options)) message = message.concat(options);\n        options = isNaN(legacy) ? {time: 0} : {time: legacy};\n      }\n\n      if (!(parseInt(message[0]) >= 128 && parseInt(message[0]) <= 255)) {\n        throw new RangeError(\"The first byte (status) must be an integer between 128 and 255.\");\n      }\n\n      message.slice(1).forEach(value => {\n        value = parseInt(value);\n        if (!(value >= 0 && value <= 255)) {\n          throw new RangeError(\"Data bytes must be integers between 0 and 255.\");\n        }\n      });\n\n      if (!options) options = {time: 0};\n\n    }\n\n    // Send message and return `Output` for chaining\n    this._midiOutput.send(message, Utilities.toTimestamp(options.time));\n    return this;\n\n  }\n\n  /**\n   * Sends a MIDI [**system exclusive**]{@link\n    * https://www.midi.org/specifications-old/item/table-4-universal-system-exclusive-messages}\n   * (*sysex*) message. There are two categories of system exclusive messages: manufacturer-specific\n   * messages and universal messages. Universal messages are further divided into three subtypes:\n   *\n   *   * Universal non-commercial (for research and testing): `0x7D`\n   *   * Universal non-realtime: `0x7E`\n   *   * Universal realtime: `0x7F`\n   *\n   * The method's first parameter (`identification`) identifies the type of message. If the value of\n   * `identification` is `0x7D` (125), `0x7E` (126) or `0x7F` (127), the message will be identified\n   * as a **universal non-commercial**, **universal non-realtime** or **universal realtime** message\n   * (respectively).\n   *\n   * If the `identification` value is an array or an integer between 0 and 124, it will be used to\n   * identify the manufacturer targeted by the message. The *MIDI Manufacturers Association*\n   * maintains a full list of\n   * [Manufacturer ID Numbers](https://www.midi.org/specifications-old/item/manufacturer-id-numbers).\n   *\n   * The `data` parameter should only contain the data of the message. When sending out the actual\n   * MIDI message, WEBMIDI.js will automatically prepend the data with the **sysex byte** (`0xF0`)\n   * and the identification byte(s). It will also automatically terminate the message with the\n   * **sysex end byte** (`0xF7`).\n   *\n   * To use the `sendSysex()` method, system exclusive message support must have been enabled. To\n   * do so, you must set the `sysex` option to `true` when calling\n   * [`WebMidi.enable()`]{@link WebMidi#enable}:\n   *\n   * ```js\n   * WebMidi.enable({sysex: true})\n   *   .then(() => console.log(\"System exclusive messages are enabled\");\n   * ```\n   *\n   * ##### Examples of manufacturer-specific system exclusive messages\n   *\n   * If you want to send a sysex message to a Korg device connected to the first output, you would\n   * use the following code:\n   *\n   * ```js\n   * WebMidi.outputs[0].sendSysex(0x42, [0x1, 0x2, 0x3, 0x4, 0x5]);\n   * ```\n   * In this case `0x42` is the ID of the manufacturer (Korg) and `[0x1, 0x2, 0x3, 0x4, 0x5]` is the\n   * data being sent.\n   *\n   * The parameters can be specified using any number notation (decimal, hex, binary, etc.).\n   * Therefore, the code above is equivalent to this code:\n   *\n   * ```js\n   * WebMidi.outputs[0].sendSysex(66, [1, 2, 3, 4, 5]);\n   * ```\n   *\n   * Some manufacturers are identified using 3 bytes. In this case, you would use a 3-position array\n   * as the first parameter. For example, to send the same sysex message to a\n   * *Native Instruments* device:\n   *\n   * ```js\n   * WebMidi.outputs[0].sendSysex([0x00, 0x21, 0x09], [0x1, 0x2, 0x3, 0x4, 0x5]);\n   * ```\n   *\n   * There is no limit for the length of the data array. However, it is generally suggested to keep\n   * system exclusive messages to 64Kb or less.\n   *\n   * ##### Example of universal system exclusive message\n   *\n   * If you want to send a universal sysex message, simply assign the correct identification number\n   * in the first parameter. Number `0x7D` (125) is for non-commercial, `0x7E` (126) is for\n   * non-realtime and `0x7F` (127) is for realtime.\n   *\n   * So, for example, if you wanted to send an identity request non-realtime message (`0x7E`), you\n   * could use the following:\n   *\n   * ```js\n   * WebMidi.outputs[0].sendSysex(0x7E, [0x7F, 0x06, 0x01]);\n   * ```\n   *\n   * For more details on the format of universal messages, consult the list of\n   * [universal sysex messages](https://www.midi.org/specifications-old/item/table-4-universal-system-exclusive-messages).\n   *\n   * @param {number|number[]} identification An unsigned integer or an array of three unsigned\n   * integers between `0` and `127` that either identify the manufacturer or sets the message to be\n   * a **universal non-commercial message** (`0x7D`), a **universal non-realtime message** (`0x7E`)\n   * or a **universal realtime message** (`0x7F`). The *MIDI Manufacturers Association* maintains a\n   * full list of\n   * [Manufacturer ID Numbers](https://www.midi.org/specifications-old/item/manufacturer-id-numbers).\n   *\n   * @param {number[]|Uint8Array} [data] A `Uint8Array` or an array of unsigned integers between `0`\n   * and `127`. This is the data you wish to transfer.\n   *\n   * @param {object} [options={}]\n   *\n   * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n   * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n   * positive number\n   * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n   * the operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @throws {DOMException} Failed to execute 'send' on 'MIDIOutput': System exclusive message is\n   * not allowed.\n   *\n   * @throws {TypeError} Failed to execute 'send' on 'MIDIOutput': The value at index x is greater\n   * than 0xFF.\n   *\n   * @returns {Output} Returns the `Output` object so methods can be chained.\n   */\n  sendSysex(identification, data= [], options = {}) {\n\n    identification = [].concat(identification);\n\n    // Check if data is Uint8Array\n    if (data instanceof Uint8Array) {\n      const merged = new Uint8Array(1 + identification.length + data.length + 1);\n      merged[0] = Enumerations.SYSTEM_MESSAGES.sysex;\n      merged.set(Uint8Array.from(identification), 1);\n      merged.set(data, 1 + identification.length);\n      merged[merged.length - 1] = Enumerations.SYSTEM_MESSAGES.sysexend;\n      this.send(merged, {time: options.time});\n    } else {\n      const merged = identification.concat(data, Enumerations.SYSTEM_MESSAGES.sysexend);\n      this.send([Enumerations.SYSTEM_MESSAGES.sysex].concat(merged), {time: options.time});\n    }\n\n    return this;\n\n  };\n\n  /**\n   * Clears all messages that have been queued but not yet delivered.\n   *\n   * **Warning**: this method has been defined in the specification but has not been implemented\n   * yet. As soon as browsers implement it, it will work.\n   *\n   * You can check out the current status of this feature for Chromium (Chrome) here:\n   * https://bugs.chromium.org/p/chromium/issues/detail?id=471798\n   *\n   * @returns {Output} Returns the `Output` object so methods can be chained.\n   */\n  clear() {\n\n    if (this._midiOutput.clear) {\n\n      this._midiOutput.clear();\n\n    } else {\n\n      if (wm.validation) {\n        console.warn(\n          \"The 'clear()' method has not yet been implemented in your environment.\"\n        );\n      }\n\n    }\n\n    return this;\n\n  }\n\n  /**\n   * Sends a MIDI **timecode quarter frame** message. Please note that no processing is being done\n   * on the data. It is up to the developer to format the data according to the\n   * [MIDI Timecode](https://en.wikipedia.org/wiki/MIDI_timecode) format.\n   *\n   * @param value {number} The quarter frame message content (integer between 0 and 127).\n   *\n   * @param {object} [options={}]\n   *\n   * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n   * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n   * positive number\n   * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n   * the operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @returns {Output} Returns the `Output` object so methods can be chained.\n   */\n  sendTimecodeQuarterFrame(value, options = {}) {\n\n    if (wm.validation) {\n      value = parseInt(value);\n      if (isNaN(value) || !(value >= 0 && value <= 127)) {\n        throw new RangeError(\"The value must be an integer between 0 and 127.\");\n      }\n    }\n\n    this.send(\n      [\n        Enumerations.SYSTEM_MESSAGES.timecode,\n        value\n      ],\n      {time: options.time}\n    );\n\n    return this;\n\n  };\n\n  /**\n   * Sends a **song position** MIDI message. The value is expressed in MIDI beats (between `0` and\n   * `16383`) which are 16th note. Position `0` is always the start of the song.\n   *\n   * @param {number} [value=0] The MIDI beat to cue to (integer between `0` and `16383`).\n   *\n   * @param {object} [options={}]\n   *\n   * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n   * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n   * positive number\n   * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n   * the operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @returns {Output} Returns the `Output` object so methods can be chained.\n   *\n   * @since 3.0.0\n   */\n  sendSongPosition(value = 0, options = {}) {\n\n    // @todo allow passing in 2-entries array for msb/lsb\n\n    value = Math.floor(value) || 0;\n\n    var msb = (value >> 7) & 0x7F;\n    var lsb = value & 0x7F;\n\n    this.send(\n      [\n        Enumerations.SYSTEM_MESSAGES.songposition,\n        msb,\n        lsb\n      ],\n      {time: options.time}\n    );\n\n    return this;\n\n  }\n\n  /**\n   * Sends a **song select** MIDI message.\n   *\n   * @param {number} [value=0] The number of the song to select (integer between `0` and `127`).\n   *\n   * @param {object} [options={}]\n   *\n   * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n   * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n   * positive number\n   * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n   * the operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @throws The song number must be between 0 and 127.\n   *\n   * @returns {Output} Returns the `Output` object so methods can be chained.\n   *\n   * @since 3.0.0\n   */\n  sendSongSelect(value = 0, options = {}) {\n\n    if (wm.validation) {\n\n      value = parseInt(value);\n\n      if (isNaN(value) || !(value >= 0 && value <= 127)) {\n        throw new RangeError(\"The program value must be between 0 and 127\");\n      }\n\n    }\n\n    this.send(\n      [\n        Enumerations.SYSTEM_MESSAGES.songselect,\n        value\n      ],\n      {time: options.time}\n    );\n\n    return this;\n\n  }\n\n  /**\n   * Sends a MIDI **tune request** real-time message.\n   *\n   * @param {object} [options={}]\n   *\n   * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n   * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n   * positive number\n   * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n   * the operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @returns {Output} Returns the `Output` object so methods can be chained.\n   *\n   * @since 3.0.0\n   */\n  sendTuneRequest(options = {}) {\n\n    this.send(\n      [Enumerations.SYSTEM_MESSAGES.tunerequest],\n      {time: options.time}\n    );\n\n    return this;\n\n  }\n\n  /**\n   * Sends a MIDI **clock** real-time message. According to the standard, there are 24 MIDI clocks\n   * for every quarter note.\n   *\n   * @param {object} [options={}]\n   *\n   * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n   * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n   * positive number\n   * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n   * the operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @returns {Output} Returns the `Output` object so methods can be chained.\n   */\n  sendClock(options = {}) {\n\n    this.send(\n      [Enumerations.SYSTEM_MESSAGES.clock],\n      {time: options.time}\n    );\n\n    return this;\n\n  }\n\n  /**\n   * Sends a **start** real-time message. A MIDI Start message starts the playback of the current\n   * song at beat 0. To start playback elsewhere in the song, use the\n   * [`sendContinue()`]{@link #sendContinue} method.\n   *\n   * @param {object} [options={}]\n   *\n   * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n   * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n   * positive number\n   * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n   * the operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @returns {Output} Returns the `Output` object so methods can be chained.\n   */\n  sendStart(options = {}) {\n\n    this.send(\n      [Enumerations.SYSTEM_MESSAGES.start],\n      {time: options.time}\n    );\n\n    return this;\n\n  }\n\n  /**\n   * Sends a **continue** real-time message. This resumes song playback where it was previously\n   * stopped or where it was last cued with a song position message. To start playback from the\n   * start, use the [`sendStart()`]{@link Output#sendStart}` method.\n   *\n   * @param {object} [options={}]\n   *\n   * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n   * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n   * positive number\n   * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n   * the operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @returns {Output} Returns the `Output` object so methods can be chained.\n   */\n  sendContinue(options = {}) {\n\n    this.send(\n      [Enumerations.SYSTEM_MESSAGES.continue],\n      {time: options.time}\n    );\n\n    return this;\n\n  }\n\n  /**\n   * Sends a **stop** real-time message. This tells the device connected to this output to stop\n   * playback immediately (or at the scheduled time, if specified).\n   *\n   * @param {object} [options={}]\n   *\n   * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n   * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n   * positive number\n   * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n   * the operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @returns {Output} Returns the `Output` object so methods can be chained.\n   */\n  sendStop(options = {}) {\n\n    this.send(\n      [Enumerations.SYSTEM_MESSAGES.stop],\n      {time: options.time}\n    );\n\n    return this;\n\n  }\n\n  /**\n   * Sends an **active sensing** real-time message. This tells the device connected to this port\n   * that the connection is still good. Active sensing messages are often sent every 300 ms if there\n   * was no other activity on the MIDI port.\n   *\n   * @param {object} [options={}]\n   *\n   * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n   * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n   * positive number\n   * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n   * the operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @returns {Output} Returns the `Output` object so methods can be chained.\n   */\n  sendActiveSensing(options = {}) {\n\n    this.send(\n      [Enumerations.SYSTEM_MESSAGES.activesensing],\n      {time: options.time}\n    );\n\n    return this;\n\n  }\n\n  /**\n   * Sends a **reset** real-time message. This tells the device connected to this output that it\n   * should reset itself to a default state.\n   *\n   * @param {object} [options={}]\n   *\n   * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n   * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n   * positive number\n   * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n   * the operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @returns {Output} Returns the `Output` object so methods can be chained.\n   */\n  sendReset(options = {}) {\n\n    this.send(\n      [Enumerations.SYSTEM_MESSAGES.reset],\n      {time: options.time}\n    );\n\n    return this;\n\n  }\n\n  /**\n   * @private\n   * @deprecated since version 3.0\n   */\n  sendTuningRequest(options = {}) {\n\n    if (wm.validation) {\n      console.warn(\n        \"The sendTuningRequest() method has been deprecated. Use sendTuningRequest() instead.\"\n      );\n    }\n\n    return this.sendTuneRequest(options);\n\n  }\n\n  /**\n   * Sends a MIDI **key aftertouch** message to the specified channel(s) at the scheduled time. This\n   * is a key-specific aftertouch. For a channel-wide aftertouch message, use\n   * [`setChannelAftertouch()`]{@link #setChannelAftertouch}.\n   *\n   * @param note {number|Note|string|number[]|Note[]|string[]} The note(s) for which you are sending\n   * an aftertouch value. The notes can be specified by using a MIDI note number (`0` - `127`), a\n   * [`Note`](Note) object, a note identifier (e.g. `C3`, `G#4`, `F-1`, `Db7`) or an array of the\n   * previous types. When using a note identifier, octave range must be between `-1` and `9`. The\n   * lowest note is `C-1` (MIDI note number `0`) and the highest note is `G9` (MIDI note number\n   * `127`).\n   *\n   * @param [pressure=0.5] {number} The pressure level (between 0 and 1). An invalid pressure value\n   * will silently trigger the default behaviour. If the `rawValue` option is set to `true`, the\n   * pressure can be defined by using an integer between 0 and 127.\n   *\n   * @param {object} [options={}]\n   *\n   * @param {number|number[]} [options.channels=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]]\n   * The MIDI channel number (between `1` and `16`) or an array of channel numbers to use. If no\n   * channel is specified, all channels will be used.\n   *\n   * @param {boolean} [options.rawValue=false] A boolean indicating whether the value should be\n   * considered a float between `0` and `1.0` (default) or a raw integer between `0` and `127`.\n   *\n   * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n   * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n   * positive number\n   * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n   * the operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @return {Output} Returns the `Output` object so methods can be chained.\n   *\n   * @since 3.0.0\n   */\n  sendKeyAftertouch(note, pressure, options = {}) {\n\n    if (options.channels == undefined) options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n\n    Utilities.sanitizeChannels(options.channels).forEach(ch => {\n      this.channels[ch].sendKeyAftertouch(note, pressure, options);\n    });\n\n    return this;\n\n  };\n\n  /**\n   * Sends a MIDI **control change** message to the specified channel(s) at the scheduled time. The\n   * control change message to send can be specified numerically (0-127) or by using one of the\n   * following common names:\n   *\n   * | Number | Name                          |\n   * |--------|-------------------------------|\n   * | 0      |`bankselectcoarse`             |\n   * | 1      |`modulationwheelcoarse`        |\n   * | 2      |`breathcontrollercoarse`       |\n   * | 4      |`footcontrollercoarse`         |\n   * | 5      |`portamentotimecoarse`         |\n   * | 6      |`dataentrycoarse`              |\n   * | 7      |`volumecoarse`                 |\n   * | 8      |`balancecoarse`                |\n   * | 10     |`pancoarse`                    |\n   * | 11     |`expressioncoarse`             |\n   * | 12     |`effectcontrol1coarse`         |\n   * | 13     |`effectcontrol2coarse`         |\n   * | 18     |`generalpurposeslider3`        |\n   * | 19     |`generalpurposeslider4`        |\n   * | 32     |`bankselectfine`               |\n   * | 33     |`modulationwheelfine`          |\n   * | 34     |`breathcontrollerfine`         |\n   * | 36     |`footcontrollerfine`           |\n   * | 37     |`portamentotimefine`           |\n   * | 38     |`dataentryfine`                |\n   * | 39     |`volumefine`                   |\n   * | 40     |`balancefine`                  |\n   * | 42     |`panfine`                      |\n   * | 43     |`expressionfine`               |\n   * | 44     |`effectcontrol1fine`           |\n   * | 45     |`effectcontrol2fine`           |\n   * | 64     |`holdpedal`                    |\n   * | 65     |`portamento`                   |\n   * | 66     |`sustenutopedal`               |\n   * | 67     |`softpedal`                    |\n   * | 68     |`legatopedal`                  |\n   * | 69     |`hold2pedal`                   |\n   * | 70     |`soundvariation`               |\n   * | 71     |`resonance`                    |\n   * | 72     |`soundreleasetime`             |\n   * | 73     |`soundattacktime`              |\n   * | 74     |`brightness`                   |\n   * | 75     |`soundcontrol6`                |\n   * | 76     |`soundcontrol7`                |\n   * | 77     |`soundcontrol8`                |\n   * | 78     |`soundcontrol9`                |\n   * | 79     |`soundcontrol10`               |\n   * | 80     |`generalpurposebutton1`        |\n   * | 81     |`generalpurposebutton2`        |\n   * | 82     |`generalpurposebutton3`        |\n   * | 83     |`generalpurposebutton4`        |\n   * | 91     |`reverblevel`                  |\n   * | 92     |`tremololevel`                 |\n   * | 93     |`choruslevel`                  |\n   * | 94     |`celestelevel`                 |\n   * | 95     |`phaserlevel`                  |\n   * | 96     |`dataincrement`                |\n   * | 97     |`datadecrement`                |\n   * | 98     |`nonregisteredparametercoarse` |\n   * | 99     |`nonregisteredparameterfine`   |\n   * | 100    |`registeredparametercoarse`    |\n   * | 101    |`registeredparameterfine`      |\n   * | 120    |`allsoundoff`                  |\n   * | 121    |`resetallcontrollers`          |\n   * | 122    |`localcontrol`                 |\n   * | 123    |`allnotesoff`                  |\n   * | 124    |`omnimodeoff`                  |\n   * | 125    |`omnimodeon`                   |\n   * | 126    |`monomodeon`                   |\n   * | 127    |`polymodeon`                   |\n   *\n   * Note: as you can see above, not all control change message have a matching name. This does not\n   * mean you cannot use the others. It simply means you will need to use their number (`0` - `127`)\n   * instead of their name. While you can still use them, numbers `120` to `127` are usually\n   * reserved for *channel mode* messages. See [`sendChannelMode()`]{@link #sendChannelMode} method\n   * for more info.\n   *\n   * To view a list of all available **control change** messages, please consult [Table 3 - Control\n   * Change Messages](https://www.midi.org/specifications-old/item/table-3-control-change-messages-data-bytes-2)\n   * from the MIDI specification.\n   *\n   * @param controller {number|string} The MIDI controller name or number (0-127).\n   *\n   * @param [value=0] {number} The value to send (0-127).\n   *\n   * @param {object} [options={}]\n   *\n   * @param {number|number[]} [options.channels=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]]\n   * The MIDI channel number (between `1` and `16`) or an array of channel numbers to use. If no\n   * channel is specified, all channels will be used.\n   *\n   * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n   * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n   * positive number\n   * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n   * the operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @throws {RangeError} Controller numbers must be between 0 and 127.\n   * @throws {RangeError} Invalid controller name.\n   *\n   * @return {Output} Returns the `Output` object so methods can be chained.\n   */\n  sendControlChange(controller, value, options = {}, legacy = {}) {\n\n    if (wm.validation) {\n\n      // Legacy compatibility\n      if (Array.isArray(options) || Number.isInteger(options) || options === \"all\") {\n        const channels = options;\n        options = legacy;\n        options.channels = channels;\n        if (options.channels === \"all\") options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n      }\n\n    }\n\n    if (options.channels == undefined) options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n\n    Utilities.sanitizeChannels(options.channels).forEach(ch => {\n      this.channels[ch].sendControlChange(controller, value, options);\n    });\n\n    return this;\n\n  };\n\n  /**\n   * Sends a **pitch bend range** message to the specified channel(s) at the scheduled time so that\n   * they adjust the range used by their pitch bend lever. The range is specified by using the\n   * `semitones` and `cents` parameters. For example, setting the `semitones` parameter to `12`\n   * means that the pitch bend range will be 12 semitones above and below the nominal pitch.\n   *\n   * @param {number} [semitones=0] The desired adjustment value in semitones (between `0` and `127`).\n   * While nothing imposes that in the specification, it is very common for manufacturers to limit\n   * the range to 2 octaves (-12 semitones to 12 semitones).\n   *\n   * @param {number} [cents=0] The desired adjustment value in cents (integer between `0` and\n   * `127`).\n   *\n   * @param {object} [options={}]\n   *\n   * @param {number|number[]} [options.channels=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]]\n   * The MIDI channel number (between `1` and `16`) or an array of channel numbers to use. If no\n   * channel is specified, all channels will be used.\n   *\n   * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n   * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n   * positive number\n   * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n   * the operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @throws {RangeError} The msb value must be between 0 and 127.\n   * @throws {RangeError} The lsb value must be between 0 and 127.\n   *\n   * @returns {Output} Returns the `Output` object so methods can be chained.\n   *\n   * @since 3.0.0\n   */\n  sendPitchBendRange(semitones= 0, cents = 0, options = {}) {\n\n    if (options.channels == undefined) options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n\n    Utilities.sanitizeChannels(options.channels).forEach(ch => {\n      this.channels[ch].sendPitchBendRange(semitones, cents, options);\n    });\n\n    return this;\n\n  }\n\n\n  /**\n   * @private\n   * @deprecated since version 3.0\n   */\n  setPitchBendRange(semitones = 0, cents = 0, channel = \"all\", options = {}) {\n\n    if (wm.validation) {\n\n      console.warn(\n        \"The setPitchBendRange() method is deprecated. Use sendPitchBendRange() instead.\"\n      );\n\n      options.channels = channel;\n      if (options.channels === \"all\") options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n\n    }\n\n    return this.sendPitchBendRange(semitones, cents, options);\n\n  }\n\n  /**\n   * Sets the specified MIDI registered parameter to the desired value. The value is defined with\n   * up to two bytes of data (msb, lsb) that each can go from `0` to `127`.\n   *\n   * MIDI\n   * [registered parameters](https://www.midi.org/specifications-old/item/table-3-control-change-messages-data-bytes-2)\n   * extend the original list of control change messages. The MIDI 1.0 specification lists only a\n   * limited number of them:\n   *\n   * | Numbers      | Function                 |\n   * |--------------|--------------------------|\n   * | (0x00, 0x00) | `pitchbendrange`         |\n   * | (0x00, 0x01) | `channelfinetuning`      |\n   * | (0x00, 0x02) | `channelcoarsetuning`    |\n   * | (0x00, 0x03) | `tuningprogram`          |\n   * | (0x00, 0x04) | `tuningbank`             |\n   * | (0x00, 0x05) | `modulationrange`        |\n   * | (0x3D, 0x00) | `azimuthangle`           |\n   * | (0x3D, 0x01) | `elevationangle`         |\n   * | (0x3D, 0x02) | `gain`                   |\n   * | (0x3D, 0x03) | `distanceratio`          |\n   * | (0x3D, 0x04) | `maximumdistance`        |\n   * | (0x3D, 0x05) | `maximumdistancegain`    |\n   * | (0x3D, 0x06) | `referencedistanceratio` |\n   * | (0x3D, 0x07) | `panspreadangle`         |\n   * | (0x3D, 0x08) | `rollangle`              |\n   *\n   * Note that the `tuningprogram` and `tuningbank` parameters are part of the *MIDI Tuning\n   * Standard*, which is not widely implemented.\n   *\n   * @param parameter {string|number[]} A string identifying the parameter's name (see above) or a\n   * two-position array specifying the two control bytes (e.g. `[0x65, 0x64]`) that identify the\n   * registered parameter.\n   *\n   * @param [data=[]] {number|number[]} A single integer or an array of integers with a maximum\n   * length of 2 specifying the desired data.\n   *\n   * @param {object} [options={}]\n   *\n   * @param {number|number[]} [options.channels=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]]\n   * The MIDI channel number (between `1` and `16`) or an array of channel numbers to use. If no\n   * channel is specified, all channels will be used.\n   *\n   * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n   * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n   * positive number\n   * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n   * the operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @returns {Output} Returns the `Output` object so methods can be chained.\n   */\n  sendRpnValue(parameter, data, options = {}) {\n\n    if (options.channels == undefined) options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n\n    Utilities.sanitizeChannels(options.channels).forEach(ch => {\n      this.channels[ch].sendRpnValue(parameter, data, options);\n    });\n\n    return this;\n\n  }\n\n  /**\n   * @private\n   * @deprecated since version 3.0\n   */\n  setRegisteredParameter(parameter, data = [], channel = \"all\", options = {}) {\n\n    if (wm.validation) {\n\n      console.warn(\n        \"The setRegisteredParameter() method is deprecated. Use sendRpnValue() instead.\"\n      );\n\n      options.channels = channel;\n      if (options.channels === \"all\") options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n\n    }\n\n    return this.sendRpnValue(parameter, data, options);\n\n  }\n\n  /**\n   * Sends a MIDI **channel aftertouch** message to the specified channel(s). For key-specific\n   * aftertouch, you should instead use [`setKeyAftertouch()`]{@link #setKeyAftertouch}.\n   *\n   * @param [pressure=0.5] {number} The pressure level (between `0` and `1`). An invalid pressure\n   * value will silently trigger the default behaviour. If the `rawValue` option is set to `true`,\n   * the pressure can be defined by using an integer between `0` and `127`.\n   *\n   * @param {object} [options={}]\n   *\n   * @param {number|number[]} [options.channels=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]]\n   * The MIDI channel number (between `1` and `16`) or an array of channel numbers to use. If no\n   * channel is specified, all channels will be used.\n   *\n   * @param {boolean} [options.rawValue=false] A boolean indicating whether the value should be\n   * considered a float between `0` and `1.0` (default) or a raw integer between `0` and `127`.\n   *\n   * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n   * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n   * positive number\n   * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n   * the operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @return {Output} Returns the `Output` object so methods can be chained.\n   * @since 3.0.0\n   */\n  sendChannelAftertouch(pressure, options = {}, legacy = {}) {\n\n    if (wm.validation) {\n\n      // Legacy compatibility\n      if (Array.isArray(options) || Number.isInteger(options) || options === \"all\") {\n        const channels = options;\n        options = legacy;\n        options.channels = channels;\n        if (options.channels === \"all\") options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n      }\n\n    }\n\n    if (options.channels == undefined) options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n\n    Utilities.sanitizeChannels(options.channels).forEach(ch => {\n      this.channels[ch].sendChannelAftertouch(pressure, options);\n    });\n\n    return this;\n\n  }\n\n  /**\n   * Sends a MIDI **pitch bend** message to the specified channel(s) at the scheduled time.\n   *\n   * The resulting bend is relative to the pitch bend range that has been defined. The range can be\n   * set with [`sendPitchBendRange()`]{@link #sendPitchBendRange}. So, for example, if the pitch\n   * bend range has been set to 12 semitones, using a bend value of `-1` will bend the note 1 octave\n   * below its nominal value.\n   *\n   * @param {number|number[]} value The intensity of the bend (between `-1.0` and `1.0`). A value of\n   * `0` means no bend. If an invalid value is specified, the nearest valid value will be used\n   * instead. If the `rawValue` option is set to `true`, the intensity of the bend can be defined by\n   * either using a single integer between `0` and `127` (MSB) or an array of two integers between\n   * `0` and `127` representing, respectively, the MSB (most significant byte) and the LSB (least\n   * significant byte). The MSB is expressed in semitones with `64` meaning no bend. A value lower\n   * than `64` bends downwards while a value higher than `64` bends upwards. The LSB is expressed\n   * in cents (1/100 of a semitone). An LSB of `64` also means no bend.\n   *\n   * @param {object} [options={}]\n   *\n   * @param {number|number[]} [options.channels=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]]\n   * The MIDI channel number (between `1` and `16`) or an array of channel numbers to use. If no\n   * channel is specified, all channels will be used.\n   *\n   * @param {boolean} [options.rawValue=false] A boolean indicating whether the value should be\n   * considered as a float between `-1.0` and `1.0` (default) or as raw integer between `0` and\n   * 127` (or an array of 2 integers if using both MSB and LSB).\n   *\n   * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n   * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n   * positive number\n   * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n   * the operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @returns {Output} Returns the `Output` object so methods can be chained.\n   *\n   * @since 3.0.0\n   */\n  sendPitchBend(value, options = {}, legacy = {}) {\n\n    if (wm.validation) {\n\n      // Legacy compatibility\n      if (Array.isArray(options) || Number.isInteger(options) || options === \"all\") {\n        const channels = options;\n        options = legacy;\n        options.channels = channels;\n        if (options.channels === \"all\") options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n      }\n\n    }\n\n    if (options.channels == undefined) options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n\n    Utilities.sanitizeChannels(options.channels).forEach(ch => {\n      this.channels[ch].sendPitchBend(value, options);\n    });\n\n    return this;\n\n  }\n\n  /**\n   * Sends a MIDI **program change** message to the specified channel(s) at the scheduled time.\n   *\n   * @param {number} [program=0] The MIDI patch (program) number (integer between `0` and `127`).\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|number[]} [options.channels=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]]\n   * The MIDI channel number (between `1` and `16`) or an array of channel numbers to use. If no\n   * channel is specified, all channels will be used.\n   *\n   * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n   * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n   * positive number\n   * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n   * the operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @throws {TypeError} Failed to execute 'send' on 'MIDIOutput': The value at index 1 is greater\n   * than 0xFF.\n   *\n   * @return {Output} Returns the `Output` object so methods can be chained.\n   *\n   * @since 3.0.0\n   */\n  sendProgramChange(program = 0, options = {}, legacy = {}) {\n\n    if (wm.validation) {\n\n      // Legacy compatibility\n      if (Array.isArray(options) || Number.isInteger(options) || options === \"all\") {\n        const channels = options;\n        options = legacy;\n        options.channels = channels;\n        if (options.channels === \"all\") options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n      }\n\n    }\n\n    if (options.channels == undefined) options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n\n    Utilities.sanitizeChannels(options.channels).forEach(ch => {\n      this.channels[ch].sendProgramChange(program, options);\n    });\n\n    return this;\n\n  }\n\n  /**\n   * Sends a **modulation depth range** message to the specified channel(s) so that they adjust the\n   * depth of their modulation wheel's range. The range can be specified with the `semitones`\n   * parameter, the `cents` parameter or by specifying both parameters at the same time.\n   *\n   * @param [semitones=0] {number} The desired adjustment value in semitones (integer between\n   * 0 and 127).\n   *\n   * @param [cents=0] {number} The desired adjustment value in cents (integer between 0 and 127).\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|number[]} [options.channels=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]]\n   * The MIDI channel number (between `1` and `16`) or an array of channel numbers to use. If no\n   * channel is specified, all channels will be used.\n   *\n   * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n   * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n   * positive number\n   * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n   * the operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @throws {RangeError} The msb value must be between 0 and 127\n   * @throws {RangeError} The lsb value must be between 0 and 127\n   *\n   * @return {Output} Returns the `Output` object so methods can be chained.\n   *\n   * @since 3.0.0\n   */\n  sendModulationRange(semitones, cents, options = {}) {\n\n    if (options.channels == undefined) options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n\n    Utilities.sanitizeChannels(options.channels).forEach(ch => {\n      this.channels[ch].sendModulationRange(semitones, cents, options);\n    });\n\n    return this;\n\n  };\n\n  /**\n   * @private\n   * @deprecated since version 3.0\n   */\n  setModulationRange(semitones = 0, cents = 0, channel = \"all\", options = {}) {\n\n    if (wm.validation) {\n\n      console.warn(\n        \"The setModulationRange() method is deprecated. Use sendModulationRange() instead.\"\n      );\n\n      options.channels = channel;\n      if (options.channels === \"all\") options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n\n    }\n\n    return this.sendModulationRange(semitones, cents, options);\n\n  }\n\n  /**\n   * Sends a master tuning message to the specified channel(s). The value is decimal and must be\n   * larger than `-65` semitones and smaller than `64` semitones.\n   *\n   * Because of the way the MIDI specification works, the decimal portion of the value will be\n   * encoded with a resolution of 14bit. The integer portion must be between -64 and 63\n   * inclusively. This function actually generates two MIDI messages: a **Master Coarse Tuning** and\n   * a **Master Fine Tuning** RPN messages.\n   *\n   * @param [value=0.0] {number} The desired decimal adjustment value in semitones (-65 < x < 64)\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|number[]} [options.channels=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]]\n   * The MIDI channel number (between `1` and `16`) or an array of channel numbers to use. If no\n   * channel is specified, all channels will be used.\n   *\n   * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n   * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n   * positive number\n   * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n   * the operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @throws {RangeError} The value must be a decimal number between larger than -65 and smaller\n   * than 64.\n   *\n   * @return {Output} Returns the `Output` object so methods can be chained.\n   *\n   * @since 3.0.0\n   */\n  sendMasterTuning(value, options = {}) {\n\n    if (options.channels == undefined) options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n\n    Utilities.sanitizeChannels(options.channels).forEach(ch => {\n      this.channels[ch].sendMasterTuning(value, options);\n    });\n\n    return this;\n\n  }\n\n  /**\n   * @private\n   * @deprecated since version 3.0\n   */\n  setMasterTuning(value, channel = {}, options = {}) {\n\n    if (wm.validation) {\n\n      console.warn(\n        \"The setMasterTuning() method is deprecated. Use sendMasterTuning() instead.\"\n      );\n\n      options.channels = channel;\n      if (options.channels === \"all\") options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n\n    }\n\n    return this.sendMasterTuning(value, options);\n\n  }\n\n  /**\n   * Sets the MIDI tuning program to use. Note that the **Tuning Program** parameter is part of the\n   * *MIDI Tuning Standard*, which is not widely implemented.\n   *\n   * @param value {number} The desired tuning program (integer between `0` and `127`).\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|number[]} [options.channels=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]]\n   * The MIDI channel number (between `1` and `16`) or an array of channel numbers to use. If no\n   * channel is specified, all channels will be used.\n   *\n   * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n   * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n   * positive number\n   * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n   * the operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @throws {RangeError} The program value must be between 0 and 127.\n   *\n   * @return {Output} Returns the `Output` object so methods can be chained.\n   *\n   * @since 3.0.0\n   */\n  sendTuningProgram(value, options = {}) {\n\n    if (options.channels == undefined) options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n\n    Utilities.sanitizeChannels(options.channels).forEach(ch => {\n      this.channels[ch].sendTuningProgram(value, options);\n    });\n\n    return this;\n\n  }\n\n  /**\n   * @private\n   * @deprecated since version 3.0\n   */\n  setTuningProgram(value, channel = \"all\", options = {}) {\n\n    if (wm.validation) {\n\n      console.warn(\n        \"The setTuningProgram() method is deprecated. Use sendTuningProgram() instead.\"\n      );\n\n      options.channels = channel;\n      if (options.channels === \"all\") options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n\n    }\n\n    return this.sendTuningProgram(value, options);\n\n  }\n\n  /**\n   * Sets the MIDI tuning bank to use. Note that the **Tuning Bank** parameter is part of the\n   * *MIDI Tuning Standard*, which is not widely implemented.\n   *\n   * @param {number} [value=0] The desired tuning bank (integer between `0` and `127`).\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|number[]} [options.channels=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]]\n   * The MIDI channel number (between `1` and `16`) or an array of channel numbers to use. If no\n   * channel is specified, all channels will be used.\n   *\n   * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n   * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n   * positive number\n   * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n   * the operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @throws {RangeError} The bank value must be between 0 and 127.\n   *\n   * @return {Output} Returns the `Output` object so methods can be chained.\n   *\n   * @since 3.0.0\n   */\n  sendTuningBank(value= 0, options = {}) {\n\n    if (options.channels == undefined) options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n\n    Utilities.sanitizeChannels(options.channels).forEach(ch => {\n      this.channels[ch].sendTuningBank(value, options);\n    });\n\n    return this;\n\n  };\n\n  /**\n   * @private\n   * @deprecated since version 3.0\n   */\n  setTuningBank(parameter, channel = \"all\", options = {}) {\n\n    if (wm.validation) {\n\n      console.warn(\n        \"The setTuningBank() method is deprecated. Use sendTuningBank() instead.\"\n      );\n\n      options.channels = channel;\n      if (options.channels === \"all\") options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n\n    }\n\n    return this.sendTuningBank(parameter, options);\n\n  }\n\n  /**\n   * Sends a MIDI **channel mode** message to the specified channel(s). The channel mode message to\n   * send can be specified numerically or by using one of the following common names:\n   *\n   * |  Type                |Number| Shortcut Method                                               |\n   * | ---------------------|------|-------------------------------------------------------------- |\n   * | `allsoundoff`        | 120  | [`sendAllSoundOff()`]{@link #sendAllSoundOff}                 |\n   * | `resetallcontrollers`| 121  | [`sendResetAllControllers()`]{@link #sendResetAllControllers} |\n   * | `localcontrol`       | 122  | [`sendLocalControl()`]{@link #sendLocalControl}               |\n   * | `allnotesoff`        | 123  | [`sendAllNotesOff()`]{@link #sendAllNotesOff}                 |\n   * | `omnimodeoff`        | 124  | [`sendOmniMode(false)`]{@link #sendOmniMode}                  |\n   * | `omnimodeon`         | 125  | [`sendOmniMode(true)`]{@link #sendOmniMode}                   |\n   * | `monomodeon`         | 126  | [`sendPolyphonicMode(\"mono\")`]{@link #sendPolyphonicMode}     |\n   * | `polymodeon`         | 127  | [`sendPolyphonicMode(\"poly\")`]{@link #sendPolyphonicMode}     |\n   *\n   * Note: as you can see above, to make it easier, all channel mode messages also have a matching\n   * helper method.\n   *\n   * It should also be noted that, per the MIDI specification, only `localcontrol` and `monomodeon`\n   * may require a value that's not zero. For that reason, the `value` parameter is optional and\n   * defaults to 0.\n   *\n   * @param {number|string} command The numerical identifier of the channel mode message (integer\n   * between 120-127) or its name as a string.\n   *\n   * @param {number} [value=0] The value to send (integer between 0-127).\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|number[]} [options.channels=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]]\n   * The MIDI channel number (between `1` and `16`) or an array of channel numbers to use. If no\n   * channel is specified, all channels will be used.\n   *\n   * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n   * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n   * positive number\n   * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n   * the operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @throws {TypeError} Invalid channel mode message name.\n   * @throws {RangeError} Channel mode controller numbers must be between 120 and 127.\n   * @throws {RangeError} Value must be an integer between 0 and 127.\n   *\n   * @return {Output} Returns the `Output` object so methods can be chained.\n   *\n   */\n  sendChannelMode(command, value = 0, options = {}, legacy = {}) {\n\n    if (wm.validation) {\n\n      // Legacy compatibility\n      if (Array.isArray(options) || Number.isInteger(options) || options === \"all\") {\n        const channels = options;\n        options = legacy;\n        options.channels = channels;\n        if (options.channels === \"all\") options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n      }\n\n    }\n\n    if (options.channels == undefined) options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n\n    Utilities.sanitizeChannels(options.channels).forEach(ch => {\n      this.channels[ch].sendChannelMode(command, value, options);\n    });\n\n    return this;\n\n  }\n\n  /**\n   * Sends an **all sound off** channel mode message. This will silence all sounds playing on that\n   * channel but will not prevent new sounds from being triggered.\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|number[]} [options.channels=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]]\n   * The MIDI channel number (between `1` and `16`) or an array of channel numbers to use. If no\n   * channel is specified, all channels will be used.\n   *\n   * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n   * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n   * positive number\n   * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n   * the operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @returns {Output}\n   *\n   * @since 3.0.0\n   */\n  sendAllSoundOff(options = {}) {\n\n    if (options.channels == undefined) options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n\n    Utilities.sanitizeChannels(options.channels).forEach(ch => {\n      this.channels[ch].sendAllSoundOff(options);\n    });\n\n    return this;\n\n  }\n\n  /**\n   * Sends an **all notes off** channel mode message. This will make all currently playing notes\n   * fade out just as if their key had been released. This is different from the\n   * [`turnSoundOff()`]{@link #turnSoundOff} method which mutes all sounds immediately.\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|number[]} [options.channels=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]]\n   * The MIDI channel number (between `1` and `16`) or an array of channel numbers to use. If no\n   * channel is specified, all channels will be used.\n   *\n   * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n   * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n   * positive number\n   * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n   * the operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @returns {Output}\n   *\n   * @since 3.0.0\n   */\n  sendAllNotesOff(options = {}) {\n\n    if (options.channels == undefined) options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n\n    Utilities.sanitizeChannels(options.channels).forEach(ch => {\n      this.channels[ch].sendAllNotesOff(options);\n    });\n\n    return this;\n\n  }\n\n  /**\n   * Sends a **reset all controllers** channel mode message. This resets all controllers, such as\n   * the pitch bend, to their default value.\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|number[]} [options.channels=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]]\n   * The MIDI channel number (between `1` and `16`) or an array of channel numbers to use. If no\n   * channel is specified, all channels will be used.\n   *\n   * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n   * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n   * positive number\n   * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n   * the operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @returns {Output}\n   */\n  sendResetAllControllers(options = {}, legacy = {}) {\n\n    if (wm.validation) {\n\n      // Legacy compatibility\n      if (Array.isArray(options) || Number.isInteger(options) || options === \"all\") {\n        const channels = options;\n        options = legacy;\n        options.channels = channels;\n        if (options.channels === \"all\") options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n      }\n\n    }\n\n    if (options.channels == undefined) options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n\n    Utilities.sanitizeChannels(options.channels).forEach(ch => {\n      this.channels[ch].sendResetAllControllers(options);\n    });\n\n    return this;\n\n  }\n\n  /**\n   * Sets the polyphonic mode. In `poly` mode (usually the default), multiple notes can be played\n   * and heard at the same time. In `mono` mode, only one note will be heard at once even if\n   * multiple notes are being played.\n   *\n   * @param mode {string} The mode to use: `mono` or `poly`.\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|number[]} [options.channels=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]]\n   * The MIDI channel number (between `1` and `16`) or an array of channel numbers to use. If no\n   * channel is specified, all channels will be used.\n   *\n   * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n   * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n   * positive number\n   * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n   * the operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @return {Output} Returns the `Output` object so methods can be chained.\n   *\n   * @since 3.0.0\n   */\n  sendPolyphonicMode(mode, options = {}, legacy = {}) {\n\n    if (wm.validation) {\n\n      // Legacy compatibility\n      if (Array.isArray(options) || Number.isInteger(options) || options === \"all\") {\n        const channels = options;\n        options = legacy;\n        options.channels = channels;\n        if (options.channels === \"all\") options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n      }\n\n    }\n\n    if (options.channels == undefined) options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n\n    Utilities.sanitizeChannels(options.channels).forEach(ch => {\n      this.channels[ch].sendPolyphonicMode(mode, options);\n    });\n\n    return this;\n\n  }\n\n  /**\n   * Turns local control on or off. Local control is usually enabled by default. If you disable it,\n   * the instrument will no longer trigger its own sounds. It will only send the MIDI messages to\n   * its out port.\n   *\n   * @param [state=false] {boolean} Whether to activate local control (`true`) or disable it\n   * (`false`).\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|number[]} [options.channels=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]]\n   * The MIDI channel number (between `1` and `16`) or an array of channel numbers to use. If no\n   * channel is specified, all channels will be used.\n   *\n   * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n   * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n   * positive number\n   * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n   * the operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @return {Output} Returns the `Output` object so methods can be chained.\n   *\n   * @since 3.0.0\n   */\n  sendLocalControl(state, options = {}, legacy = {}) {\n\n    if (wm.validation) {\n\n      // Legacy compatibility\n      if (Array.isArray(options) || Number.isInteger(options) || options === \"all\") {\n        const channels = options;\n        options = legacy;\n        options.channels = channels;\n        if (options.channels === \"all\") options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n      }\n\n    }\n\n    if (options.channels == undefined) options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n\n    Utilities.sanitizeChannels(options.channels).forEach(ch => {\n      this.channels[ch].sendLocalControl(state, options);\n    });\n\n    return this;\n\n  }\n\n  /**\n   * Sets OMNI mode to **on** or **off** for the specified channel(s). MIDI's OMNI mode causes the\n   * instrument to respond to messages from all channels.\n   *\n   * It should be noted that support for OMNI mode is not as common as it used to be.\n   *\n   * @param [state] {boolean} Whether to activate OMNI mode (`true`) or not (`false`).\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|number[]} [options.channels=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]]\n   * The MIDI channel number (between `1` and `16`) or an array of channel numbers to use. If no\n   * channel is specified, all channels will be used.\n   *\n   * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n   * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n   * positive number\n   * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n   * the operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @throws {TypeError} Invalid channel mode message name.\n   * @throws {RangeError} Channel mode controller numbers must be between 120 and 127.\n   * @throws {RangeError} Value must be an integer between 0 and 127.\n   *\n   * @return {Output} Returns the `Output` object so methods can be chained.\n   *\n   * @since 3.0.0\n   */\n  sendOmniMode(state, options = {}, legacy = {}) {\n\n    if (wm.validation) {\n\n      // Legacy compatibility\n      if (Array.isArray(options) || Number.isInteger(options) || options === \"all\") {\n        const channels = options;\n        options = legacy;\n        options.channels = channels;\n        if (options.channels === \"all\") options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n      }\n\n    }\n\n    if (options.channels == undefined) options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n\n    Utilities.sanitizeChannels(options.channels).forEach(ch => {\n      this.channels[ch].sendOmniMode(state, options);\n    });\n\n    return this;\n\n  }\n\n  /**\n   * Sets a non-registered parameter to the specified value. The NRPN is selected by passing a\n   * two-position array specifying the values of the two control bytes. The value is specified by\n   * passing a single integer (most cases) or an array of two integers.\n   *\n   * NRPNs are not standardized in any way. Each manufacturer is free to implement them any way\n   * they see fit. For example, according to the Roland GS specification, you can control the\n   * **vibrato rate** using NRPN (`1`, `8`). Therefore, to set the **vibrato rate** value to `123`\n   * you would use:\n   *\n   * ```js\n   * WebMidi.outputs[0].sendNrpnValue([1, 8], 123);\n   * ```\n   *\n   * You probably want to should select a channel so the message is not sent to all channels. For\n   * instance, to send to channel `1` of the first output port, you would use:\n   *\n   * ```js\n   * WebMidi.outputs[0].sendNrpnValue([1, 8], 123, 1);\n   * ```\n   *\n   * In some rarer cases, you need to send two values with your NRPN messages. In such cases, you\n   * would use a 2-position array. For example, for its **ClockBPM** parameter (`2`, `63`), Novation\n   * uses a 14-bit value that combines an MSB and an LSB (7-bit values). So, for example, if the\n   * value to send was `10`, you could use:\n   *\n   * ```js\n   * WebMidi.outputs[0].sendNrpnValue([2, 63], [0, 10], 1);\n   * ```\n   *\n   * For further implementation details, refer to the manufacturer's documentation.\n   *\n   * @param parameter {number[]} A two-position array specifying the two control bytes (`0x63`,\n   * `0x62`) that identify the non-registered parameter.\n   *\n   * @param [data=[]] {number|number[]} An integer or an array of integers with a length of 1 or 2\n   * specifying the desired data.\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|number[]} [options.channels=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]]\n   * The MIDI channel number (between `1` and `16`) or an array of channel numbers to use. If no\n   * channel is specified, all channels will be used.\n   *\n   * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n   * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n   * positive number\n   * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n   * the operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @throws {RangeError} The control value must be between 0 and 127.\n   * @throws {RangeError} The msb value must be between 0 and 127\n   *\n   * @returns {Output} Returns the `Output` object so methods can be chained.\n   */\n  sendNrpnValue(parameter, data, options = {}) {\n\n    if (options.channels == undefined) options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n\n    Utilities.sanitizeChannels(options.channels).forEach(ch => {\n      this.channels[ch].sendNrpnValue(parameter, data, options);\n    });\n\n    return this;\n\n  }\n\n  /**\n   * @private\n   * @deprecated since version 3.0\n   */\n  setNonRegisteredParameter(parameter, data = [], channel = \"all\", options = {}) {\n\n    if (wm.validation) {\n\n      console.warn(\n        \"The setNonRegisteredParameter() method is deprecated. Use sendNrpnValue() instead.\"\n      );\n\n      options.channels = channel;\n      if (options.channels === \"all\") options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n\n    }\n\n    return this.sendNrpnValue(parameter, data, options);\n\n  }\n\n  /**\n   * Increments the specified MIDI registered parameter by 1. Here is the full list of parameter\n   * names that can be used with this method:\n   *\n   *  * Pitchbend Range (0x00, 0x00): `\"pitchbendrange\"`\n   *  * Channel Fine Tuning (0x00, 0x01): `\"channelfinetuning\"`\n   *  * Channel Coarse Tuning (0x00, 0x02): `\"channelcoarsetuning\"`\n   *  * Tuning Program (0x00, 0x03): `\"tuningprogram\"`\n   *  * Tuning Bank (0x00, 0x04): `\"tuningbank\"`\n   *  * Modulation Range (0x00, 0x05): `\"modulationrange\"`\n   *  * Azimuth Angle (0x3D, 0x00): `\"azimuthangle\"`\n   *  * Elevation Angle (0x3D, 0x01): `\"elevationangle\"`\n   *  * Gain (0x3D, 0x02): `\"gain\"`\n   *  * Distance Ratio (0x3D, 0x03): `\"distanceratio\"`\n   *  * Maximum Distance (0x3D, 0x04): `\"maximumdistance\"`\n   *  * Maximum Distance Gain (0x3D, 0x05): `\"maximumdistancegain\"`\n   *  * Reference Distance Ratio (0x3D, 0x06): `\"referencedistanceratio\"`\n   *  * Pan Spread Angle (0x3D, 0x07): `\"panspreadangle\"`\n   *  * Roll Angle (0x3D, 0x08): `\"rollangle\"`\n   *\n   * @param parameter {String|number[]} A string identifying the parameter's name (see above) or a\n   * two-position array specifying the two control bytes (0x65, 0x64) that identify the registered\n   * parameter.\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|number[]} [options.channels=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]]\n   * The MIDI channel number (between `1` and `16`) or an array of channel numbers to use. If no\n   * channel is specified, all channels will be used.\n   *\n   * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n   * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n   * positive number\n   * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n   * the operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @returns {Output} Returns the `Output` object so methods can be chained.\n   */\n  sendRpnIncrement(parameter, options = {}) {\n\n    if (options.channels == undefined) options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n\n    Utilities.sanitizeChannels(options.channels).forEach(ch => {\n      this.channels[ch].sendRpnIncrement(parameter, options);\n    });\n\n    return this;\n\n  }\n\n  /**\n   * @private\n   * @deprecated since version 3.0\n   */\n  incrementRegisteredParameter(parameter, channel = \"all\", options = {}) {\n\n    if (wm.validation) {\n\n      console.warn(\n        \"The incrementRegisteredParameter() method is deprecated. Use sendRpnIncrement() instead.\"\n      );\n\n      options.channels = channel;\n      if (options.channels === \"all\") options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n\n    }\n\n    return this.sendRpnIncrement(parameter, options);\n\n  }\n\n  /**\n   * Decrements the specified MIDI registered parameter by 1. Here is the full list of parameter\n   * names that can be used with this method:\n   *\n   *  * Pitchbend Range (0x00, 0x00): `\"pitchbendrange\"`\n   *  * Channel Fine Tuning (0x00, 0x01): `\"channelfinetuning\"`\n   *  * Channel Coarse Tuning (0x00, 0x02): `\"channelcoarsetuning\"`\n   *  * Tuning Program (0x00, 0x03): `\"tuningprogram\"`\n   *  * Tuning Bank (0x00, 0x04): `\"tuningbank\"`\n   *  * Modulation Range (0x00, 0x05): `\"modulationrange\"`\n   *  * Azimuth Angle (0x3D, 0x00): `\"azimuthangle\"`\n   *  * Elevation Angle (0x3D, 0x01): `\"elevationangle\"`\n   *  * Gain (0x3D, 0x02): `\"gain\"`\n   *  * Distance Ratio (0x3D, 0x03): `\"distanceratio\"`\n   *  * Maximum Distance (0x3D, 0x04): `\"maximumdistance\"`\n   *  * Maximum Distance Gain (0x3D, 0x05): `\"maximumdistancegain\"`\n   *  * Reference Distance Ratio (0x3D, 0x06): `\"referencedistanceratio\"`\n   *  * Pan Spread Angle (0x3D, 0x07): `\"panspreadangle\"`\n   *  * Roll Angle (0x3D, 0x08): `\"rollangle\"`\n   *\n   * @param parameter {String|number[]} A string identifying the parameter's name (see above) or a\n   * two-position array specifying the two control bytes (0x65, 0x64) that identify the registered\n   * parameter.\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|number[]} [options.channels=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]]\n   * The MIDI channel number (between `1` and `16`) or an array of channel numbers to use. If no\n   * channel is specified, all channels will be used.\n   *\n   * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n   * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n   * positive number\n   * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n   * the operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @throws TypeError The specified parameter is not available.\n   *\n   * @returns {Output} Returns the `Output` object so methods can be chained.\n   */\n  sendRpnDecrement(parameter, options = {}) {\n\n    if (options.channels == undefined) options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n\n    Utilities.sanitizeChannels(options.channels).forEach(ch => {\n      this.channels[ch].sendRpnDecrement(parameter, options);\n    });\n\n    return this;\n\n  }\n\n  /**\n   * @private\n   * @deprecated since version 3.0\n   */\n  decrementRegisteredParameter(parameter, channel = \"all\", options = {}) {\n\n    if (wm.validation) {\n\n      console.warn(\n        \"The decrementRegisteredParameter() method is deprecated. Use sendRpnDecrement() instead.\"\n      );\n\n      options.channels = channel;\n      if (options.channels === \"all\") options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n\n    }\n\n    return this.sendRpnDecrement(parameter, options);\n\n  }\n\n  /**\n   * Sends a **note off** message for the specified MIDI note number on the specified channel(s).\n   * The first parameter is the note to stop. It can be a single value or an array of the following\n   * valid values:\n   *\n   *  - A MIDI note number (integer between `0` and `127`)\n   *  - A note identifier (e.g. `\"C3\"`, `\"G#4\"`, `\"F-1\"`, `\"Db7\"`)\n   *  - A [`Note`](Note) object\n   *\n   * The execution of the **note off** command can be delayed by using the `time` property of the\n   * `options` parameter.\n   *\n   * @param note {number|Note|string|number[]|Note[]|string[]} The note(s) to stop. The notes can be\n   * specified by using a MIDI note number (`0` - `127`), a note identifier (e.g. `C3`, `G#4`,\n   * `F-1`, `Db7`) or an array of the previous types. When using a note identifier, octave range\n   * must be between `-1` and `9`. The lowest note is `C-1` (MIDI note number `0`) and the highest\n   * note is `G9` (MIDI note number `127`).\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|number[]} [options.channels=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]]\n   * The MIDI channel number (between `1` and `16`) or an array of channel numbers to use. If no\n   * channel is specified, all channels will be used.\n   *\n   * @param {number} [options.release=0.5] The velocity at which to release the note\n   * (between `0` and `1`).  If the `rawRelease` option is also defined, `rawRelease` will have\n   * priority. An invalid velocity value will silently trigger the default of `0.5`.\n   *\n   * @param {number} [options.rawRelease=64] The velocity at which to release the note\n   * (between `0` and `127`). If the `release` option is also defined, `rawRelease` will have\n   * priority. An invalid velocity value will silently trigger the default of `64`.\n   *\n   * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n   * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n   * positive number\n   * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n   * the operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @returns {Output} Returns the `Output` object so methods can be chained.\n   */\n  sendNoteOff(note, options= {}, legacy = {}) {\n\n    if (wm.validation) {\n\n      // Legacy compatibility\n      if (Array.isArray(options) || Number.isInteger(options) || options === \"all\") {\n        const channels = options;\n        options = legacy;\n        options.channels = channels;\n        if (options.channels === \"all\") options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n      }\n\n    }\n\n    if (options.channels == undefined) options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n\n    Utilities.sanitizeChannels(options.channels).forEach(ch => {\n      this.channels[ch].sendNoteOff(note, options);\n    });\n\n    return this;\n\n  }\n\n  /**\n   * Sends a **note off** message for the specified MIDI note number on the specified channel(s).\n   * The first parameter is the note to stop. It can be a single value or an array of the following\n   * valid values:\n   *\n   *  - A MIDI note number (integer between `0` and `127`)\n   *  - A note identifier (e.g. `\"C3\"`, `\"G#4\"`, `\"F-1\"`, `\"Db7\"`)\n   *  - A [`Note`](Note) object\n   *\n   * The execution of the **note off** command can be delayed by using the `time` property of the\n   * `options` parameter.\n   *\n   * @param note {number|Note|string|number[]|Note[]|string[]} The note(s) to stop. The notes can be\n   * specified by using a MIDI note number (`0` - `127`), a note identifier (e.g. `C3`, `G#4`, `F-1`,\n   * `Db7`) or an array of the previous types. When using a note identifier, octave range must be\n   * between `-1` and `9`. The lowest note is `C-1` (MIDI note number `0`) and the highest note is\n   * `G9` (MIDI note number `127`).\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|number[]} [options.channels=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]]\n   * The MIDI channel number (between `1` and `16`) or an array of channel numbers to use. If no\n   * channel is specified, all channels will be used.\n   *\n   * @param {number} [options.release=0.5] The velocity at which to release the note\n   * (between `0` and `1`).  If the `rawRelease` option is also defined, `rawRelease` will have\n   * priority. An invalid velocity value will silently trigger the default of `0.5`.\n   *\n   * @param {number} [options.rawRelease=64] The velocity at which to release the note\n   * (between `0` and `127`). If the `release` option is also defined, `rawRelease` will have\n   * priority. An invalid velocity value will silently trigger the default of `64`.\n   *\n   * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n   * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n   * positive number\n   * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n   * the operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @returns {Output} Returns the `Output` object so methods can be chained.\n   */\n  stopNote(note, options) {\n    return this.sendNoteOff(note, options);\n  }\n\n  /**\n   * Plays a note or an array of notes on one or more channels of this output. If you intend to play\n   * notes on a single channel, you should probably use\n   * [`OutputChannel.playNote()`](OutputChannel#playNote) instead.\n   *\n   * The first parameter is the note to play. It can be a single value or an array of the following\n   * valid values:\n   *\n   *  - A MIDI note number (integer between `0` and `127`)\n   *  - A note identifier (e.g. `\"C3\"`, `\"G#4\"`, `\"F-1\"`, `\"Db7\"`)\n   *  - A [`Note`]{@link Note} object\n   *\n   * The `playNote()` method sends a **note on** MIDI message for all specified notes on all\n   * specified channels. If no channel is specified, it will send to all channels. If a `duration`\n   * is set in the `options` parameter or in the [`Note`]{@link Note} object's\n   * [`duration`]{@link Note#duration} property, it will also schedule a **note off** message to end\n   * the note after said duration. If no `duration` is set, the note will simply play until a\n   * matching **note off** message is sent with [`stopNote()`]{@link #stopNote}.\n   *\n   * The execution of the **note on** command can be delayed by using the `time` property of the\n   * `options` parameter.\n   *\n   * When using [`Note`]{@link Note} objects, the durations and velocities defined in the\n   * [`Note`]{@link Note} objects have precedence over the ones specified via the method's `options`\n   * parameter.\n   *\n   * **Note**: As per the MIDI standard, a **note on** message with an attack velocity of `0` is\n   * functionally equivalent to a **note off** message.\n   *\n   * @param note {number|string|Note|number[]|string[]|Note[]} The note(s) to play. The notes can be\n   * specified by using a MIDI note number (0-127), a note identifier (e.g. C3, G#4, F-1, Db7), a\n   * [`Note`]{@link Note} object or an array of the previous types. When using a note identifier,\n   * octave range must be between -1 and 9. The lowest note is C-1 (MIDI note number `0`) and the\n   * highest note is G9 (MIDI note number `127`).\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|number[]} [options.channels=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]]\n   * The MIDI channel number (between `1` and `16`) or an array of channel numbers to use. If no\n   * channel is specified, all channels will be used.\n   *\n   * @param {number} [options.duration=undefined] The number of milliseconds after which a\n   * **note off** message will be scheduled. If left undefined, only a **note on** message is sent.\n   *\n   * @param {number} [options.attack=0.5] The velocity at which to play the note (between `0` and\n   * `1`). If the `rawAttack` option is also defined, it will have priority. An invalid velocity\n   * value will silently trigger the default of `0.5`.\n   *\n   * @param {number} [options.rawAttack=64] The attack velocity at which to play the note (between\n   * `0` and `127`). This has priority over the `attack` property. An invalid velocity value will\n   * silently trigger the default of 64.\n   *\n   * @param {number} [options.release=0.5] The velocity at which to release the note (between `0`\n   * and `1`). If the `rawRelease` option is also defined, it will have priority. An invalid\n   * velocity value will silently trigger the default of `0.5`. This is only used with the\n   * **note off** event triggered when `options.duration` is set.\n   *\n   * @param {number} [options.rawRelease=64] The velocity at which to release the note (between `0`\n   * and `127`). This has priority over the `release` property. An invalid velocity value will\n   * silently trigger the default of 64. This is only used with the **note off** event triggered\n   * when `options.duration` is set.\n   *\n   * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n   * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n   * positive number\n   * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n   * the operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @returns {Output} Returns the `Output` object so methods can be chained.\n   */\n  playNote(note, options = {}, legacy = {}) {\n\n    if (wm.validation) {\n\n      // Legacy-compatibility warnings\n      if (options.rawVelocity) {\n        console.warn(\"The 'rawVelocity' option is deprecated. Use 'rawAttack' instead.\");\n      }\n\n      if (options.velocity) {\n        console.warn(\"The 'velocity' option is deprecated. Use 'velocity' instead.\");\n      }\n\n      // Legacy compatibility\n      if (Array.isArray(options) || Number.isInteger(options) || options === \"all\") {\n        const channels = options;\n        options = legacy;\n        options.channels = channels;\n        if (options.channels === \"all\") options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n      }\n\n    }\n\n    if (options.channels == undefined) options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n\n    Utilities.sanitizeChannels(options.channels).forEach(ch => {\n      this.channels[ch].playNote(note, options);\n    });\n\n    return this;\n\n  }\n\n  /**\n   * Sends a **note on** message for the specified MIDI note number on the specified channel(s). The\n   * first parameter is the number. It can be a single value or an array of the following valid\n   * values:\n   *\n   *  - A MIDI note number (integer between `0` and `127`)\n   *  - A note identifier (e.g. `\"C3\"`, `\"G#4\"`, `\"F-1\"`, `\"Db7\"`)\n   *  - A [`Note`](Note) object\n   *\n   *  The execution of the **note on** command can be delayed by using the `time` property of the\n   * `options` parameter.\n   *\n   * **Note**: As per the MIDI standard, a **note on** message with an attack velocity of `0` is\n   * functionally equivalent to a **note off** message.\n   *\n   * @param note {number|Note|string|number[]|Note[]|string[]} The note(s) to stop. The notes can be\n   * specified by using a MIDI note number (`0` - `127`), a note identifier (e.g. `C3`, `G#4`, `F-1`,\n   * `Db7`) or an array of the previous types. When using a note identifier, octave range must be\n   * between `-1` and `9`. The lowest note is `C-1` (MIDI note number `0`) and the highest note is\n   * `G9` (MIDI note number `127`).\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|number[]} [options.channels=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]]\n   * The MIDI channel number (between `1` and `16`) or an array of channel numbers to use. If no\n   * channel is specified, all channels will be used.\n   *\n   * @param {number} [options.attack=0.5] The velocity at which to play the note (between `0` and\n   * `1`).  If the `rawAttack` option is also defined, `rawAttack` will have priority. An invalid\n   * velocity value will silently trigger the default of `0.5`.\n   *\n   * @param {number} [options.rawAttack=64] The velocity at which to release the note (between `0`\n   * and `127`). If the `attack` option is also defined, `rawAttack` will have priority. An invalid\n   * velocity value will silently trigger the default of `64`.\n   *\n   * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n   * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n   * positive number\n   * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n   * the operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @returns {Output} Returns the `Output` object so methods can be chained.\n   */\n  sendNoteOn(note, options = {}, legacy = {}) {\n\n    if (wm.validation) {\n\n      // Legacy compatibility\n      if (Array.isArray(options) || Number.isInteger(options) || options === \"all\") {\n        const channels = options;\n        options = legacy;\n        options.channels = channels;\n        if (options.channels === \"all\") options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n      }\n\n    }\n\n    if (options.channels == undefined) options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n\n    // This actually supports passing a Note object even if, semantically, this does not make sense.\n    Utilities.sanitizeChannels(options.channels).forEach(ch => {\n      this.channels[ch].sendNoteOn(note, options);\n    });\n\n    return this;\n\n  }\n\n  /**\n   * Name of the MIDI output.\n   *\n   * @type {string}\n   * @readonly\n   */\n  get name() {\n    return this._midiOutput.name;\n  }\n\n  /**\n   * ID string of the MIDI output. The ID is host-specific. Do not expect the same ID on different\n   * platforms. For example, Google Chrome and the Jazz-Plugin report completely different IDs for\n   * the same port.\n   *\n   * @type {string}\n   * @readonly\n   */\n  get id() {\n    return this._midiOutput.id;\n  }\n\n  /**\n   * Output port's connection state: `pending`, `open` or `closed`.\n   *\n   * @type {string}\n   * @readonly\n   */\n  get connection() {\n    return this._midiOutput.connection;\n  }\n\n  /**\n   * Name of the manufacturer of the device that makes this output port available.\n   *\n   * @type {string}\n   * @readonly\n   */\n  get manufacturer() {\n    return this._midiOutput.manufacturer;\n  }\n\n  /**\n   * State of the output port: `connected` or `disconnected`.\n   *\n   * @type {string}\n   * @readonly\n   */\n  get state() {\n    return this._midiOutput.state;\n  }\n\n  /**\n   * Type of the output port (it will always be: `output`).\n   *\n   * @type {string}\n   * @readonly\n   */\n  get type() {\n    return this._midiOutput.type;\n  }\n\n  /**\n   * An integer to offset the octave of outgoing notes. By default, middle C (MIDI note number 60)\n   * is placed on the 4th octave (C4).\n   *\n   * Note that this value is combined with the global offset value defined in\n   * [`WebMidi.octaveOffset`](WebMidi#octaveOffset) (if any).\n   *\n   * @type {number}\n   *\n   * @since 3.0\n   */\n  get octaveOffset() {\n    return this._octaveOffset;\n  }\n  set octaveOffset(value) {\n\n    if (this.validation) {\n      value = parseInt(value);\n      if (isNaN(value)) throw new TypeError(\"The 'octaveOffset' property must be an integer.\");\n    }\n\n    this._octaveOffset = value;\n\n  }\n\n}\n\n/**\n * The `Forwarder` class allows the forwarding of MIDI messages to predetermined outputs. When you\n * call its [`forward()`](#forward) method, it will send the specified [`Message`](Message) object\n * to all the outputs listed in its [`destinations`](#destinations) property.\n *\n * If specific channels or message types have been defined in the [`channels`](#channels) or\n * [`types`](#types) properties, only messages matching the channels/types will be forwarded.\n *\n * While it can be manually instantiated, you are more likely to come across a `Forwarder` object as\n * the return value of the [`Input.addForwarder()`](Input#addForwarder) method.\n *\n * @license Apache-2.0\n * @since 3.0.0\n */\nclass Forwarder {\n\n  /**\n   * Creates a `Forwarder` object.\n   *\n   * @param {Output|Output[]} [destinations=\\[\\]] An [`Output`](Output) object, or an array of such\n   * objects, to forward the message to.\n   *\n   * @param {object} [options={}]\n   * @param {string|string[]} [options.types=(all messages)] A MIDI message type or an array of such\n   * types (`\"noteon\"`, `\"controlchange\"`, etc.), that the specified message must match in order to\n   * be forwarded. If this option is not specified, all types of messages will be forwarded. Valid\n   * messages are the ones found in either\n   * [`SYSTEM_MESSAGES`](Enumerations#SYSTEM_MESSAGES)\n   * or [`CHANNEL_MESSAGES`](Enumerations#CHANNEL_MESSAGES).\n   * @param {number|number[]} [options.channels=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]]\n   * A MIDI channel number or an array of channel numbers that the message must match in order to be\n   * forwarded. By default all MIDI channels are included (`1` to `16`).\n   */\n  constructor(destinations = [], options = {}) {\n\n    /**\n     * An array of [`Output`](Output) objects to forward the message to.\n     * @type {Output[]}\n     */\n    this.destinations = [];\n\n    /**\n     * An array of message types (`\"noteon\"`, `\"controlchange\"`, etc.) that must be matched in order\n     * for messages to be forwarded. By default, this array includes all\n     * [`Enumerations.SYSTEM_MESSAGES`](Enumerations#SYSTEM_MESSAGES) and\n     * [`Enumerations.CHANNEL_MESSAGES`](Enumerations#CHANNEL_MESSAGES).\n     * @type {string[]}\n     */\n    this.types = [\n      ...Object.keys(Enumerations.SYSTEM_MESSAGES),\n      ...Object.keys(Enumerations.CHANNEL_MESSAGES)\n    ];\n\n    /**\n     * An array of MIDI channel numbers that the message must match in order to be forwarded. By\n     * default, this array includes all MIDI channels (`1` to `16`).\n     * @type {number[]}\n     */\n    this.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n\n    /**\n     * Indicates whether message forwarding is currently suspended or not in this forwarder.\n     * @type {boolean}\n     */\n    this.suspended = false;\n\n    // Make sure parameters are arrays\n    if (!Array.isArray(destinations)) destinations = [destinations];\n    if (options.types && !Array.isArray(options.types)) options.types = [options.types];\n    if (options.channels && !Array.isArray(options.channels)) options.channels = [options.channels];\n\n    if (wm.validation) {\n\n      // Validate destinations\n      destinations.forEach(destination => {\n        if ( !(destination instanceof Output) ) {\n          throw new TypeError(\"Destinations must be of type 'Output'.\");\n        }\n      });\n\n      // Validate types\n      if (options.types !== undefined) {\n\n        options.types.forEach(type => {\n          if (\n            ! Enumerations.SYSTEM_MESSAGES.hasOwnProperty(type) &&\n            ! Enumerations.CHANNEL_MESSAGES.hasOwnProperty(type)\n          ) {\n            throw new TypeError(\"Type must be a valid message type.\");\n          }\n        });\n\n      }\n\n      // Validate channels\n      if (options.channels !== undefined) {\n\n        options.channels.forEach(channel => {\n          if (! Enumerations.MIDI_CHANNEL_NUMBERS.includes(channel) ) {\n            throw new TypeError(\"MIDI channel must be between 1 and 16.\");\n          }\n        });\n\n      }\n\n    }\n\n    this.destinations = destinations;\n    if (options.types) this.types = options.types;\n    if (options.channels) this.channels = options.channels;\n\n  }\n\n  /**\n   * Sends the specified message to the forwarder's destination(s) if it matches the specified\n   * type(s) and channel(s).\n   *\n   * @param {Message} message The [`Message`](Message) object to forward.\n   */\n  forward(message) {\n\n    // Abort if forwarding is currently suspended\n    if (this.suspended) return;\n\n    // Abort if this message type should not be forwarded\n    if (!this.types.includes(message.type)) return;\n\n    // Abort if this channel should not be forwarded\n    if (message.channel && !this.channels.includes(message.channel)) return;\n\n    // Forward\n    this.destinations.forEach(destination => {\n      if (wm.validation && !(destination instanceof Output)) return;\n      destination.send(message);\n    });\n\n  }\n\n}\n\n/**\n * The `InputChannel` class represents a single MIDI input channel (1-16) from a single input\n * device. This object is derived from the host's MIDI subsystem and should not be instantiated\n * directly.\n *\n * All 16 `InputChannel` objects can be found inside the input's [`channels`](Input#channels)\n * property.\n *\n * @fires InputChannel#midimessage\n * @fires InputChannel#unknownmessage\n *\n * @fires InputChannel#noteoff\n * @fires InputChannel#noteon\n * @fires InputChannel#keyaftertouch\n * @fires InputChannel#programchange\n * @fires InputChannel#channelaftertouch\n * @fires InputChannel#pitchbend\n *\n * @fires InputChannel#allnotesoff\n * @fires InputChannel#allsoundoff\n * @fires InputChannel#localcontrol\n * @fires InputChannel#monomode\n * @fires InputChannel#omnimode\n * @fires InputChannel#resetallcontrollers\n *\n * @fires InputChannel#event:nrpn\n * @fires InputChannel#event:nrpn-dataentrycoarse\n * @fires InputChannel#event:nrpn-dataentryfine\n * @fires InputChannel#event:nrpn-dataincrement\n * @fires InputChannel#event:nrpn-datadecrement\n * @fires InputChannel#event:rpn\n * @fires InputChannel#event:rpn-dataentrycoarse\n * @fires InputChannel#event:rpn-dataentryfine\n * @fires InputChannel#event:rpn-dataincrement\n * @fires InputChannel#event:rpn-datadecrement\n *\n * @fires InputChannel#controlchange\n * @fires InputChannel#event:controlchange-controllerxxx\n * @fires InputChannel#event:controlchange-bankselectcoarse\n * @fires InputChannel#event:controlchange-modulationwheelcoarse\n * @fires InputChannel#event:controlchange-breathcontrollercoarse\n * @fires InputChannel#event:controlchange-footcontrollercoarse\n * @fires InputChannel#event:controlchange-portamentotimecoarse\n * @fires InputChannel#event:controlchange-dataentrycoarse\n * @fires InputChannel#event:controlchange-volumecoarse\n * @fires InputChannel#event:controlchange-balancecoarse\n * @fires InputChannel#event:controlchange-pancoarse\n * @fires InputChannel#event:controlchange-expressioncoarse\n * @fires InputChannel#event:controlchange-effectcontrol1coarse\n * @fires InputChannel#event:controlchange-effectcontrol2coarse\n * @fires InputChannel#event:controlchange-generalpurposecontroller1\n * @fires InputChannel#event:controlchange-generalpurposecontroller2\n * @fires InputChannel#event:controlchange-generalpurposecontroller3\n * @fires InputChannel#event:controlchange-generalpurposecontroller4\n * @fires InputChannel#event:controlchange-bankselectfine\n * @fires InputChannel#event:controlchange-modulationwheelfine\n * @fires InputChannel#event:controlchange-breathcontrollerfine\n * @fires InputChannel#event:controlchange-footcontrollerfine\n * @fires InputChannel#event:controlchange-portamentotimefine\n * @fires InputChannel#event:controlchange-dataentryfine\n * @fires InputChannel#event:controlchange-channelvolumefine\n * @fires InputChannel#event:controlchange-balancefine\n * @fires InputChannel#event:controlchange-panfine\n * @fires InputChannel#event:controlchange-expressionfine\n * @fires InputChannel#event:controlchange-effectcontrol1fine\n * @fires InputChannel#event:controlchange-effectcontrol2fine\n * @fires InputChannel#event:controlchange-damperpedal\n * @fires InputChannel#event:controlchange-portamento\n * @fires InputChannel#event:controlchange-sostenuto\n * @fires InputChannel#event:controlchange-softpedal\n * @fires InputChannel#event:controlchange-legatopedal\n * @fires InputChannel#event:controlchange-hold2\n * @fires InputChannel#event:controlchange-soundvariation\n * @fires InputChannel#event:controlchange-resonance\n * @fires InputChannel#event:controlchange-releasetime\n * @fires InputChannel#event:controlchange-attacktime\n * @fires InputChannel#event:controlchange-brightness\n * @fires InputChannel#event:controlchange-decaytime\n * @fires InputChannel#event:controlchange-vibratorate\n * @fires InputChannel#event:controlchange-vibratodepth\n * @fires InputChannel#event:controlchange-vibratodelay\n * @fires InputChannel#event:controlchange-generalpurposecontroller5\n * @fires InputChannel#event:controlchange-generalpurposecontroller6\n * @fires InputChannel#event:controlchange-generalpurposecontroller7\n * @fires InputChannel#event:controlchange-generalpurposecontroller8\n * @fires InputChannel#event:controlchange-portamentocontrol\n * @fires InputChannel#event:controlchange-highresolutionvelocityprefix\n * @fires InputChannel#event:controlchange-effect1depth\n * @fires InputChannel#event:controlchange-effect2depth\n * @fires InputChannel#event:controlchange-effect3depth\n * @fires InputChannel#event:controlchange-effect4depth\n * @fires InputChannel#event:controlchange-effect5depth\n * @fires InputChannel#event:controlchange-dataincrement\n * @fires InputChannel#event:controlchange-datadecrement\n * @fires InputChannel#event:controlchange-nonregisteredparameterfine\n * @fires InputChannel#event:controlchange-nonregisteredparametercoarse\n * @fires InputChannel#event:controlchange-registeredparameterfine\n * @fires InputChannel#event:controlchange-registeredparametercoarse\n * @fires InputChannel#event:controlchange-allsoundoff\n * @fires InputChannel#event:controlchange-resetallcontrollers\n * @fires InputChannel#event:controlchange-localcontrol\n * @fires InputChannel#event:controlchange-allnotesoff\n * @fires InputChannel#event:controlchange-omnimodeoff\n * @fires InputChannel#event:controlchange-omnimodeon\n * @fires InputChannel#event:controlchange-monomodeon\n * @fires InputChannel#event:controlchange-polymodeon\n * @fires InputChannel#event:\n *\n * @extends EventEmitter\n * @license Apache-2.0\n * @since 3.0.0\n */\nclass InputChannel extends EventEmitter {\n\n  /**\n   * Creates an `InputChannel` object.\n   *\n   * @param {Input} input The [`Input`](Input) object this channel belongs to.\n   * @param {number} number The channel's MIDI number (1-16).\n   */\n  constructor(input, number) {\n\n    super();\n\n    /**\n     * @type {Input}\n     * @private\n     */\n    this._input = input;\n\n    /**\n     * @type {number}\n     * @private\n     */\n    this._number = number;\n\n    /**\n     * @type {number}\n     * @private\n     */\n    this._octaveOffset = 0;\n\n    /**\n     * An array of messages that form the current NRPN sequence\n     * @private\n     * @type {Message[]}\n     */\n    this._nrpnBuffer = [];\n\n    /**\n     * An array of messages that form the current RPN sequence\n     * @private\n     * @type {Message[]}\n     */\n    this._rpnBuffer = [];\n\n    /**\n     * Indicates whether events for **Registered Parameter Number** and **Non-Registered Parameter\n     * Number** should be dispatched. RPNs and NRPNs are composed of a sequence of specific\n     * **control change** messages. When a valid sequence of such control change messages is\n     * received, an [`rpn`](#event-rpn) or [`nrpn`](#event-nrpn) event will fire.\n     *\n     * If an invalid or out-of-order **control change** message is received, it will fall through\n     * the collector logic and all buffered **control change** messages will be discarded as\n     * incomplete.\n     *\n     * @type {boolean}\n     */\n    this.parameterNumberEventsEnabled = true;\n\n    /**\n     * Contains the current playing state of all MIDI notes of this channel (0-127). The state is\n     * `true` for a currently playing note and `false` otherwise.\n     * @type {boolean[]}\n     */\n    this.notesState = new Array(128).fill(false);\n\n  }\n\n  /**\n   * Destroys the `InputChannel` by removing all listeners and severing the link with the MIDI\n   * subsystem's input.\n   */\n  destroy() {\n    this._input = null;\n    this._number = null;\n    this._octaveOffset = 0;\n    this._nrpnBuffer = [];\n    this.notesState = new Array(128).fill(false);\n    this.parameterNumberEventsEnabled = false;\n    this.removeListener();\n  }\n\n  /**\n   * @param e MIDIMessageEvent\n   * @private\n   */\n  _processMidiMessageEvent(e) {\n\n    // Create and emit a new 'midimessage' event based on the incoming one\n    const event = Object.assign({}, e);\n    event.port = this.input;\n    event.target = this;\n    event.type = \"midimessage\";\n\n    /**\n     * Event emitted when a MIDI message of any kind is received by an `InputChannel`\n     *\n     * @event InputChannel#midimessage\n     *\n     * @type {object}\n     *\n     * @property {string} type `midimessage`\n     * @property {InputChannel} target The object that dispatched the event.\n     * @property {Input} port The `Input` that triggered the event.\n     * @property {Message} message A [`Message`](Message) object containing information about the\n     * incoming MIDI message.\n     * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n     * milliseconds since the navigation start of the document).\n     */\n    this.emit(event.type, event);\n\n    // Parse the inbound event for regular MIDI messages\n    this._parseEventForStandardMessages(event);\n\n  }\n\n  /**\n   * Parses incoming channel events and emit standard MIDI message events (noteon, noteoff, etc.)\n   * @param e Event\n   * @private\n   */\n  _parseEventForStandardMessages(e) {\n\n    const event = Object.assign({}, e);\n    event.type = event.message.type || \"unknownmessage\";\n\n    const data1 = e.message.dataBytes[0];\n    const data2 = e.message.dataBytes[1];\n\n    if ( event.type === \"noteoff\" || (event.type === \"noteon\" && data2 === 0) ) {\n\n      this.notesState[data1] = false;\n      event.type = \"noteoff\"; // necessary for note on with 0 velocity\n\n      /**\n       * Event emitted when a **note off** MIDI message has been received on the channel.\n       *\n       * @event InputChannel#noteoff\n       *\n       * @type {object}\n       * @property {string} type `noteoff`\n       *\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {Message} message A [`Message`](Message) object containing information about the incoming\n       * MIDI message.\n       * @property {number} timestamp The moment\n       * ([`DOMHighResTimeStamp`](https://developer.mozilla.org/en-US/docs/Web/API/DOMHighResTimeStamp))\n       * when the event occurred (in milliseconds since the navigation start of the document).\n       *\n       * @property {object} note A [`Note`](Note) object containing information such as note name,\n       * octave and release velocity.\n       * @property {number} value The release velocity amount expressed as a float between 0 and 1.\n       * @property {number} rawValue The release velocity amount expressed as an integer (between 0\n       * and 127).\n       */\n\n      // The object created when a noteoff event arrives is a Note with an attack velocity of 0.\n      event.note = new Note(\n        Utilities.offsetNumber(\n          data1, this.octaveOffset + this.input.octaveOffset + wm.octaveOffset\n        ),\n        {\n          rawAttack: 0,\n          rawRelease: data2,\n        }\n      );\n\n      event.value = Utilities.from7bitToFloat(data2);\n      event.rawValue = data2;\n\n      // Those are kept for backwards-compatibility but are gone from the documentation. They will\n      // be removed in future versions (@deprecated).\n      event.velocity = event.note.release;\n      event.rawVelocity = event.note.rawRelease;\n\n    } else if (event.type === \"noteon\") {\n\n      this.notesState[data1] = true;\n\n      /**\n       * Event emitted when a **note on** MIDI message has been received.\n       *\n       * @event InputChannel#noteon\n       *\n       * @type {object}\n       * @property {string} type `noteon`\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {object} note A [`Note`](Note) object containing information such as note name,\n       * octave and release velocity.\n       * @property {number} value The attack velocity amount expressed as a float between 0 and 1.\n       * @property {number} rawValue The attack velocity amount expressed as an integer (between 0\n       * and 127).\n       */\n      event.note = new Note(\n        Utilities.offsetNumber(\n          data1, this.octaveOffset + this.input.octaveOffset + wm.octaveOffset\n        ),\n        { rawAttack: data2 }\n      );\n\n      event.value = Utilities.from7bitToFloat(data2);\n      event.rawValue = data2;\n\n      // Those are kept for backwards-compatibility but are gone from the documentation. They will\n      // be removed in future versions (@deprecated).\n      event.velocity = event.note.attack;\n      event.rawVelocity = event.note.rawAttack;\n\n    } else if (event.type === \"keyaftertouch\") {\n\n      /**\n       * Event emitted when a **key-specific aftertouch** MIDI message has been received.\n       *\n       * @event InputChannel#keyaftertouch\n       *\n       * @type {object}\n       * @property {string} type `\"keyaftertouch\"`\n       *\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {object} note A [`Note`](Note) object containing information such as note name\n       * and number.\n       * @property {number} value The aftertouch amount expressed as a float between 0 and 1.\n       * @property {number} rawValue The aftertouch amount expressed as an integer (between 0 and\n       * 127).\n       */\n      event.note = new Note(\n        Utilities.offsetNumber(\n          data1, this.octaveOffset + this.input.octaveOffset + wm.octaveOffset\n        )\n      );\n\n      // Aftertouch value\n      event.value = Utilities.from7bitToFloat(data2);\n      event.rawValue = data2;\n\n      // @deprecated\n      event.identifier = event.note.identifier;\n      event.key = event.note.number;\n      event.rawKey = data1;\n\n    } else if (event.type === \"controlchange\") {\n\n      /**\n       * Event emitted when a **control change** MIDI message has been received.\n       *\n       * @event InputChannel#controlchange\n       *\n       * @type {object}\n       * @property {string} type `controlchange`\n       * @property {string} subtype The type of control change message that was received.\n       *\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {object} controller\n       * @property {object} controller.number The number of the controller.\n       * @property {object} controller.name The usual name or function of the controller.\n       * @property {object} controller.description A user-friendly representation of the\n       * controller's default function\n       * @property {number} value The value expressed as a float between 0 and 1.\n       * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n       */\n      event.controller = {\n        number: data1,\n        name: Enumerations.CONTROL_CHANGE_MESSAGES[data1].name,\n        description: Enumerations.CONTROL_CHANGE_MESSAGES[data1].description,\n        position: Enumerations.CONTROL_CHANGE_MESSAGES[data1].position,\n      };\n\n      event.subtype = event.controller.name || \"controller\" + data1;\n      event.value = Utilities.from7bitToFloat(data2);\n      event.rawValue = data2;\n\n      /**\n       * Event emitted when a **control change** MIDI message has been received and that message is\n       * targeting the controller numbered \"xxx\". Of course, \"xxx\" should be replaced by a valid\n       * controller number (0-127).\n       *\n       * @event InputChannel#controlchange-controllerxxx\n       *\n       * @type {object}\n       * @property {string} type `controlchange-controllerxxx`\n       * @property {string} subtype The type of control change message that was received.\n       *\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {object} controller\n       * @property {object} controller.number The number of the controller.\n       * @property {object} controller.name The usual name or function of the controller.\n       * @property {object} controller.description A user-friendly representation of the\n       * controller's default function\n       * @property {number} value The value expressed as a float between 0 and 1.\n       * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n       */\n      const numberedEvent = Object.assign({}, event);\n      numberedEvent.type = `${event.type}-controller${data1}`;\n      delete numberedEvent.subtype;\n      this.emit(numberedEvent.type, numberedEvent);\n\n      /**\n       * Event emitted when a **controlchange-bankselectcoarse** MIDI message has been\n       * received.\n       *\n       * @event InputChannel#controlchange-bankselectcoarse\n       *\n       * @type {object}\n       * @property {string} type `controlchange-bankselectcoarse`\n       *\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {object} controller\n       * @property {object} controller.number The number of the controller.\n       * @property {object} controller.name The usual name or function of the controller.\n       * @property {object} controller.description A user-friendly representation of the\n       * controller's default function\n       * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n       * @property {number} value The value expressed as a float between 0 and 1.\n       * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n       */\n\n      /**\n       * Event emitted when a **controlchange-modulationwheelcoarse** MIDI message has been\n       * received.\n       *\n       * @event InputChannel#controlchange-modulationwheelcoarse\n       *\n       * @type {object}\n       * @property {string} type `controlchange-modulationwheelcoarse`\n       *\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {object} controller\n       * @property {object} controller.number The number of the controller.\n       * @property {object} controller.name The usual name or function of the controller.\n       * @property {object} controller.description A user-friendly representation of the\n       * controller's default function\n       * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n       * @property {number} value The value expressed as a float between 0 and 1.\n       * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n       */\n\n      /**\n       * Event emitted when a **controlchange-breathcontrollercoarse** MIDI message has been\n       * received.\n       *\n       * @event InputChannel#controlchange-breathcontrollercoarse\n       *\n       * @type {object}\n       * @property {string} type `controlchange-breathcontrollercoarse`\n       *\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {object} controller\n       * @property {object} controller.number The number of the controller.\n       * @property {object} controller.name The usual name or function of the controller.\n       * @property {object} controller.description A user-friendly representation of the\n       * controller's default function\n       * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n       * @property {number} value The value expressed as a float between 0 and 1.\n       * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n       */\n\n      /**\n       * Event emitted when a **controlchange-footcontrollercoarse** MIDI message has been\n       * received.\n       *\n       * @event InputChannel#controlchange-footcontrollercoarse\n       *\n       * @type {object}\n       * @property {string} type `controlchange-footcontrollercoarse`\n       *\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {object} controller\n       * @property {object} controller.number The number of the controller.\n       * @property {object} controller.name The usual name or function of the controller.\n       * @property {object} controller.description A user-friendly representation of the\n       * controller's default function\n       * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n       * @property {number} value The value expressed as a float between 0 and 1.\n       * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n       */\n\n      /**\n       * Event emitted when a **controlchange-portamentotimecoarse** MIDI message has been\n       * received.\n       *\n       * @event InputChannel#controlchange-portamentotimecoarse\n       *\n       * @type {object}\n       * @property {string} type `controlchange-portamentotimecoarse`\n       *\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {object} controller\n       * @property {object} controller.number The number of the controller.\n       * @property {object} controller.name The usual name or function of the controller.\n       * @property {object} controller.description A user-friendly representation of the\n       * controller's default function\n       * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n       * @property {number} value The value expressed as a float between 0 and 1.\n       * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n       */\n\n      /**\n       * Event emitted when a **controlchange-dataentrycoarse** MIDI message has been\n       * received.\n       *\n       * @event InputChannel#controlchange-dataentrycoarse\n       *\n       * @type {object}\n       * @property {string} type `controlchange-dataentrycoarse`\n       *\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {object} controller\n       * @property {object} controller.number The number of the controller.\n       * @property {object} controller.name The usual name or function of the controller.\n       * @property {object} controller.description A user-friendly representation of the\n       * controller's default function\n       * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n       * @property {number} value The value expressed as a float between 0 and 1.\n       * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n       */\n\n      /**\n       * Event emitted when a **controlchange-volumecoarse** MIDI message has been\n       * received.\n       *\n       * @event InputChannel#controlchange-volumecoarse\n       *\n       * @type {object}\n       * @property {string} type `controlchange-volumecoarse`\n       *\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {object} controller\n       * @property {object} controller.number The number of the controller.\n       * @property {object} controller.name The usual name or function of the controller.\n       * @property {object} controller.description A user-friendly representation of the\n       * controller's default function\n       * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n       * @property {number} value The value expressed as a float between 0 and 1.\n       * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n       */\n\n      /**\n       * Event emitted when a **controlchange-balancecoarse** MIDI message has been\n       * received.\n       *\n       * @event InputChannel#controlchange-balancecoarse\n       *\n       * @type {object}\n       * @property {string} type `controlchange-balancecoarse`\n       *\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {object} controller\n       * @property {object} controller.number The number of the controller.\n       * @property {object} controller.name The usual name or function of the controller.\n       * @property {object} controller.description A user-friendly representation of the\n       * controller's default function\n       * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n       * @property {number} value The value expressed as a float between 0 and 1.\n       * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n       */\n\n      /**\n       * Event emitted when a **controlchange-pancoarse** MIDI message has been\n       * received.\n       *\n       * @event InputChannel#controlchange-pancoarse\n       *\n       * @type {object}\n       * @property {string} type `controlchange-pancoarse`\n       *\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {object} controller\n       * @property {object} controller.number The number of the controller.\n       * @property {object} controller.name The usual name or function of the controller.\n       * @property {object} controller.description A user-friendly representation of the\n       * controller's default function\n       * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n       * @property {number} value The value expressed as a float between 0 and 1.\n       * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n       */\n\n      /**\n       * Event emitted when a **controlchange-expressioncoarse** MIDI message has been\n       * received.\n       *\n       * @event InputChannel#controlchange-expressioncoarse\n       *\n       * @type {object}\n       * @property {string} type `controlchange-expressioncoarse`\n       *\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {object} controller\n       * @property {object} controller.number The number of the controller.\n       * @property {object} controller.name The usual name or function of the controller.\n       * @property {object} controller.description A user-friendly representation of the\n       * controller's default function\n       * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n       * @property {number} value The value expressed as a float between 0 and 1.\n       * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n       */\n\n      /**\n       * Event emitted when a **controlchange-effectcontrol1coarse** MIDI message has been\n       * received.\n       *\n       * @event InputChannel#controlchange-effectcontrol1coarse\n       *\n       * @type {object}\n       * @property {string} type `controlchange-effectcontrol1coarse`\n       *\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {object} controller\n       * @property {object} controller.number The number of the controller.\n       * @property {object} controller.name The usual name or function of the controller.\n       * @property {object} controller.description A user-friendly representation of the\n       * controller's default function\n       * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n       * @property {number} value The value expressed as a float between 0 and 1.\n       * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n       */\n\n      /**\n       * Event emitted when a **controlchange-effectcontrol2coarse** MIDI message has been\n       * received.\n       *\n       * @event InputChannel#controlchange-effectcontrol2coarse\n       *\n       * @type {object}\n       * @property {string} type `controlchange-effectcontrol2coarse`\n       *\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {object} controller\n       * @property {object} controller.number The number of the controller.\n       * @property {object} controller.name The usual name or function of the controller.\n       * @property {object} controller.description A user-friendly representation of the\n       * controller's default function\n       * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n       * @property {number} value The value expressed as a float between 0 and 1.\n       * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n       */\n\n      /**\n       * Event emitted when a **controlchange-generalpurposecontroller1** MIDI message has been\n       * received.\n       *\n       * @event InputChannel#controlchange-generalpurposecontroller1\n       *\n       * @type {object}\n       * @property {string} type `controlchange-generalpurposecontroller1`\n       *\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {object} controller\n       * @property {object} controller.number The number of the controller.\n       * @property {object} controller.name The usual name or function of the controller.\n       * @property {object} controller.description A user-friendly representation of the\n       * controller's default function\n       * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n       * @property {number} value The value expressed as a float between 0 and 1.\n       * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n       */\n\n      /**\n       * Event emitted when a **controlchange-generalpurposecontroller2** MIDI message has been\n       * received.\n       *\n       * @event InputChannel#controlchange-generalpurposecontroller2\n       *\n       * @type {object}\n       * @property {string} type `controlchange-generalpurposecontroller2`\n       *\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {object} controller\n       * @property {object} controller.number The number of the controller.\n       * @property {object} controller.name The usual name or function of the controller.\n       * @property {object} controller.description A user-friendly representation of the\n       * controller's default function\n       * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n       * @property {number} value The value expressed as a float between 0 and 1.\n       * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n       */\n\n      /**\n       * Event emitted when a **controlchange-generalpurposecontroller3** MIDI message has been\n       * received.\n       *\n       * @event InputChannel#controlchange-generalpurposecontroller3\n       *\n       * @type {object}\n       * @property {string} type `controlchange-generalpurposecontroller3`\n       *\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {object} controller\n       * @property {object} controller.number The number of the controller.\n       * @property {object} controller.name The usual name or function of the controller.\n       * @property {object} controller.description A user-friendly representation of the\n       * controller's default function\n       * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n       * @property {number} value The value expressed as a float between 0 and 1.\n       * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n       */\n\n      /**\n       * Event emitted when a **controlchange-generalpurposecontroller4** MIDI message has been\n       * received.\n       *\n       * @event InputChannel#controlchange-generalpurposecontroller4\n       *\n       * @type {object}\n       * @property {string} type `controlchange-generalpurposecontroller4`\n       *\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {object} controller\n       * @property {object} controller.number The number of the controller.\n       * @property {object} controller.name The usual name or function of the controller.\n       * @property {object} controller.description A user-friendly representation of the\n       * controller's default function\n       * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n       * @property {number} value The value expressed as a float between 0 and 1.\n       * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n       */\n\n      /**\n       * Event emitted when a **controlchange-bankselectfine** MIDI message has been\n       * received.\n       *\n       * @event InputChannel#controlchange-bankselectfine\n       *\n       * @type {object}\n       * @property {string} type `controlchange-bankselectfine`\n       *\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {object} controller\n       * @property {object} controller.number The number of the controller.\n       * @property {object} controller.name The usual name or function of the controller.\n       * @property {object} controller.description A user-friendly representation of the\n       * controller's default function\n       * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n       * @property {number} value The value expressed as a float between 0 and 1.\n       * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n       */\n\n      /**\n       * Event emitted when a **controlchange-modulationwheelfine** MIDI message has been\n       * received.\n       *\n       * @event InputChannel#controlchange-modulationwheelfine\n       *\n       * @type {object}\n       * @property {string} type `controlchange-modulationwheelfine`\n       *\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {object} controller\n       * @property {object} controller.number The number of the controller.\n       * @property {object} controller.name The usual name or function of the controller.\n       * @property {object} controller.description A user-friendly representation of the\n       * controller's default function\n       * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n       * @property {number} value The value expressed as a float between 0 and 1.\n       * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n       */\n\n      /**\n       * Event emitted when a **controlchange-breathcontrollerfine** MIDI message has been\n       * received.\n       *\n       * @event InputChannel#controlchange-breathcontrollerfine\n       *\n       * @type {object}\n       * @property {string} type `controlchange-breathcontrollerfine`\n       *\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {object} controller\n       * @property {object} controller.number The number of the controller.\n       * @property {object} controller.name The usual name or function of the controller.\n       * @property {object} controller.description A user-friendly representation of the\n       * controller's default function\n       * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n       * @property {number} value The value expressed as a float between 0 and 1.\n       * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n       */\n\n      /**\n       * Event emitted when a **controlchange-footcontrollerfine** MIDI message has been\n       * received.\n       *\n       * @event InputChannel#controlchange-footcontrollerfine\n       *\n       * @type {object}\n       * @property {string} type `controlchange-footcontrollerfine`\n       *\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {object} controller\n       * @property {object} controller.number The number of the controller.\n       * @property {object} controller.name The usual name or function of the controller.\n       * @property {object} controller.description A user-friendly representation of the\n       * controller's default function\n       * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n       * @property {number} value The value expressed as a float between 0 and 1.\n       * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n       */\n\n      /**\n       * Event emitted when a **controlchange-portamentotimefine** MIDI message has been\n       * received.\n       *\n       * @event InputChannel#controlchange-portamentotimefine\n       *\n       * @type {object}\n       * @property {string} type `controlchange-portamentotimefine`\n       *\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {object} controller\n       * @property {object} controller.number The number of the controller.\n       * @property {object} controller.name The usual name or function of the controller.\n       * @property {object} controller.description A user-friendly representation of the\n       * controller's default function\n       * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n       * @property {number} value The value expressed as a float between 0 and 1.\n       * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n       */\n\n      /**\n       * Event emitted when a **controlchange-dataentryfine** MIDI message has been\n       * received.\n       *\n       * @event InputChannel#controlchange-dataentryfine\n       *\n       * @type {object}\n       * @property {string} type `controlchange-dataentryfine`\n       *\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {object} controller\n       * @property {object} controller.number The number of the controller.\n       * @property {object} controller.name The usual name or function of the controller.\n       * @property {object} controller.description A user-friendly representation of the\n       * controller's default function\n       * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n       * @property {number} value The value expressed as a float between 0 and 1.\n       * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n       */\n\n      /**\n       * Event emitted when a **controlchange-channelvolumefine** MIDI message has been\n       * received.\n       *\n       * @event InputChannel#controlchange-channelvolumefine\n       *\n       * @type {object}\n       * @property {string} type `controlchange-channelvolumefine`\n       *\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {object} controller\n       * @property {object} controller.number The number of the controller.\n       * @property {object} controller.name The usual name or function of the controller.\n       * @property {object} controller.description A user-friendly representation of the\n       * controller's default function\n       * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n       * @property {number} value The value expressed as a float between 0 and 1.\n       * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n       */\n\n      /**\n       * Event emitted when a **controlchange-balancefine** MIDI message has been\n       * received.\n       *\n       * @event InputChannel#controlchange-balancefine\n       *\n       * @type {object}\n       * @property {string} type `controlchange-balancefine`\n       *\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {object} controller\n       * @property {object} controller.number The number of the controller.\n       * @property {object} controller.name The usual name or function of the controller.\n       * @property {object} controller.description A user-friendly representation of the\n       * controller's default function\n       * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n       * @property {number} value The value expressed as a float between 0 and 1.\n       * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n       */\n\n      /**\n       * Event emitted when a **controlchange-panfine** MIDI message has been\n       * received.\n       *\n       * @event InputChannel#controlchange-panfine\n       *\n       * @type {object}\n       * @property {string} type `controlchange-panfine`\n       *\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {object} controller\n       * @property {object} controller.number The number of the controller.\n       * @property {object} controller.name The usual name or function of the controller.\n       * @property {object} controller.description A user-friendly representation of the\n       * controller's default function\n       * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n       * @property {number} value The value expressed as a float between 0 and 1.\n       * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n       */\n\n      /**\n       * Event emitted when a **controlchange-expressionfine** MIDI message has been\n       * received.\n       *\n       * @event InputChannel#controlchange-expressionfine\n       *\n       * @type {object}\n       * @property {string} type `controlchange-expressionfine`\n       *\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {object} controller\n       * @property {object} controller.number The number of the controller.\n       * @property {object} controller.name The usual name or function of the controller.\n       * @property {object} controller.description A user-friendly representation of the\n       * controller's default function\n       * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n       * @property {number} value The value expressed as a float between 0 and 1.\n       * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n       */\n\n      /**\n       * Event emitted when a **controlchange-effectcontrol1fine** MIDI message has been\n       * received.\n       *\n       * @event InputChannel#controlchange-effectcontrol1fine\n       *\n       * @type {object}\n       * @property {string} type `controlchange-effectcontrol1fine`\n       *\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {object} controller\n       * @property {object} controller.number The number of the controller.\n       * @property {object} controller.name The usual name or function of the controller.\n       * @property {object} controller.description A user-friendly representation of the\n       * controller's default function\n       * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n       * @property {number} value The value expressed as a float between 0 and 1.\n       * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n       */\n\n      /**\n       * Event emitted when a **controlchange-effectcontrol2fine** MIDI message has been\n       * received.\n       *\n       * @event InputChannel#controlchange-effectcontrol2fine\n       *\n       * @type {object}\n       * @property {string} type `controlchange-effectcontrol2fine`\n       *\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {object} controller\n       * @property {object} controller.number The number of the controller.\n       * @property {object} controller.name The usual name or function of the controller.\n       * @property {object} controller.description A user-friendly representation of the\n       * controller's default function\n       * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n       * @property {number} value The value expressed as a float between 0 and 1.\n       * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n       */\n\n      /**\n       * Event emitted when a **controlchange-damperpedal** MIDI message has been\n       * received.\n       *\n       * @event InputChannel#controlchange-damperpedal\n       *\n       * @type {object}\n       * @property {string} type `controlchange-damperpedal`\n       *\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {object} controller\n       * @property {object} controller.number The number of the controller.\n       * @property {object} controller.name The usual name or function of the controller.\n       * @property {object} controller.description A user-friendly representation of the\n       * controller's default function\n       * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n       * @property {number} value The value expressed as a float between 0 and 1.\n       * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n       */\n\n      /**\n       * Event emitted when a **controlchange-portamento** MIDI message has been\n       * received.\n       *\n       * @event InputChannel#controlchange-portamento\n       *\n       * @type {object}\n       * @property {string} type `controlchange-portamento`\n       *\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {object} controller\n       * @property {object} controller.number The number of the controller.\n       * @property {object} controller.name The usual name or function of the controller.\n       * @property {object} controller.description A user-friendly representation of the\n       * controller's default function\n       * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n       * @property {number} value The value expressed as a float between 0 and 1.\n       * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n       */\n\n      /**\n       * Event emitted when a **controlchange-sostenuto** MIDI message has been\n       * received.\n       *\n       * @event InputChannel#controlchange-sostenuto\n       *\n       * @type {object}\n       * @property {string} type `controlchange-sostenuto`\n       *\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {object} controller\n       * @property {object} controller.number The number of the controller.\n       * @property {object} controller.name The usual name or function of the controller.\n       * @property {object} controller.description A user-friendly representation of the\n       * controller's default function\n       * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n       * @property {number} value The value expressed as a float between 0 and 1.\n       * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n       */\n\n      /**\n       * Event emitted when a **controlchange-softpedal** MIDI message has been\n       * received.\n       *\n       * @event InputChannel#controlchange-softpedal\n       *\n       * @type {object}\n       * @property {string} type `controlchange-softpedal`\n       *\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {object} controller\n       * @property {object} controller.number The number of the controller.\n       * @property {object} controller.name The usual name or function of the controller.\n       * @property {object} controller.description A user-friendly representation of the\n       * controller's default function\n       * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n       * @property {number} value The value expressed as a float between 0 and 1.\n       * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n       */\n\n      /**\n       * Event emitted when a **controlchange-legatopedal** MIDI message has been\n       * received.\n       *\n       * @event InputChannel#controlchange-legatopedal\n       *\n       * @type {object}\n       * @property {string} type `controlchange-legatopedal`\n       *\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {object} controller\n       * @property {object} controller.number The number of the controller.\n       * @property {object} controller.name The usual name or function of the controller.\n       * @property {object} controller.description A user-friendly representation of the\n       * controller's default function\n       * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n       * @property {number} value The value expressed as a float between 0 and 1.\n       * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n       */\n\n      /**\n       * Event emitted when a **controlchange-hold2** MIDI message has been\n       * received.\n       *\n       * @event InputChannel#controlchange-hold2\n       *\n       * @type {object}\n       * @property {string} type `controlchange-hold2`\n       *\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {object} controller\n       * @property {object} controller.number The number of the controller.\n       * @property {object} controller.name The usual name or function of the controller.\n       * @property {object} controller.description A user-friendly representation of the\n       * controller's default function\n       * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n       * @property {number} value The value expressed as a float between 0 and 1.\n       * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n       */\n\n      /**\n       * Event emitted when a **controlchange-soundvariation** MIDI message has been\n       * received.\n       *\n       * @event InputChannel#controlchange-soundvariation\n       *\n       * @type {object}\n       * @property {string} type `controlchange-soundvariation`\n       *\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {object} controller\n       * @property {object} controller.number The number of the controller.\n       * @property {object} controller.name The usual name or function of the controller.\n       * @property {object} controller.description A user-friendly representation of the\n       * controller's default function\n       * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n       * @property {number} value The value expressed as a float between 0 and 1.\n       * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n       */\n\n      /**\n       * Event emitted when a **controlchange-resonance** MIDI message has been\n       * received.\n       *\n       * @event InputChannel#controlchange-resonance\n       *\n       * @type {object}\n       * @property {string} type `controlchange-resonance`\n       *\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {object} controller\n       * @property {object} controller.number The number of the controller.\n       * @property {object} controller.name The usual name or function of the controller.\n       * @property {object} controller.description A user-friendly representation of the\n       * controller's default function\n       * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n       * @property {number} value The value expressed as a float between 0 and 1.\n       * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n       */\n\n      /**\n       * Event emitted when a **controlchange-releasetime** MIDI message has been\n       * received.\n       *\n       * @event InputChannel#controlchange-releasetime\n       *\n       * @type {object}\n       * @property {string} type `controlchange-releasetime`\n       *\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {object} controller\n       * @property {object} controller.number The number of the controller.\n       * @property {object} controller.name The usual name or function of the controller.\n       * @property {object} controller.description A user-friendly representation of the\n       * controller's default function\n       * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n       * @property {number} value The value expressed as a float between 0 and 1.\n       * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n       */\n\n      /**\n       * Event emitted when a **controlchange-attacktime** MIDI message has been\n       * received.\n       *\n       * @event InputChannel#controlchange-attacktime\n       *\n       * @type {object}\n       * @property {string} type `controlchange-attacktime`\n       *\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {object} controller\n       * @property {object} controller.number The number of the controller.\n       * @property {object} controller.name The usual name or function of the controller.\n       * @property {object} controller.description A user-friendly representation of the\n       * controller's default function\n       * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n       * @property {number} value The value expressed as a float between 0 and 1.\n       * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n       */\n\n      /**\n       * Event emitted when a **controlchange-brightness** MIDI message has been\n       * received.\n       *\n       * @event InputChannel#controlchange-brightness\n       *\n       * @type {object}\n       * @property {string} type `controlchange-brightness`\n       *\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {object} controller\n       * @property {object} controller.number The number of the controller.\n       * @property {object} controller.name The usual name or function of the controller.\n       * @property {object} controller.description A user-friendly representation of the\n       * controller's default function\n       * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n       * @property {number} value The value expressed as a float between 0 and 1.\n       * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n       */\n\n      /**\n       * Event emitted when a **controlchange-decaytime** MIDI message has been\n       * received.\n       *\n       * @event InputChannel#controlchange-decaytime\n       *\n       * @type {object}\n       * @property {string} type `controlchange-decaytime`\n       *\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {object} controller\n       * @property {object} controller.number The number of the controller.\n       * @property {object} controller.name The usual name or function of the controller.\n       * @property {object} controller.description A user-friendly representation of the\n       * controller's default function\n       * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n       * @property {number} value The value expressed as a float between 0 and 1.\n       * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n       */\n\n      /**\n       * Event emitted when a **controlchange-vibratorate** MIDI message has been\n       * received.\n       *\n       * @event InputChannel#controlchange-vibratorate\n       *\n       * @type {object}\n       * @property {string} type `controlchange-vibratorate`\n       *\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {object} controller\n       * @property {object} controller.number The number of the controller.\n       * @property {object} controller.name The usual name or function of the controller.\n       * @property {object} controller.description A user-friendly representation of the\n       * controller's default function\n       * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n       * @property {number} value The value expressed as a float between 0 and 1.\n       * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n       */\n\n      /**\n       * Event emitted when a **controlchange-vibratodepth** MIDI message has been\n       * received.\n       *\n       * @event InputChannel#controlchange-vibratodepth\n       *\n       * @type {object}\n       * @property {string} type `controlchange-vibratodepth`\n       *\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {object} controller\n       * @property {object} controller.number The number of the controller.\n       * @property {object} controller.name The usual name or function of the controller.\n       * @property {object} controller.description A user-friendly representation of the\n       * controller's default function\n       * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n       * @property {number} value The value expressed as a float between 0 and 1.\n       * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n       */\n\n      /**\n       * Event emitted when a **controlchange-vibratodelay** MIDI message has been\n       * received.\n       *\n       * @event InputChannel#controlchange-vibratodelay\n       *\n       * @type {object}\n       * @property {string} type `controlchange-vibratodelay`\n       *\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {object} controller\n       * @property {object} controller.number The number of the controller.\n       * @property {object} controller.name The usual name or function of the controller.\n       * @property {object} controller.description A user-friendly representation of the\n       * controller's default function\n       * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n       * @property {number} value The value expressed as a float between 0 and 1.\n       * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n       */\n\n      /**\n       * Event emitted when a **controlchange-generalpurposecontroller5** MIDI message has been\n       * received.\n       *\n       * @event InputChannel#controlchange-generalpurposecontroller5\n       *\n       * @type {object}\n       * @property {string} type `controlchange-generalpurposecontroller5`\n       *\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {object} controller\n       * @property {object} controller.number The number of the controller.\n       * @property {object} controller.name The usual name or function of the controller.\n       * @property {object} controller.description A user-friendly representation of the\n       * controller's default function\n       * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n       * @property {number} value The value expressed as a float between 0 and 1.\n       * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n       */\n\n      /**\n       * Event emitted when a **controlchange-generalpurposecontroller6** MIDI message has been\n       * received.\n       *\n       * @event InputChannel#controlchange-generalpurposecontroller6\n       *\n       * @type {object}\n       * @property {string} type `controlchange-generalpurposecontroller6`\n       *\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {object} controller\n       * @property {object} controller.number The number of the controller.\n       * @property {object} controller.name The usual name or function of the controller.\n       * @property {object} controller.description A user-friendly representation of the\n       * controller's default function\n       * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n       * @property {number} value The value expressed as a float between 0 and 1.\n       * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n       */\n\n      /**\n       * Event emitted when a **controlchange-generalpurposecontroller7** MIDI message has been\n       * received.\n       *\n       * @event InputChannel#controlchange-generalpurposecontroller7\n       *\n       * @type {object}\n       * @property {string} type `controlchange-generalpurposecontroller7`\n       *\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {object} controller\n       * @property {object} controller.number The number of the controller.\n       * @property {object} controller.name The usual name or function of the controller.\n       * @property {object} controller.description A user-friendly representation of the\n       * controller's default function\n       * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n       * @property {number} value The value expressed as a float between 0 and 1.\n       * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n       */\n\n      /**\n       * Event emitted when a **controlchange-generalpurposecontroller8** MIDI message has been\n       * received.\n       *\n       * @event InputChannel#controlchange-generalpurposecontroller8\n       *\n       * @type {object}\n       * @property {string} type `controlchange-generalpurposecontroller8`\n       *\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {object} controller\n       * @property {object} controller.number The number of the controller.\n       * @property {object} controller.name The usual name or function of the controller.\n       * @property {object} controller.description A user-friendly representation of the\n       * controller's default function\n       * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n       * @property {number} value The value expressed as a float between 0 and 1.\n       * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n       */\n\n      /**\n       * Event emitted when a **controlchange-portamentocontrol** MIDI message has been\n       * received.\n       *\n       * @event InputChannel#controlchange-portamentocontrol\n       *\n       * @type {object}\n       * @property {string} type `controlchange-portamentocontrol`\n       *\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {object} controller\n       * @property {object} controller.number The number of the controller.\n       * @property {object} controller.name The usual name or function of the controller.\n       * @property {object} controller.description A user-friendly representation of the\n       * controller's default function\n       * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n       * @property {number} value The value expressed as a float between 0 and 1.\n       * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n       */\n\n      /**\n       * Event emitted when a **controlchange-highresolutionvelocityprefix** MIDI message has been\n       * received.\n       *\n       * @event InputChannel#controlchange-highresolutionvelocityprefix\n       *\n       * @type {object}\n       * @property {string} type `controlchange-highresolutionvelocityprefix`\n       *\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {object} controller\n       * @property {object} controller.number The number of the controller.\n       * @property {object} controller.name The usual name or function of the controller.\n       * @property {object} controller.description A user-friendly representation of the\n       * controller's default function\n       * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n       * @property {number} value The value expressed as a float between 0 and 1.\n       * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n       */\n\n      /**\n       * Event emitted when a **controlchange-effect1depth** MIDI message has been\n       * received.\n       *\n       * @event InputChannel#controlchange-effect1depth\n       *\n       * @type {object}\n       * @property {string} type `controlchange-effect1depth`\n       *\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {object} controller\n       * @property {object} controller.number The number of the controller.\n       * @property {object} controller.name The usual name or function of the controller.\n       * @property {object} controller.description A user-friendly representation of the\n       * controller's default function\n       * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n       * @property {number} value The value expressed as a float between 0 and 1.\n       * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n       */\n\n      /**\n       * Event emitted when a **controlchange-effect2depth** MIDI message has been\n       * received.\n       *\n       * @event InputChannel#controlchange-effect2depth\n       *\n       * @type {object}\n       * @property {string} type `controlchange-effect2depth`\n       *\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {object} controller\n       * @property {object} controller.number The number of the controller.\n       * @property {object} controller.name The usual name or function of the controller.\n       * @property {object} controller.description A user-friendly representation of the\n       * controller's default function\n       * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n       * @property {number} value The value expressed as a float between 0 and 1.\n       * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n       */\n\n      /**\n       * Event emitted when a **controlchange-effect3depth** MIDI message has been\n       * received.\n       *\n       * @event InputChannel#controlchange-effect3depth\n       *\n       * @type {object}\n       * @property {string} type `controlchange-effect3depth`\n       *\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {object} controller\n       * @property {object} controller.number The number of the controller.\n       * @property {object} controller.name The usual name or function of the controller.\n       * @property {object} controller.description A user-friendly representation of the\n       * controller's default function\n       * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n       * @property {number} value The value expressed as a float between 0 and 1.\n       * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n       */\n\n      /**\n       * Event emitted when a **controlchange-effect4depth** MIDI message has been\n       * received.\n       *\n       * @event InputChannel#controlchange-effect4depth\n       *\n       * @type {object}\n       * @property {string} type `controlchange-effect4depth`\n       *\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {object} controller\n       * @property {object} controller.number The number of the controller.\n       * @property {object} controller.name The usual name or function of the controller.\n       * @property {object} controller.description A user-friendly representation of the\n       * controller's default function\n       * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n       * @property {number} value The value expressed as a float between 0 and 1.\n       * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n       */\n\n      /**\n       * Event emitted when a **controlchange-effect5depth** MIDI message has been\n       * received.\n       *\n       * @event InputChannel#controlchange-effect5depth\n       *\n       * @type {object}\n       * @property {string} type `controlchange-effect5depth`\n       *\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {object} controller\n       * @property {object} controller.number The number of the controller.\n       * @property {object} controller.name The usual name or function of the controller.\n       * @property {object} controller.description A user-friendly representation of the\n       * controller's default function\n       * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n       * @property {number} value The value expressed as a float between 0 and 1.\n       * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n       */\n\n      /**\n       * Event emitted when a **controlchange-dataincrement** MIDI message has been\n       * received.\n       *\n       * @event InputChannel#controlchange-dataincrement\n       *\n       * @type {object}\n       * @property {string} type `controlchange-dataincrement`\n       *\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {object} controller\n       * @property {object} controller.number The number of the controller.\n       * @property {object} controller.name The usual name or function of the controller.\n       * @property {object} controller.description A user-friendly representation of the\n       * controller's default function\n       * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n       * @property {number} value The value expressed as a float between 0 and 1.\n       * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n       */\n\n      /**\n       * Event emitted when a **controlchange-datadecrement** MIDI message has been\n       * received.\n       *\n       * @event InputChannel#controlchange-datadecrement\n       *\n       * @type {object}\n       * @property {string} type `controlchange-datadecrement`\n       *\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {object} controller\n       * @property {object} controller.number The number of the controller.\n       * @property {object} controller.name The usual name or function of the controller.\n       * @property {object} controller.description A user-friendly representation of the\n       * controller's default function\n       * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n       * @property {number} value The value expressed as a float between 0 and 1.\n       * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n       */\n\n      /**\n       * Event emitted when a **controlchange-nonregisteredparameterfine** MIDI message has been\n       * received.\n       *\n       * @event InputChannel#controlchange-nonregisteredparameterfine\n       *\n       * @type {object}\n       * @property {string} type `controlchange-nonregisteredparameterfine`\n       *\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {object} controller\n       * @property {object} controller.number The number of the controller.\n       * @property {object} controller.name The usual name or function of the controller.\n       * @property {object} controller.description A user-friendly representation of the\n       * controller's default function\n       * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n       * @property {number} value The value expressed as a float between 0 and 1.\n       * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n       */\n\n      /**\n       * Event emitted when a **controlchange-nonregisteredparametercoarse** MIDI message has been\n       * received.\n       *\n       * @event InputChannel#controlchange-nonregisteredparametercoarse\n       *\n       * @type {object}\n       * @property {string} type `controlchange-nonregisteredparametercoarse`\n       *\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {object} controller\n       * @property {object} controller.number The number of the controller.\n       * @property {object} controller.name The usual name or function of the controller.\n       * @property {object} controller.description A user-friendly representation of the\n       * controller's default function\n       * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n       * @property {number} value The value expressed as a float between 0 and 1.\n       * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n       */\n\n      /**\n       * Event emitted when a **controlchange-registeredparameterfine** MIDI message has been\n       * received.\n       *\n       * @event InputChannel#controlchange-registeredparameterfine\n       *\n       * @type {object}\n       * @property {string} type `controlchange-registeredparameterfine`\n       *\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {object} controller\n       * @property {object} controller.number The number of the controller.\n       * @property {object} controller.name The usual name or function of the controller.\n       * @property {object} controller.description A user-friendly representation of the\n       * controller's default function\n       * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n       * @property {number} value The value expressed as a float between 0 and 1.\n       * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n       */\n\n      /**\n       * Event emitted when a **controlchange-registeredparametercoarse** MIDI message has been\n       * received.\n       *\n       * @event InputChannel#controlchange-registeredparametercoarse\n       *\n       * @type {object}\n       * @property {string} type `controlchange-registeredparametercoarse`\n       *\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {object} controller\n       * @property {object} controller.number The number of the controller.\n       * @property {object} controller.name The usual name or function of the controller.\n       * @property {object} controller.description A user-friendly representation of the\n       * controller's default function\n       * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n       * @property {number} value The value expressed as a float between 0 and 1.\n       * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n       */\n\n      /**\n       * Event emitted when a **controlchange-allsoundoff** MIDI message has been\n       * received.\n       *\n       * @event InputChannel#controlchange-allsoundoff\n       *\n       * @type {object}\n       * @property {string} type `controlchange-allsoundoff`\n       *\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {object} controller\n       * @property {object} controller.number The number of the controller.\n       * @property {object} controller.name The usual name or function of the controller.\n       * @property {object} controller.description A user-friendly representation of the\n       * controller's default function\n       * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n       * @property {number} value The value expressed as a float between 0 and 1.\n       * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n       */\n\n      /**\n       * Event emitted when a **controlchange-resetallcontrollers** MIDI message has been\n       * received.\n       *\n       * @event InputChannel#controlchange-resetallcontrollers\n       *\n       * @type {object}\n       * @property {string} type `controlchange-resetallcontrollers`\n       *\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {object} controller\n       * @property {object} controller.number The number of the controller.\n       * @property {object} controller.name The usual name or function of the controller.\n       * @property {object} controller.description A user-friendly representation of the\n       * controller's default function\n       * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n       * @property {number} value The value expressed as a float between 0 and 1.\n       * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n       */\n\n      /**\n       * Event emitted when a **controlchange-localcontrol** MIDI message has been\n       * received.\n       *\n       * @event InputChannel#controlchange-localcontrol\n       *\n       * @type {object}\n       * @property {string} type `controlchange-localcontrol`\n       *\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {object} controller\n       * @property {object} controller.number The number of the controller.\n       * @property {object} controller.name The usual name or function of the controller.\n       * @property {object} controller.description A user-friendly representation of the\n       * controller's default function\n       * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n       * @property {number} value The value expressed as a float between 0 and 1.\n       * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n       */\n\n      /**\n       * Event emitted when a **controlchange-allnotesoff** MIDI message has been\n       * received.\n       *\n       * @event InputChannel#controlchange-allnotesoff\n       *\n       * @type {object}\n       * @property {string} type `controlchange-allnotesoff`\n       *\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {object} controller\n       * @property {object} controller.number The number of the controller.\n       * @property {object} controller.name The usual name or function of the controller.\n       * @property {object} controller.description A user-friendly representation of the\n       * controller's default function\n       * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n       * @property {number} value The value expressed as a float between 0 and 1.\n       * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n       */\n\n      /**\n       * Event emitted when a **controlchange-omnimodeoff** MIDI message has been\n       * received.\n       *\n       * @event InputChannel#controlchange-omnimodeoff\n       *\n       * @type {object}\n       * @property {string} type `controlchange-omnimodeoff`\n       *\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {object} controller\n       * @property {object} controller.number The number of the controller.\n       * @property {object} controller.name The usual name or function of the controller.\n       * @property {object} controller.description A user-friendly representation of the\n       * controller's default function\n       * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n       * @property {number} value The value expressed as a float between 0 and 1.\n       * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n       */\n\n      /**\n       * Event emitted when a **controlchange-omnimodeon** MIDI message has been\n       * received.\n       *\n       * @event InputChannel#controlchange-omnimodeon\n       *\n       * @type {object}\n       * @property {string} type `controlchange-omnimodeon`\n       *\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {object} controller\n       * @property {object} controller.number The number of the controller.\n       * @property {object} controller.name The usual name or function of the controller.\n       * @property {object} controller.description A user-friendly representation of the\n       * controller's default function\n       * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n       * @property {number} value The value expressed as a float between 0 and 1.\n       * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n       */\n\n      /**\n       * Event emitted when a **controlchange-monomodeon** MIDI message has been\n       * received.\n       *\n       * @event InputChannel#controlchange-monomodeon\n       *\n       * @type {object}\n       * @property {string} type `controlchange-monomodeon`\n       *\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {object} controller\n       * @property {object} controller.number The number of the controller.\n       * @property {object} controller.name The usual name or function of the controller.\n       * @property {object} controller.description A user-friendly representation of the\n       * controller's default function\n       * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n       * @property {number} value The value expressed as a float between 0 and 1.\n       * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n       */\n\n      /**\n       * Event emitted when a **controlchange-polymodeon** MIDI message has been\n       * received.\n       *\n       * @event InputChannel#controlchange-polymodeon\n       *\n       * @type {object}\n       * @property {string} type `controlchange-polymodeon`\n       *\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {object} controller\n       * @property {object} controller.number The number of the controller.\n       * @property {object} controller.name The usual name or function of the controller.\n       * @property {object} controller.description A user-friendly representation of the\n       * controller's default function\n       * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n       * @property {number} value The value expressed as a float between 0 and 1.\n       * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n       */\n\n      const namedEvent = Object.assign({}, event);\n      namedEvent.type = `${event.type}-` + Enumerations.CONTROL_CHANGE_MESSAGES[data1].name;\n      delete namedEvent.subtype;\n\n      // Dispatch controlchange-\"function\" events only if the \"function\" is defined (not the generic\n      // controllerXXX nomenclature)\n      if (namedEvent.type.indexOf(\"controller\") !== 0) {\n        this.emit(namedEvent.type, namedEvent);\n      }\n\n      // Trigger channel mode message events (if appropriate)\n      if (event.message.dataBytes[0] >= 120) this._parseChannelModeMessage(event);\n\n      // Parse the inbound event to see if its part of an RPN/NRPN sequence\n      if (\n        this.parameterNumberEventsEnabled &&\n        this._isRpnOrNrpnController(event.message.dataBytes[0])\n      ) {\n        this._parseEventForParameterNumber(event);\n      }\n\n    } else if (event.type === \"programchange\") {\n\n      /**\n       * Event emitted when a **program change** MIDI message has been received.\n       *\n       * @event InputChannel#programchange\n       *\n       * @type {object}\n       * @property {string} type `programchange`\n       *\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {number} value The value expressed as an integer between 0 and 127.\n       * @property {number} rawValue  The raw MIDI value expressed as an integer between 0 and 127.\n       */\n      event.value = data1;\n      event.rawValue = event.value;\n\n    } else if (event.type === \"channelaftertouch\") {\n\n      /**\n       * Event emitted when a control change MIDI message has been received.\n       *\n       * @event InputChannel#channelaftertouch\n       *\n       * @type {object}\n       * @property {string} type `channelaftertouch`\n       *\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {number} value The value expressed as a float between 0 and 1.\n       * @property {number} rawValue The raw MIDI value expressed as an integer between 0 and 127.\n       */\n      event.value = Utilities.from7bitToFloat(data1);\n      event.rawValue = data1;\n\n    } else if (event.type === \"pitchbend\") {\n\n      /**\n       * Event emitted when a pitch bend MIDI message has been received.\n       *\n       * @event InputChannel#pitchbend\n       *\n       * @type {object}\n       * @property {string} type `pitchbend`\n       *\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {number} value The value expressed as a float between 0 and 1.\n       * @property {number} rawValue The raw MIDI value expressed as an integer (between 0 and\n       * 16383).\n       */\n      event.value = ((data2 << 7) + data1 - 8192) / 8192;\n      event.rawValue = (data2 << 7) + data1;\n\n    } else {\n      event.type = \"unknownmessage\";\n    }\n\n    this.emit(event.type, event);\n\n  }\n\n  /**\n   * @param e {Object}\n   * @private\n   */\n  _parseChannelModeMessage(e) {\n\n    // Make a shallow copy of the incoming event so we can use it as the new event.\n    const event = Object.assign({}, e);\n    event.type = event.controller.name;\n\n    /**\n     * Event emitted when an \"all sound off\" channel-mode MIDI message has been received.\n     *\n     * @event InputChannel#allsoundoff\n     *\n     * @type {object}\n     * @property {string} type `allsoundoff`\n     *\n     * @property {InputChannel} target The object that dispatched the event.\n     * @property {Input} port The `Input` that triggered the event.\n     * @property {Message} message A [`Message`](Message) object containing information about the\n     * incoming MIDI message.\n     * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n     * milliseconds since the navigation start of the document).\n     */\n\n    /**\n     * Event emitted when a \"reset all controllers\" channel-mode MIDI message has been received.\n     *\n     * @event InputChannel#resetallcontrollers\n     *\n     * @type {object}\n     *\n     * @property {InputChannel} target The object that dispatched the event.\n     * @property {Input} port The `Input` that triggered the event.\n     * @property {Message} message A [`Message`](Message) object containing information about the\n     * incoming MIDI message.\n     * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n     * milliseconds since the navigation start of the document).\n     */\n\n    /**\n     * Event emitted when a \"local control\" channel-mode MIDI message has been received. The value\n     * property of the event is set to either `true` (local control on) of `false` (local control\n     * off).\n     *\n     * @event InputChannel#localcontrol\n     *\n     * @type {object}\n     * @property {string} type `localcontrol`\n     *\n     * @property {InputChannel} target The object that dispatched the event.\n     * @property {Input} port The `Input` that triggered the event.\n     * @property {Message} message A [`Message`](Message) object containing information about the\n     * incoming MIDI message.\n     * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n     * milliseconds since the navigation start of the document).\n     *\n     * @property {boolean} value For local control on, the value is `true`. For local control off,\n     * the value is `false`.\n     * @property {boolean} rawValue For local control on, the value is `127`. For local control off,\n     * the value is `0`.\n     */\n    if (event.type === \"localcontrol\") {\n      event.value = event.message.data[2] === 127 ? true : false;\n      event.rawValue = event.message.data[2];\n    }\n\n    /**\n     * Event emitted when an \"all notes off\" channel-mode MIDI message has been received.\n     *\n     * @event InputChannel#allnotesoff\n     *\n     * @type {object}\n     * @property {string} type `allnotesoff`\n     *\n     * @property {InputChannel} target The object that dispatched the event.\n     * @property {Input} port The `Input` that triggered the event.\n     * @property {Message} message A [`Message`](Message) object containing information about the\n     * incoming MIDI message.\n     * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n     * milliseconds since the navigation start of the document).\n     */\n\n    /**\n     * Event emitted when an \"omni mode\" channel-mode MIDI message has been received. The value\n     * property of the event is set to either `true` (omni mode on) of `false` (omni mode off).\n     *\n     * @event InputChannel#omnimode\n     *\n     * @type {object}\n     * @property {string} type `\"omnimode\"`\n     *\n     * @property {InputChannel} target The object that dispatched the event.\n     * @property {Input} port The `Input` that triggered the event.\n     * @property {Message} message A [`Message`](Message) object containing information about the\n     * incoming MIDI message.\n     * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n     * milliseconds since the navigation start of the document).\n     *\n     * @property {boolean} value The value is `true` for omni mode on and false for omni mode off.\n     * @property {boolean} rawValue The raw MIDI value\n     */\n    if (event.type === \"omnimodeon\") {\n      event.type = \"omnimode\";\n      event.value = true;\n      event.rawValue = event.message.data[2];\n    } else if (event.type === \"omnimodeoff\") {\n      event.type = \"omnimode\";\n      event.value = false;\n      event.rawValue = event.message.data[2];\n    }\n\n\n    /**\n     * Event emitted when a \"mono/poly mode\" MIDI message has been received. The value property of\n     * the event is set to either `true` (mono mode on / poly mode off) or `false` (mono mode off /\n     * poly mode on).\n     *\n     * @event InputChannel#monomode\n     *\n     * @type {object}\n     * @property {string} type `monomode`\n     *\n     * @property {InputChannel} target The object that dispatched the event.\n     * @property {Input} port The `Input` that triggered the event.\n     * @property {Message} message A [`Message`](Message) object containing information about the\n     * incoming MIDI message.\n     * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n     * milliseconds since the navigation start of the document).\n     *\n     * @property {boolean} value The value is `true` for omni mode on and false for omni mode off.\n     * @property {boolean} rawValue The raw MIDI value\n     */\n    if (event.type === \"monomodeon\") {\n      event.type = \"monomode\";\n      event.value = true;\n      event.rawValue = event.message.data[2];\n    } else if (event.type === \"polymodeon\") {\n      event.type = \"monomode\";\n      event.value = false;\n      event.rawValue = event.message.data[2];\n    }\n\n    this.emit(event.type, event);\n\n  }\n\n  /**\n   * Parses inbound events to identify RPN/NRPN sequences.\n   * @param e Event\n   * @private\n   */\n  _parseEventForParameterNumber(event) {\n\n    // To make it more legible\n    const controller = event.message.dataBytes[0];\n    const value = event.message.dataBytes[1];\n\n    // A. Check if the message is the start of an RPN (101) or NRPN (99) parameter declaration.\n    if (controller === 99 || controller === 101) {\n\n      this._nrpnBuffer = [];\n      this._rpnBuffer = [];\n\n      if (controller === 99) {                          // 99\n        this._nrpnBuffer = [event.message];\n      } else {                                          // 101\n        // 127 is a reset so we ignore it\n        if (value !== 127) this._rpnBuffer = [event.message];\n      }\n\n    // B. Check if the message is the end of an RPN (100) or NRPN (98) parameter declaration.\n    } else if (controller === 98 || controller === 100) {\n\n      if (controller === 98) {                          // 98\n\n        // Flush the other buffer (they are mutually exclusive)\n        this._rpnBuffer = [];\n\n        // Check if we are in sequence\n        if (this._nrpnBuffer.length === 1) {\n          this._nrpnBuffer.push(event.message);\n        } else {\n          this._nrpnBuffer = []; // out of sequence\n        }\n\n      } else {                                          // 100\n\n        // Flush the other buffer (they are mutually exclusive)\n        this._nrpnBuffer = [];\n\n        // 127 is a reset so we ignore it\n        if (this._rpnBuffer.length === 1 && value !== 127) {\n          this._rpnBuffer.push(event.message);\n        } else {\n          this._rpnBuffer = []; // out of sequence or reset\n        }\n\n      }\n\n    // C. Check if the message is for data entry (6, 38, 96 or 97). Those messages trigger events.\n    } else if (\n      controller === 6 ||\n      controller === 38 ||\n      controller === 96 ||\n      controller === 97\n    ) {\n\n      if (this._rpnBuffer.length === 2) {\n        this._dispatchParameterNumberEvent(\n          \"rpn\",\n          this._rpnBuffer[0].dataBytes[1],\n          this._rpnBuffer[1].dataBytes[1],\n          event\n        );\n      } else if (this._nrpnBuffer.length === 2) {\n        this._dispatchParameterNumberEvent(\n          \"nrpn\",\n          this._nrpnBuffer[0].dataBytes[1],\n          this._nrpnBuffer[1].dataBytes[1],\n          event\n        );\n      } else {\n        this._nrpnBuffer = [];\n        this._rpnBuffer = [];\n      }\n\n    }\n\n  }\n\n  /**\n   * Indicates whether the specified controller can be part of an RPN or NRPN sequence\n   * @param controller\n   * @returns {boolean}\n   * @private\n   */\n  _isRpnOrNrpnController(controller) {\n\n    return controller === 6 ||\n      controller === 38 ||\n      controller === 96 ||\n      controller === 97 ||\n      controller === 98 ||\n      controller === 99 ||\n      controller === 100 ||\n      controller === 101;\n\n  }\n\n  /**\n   * @private\n   */\n  _dispatchParameterNumberEvent(type, paramMsb, paramLsb, e) {\n\n    type = type === \"nrpn\" ? \"nrpn\" : \"rpn\";\n\n    /**\n     * Event emitted when an **RPN data entry coarse** message is received on the input. The\n     * specific parameter to which the message applies can be found in the event's `parameter`\n     * property. It is one of the ones defined in\n     * [`Enumerations.REGISTERED_PARAMETERS`](Enumerations#REGISTERED_PARAMETERS).\n     *\n     * @event InputChannel#rpn-dataentrycoarse\n     *\n     * @type {object}\n     *\n     * @property {string} type `rpn-dataentrycoarse`\n     * @property {InputChannel} target The object that dispatched the event.\n     * @property {Input} port The `Input` that triggered the event.\n     * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n     * milliseconds since the navigation start of the document).\n     * @property {Message} message A [`Message`](Message) object containing information about the\n     * incoming MIDI message.\n     * @property {string} parameter The registered parameter's name\n     * @property {number} parameterMsb The MSB portion of the registered parameter (0-127)\n     * @property {number} parameterLsb: The LSB portion of the registered parameter (0-127)\n     * @property {number} value The received value as a normalized number between 0 and 1.\n     * @property {number} rawValue The value as received (0-127)\n     */\n\n    /**\n     * Event emitted when an **RPN data entry fine** message is received on the input. The\n     * specific parameter to which the message applies can be found in the event's `parameter`\n     * property. It is one of the ones defined in\n     * [`EnumerationsREGISTERED_PARAMETERS`](Enumerations#REGISTERED_PARAMETERS).\n     *\n     * @event InputChannel#rpn-dataentryfine\n     *\n     * @type {object}\n     *\n     * @property {string} type `rpn-dataentryfine`\n     * @property {InputChannel} target The object that dispatched the event.\n     * @property {Input} port The `Input` that triggered the event.\n     * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n     * milliseconds since the navigation start of the document).\n     * @property {Message} message A [`Message`](Message) object containing information about the\n     * incoming MIDI message.\n     * @property {string} parameter The registered parameter's name\n     * @property {number} parameterMsb The MSB portion of the registered parameter (0-127)\n     * @property {number} parameterLsb: The LSB portion of the registered parameter (0-127)\n     * @property {number} value The received value as a normalized number between 0 and 1.\n     * @property {number} rawValue The value as received (0-127)\n     */\n\n    /**\n     * Event emitted when an **RPN data increment** message is received on the input. The specific\n     * parameter to which the message applies can be found in the event's `parameter` property. It\n     * is one of the ones defined in\n     * [`Enumerations.REGISTERED_PARAMETERS`](Enumerations#REGISTERED_PARAMETERS).\n     *\n     * @event InputChannel#rpn-dataincrement\n     *\n     * @type {object}\n     *\n     * @property {string} type `rpn-dataincrement`\n     * @property {InputChannel} target The object that dispatched the event.\n     * @property {Input} port The `Input` that triggered the event.\n     * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n     * milliseconds since the navigation start of the document).\n     * @property {Message} message A [`Message`](Message) object containing information about the\n     * incoming MIDI message.\n     * @property {string} parameter The registered parameter's name\n     * @property {number} parameterMsb The MSB portion of the registered parameter (0-127)\n     * @property {number} parameterLsb: The LSB portion of the registered parameter (0-127)\n     * @property {number} value The received value as a normalized number between 0 and 1.\n     * @property {number} rawValue The value as received (0-127)\n     */\n\n    /**\n     * Event emitted when an **RPN data decrement** message is received on the input. The specific\n     * parameter to which the message applies can be found in the event's `parameter` property. It\n     * is one of the ones defined in\n     * [`Enumerations.REGISTERED_PARAMETERS`](Enumerations#REGISTERED_PARAMETERS).\n     *\n     * @event InputChannel#rpn-datadecrement\n     *\n     * @type {object}\n     *\n     * @property {string} type `rpn-datadecrement`\n     * @property {InputChannel} target The object that dispatched the event.\n     * @property {Input} port The `Input` that triggered the event.\n     * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n     * milliseconds since the navigation start of the document).\n     * @property {Message} message A [`Message`](Message) object containing information about the\n     * incoming MIDI message.\n     * @property {string} parameter The registered parameter's name\n     * @property {number} parameterMsb The MSB portion of the registered parameter (0-127)\n     * @property {number} parameterLsb: The LSB portion of the registered parameter (0-127)\n     * @property {number} value The received value as a normalized number between 0 and 1.\n     * @property {number} rawValue The value as received (0-127)\n     */\n\n    /**\n     * Event emitted when an **NRPN data entry coarse** message is received on the input. The\n     * specific parameter to which the message applies can be found in the event's `parameter`\n     * property. It is one of the ones defined in\n     * [`Enumerations.REGISTERED_PARAMETERS`](Enumerations#REGISTERED_PARAMETERS).\n     *\n     * @event InputChannel#nrpn-dataentrycoarse\n     *\n     * @type {object}\n     *\n     * @property {string} type `nrpn-dataentrycoarse`\n     * @property {InputChannel} target The object that dispatched the event.\n     * @property {Input} port The `Input` that triggered the event.\n     * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n     * milliseconds since the navigation start of the document).\n     * @property {Message} message A [`Message`](Message) object containing information about the\n     * incoming MIDI message.\n     * @property {string} parameter The registered parameter's name\n     * @property {number} parameterMsb The MSB portion of the registered parameter (0-127)\n     * @property {number} parameterLsb: The LSB portion of the registered parameter (0-127)\n     * @property {number} value The received value as a normalized number between 0 and 1.\n     * @property {number} rawValue The value as received (0-127)\n     */\n\n    /**\n     * Event emitted when an **NRPN data entry fine** message is received on the input. The\n     * specific parameter to which the message applies can be found in the event's `parameter`\n     * property. It is one of the ones defined in\n     * [`Enumerations.REGISTERED_PARAMETERS`](Enumerations#REGISTERED_PARAMETERS).\n     *\n     * @event InputChannel#nrpn-dataentryfine\n     *\n     * @type {object}\n     *\n     * @property {string} type `nrpn-dataentryfine`\n     * @property {InputChannel} target The object that dispatched the event.\n     * @property {Input} port The `Input` that triggered the event.\n     * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n     * milliseconds since the navigation start of the document).\n     * @property {Message} message A [`Message`](Message) object containing information about the\n     * incoming MIDI message.\n     * @property {string} parameter The registered parameter's name\n     * @property {number} parameterMsb The MSB portion of the registered parameter (0-127)\n     * @property {number} parameterLsb: The LSB portion of the registered parameter (0-127)\n     * @property {number} value The received value as a normalized number between 0 and 1.\n     * @property {number} rawValue The value as received (0-127)\n     */\n\n    /**\n     * Event emitted when an **NRPN data increment** message is received on the input. The specific\n     * parameter to which the message applies can be found in the event's `parameter` property. It\n     * is one of the ones defined in\n     * [`Enumerations.REGISTERED_PARAMETERS`](Enumerations#REGISTERED_PARAMETERS).\n     *\n     * @event InputChannel#nrpn-dataincrement\n     *\n     * @type {object}\n     *\n     * @property {string} type `nrpn-dataincrement`\n     * @property {InputChannel} target The object that dispatched the event.\n     * @property {Input} port The `Input` that triggered the event.\n     * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n     * milliseconds since the navigation start of the document).\n     * @property {Message} message A [`Message`](Message) object containing information about the\n     * incoming MIDI message.\n     * @property {string} parameter The registered parameter's name\n     * @property {number} parameterMsb The MSB portion of the registered parameter (0-127)\n     * @property {number} parameterLsb: The LSB portion of the registered parameter (0-127)\n     * @property {number} value The received value as a normalized number between 0 and 1.\n     * @property {number} rawValue The value as received (0-127)\n     */\n\n    /**\n     * Event emitted when an **NRPN data decrement** message is received on the input. The specific\n     * parameter to which the message applies can be found in the event's `parameter` property. It\n     * is one of the ones defined in\n     * [`Enumerations.REGISTERED_PARAMETERS`](Enumerations#REGISTERED_PARAMETERS).\n     *\n     * @event InputChannel#nrpn-datadecrement\n     *\n     * @type {object}\n     *\n     * @property {string} type `nrpn-datadecrement`\n     * @property {InputChannel} target The object that dispatched the event.\n     * @property {Input} port The `Input` that triggered the event.\n     * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n     * milliseconds since the navigation start of the document).\n     * @property {Message} message A [`Message`](Message) object containing information about the\n     * incoming MIDI message.\n     * @property {string} parameter The registered parameter's name\n     * @property {number} parameterMsb The MSB portion of the registered parameter (0-127)\n     * @property {number} parameterLsb: The LSB portion of the registered parameter (0-127)\n     * @property {number} value The received value as a normalized number between 0 and 1.\n     * @property {number} rawValue The value as received (0-127)\n     */\n\n    const event = {\n      target: e.target,\n      timestamp: e.timestamp,\n      message: e.message,\n      parameterMsb: paramMsb,\n      parameterLsb: paramLsb,\n      value: Utilities.from7bitToFloat(e.message.dataBytes[1]),\n      rawValue: e.message.dataBytes[1],\n    };\n\n    // Identify the parameter (by name for RPN and by number for NRPN)\n    if (type === \"rpn\") {\n\n      event.parameter = Object.keys(Enumerations.REGISTERED_PARAMETERS).find(key => {\n        return Enumerations.REGISTERED_PARAMETERS[key][0] === paramMsb &&\n          Enumerations.REGISTERED_PARAMETERS[key][1] === paramLsb;\n      });\n\n    } else {\n      event.parameter = (paramMsb << 7) + paramLsb;\n    }\n\n    // Type and subtype\n    const subtype = Enumerations.CONTROL_CHANGE_MESSAGES[e.message.dataBytes[0]].name;\n\n    // Emit specific event\n    event.type = `${type}-${subtype}`;\n    this.emit(event.type, event);\n\n    // Begin Legacy Block (remove in v4)\n    const legacyEvent = Object.assign({}, event);\n    if (legacyEvent.type === \"nrpn-dataincrement\") {\n      legacyEvent.type = \"nrpn-databuttonincrement\";\n    } else if (legacyEvent.type === \"nrpn-datadecrement\") {\n      legacyEvent.type = \"nrpn-databuttondecrement\";\n    } else if (legacyEvent.type === \"rpn-dataincrement\") {\n      legacyEvent.type = \"rpn-databuttonincrement\";\n    } else if (legacyEvent.type === \"rpn-datadecrement\") {\n      legacyEvent.type = \"rpn-databuttondecrement\";\n    }\n    this.emit(legacyEvent.type, legacyEvent);\n    // End Legacy Block\n\n    /**\n     * Event emitted when any NRPN message is received on the input. There are four subtypes of NRPN\n     * messages:\n     *\n     *   * `nrpn-dataentrycoarse`\n     *   * `nrpn-dataentryfine`\n     *   * `nrpn-dataincrement`\n     *   * `nrpn-datadecrement`\n     *\n     * The parameter to which the message applies can be found in the event's `parameter` property.\n     *\n     * @event InputChannel#nrpn\n     *\n     * @type {object}\n     *\n     * @property {string} type `nrpn`\n     * @property {string} subtype The precise type of NRPN message that was received.\n     * @property {InputChannel} target The object that dispatched the event.\n     * @property {Input} port The `Input` that triggered the event.\n     * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n     * milliseconds since the navigation start of the document).\n     * @property {Message} message A [`Message`](Message) object containing information about the\n     * incoming MIDI message.\n     * @property {number} parameter The non-registered parameter number (0-16383)\n     * @property {number} parameterMsb The MSB portion of the non-registered parameter number\n     * (0-127)\n     * @property {number} parameterLsb: The LSB portion of the non-registered parameter number\n     * (0-127)\n     * @property {number} value The received value as a normalized number between 0 and 1.\n     * @property {number} rawValue The value as received (0-127)\n     */\n\n    /**\n     * Event emitted when any RPN message is received on the input. There are four subtypes of RPN\n     * messages:\n     *\n     *   * `rpn-dataentrycoarse`\n     *   * `rpn-dataentryfine`\n     *   * `rpn-dataincrement`\n     *   * `rpn-datadecrement`\n     *\n     * The parameter to which the message applies can be found in the event's `parameter` property.\n     * It is one of the ones defined in\n     * [`Enumerations.REGISTERED_PARAMETERS`](Enumerations#REGISTERED_PARAMETERS).\n     *\n     * @event InputChannel#rpn\n     *\n     * @type {object}\n     *\n     * @property {string} type `rpn`\n     * @property {string} subtype The precise type of RPN message that was received.\n     * @property {InputChannel} target The object that dispatched the event.\n     * @property {Input} port The `Input` that triggered the event.\n     * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n     * milliseconds since the navigation start of the document).\n     * @property {Message} message A [`Message`](Message) object containing information about the\n     * incoming MIDI message.\n     * @property {string} parameter The registered parameter's name\n     * @property {number} parameterMsb The MSB portion of the registered parameter (0-127)\n     * @property {number} parameterLsb: The LSB portion of the registered parameter (0-127)\n     * @property {number} value The received value as a normalized number between 0 and 1.\n     * @property {number} rawValue The value as received (0-127)\n     */\n\n    // Emit general event\n    event.type = type;\n    event.subtype = subtype;\n    this.emit(event.type, event);\n\n  }\n\n  /**\n   * @deprecated since version 3.\n   * @private\n   */\n  getChannelModeByNumber(number) {\n\n    if (wm.validation) {\n      console.warn(\n        \"The 'getChannelModeByNumber()' method has been moved to the 'Utilities' class.\"\n      );\n      number = Math.floor(number);\n    }\n\n    return Utilities.getChannelModeByNumber(number);\n\n  }\n\n  /**\n   * @deprecated since version 3.\n   * @private\n   */\n  getCcNameByNumber(number) {\n\n    if (wm.validation) {\n      console.warn(\n        \"The 'getCcNameByNumber()' method has been moved to the 'Utilities' class.\"\n      );\n      number = parseInt(number);\n      if ( !(number >= 0 && number <= 127) ) throw new RangeError(\"Invalid control change number.\");\n    }\n\n    return Utilities.getCcNameByNumber(number);\n\n  }\n\n  /**\n   * Returns the playing status of the specified note (`true` if the note is currently playing,\n   * `false` if it is not). The `note` parameter can be an unsigned integer (0-127), a note\n   * identifier (`\"C4\"`, `\"G#5\"`, etc.) or a [`Note`]{@link Note} object.\n   *\n   * IF the note is specified using an integer (0-127), no octave offset will be applied.\n   *\n   * @param {number|string|Note} note The note to get the state for. The\n   * [`octaveOffset`](#octaveOffset) (channel, input and global) will be factored in for note\n   * identifiers and [`Note`]{@link Note} objects.\n   * @returns {boolean}\n   * @since version 3.0.0\n   */\n  getNoteState(note) {\n\n    // If it's a note object, we simply use the identifier\n    if (note instanceof Note) note = note.identifier;\n\n    const number = Utilities.guessNoteNumber(\n      note,\n      wm.octaveOffset + this.input.octaveOffset + this.octaveOffset\n    );\n\n    return this.notesState[number];\n\n  }\n\n  /**\n   * An integer to offset the reported octave of incoming note-specific messages (`noteon`,\n   * `noteoff` and `keyaftertouch`). By default, middle C (MIDI note number 60) is placed on the 4th\n   * octave (C4).\n   *\n   * If, for example, `octaveOffset` is set to 2, MIDI note number 60 will be reported as C6. If\n   * `octaveOffset` is set to -1, MIDI note number 60 will be reported as C3.\n   *\n   * Note that this value is combined with the global offset value defined by\n   * [`WebMidi.octaveOffset`](WebMidi#octaveOffset) object and with the value defined on the parent\n   * input object with [`Input.octaveOffset`](Input#octaveOffset).\n   *\n   * @type {number}\n   *\n   * @since 3.0\n   */\n  get octaveOffset() {\n    return this._octaveOffset;\n  }\n  set octaveOffset(value) {\n\n    if (this.validation) {\n      value = parseInt(value);\n      if (isNaN(value)) throw new TypeError(\"The 'octaveOffset' property must be an integer.\");\n    }\n\n    this._octaveOffset = value;\n\n  }\n\n  /**\n   * The [`Input`](Input) this channel belongs to.\n   * @type {Input}\n   * @since 3.0\n   */\n  get input() {\n    return this._input;\n  }\n\n  /**\n   * This channel's MIDI number (1-16).\n   * @type {number}\n   * @since 3.0\n   */\n  get number() {\n    return this._number;\n  }\n\n  /**\n   * Whether RPN/NRPN events are parsed and dispatched.\n   * @type {boolean}\n   * @since 3.0\n   * @deprecated Use parameterNumberEventsEnabled instead.\n   * @private\n   */\n  get nrpnEventsEnabled() {\n    return this.parameterNumberEventsEnabled;\n  }\n  set nrpnEventsEnabled(value) {\n\n    if (this.validation) {\n      value = !!value;\n    }\n\n    this.parameterNumberEventsEnabled = value;\n\n  }\n\n}\n\n/**\n * The `Message` class represents a single MIDI message. It has several properties that make it\n * easy to make sense of the binary data it contains.\n *\n * @license Apache-2.0\n * @since 3.0.0\n */\nclass Message {\n\n  /**\n   * Creates a new `Message` object from raw MIDI data.\n   *\n   * @param {Uint8Array} data The raw data of the MIDI message as a\n   * [`Uint8Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array)\n   * of integers between `0` and `255`.\n   */\n  constructor(data) {\n\n    /**\n     * A\n     * [`Uint8Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array)\n     * containing the bytes of the MIDI message. Each byte is an integer between `0` and `255`.\n     *\n     * @type {Uint8Array}\n     * @readonly\n     */\n    this.rawData = data;\n\n    /**\n     * An array containing all the bytes of the MIDI message. Each byte is an integer between `0`\n     * and `255`.\n     *\n     * @type {number[]}\n     * @readonly\n     */\n    this.data = Array.from(this.rawData);\n\n    /**\n     * The MIDI status byte of the message as an integer between `0` and `255`.\n     *\n     * @type {number}\n     * @readonly\n     */\n    this.statusByte = this.rawData[0];\n\n    /**\n     * A\n     * [`Uint8Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array)\n     * of the data byte(s) of the MIDI message. When the message is a system exclusive message\n     * (sysex), `rawDataBytes` explicitly excludes the manufacturer ID and the sysex end byte so\n     * only the actual data is included.\n     *\n     * @type {Uint8Array}\n     * @readonly\n     */\n    this.rawDataBytes = this.rawData.slice(1);\n\n    /**\n     * An array of the the data byte(s) of the MIDI message (as opposed to the status byte). When\n     * the message is a system exclusive message (sysex), `dataBytes` explicitly excludes the\n     * manufacturer ID and the sysex end byte so only the actual data is included.\n     *\n     * @type {number[]}\n     * @readonly\n     */\n    this.dataBytes = this.data.slice(1);\n\n    /**\n     * A boolean indicating whether the MIDI message is a channel-specific message.\n     *\n     * @type {boolean}\n     * @readonly\n     */\n    this.isChannelMessage = false;\n\n    /**\n     * A boolean indicating whether the MIDI message is a system message (not specific to a\n     * channel).\n     *\n     * @type {boolean}\n     * @readonly\n     */\n    this.isSystemMessage = false;\n\n    /**\n     * An integer identifying the MIDI command. For channel-specific messages, the value is 4-bit\n     * and will be between `8` and `14`. For system messages, the value will be between `240` and\n     * `255`.\n     *\n     * @type {number}\n     * @readonly\n     */\n    this.command = undefined;\n\n    /**\n     * The MIDI channel number (`1` - `16`) that the message is targeting. This is only for\n     * channel-specific messages. For system messages, this will be left `undefined`.\n     *\n     * @type {number}\n     * @readonly\n     */\n    this.channel = undefined;\n\n    /**\n     * When the message is a system exclusive message (sysex), this property contains an array with\n     * either 1 or 3 entries that identify the manufacturer targeted by the message.\n     *\n     * To know how to translate these entries into manufacturer names, check out the official list:\n     * https://www.midi.org/specifications-old/item/manufacturer-id-numbers\n     *\n     * @type {number[]}\n     * @readonly\n     */\n    this.manufacturerId = undefined;\n\n    /**\n     * The type of message as a string (`\"noteon\"`, `\"controlchange\"`, `\"sysex\"`, etc.)\n     *\n     * @type {string}\n     * @readonly\n     */\n    this.type = undefined;\n\n    // Assign values to property that vary according to whether they are channel-specific or system\n    if (this.statusByte < 240) {\n      this.isChannelMessage = true;\n      this.command = this.statusByte >> 4;\n      this.channel = (this.statusByte & 0b00001111) + 1;\n    } else {\n      this.isSystemMessage = true;\n      this.command = this.statusByte;\n    }\n\n    // Assign type (depending on whether the message is channel-specific or system)\n    if (this.isChannelMessage) {\n      this.type = Utilities.getPropertyByValue(Enumerations.CHANNEL_MESSAGES, this.command);\n    } else if (this.isSystemMessage) {\n      this.type = Utilities.getPropertyByValue(Enumerations.SYSTEM_MESSAGES, this.command);\n    }\n\n    // When the message is a sysex message, we add a manufacturer property and strip out the id from\n    // dataBytes and rawDataBytes.\n    if (this.statusByte === Enumerations.SYSTEM_MESSAGES.sysex) {\n\n      if (this.dataBytes[0] === 0) {\n        this.manufacturerId = this.dataBytes.slice(0, 3);\n        this.dataBytes = this.dataBytes.slice(3, this.rawDataBytes.length - 1);\n        this.rawDataBytes = this.rawDataBytes.slice(3, this.rawDataBytes.length - 1);\n      } else {\n        this.manufacturerId = [this.dataBytes[0]];\n        this.dataBytes = this.dataBytes.slice(1, this.dataBytes.length - 1);\n        this.rawDataBytes = this.rawDataBytes.slice(1, this.rawDataBytes.length - 1);\n      }\n\n    }\n\n  }\n\n}\n\n/**\n * The `Input` class represents a single MIDI input port. This object is automatically instantiated\n * by the library according to the host's MIDI subsystem and does not need to be directly\n * instantiated. Instead, you can access all `Input` objects by referring to the\n * [`WebMidi.inputs`](WebMidi#inputs) array. You can also retrieve inputs by using methods such as\n * [`WebMidi.getInputByName()`](WebMidi#getInputByName) and\n * [`WebMidi.getInputById()`](WebMidi#getInputById).\n *\n * Note that a single MIDI device may expose several inputs and/or outputs.\n *\n * **Important**: the `Input` class does not directly fire channel-specific MIDI messages\n * (such as [`noteon`](InputChannel#event:noteon) or\n * [`controlchange`](InputChannel#event:controlchange), etc.). The [`InputChannel`](InputChannel)\n * object does that. However, you can still use the\n * [`Input.addListener()`](#addListener) method to listen to channel-specific events on multiple\n * [`InputChannel`](InputChannel) objects at once.\n *\n * @fires Input#opened\n * @fires Input#disconnected\n * @fires Input#closed\n * @fires Input#midimessage\n *\n * @fires Input#sysex\n * @fires Input#timecode\n * @fires Input#songposition\n * @fires Input#songselect\n * @fires Input#tunerequest\n * @fires Input#clock\n * @fires Input#start\n * @fires Input#continue\n * @fires Input#stop\n * @fires Input#activesensing\n * @fires Input#reset\n *\n * @fires Input#unknownmidimessage\n *\n * @extends EventEmitter\n * @license Apache-2.0\n */\nclass Input extends EventEmitter {\n\n  /**\n   * Creates an `Input` object.\n   *\n   * @param {MIDIInput} midiInput [`MIDIInput`](https://developer.mozilla.org/en-US/docs/Web/API/MIDIInput)\n   * object as provided by the MIDI subsystem (Web MIDI API).\n   */\n  constructor(midiInput) {\n\n    super();\n\n    /**\n     * Reference to the actual MIDIInput object\n     * @private\n     */\n    this._midiInput = midiInput;\n\n    /**\n     * @type {number}\n     * @private\n     */\n    this._octaveOffset = 0;\n\n    /**\n     * Array containing the 16 [`InputChannel`](InputChannel) objects available for this `Input`. The\n     * channels are numbered 1 through 16.\n     *\n     * @type {InputChannel[]}\n     */\n    this.channels = [];\n    for (let i = 1; i <= 16; i++) this.channels[i] = new InputChannel(this, i);\n\n    /**\n     * @type {Forwarder[]}\n     * @private\n     */\n    this._forwarders = [];\n\n    // Setup listeners\n    this._midiInput.onstatechange = this._onStateChange.bind(this);\n    this._midiInput.onmidimessage = this._onMidiMessage.bind(this);\n\n  }\n\n  /**\n   * Destroys the `Input` by removing all listeners, emptying the [`channels`](#channels) array and\n   * unlinking the MIDI subsystem. This is mostly for internal use.\n   *\n   * @returns {Promise<void>}\n   */\n  async destroy() {\n    this.removeListener();\n    this.channels.forEach(ch => ch.destroy());\n    this.channels = [];\n    this._forwarders = [];\n    if (this._midiInput) {\n      this._midiInput.onstatechange = null;\n      this._midiInput.onmidimessage = null;\n    }\n    await this.close();\n    this._midiInput = null;\n  }\n\n  /**\n   * Executed when a `\"statechange\"` event occurs.\n   *\n   * @param e\n   * @private\n   */\n  _onStateChange(e) {\n\n    let event = {\n      timestamp: wm.time,\n      target: this,\n      port: this // for consistency\n    };\n\n    if (e.port.connection === \"open\") {\n\n      /**\n       * Event emitted when the `Input` has been opened by calling the [`open()`]{@link #open}\n       * method.\n       *\n       * @event Input#opened\n       * @type {object}\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       * @property {string} type `opened`\n       * @property {Input} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       */\n      event.type = \"opened\";\n      this.emit(\"opened\", event);\n\n    } else if (e.port.connection === \"closed\" && e.port.state === \"connected\") {\n\n      /**\n       * Event emitted when the `Input` has been closed by calling the\n       * [`close()`]{@link #close} method.\n       *\n       * @event Input#closed\n       * @type {object}\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       * @property {string} type `closed`\n       * @property {Input} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       */\n      event.type = \"closed\";\n      this.emit(\"closed\", event);\n\n    } else if (e.port.connection === \"closed\" && e.port.state === \"disconnected\") {\n\n      /**\n       * Event emitted when the `Input` becomes unavailable. This event is typically fired\n       * when the MIDI device is unplugged.\n       *\n       * @event Input#disconnected\n       * @type {object}\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       * @property {string} type `disconnected`\n       * @property {Input} port Object with properties describing the {@link Input} that was\n       * disconnected. This is not the actual `Input` as it is no longer available.\n       * @property {Input} target The object that dispatched the event.\n       */\n      event.type = \"disconnected\";\n      event.port = {\n        connection: e.port.connection,\n        id: e.port.id,\n        manufacturer: e.port.manufacturer,\n        name: e.port.name,\n        state: e.port.state,\n        type: e.port.type\n      };\n      this.emit(\"disconnected\", event);\n\n    } else if (e.port.connection === \"pending\" && e.port.state === \"disconnected\") ; else {\n      console.warn(\"This statechange event was not caught: \", e.port.connection, e.port.state);\n    }\n\n  }\n\n  /**\n   * Executed when a `\"midimessage\"` event is received\n   * @param e\n   * @private\n   */\n  _onMidiMessage(e) {\n\n    // Create Message object from MIDI data\n    const message = new Message(e.data);\n\n    /**\n     * Event emitted when any MIDI message is received on an `Input`.\n     *\n     * @event Input#midimessage\n     *\n     * @type {object}\n     *\n     * @property {Input} port The `Input` that triggered the event.\n     * @property {Input} target The object that dispatched the event.\n     * @property {Message} message A [`Message`](Message) object containing information about the\n     * incoming MIDI message.\n     * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n     * milliseconds since the navigation start of the document).\n     * @property {string} type `midimessage`\n     *\n     * @since 2.1\n     */\n    const event = {\n      port: this,\n      target: this,\n      message: message,\n      timestamp: e.timeStamp,\n      type: \"midimessage\",\n\n      data: message.data,           // @deprecated (will be removed in v4)\n      rawData: message.data,        // @deprecated (will be removed in v4)\n      statusByte: message.data[0],  // @deprecated (will be removed in v4)\n      dataBytes: message.dataBytes  // @deprecated (will be removed in v4)\n    };\n\n    this.emit(\"midimessage\", event);\n\n    // Messages are forwarded to InputChannel if they are channel messages or parsed locally for\n    // system messages.\n    if (message.isSystemMessage) {           // system messages\n      this._parseEvent(event);\n    } else if (message.isChannelMessage) {   // channel messages\n      this.channels[message.channel]._processMidiMessageEvent(event);\n    }\n\n    // Forward message if forwarders have been defined\n    this._forwarders.forEach(forwarder => forwarder.forward(message));\n\n  }\n\n  /**\n   * @private\n   */\n  _parseEvent(e) {\n\n    // Make a shallow copy of the incoming event so we can use it as the new event.\n    const event = Object.assign({}, e);\n    event.type = event.message.type || \"unknownmidimessage\";\n\n    // Add custom property for 'songselect'\n    if (event.type === \"songselect\") {\n      event.song = e.data[1] + 1; // deprecated\n      event.value = e.data[1];\n      event.rawValue = event.value;\n    }\n\n    // Emit event\n    this.emit(event.type, event);\n\n  }\n\n  /**\n   * Opens the input for usage. This is usually unnecessary as the port is opened automatically when\n   * WebMidi is enabled.\n   *\n   * @returns {Promise<Input>} The promise is fulfilled with the `Input` object.\n   */\n  async open() {\n\n    // Explicitly opens the port for usage. This is not mandatory. When the port is not explicitly\n    // opened, it is implicitly opened (asynchronously) when assigning a listener to the\n    // `onmidimessage` property of the `MIDIInput`. We do it explicitly so that 'connected' events\n    // are dispatched immediately and that we are ready to listen.\n    try {\n      await this._midiInput.open();\n    } catch (err) {\n      return Promise.reject(err);\n    }\n\n    return Promise.resolve(this);\n\n  }\n\n  /**\n   * Closes the input. When an input is closed, it cannot be used to listen to MIDI messages until\n   * the input is opened again by calling [`Input.open()`](Input#open).\n   *\n   * **Note**: if what you want to do is stop events from being dispatched, you should use\n   * [`eventsSuspended`](#eventsSuspended) instead.\n   *\n   * @returns {Promise<Input>} The promise is fulfilled with the `Input` object\n   */\n  async close() {\n\n    // We close the port. This triggers a statechange event which, in turn, will emit the 'closed'\n    // event.\n    if (!this._midiInput) return Promise.resolve(this);\n\n    try {\n      await this._midiInput.close();\n    } catch (err) {\n      return Promise.reject(err);\n    }\n\n    return Promise.resolve(this);\n\n  }\n\n  /**\n   * @private\n   * @deprecated since v3.0.0 (moved to 'Utilities' class)\n   */\n  getChannelModeByNumber() {\n    if (wm.validation) {\n      console.warn(\n        \"The 'getChannelModeByNumber()' method has been moved to the 'Utilities' class.\"\n      );\n    }\n  }\n\n  /**\n   * Adds an event listener that will trigger a function callback when the specified event is\n   * dispatched. The event usually is **input-wide** but can also be **channel-specific**.\n   *\n   * Input-wide events do not target a specific MIDI channel so it makes sense to listen for them\n   * at the `Input` level and not at the [`InputChannel`](InputChannel) level. Channel-specific\n   * events target a specific channel. Usually, in this case, you would add the listener to the\n   * [`InputChannel`](InputChannel) object. However, as a convenience, you can also listen to\n   * channel-specific events directly on an `Input`. This allows you to react to a channel-specific\n   * event no matter which channel it actually came through.\n   *\n   * When listening for an event, you simply need to specify the event name and the function to\n   * execute:\n   *\n   * ```javascript\n   * const listener = WebMidi.inputs[0].addListener(\"midimessage\", e => {\n   *   console.log(e);\n   * });\n   * ```\n   *\n   * Calling the function with an input-wide event (such as\n   * [`\"midimessage\"`]{@link #event:midimessage}), will return the [`Listener`](Listener) object\n   * that was created.\n   *\n   * If you call the function with a channel-specific event (such as\n   * [`\"noteon\"`]{@link InputChannel#event:noteon}), it will return an array of all\n   * [`Listener`](Listener) objects that were created (one for each channel):\n   *\n   * ```javascript\n   * const listeners = WebMidi.inputs[0].addListener(\"noteon\", someFunction);\n   * ```\n   *\n   * You can also specify which channels you want to add the listener to:\n   *\n   * ```javascript\n   * const listeners = WebMidi.inputs[0].addListener(\"noteon\", someFunction, {channels: [1, 2, 3]});\n   * ```\n   *\n   * In this case, `listeners` is an array containing 3 [`Listener`](Listener) objects. The order of\n   * the listeners in the array follows the order the channels were specified in.\n   *\n   * Note that, when adding channel-specific listeners, it is the [`InputChannel`](InputChannel)\n   * instance that actually gets a listener added and not the `Input` instance. You can check that\n   * by calling [`InputChannel.hasListener()`](InputChannel#hasListener()).\n   *\n   * There are 8 families of events you can listen to:\n   *\n   * 1. **MIDI System Common** Events (input-wide)\n   *\n   *    * [`songposition`]{@link Input#event:songposition}\n   *    * [`songselect`]{@link Input#event:songselect}\n   *    * [`sysex`]{@link Input#event:sysex}\n   *    * [`timecode`]{@link Input#event:timecode}\n   *    * [`tunerequest`]{@link Input#event:tunerequest}\n   *\n   * 2. **MIDI System Real-Time** Events (input-wide)\n   *\n   *    * [`clock`]{@link Input#event:clock}\n   *    * [`start`]{@link Input#event:start}\n   *    * [`continue`]{@link Input#event:continue}\n   *    * [`stop`]{@link Input#event:stop}\n   *    * [`activesensing`]{@link Input#event:activesensing}\n   *    * [`reset`]{@link Input#event:reset}\n   *\n   * 3. **State Change** Events (input-wide)\n   *\n   *    * [`opened`]{@link Input#event:opened}\n   *    * [`closed`]{@link Input#event:closed}\n   *    * [`disconnected`]{@link Input#event:disconnected}\n   *\n   * 4. **Catch-All** Events (input-wide)\n   *\n   *    * [`midimessage`]{@link Input#event:midimessage}\n   *    * [`unknownmidimessage`]{@link Input#event:unknownmidimessage}\n   *\n   * 5. **Channel Voice** Events (channel-specific)\n   *\n   *    * [`channelaftertouch`]{@link InputChannel#event:channelaftertouch}\n   *    * [`controlchange`]{@link InputChannel#event:controlchange}\n   *      * [`controlchange-controller0`]{@link InputChannel#event:controlchange-controller0}\n   *      * [`controlchange-controller1`]{@link InputChannel#event:controlchange-controller1}\n   *      * [`controlchange-controller2`]{@link InputChannel#event:controlchange-controller2}\n   *      * (...)\n   *      * [`controlchange-controller127`]{@link InputChannel#event:controlchange-controller127}\n   *    * [`keyaftertouch`]{@link InputChannel#event:keyaftertouch}\n   *    * [`noteoff`]{@link InputChannel#event:noteoff}\n   *    * [`noteon`]{@link InputChannel#event:noteon}\n   *    * [`pitchbend`]{@link InputChannel#event:pitchbend}\n   *    * [`programchange`]{@link InputChannel#event:programchange}\n   *\n   *    Note: you can listen for a specific control change message by using an event name like this:\n   *    `controlchange-controller23`, `controlchange-controller99`, `controlchange-controller122`,\n   *    etc.\n   *\n   * 6. **Channel Mode** Events (channel-specific)\n   *\n   *    * [`allnotesoff`]{@link InputChannel#event:allnotesoff}\n   *    * [`allsoundoff`]{@link InputChannel#event:allsoundoff}\n   *    * [`localcontrol`]{@link InputChannel#event:localcontrol}\n   *    * [`monomode`]{@link InputChannel#event:monomode}\n   *    * [`omnimode`]{@link InputChannel#event:omnimode}\n   *    * [`resetallcontrollers`]{@link InputChannel#event:resetallcontrollers}\n   *\n   * 7. **NRPN** Events (channel-specific)\n   *\n   *    * [`nrpn`]{@link InputChannel#event:nrpn}\n   *    * [`nrpn-dataentrycoarse`]{@link InputChannel#event:nrpn-dataentrycoarse}\n   *    * [`nrpn-dataentryfine`]{@link InputChannel#event:nrpn-dataentryfine}\n   *    * [`nrpn-dataincrement`]{@link InputChannel#event:nrpn-dataincrement}\n   *    * [`nrpn-datadecrement`]{@link InputChannel#event:nrpn-datadecrement}\n   *\n   * 8. **RPN** Events (channel-specific)\n   *\n   *    * [`rpn`]{@link InputChannel#event:rpn}\n   *    * [`rpn-dataentrycoarse`]{@link InputChannel#event:rpn-dataentrycoarse}\n   *    * [`rpn-dataentryfine`]{@link InputChannel#event:rpn-dataentryfine}\n   *    * [`rpn-dataincrement`]{@link InputChannel#event:rpn-dataincrement}\n   *    * [`rpn-datadecrement`]{@link InputChannel#event:rpn-datadecrement}\n   *\n   * @param event {string | EventEmitter.ANY_EVENT} The type of the event.\n   *\n   * @param listener {function} A callback function to execute when the specified event is detected.\n   * This function will receive an event parameter object. For details on this object's properties,\n   * check out the documentation for the various events (links above).\n   *\n   * @param {object} [options={}]\n   *\n   * @param {array} [options.arguments] An array of arguments which will be passed separately to the\n   * callback function. This array is stored in the [`arguments`](Listener#arguments) property of\n   * the [`Listener`](Listener) object and can be retrieved or modified as desired.\n   *\n   * @param {number|number[]} [options.channels=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]]\n   * An integer between 1 and 16 or an array of such integers representing the MIDI channel(s) to\n   * listen on. If no channel is specified, all channels will be used. This parameter is ignored for\n   * input-wide events.\n   *\n   * @param {object} [options.context=this] The value of `this` in the callback function.\n   *\n   * @param {number} [options.duration=Infinity] The number of milliseconds before the listener\n   * automatically expires.\n   *\n   * @param {boolean} [options.prepend=false] Whether the listener should be added at the beginning\n   * of the listeners array and thus be triggered before others.\n   *\n   * @param {number} [options.remaining=Infinity] The number of times after which the callback\n   * should automatically be removed.\n   *\n   * @returns {Listener|Listener[]} If the event is input-wide, a single [`Listener`](Listener)\n   * object is returned. If the event is channel-specific, an array of all the\n   * [`Listener`](Listener) objects is returned (one for each channel).\n   */\n  addListener(event, listener, options = {}) {\n\n    if (wm.validation) {\n\n      // Legacy compatibility\n      if (typeof options === \"function\") {\n        let channels = (listener != undefined) ? [].concat(listener) : undefined; // clone\n        listener = options;\n        options = {channels: channels};\n      }\n\n    }\n\n    // Check if the event is channel-specific or input-wide\n    if (Enumerations.CHANNEL_EVENTS.includes(event)) {\n\n      // If no channel defined, use all.\n      if (options.channels === undefined) options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n\n      let listeners = [];\n\n      Utilities.sanitizeChannels(options.channels).forEach(ch => {\n        listeners.push(this.channels[ch].addListener(event, listener, options));\n      });\n\n      return listeners;\n\n    } else {\n\n      return super.addListener(event, listener, options);\n\n    }\n\n  }\n\n  /**\n   * Adds a one-time event listener that will trigger a function callback when the specified event\n   * happens. The event can be **channel-bound** or **input-wide**. Channel-bound events are\n   * dispatched by [`InputChannel`]{@link InputChannel} objects and are tied to a specific MIDI\n   * channel while input-wide events are dispatched by the `Input` object itself and are not tied\n   * to a specific channel.\n   *\n   * Calling the function with an input-wide event (such as\n   * [`\"midimessage\"`]{@link #event:midimessage}), will return the [`Listener`](Listener) object\n   * that was created.\n   *\n   * If you call the function with a channel-specific event (such as\n   * [`\"noteon\"`]{@link InputChannel#event:noteon}), it will return an array of all\n   * [`Listener`](Listener) objects that were created (one for each channel):\n   *\n   * ```javascript\n   * const listeners = WebMidi.inputs[0].addOneTimeListener(\"noteon\", someFunction);\n   * ```\n   *\n   * You can also specify which channels you want to add the listener to:\n   *\n   * ```javascript\n   * const listeners = WebMidi.inputs[0].addOneTimeListener(\"noteon\", someFunction, {channels: [1, 2, 3]});\n   * ```\n   *\n   * In this case, the `listeners` variable contains an array of 3 [`Listener`](Listener) objects.\n   *\n   * The code above will add a listener for the `\"noteon\"` event and call `someFunction` when the\n   * event is triggered on MIDI channels `1`, `2` or `3`.\n   *\n   * Note that, when adding events to channels, it is the [`InputChannel`](InputChannel) instance\n   * that actually gets a listener added and not the `Input` instance.\n   *\n   * Note: if you want to add a listener to a single MIDI channel you should probably do so directly\n   * on the [`InputChannel`](InputChannel) object itself.\n   *\n   * There are 8 families of events you can listen to:\n   *\n   * 1. **MIDI System Common** Events (input-wide)\n   *\n   *    * [`songposition`]{@link Input#event:songposition}\n   *    * [`songselect`]{@link Input#event:songselect}\n   *    * [`sysex`]{@link Input#event:sysex}\n   *    * [`timecode`]{@link Input#event:timecode}\n   *    * [`tunerequest`]{@link Input#event:tunerequest}\n   *\n   * 2. **MIDI System Real-Time** Events (input-wide)\n   *\n   *    * [`clock`]{@link Input#event:clock}\n   *    * [`start`]{@link Input#event:start}\n   *    * [`continue`]{@link Input#event:continue}\n   *    * [`stop`]{@link Input#event:stop}\n   *    * [`activesensing`]{@link Input#event:activesensing}\n   *    * [`reset`]{@link Input#event:reset}\n   *\n   * 3. **State Change** Events (input-wide)\n   *\n   *    * [`opened`]{@link Input#event:opened}\n   *    * [`closed`]{@link Input#event:closed}\n   *    * [`disconnected`]{@link Input#event:disconnected}\n   *\n   * 4. **Catch-All** Events (input-wide)\n   *\n   *    * [`midimessage`]{@link Input#event:midimessage}\n   *    * [`unknownmidimessage`]{@link Input#event:unknownmidimessage}\n   *\n   * 5. **Channel Voice** Events (channel-specific)\n   *\n   *    * [`channelaftertouch`]{@link InputChannel#event:channelaftertouch}\n   *    * [`controlchange`]{@link InputChannel#event:controlchange}\n   *      * [`controlchange-controller0`]{@link InputChannel#event:controlchange-controller0}\n   *      * [`controlchange-controller1`]{@link InputChannel#event:controlchange-controller1}\n   *      * [`controlchange-controller2`]{@link InputChannel#event:controlchange-controller2}\n   *      * (...)\n   *      * [`controlchange-controller127`]{@link InputChannel#event:controlchange-controller127}\n   *    * [`keyaftertouch`]{@link InputChannel#event:keyaftertouch}\n   *    * [`noteoff`]{@link InputChannel#event:noteoff}\n   *    * [`noteon`]{@link InputChannel#event:noteon}\n   *    * [`pitchbend`]{@link InputChannel#event:pitchbend}\n   *    * [`programchange`]{@link InputChannel#event:programchange}\n   *\n   *    Note: you can listen for a specific control change message by using an event name like this:\n   *    `controlchange-controller23`, `controlchange-controller99`, `controlchange-controller122`,\n   *    etc.\n   *\n   * 6. **Channel Mode** Events (channel-specific)\n   *\n   *    * [`allnotesoff`]{@link InputChannel#event:allnotesoff}\n   *    * [`allsoundoff`]{@link InputChannel#event:allsoundoff}\n   *    * [`localcontrol`]{@link InputChannel#event:localcontrol}\n   *    * [`monomode`]{@link InputChannel#event:monomode}\n   *    * [`omnimode`]{@link InputChannel#event:omnimode}\n   *    * [`resetallcontrollers`]{@link InputChannel#event:resetallcontrollers}\n   *\n   * 7. **NRPN** Events (channel-specific)\n   *\n   *    * [`nrpn`]{@link InputChannel#event:nrpn}\n   *    * [`nrpn-dataentrycoarse`]{@link InputChannel#event:nrpn-dataentrycoarse}\n   *    * [`nrpn-dataentryfine`]{@link InputChannel#event:nrpn-dataentryfine}\n   *    * [`nrpn-dataincrement`]{@link InputChannel#event:nrpn-dataincrement}\n   *    * [`nrpn-datadecrement`]{@link InputChannel#event:nrpn-datadecrement}\n   *\n   * 8. **RPN** Events (channel-specific)\n   *\n   *    * [`rpn`]{@link InputChannel#event:rpn}\n   *    * [`rpn-dataentrycoarse`]{@link InputChannel#event:rpn-dataentrycoarse}\n   *    * [`rpn-dataentryfine`]{@link InputChannel#event:rpn-dataentryfine}\n   *    * [`rpn-dataincrement`]{@link InputChannel#event:rpn-dataincrement}\n   *    * [`rpn-datadecrement`]{@link InputChannel#event:rpn-datadecrement}\n   *\n   * @param event {string} The type of the event.\n   *\n   * @param listener {function} A callback function to execute when the specified event is detected.\n   * This function will receive an event parameter object. For details on this object's properties,\n   * check out the documentation for the various events (links above).\n   *\n   * @param {object} [options={}]\n   *\n   * @param {array} [options.arguments] An array of arguments which will be passed separately to the\n   * callback function. This array is stored in the [`arguments`](Listener#arguments) property of\n   * the [`Listener`](Listener) object and can be retrieved or modified as desired.\n   *\n   * @param {number|number[]} [options.channels]  An integer between 1 and 16 or an array of\n   * such integers representing the MIDI channel(s) to listen on. This parameter is ignored for\n   * input-wide events.\n   *\n   * @param {object} [options.context=this] The value of `this` in the callback function.\n   *\n   * @param {number} [options.duration=Infinity] The number of milliseconds before the listener\n   * automatically expires.\n   *\n   * @param {boolean} [options.prepend=false] Whether the listener should be added at the beginning\n   * of the listeners array and thus be triggered before others.\n   *\n   * @returns {Listener[]} An array of all [`Listener`](Listener) objects that were created.\n   */\n  addOneTimeListener(event, listener, options = {}) {\n    options.remaining = 1;\n    return this.addListener(event, listener, options);\n  }\n\n  /**\n   * This is an alias to the [Input.addListener()]{@link Input#addListener} method.\n   * @since 2.0.0\n   * @deprecated since v3.0\n   * @private\n   */\n  on(event, channel, listener, options) {\n    return this.addListener(event, channel, listener, options);\n  }\n\n  /**\n   * Checks if the specified event type is already defined to trigger the specified callback\n   * function. For channel-specific events, the function will return `true` only if all channels\n   * have the listener defined.\n   *\n   * @param event {string|Symbol} The type of the event.\n   *\n   * @param listener {function} The callback function to check for.\n   *\n   * @param {object} [options={}]\n   *\n   * @param {number|number[]} [options.channels]  An integer between 1 and 16 or an array of such\n   * integers representing the MIDI channel(s) to check. This parameter is ignored for input-wide\n   * events.\n   *\n   * @returns {boolean} Boolean value indicating whether or not the `Input` or\n   * [`InputChannel`](InputChannel) already has this listener defined.\n   */\n  hasListener(event, listener, options = {}) {\n\n    if (wm.validation) {\n\n      // Legacy compatibility\n      if (typeof options === \"function\") {\n        let channels = [].concat(listener); // clone\n        listener = options;\n        options = {channels: channels};\n      }\n\n    }\n\n    if (Enumerations.CHANNEL_EVENTS.includes(event)) {\n\n      // If no channel defined, use all.\n      if (options.channels === undefined) options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n\n      return Utilities.sanitizeChannels(options.channels).every(ch => {\n        return this.channels[ch].hasListener(event, listener);\n      });\n\n    } else {\n      return super.hasListener(event, listener);\n    }\n\n  }\n\n  /**\n   * Removes the specified event listener. If no listener is specified, all listeners matching the\n   * specified event will be removed. If the event is channel-specific, the listener will be removed\n   * from all [`InputChannel`]{@link InputChannel} objects belonging to that channel. If no event is\n   * specified, all listeners for the `Input` as well as all listeners for all\n   * [`InputChannel`]{@link InputChannel} objects belonging to the `Input` will be removed.\n   *\n   * By default, channel-specific listeners will be removed from all\n   * [`InputChannel`]{@link InputChannel} objects unless the `options.channel` narrows it down.\n   *\n   * @param [type] {string} The type of the event.\n   *\n   * @param [listener] {function} The callback function to check for.\n   *\n   * @param {object} [options={}]\n   *\n   * @param {number|number[]} [options.channels]  An integer between 1 and 16 or an array of\n   * such integers representing the MIDI channel(s) to match. This parameter is ignored for\n   * input-wide events.\n   *\n   * @param {*} [options.context] Only remove the listeners that have this exact context.\n   *\n   * @param {number} [options.remaining] Only remove the listener if it has exactly that many\n   * remaining times to be executed.\n   */\n  removeListener(event, listener, options = {}) {\n\n    if (wm.validation) {\n\n      // Legacy compatibility\n      if (typeof options === \"function\") {\n        let channels = [].concat(listener); // clone\n        listener = options;\n        options = {channels: channels};\n      }\n\n    }\n\n    if (options.channels === undefined) options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n\n    // If the event is not specified, remove everything (channel-specific and input-wide)!\n    if (event == undefined) {\n      Utilities.sanitizeChannels(options.channels).forEach(ch => {\n        if (this.channels[ch]) this.channels[ch].removeListener();\n      });\n      return super.removeListener();\n    }\n\n    // If the event is specified, check if it's channel-specific or input-wide.\n    if (Enumerations.CHANNEL_EVENTS.includes(event)) {\n\n      Utilities.sanitizeChannels(options.channels).forEach(ch => {\n        this.channels[ch].removeListener(event, listener, options);\n      });\n\n    } else {\n\n      super.removeListener(event, listener, options);\n\n    }\n\n  }\n\n  /**\n   * Adds a forwarder that will forward all incoming MIDI messages matching the criteria to the\n   * specified [`Output`](Output) destination(s). This is akin to the hardware MIDI THRU port, with\n   * the added benefit of being able to filter which data is forwarded.\n   *\n   * @param {Output|Output[]} output An [`Output`](Output) object, or an array of such\n   * objects, to forward messages to.\n   * @param {object} [options={}]\n   * @param {string|string[]} [options.types=(all messages)] A message type, or an array of such\n   * types (`noteon`, `controlchange`, etc.), that the message type must match in order to be\n   * forwarded. If this option is not specified, all types of messages will be forwarded. Valid\n   * messages are the ones found in either\n   * [`SYSTEM_MESSAGES`](Enumerations#SYSTEM_MESSAGES) or\n   * [`CHANNEL_MESSAGES`](Enumerations#CHANNEL_MESSAGES).\n   * @param {number|number[]} [options.channels=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]]\n   * A MIDI channel number or an array of channel numbers that the message must match in order to be\n   * forwarded. By default all MIDI channels are included (`1` to `16`).\n   *\n   * @returns {Forwarder} The [`Forwarder`](Forwarder) object created to handle the forwarding. This\n   * is useful if you wish to manipulate or remove the [`Forwarder`](Forwarder) later on.\n   */\n  addForwarder(output, options = {}) {\n\n    let forwarder;\n\n    // Unless 'output' is a forwarder, create a new forwarder\n    if (output instanceof Forwarder) {\n      forwarder = output;\n    } else {\n      forwarder = new Forwarder(output, options);\n    }\n\n    this._forwarders.push(forwarder);\n    return forwarder;\n\n  }\n\n  /**\n   * Removes the specified [`Forwarder`](Forwarder) object from the input.\n   *\n   * @param {Forwarder} forwarder The [`Forwarder`](Forwarder) to remove (the\n   * [`Forwarder`](Forwarder) object is returned when calling `addForwarder()`.\n   */\n  removeForwarder(forwarder) {\n    this._forwarders = this._forwarders.filter(item => item !== forwarder);\n  }\n\n  /**\n   * Checks whether the specified [`Forwarder`](Forwarder) object has already been attached to this\n   * input.\n   *\n   * @param {Forwarder} forwarder The [`Forwarder`](Forwarder) to check for (the\n   * [`Forwarder`](Forwarder) object is returned when calling [`addForwarder()`](#addForwarder).\n   * @returns {boolean}\n   */\n  hasForwarder(forwarder) {\n    return this._forwarders.includes(forwarder);\n  }\n\n  /**\n   * Name of the MIDI input.\n   *\n   * @type {string}\n   * @readonly\n   */\n  get name() {\n    return this._midiInput.name;\n  }\n\n  /**\n   * ID string of the MIDI port. The ID is host-specific. Do not expect the same ID on different\n   * platforms. For example, Google Chrome and the Jazz-Plugin report completely different IDs for\n   * the same port.\n   *\n   * @type {string}\n   * @readonly\n   */\n  get id() {\n    return this._midiInput.id;\n  }\n\n  /**\n   * Input port's connection state: `pending`, `open` or `closed`.\n   *\n   * @type {string}\n   * @readonly\n   */\n  get connection() {\n    return this._midiInput.connection;\n  }\n\n  /**\n   * Name of the manufacturer of the device that makes this input port available.\n   *\n   * @type {string}\n   * @readonly\n   */\n  get manufacturer() {\n    return this._midiInput.manufacturer;\n  }\n\n  /**\n   * An integer to offset the reported octave of incoming notes. By default, middle C (MIDI note\n   * number 60) is placed on the 4th octave (C4).\n   *\n   * If, for example, `octaveOffset` is set to 2, MIDI note number 60 will be reported as C6. If\n   * `octaveOffset` is set to -1, MIDI note number 60 will be reported as C3.\n   *\n   * Note that this value is combined with the global offset value defined in the\n   * [`WebMidi.octaveOffset`](WebMidi#octaveOffset) property (if any).\n   *\n   * @type {number}\n   *\n   * @since 3.0\n   */\n  get octaveOffset() {\n    return this._octaveOffset;\n  }\n  set octaveOffset(value) {\n\n    if (this.validation) {\n      value = parseInt(value);\n      if (isNaN(value)) throw new TypeError(\"The 'octaveOffset' property must be an integer.\");\n    }\n\n    this._octaveOffset = value;\n\n  }\n\n  /**\n   * State of the input port: `connected` or `disconnected`.\n   *\n   * @type {string}\n   * @readonly\n   */\n  get state() {\n    return this._midiInput.state;\n  }\n\n  /**\n   * The port type. In the case of the `Input` object, this is always: `input`.\n   *\n   * @type {string}\n   * @readonly\n   */\n  get type() {\n    return this._midiInput.type;\n  }\n\n  /**\n   * @type {boolean}\n   * @private\n   * @deprecated since v3.0.0 (moved to 'InputChannel' class)\n   */\n  get nrpnEventsEnabled() {\n    if (wm.validation) {\n      console.warn(\"The 'nrpnEventsEnabled' property has been moved to the 'InputChannel' class.\");\n    }\n    return false;\n  }\n\n}\n\n// Events that do not have code below them must be placed outside the class definition (?!)\n\n/**\n * Input-wide (system) event emitted when a **system exclusive** message has been received.\n * You should note that, to receive `sysex` events, you must call the\n * [`WebMidi.enable()`](WebMidi#enable()) method with the `sysex` option set to `true`:\n *\n * ```js\n * WebMidi.enable({sysex: true})\n *  .then(() => console.log(\"WebMidi has been enabled with sysex support.\"))\n * ```\n *\n * @event Input#sysex\n *\n * @type {object}\n *\n * @property {Input} port The `Input` that triggered the event.\n * @property {Input} target The object that dispatched the event.\n * @property {Message} message A [`Message`](Message) object containing information about the\n * incoming MIDI message.\n * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n * milliseconds since the navigation start of the document).\n * @property {string} type `sysex`\n *\n */\n\n/**\n * Input-wide (system) event emitted when a **time code quarter frame** message has been\n * received.\n *\n * @event Input#timecode\n *\n * @type {object}\n *\n * @property {Input} port The `Input` that triggered the event.\n * @property {Input} target The object that dispatched the event.\n * @property {Message} message A [`Message`](Message) object containing information about the\n * incoming MIDI message.\n * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n * milliseconds since the navigation start of the document).\n * @property {string} type `timecode`\n *\n * @since 2.1\n */\n\n/**\n * Input-wide (system) event emitted when a **song position** message has been received.\n *\n * @event Input#songposition\n *\n * @type {object}\n *\n * @property {Input} port The `Input` that triggered the event.\n * @property {Input} target The object that dispatched the event.\n * @property {Message} message A [`Message`](Message) object containing information about the\n * incoming MIDI message.\n * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n * milliseconds since the navigation start of the document).\n * @property {string} type `songposition`\n *\n * @since 2.1\n */\n\n/**\n * Input-wide (system) event emitted when a **song select** message has been received.\n *\n * @event Input#songselect\n *\n * @type {object}\n *\n * @property {Input} port The `Input` that triggered the event.\n * @property {Input} target The object that dispatched the event.\n * @property {Message} message A [`Message`](Message) object containing information about the\n * incoming MIDI message.\n * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n * milliseconds since the navigation start of the document).\n * @property {string} value Song (or sequence) number to select (0-127)\n * @property {string} rawValue Song (or sequence) number to select (0-127)\n *\n * @since 2.1\n */\n\n/**\n * Input-wide (system) event emitted when a **tune request** message has been received.\n *\n * @event Input#tunerequest\n *\n * @type {object}\n *\n * @property {Input} port The `Input` that triggered the event.\n * @property {Input} target The object that dispatched the event.\n * @property {Message} message A [`Message`](Message) object containing information about the\n * incoming MIDI message.\n * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n * milliseconds since the navigation start of the document).\n * @property {string} type `tunerequest`\n *\n * @since 2.1\n */\n\n/**\n * Input-wide (system) event emitted when a **timing clock** message has been received.\n *\n * @event Input#clock\n *\n * @type {object}\n *\n * @property {Input} port The `Input` that triggered the event.\n * @property {Input} target The object that dispatched the event.\n * @property {Message} message A [`Message`](Message) object containing information about the\n * incoming MIDI message.\n * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n * milliseconds since the navigation start of the document).\n * @property {string} type `clock`\n *\n * @since 2.1\n */\n\n/**\n * Input-wide (system) event emitted when a **start** message has been received.\n *\n * @event Input#start\n *\n * @type {object}\n *\n * @property {Input} port The `Input` that triggered the event.\n * @property {Input} target The object that dispatched the event.\n * @property {Message} message A [`Message`](Message) object containing information about the\n * incoming MIDI message.\n * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n * milliseconds since the navigation start of the document).\n * @property {string} type `start`\n *\n * @since 2.1\n */\n\n/**\n * Input-wide (system) event emitted when a **continue** message has been received.\n *\n * @event Input#continue\n *\n * @type {object}\n *\n * @property {Input} port The `Input` that triggered the event.\n * @property {Input} target The object that dispatched the event.\n * @property {Message} message A [`Message`](Message) object containing information about the\n * incoming MIDI message.\n * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n * milliseconds since the navigation start of the document).\n * @property {string} type `continue`\n *\n * @since 2.1\n */\n\n/**\n * Input-wide (system) event emitted when a **stop** message has been received.\n *\n * @event Input#stop\n *\n * @type {object}\n *\n * @property {Input} port The `Input` that triggered the event.\n * @property {Input} target The object that dispatched the event.\n * @property {Message} message A [`Message`](Message) object containing information about the\n * incoming MIDI message.\n * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n * milliseconds since the navigation start of the document).\n * @property {string} type `stop`\n *\n * @since 2.1\n */\n\n/**\n * Input-wide (system) event emitted when an **active sensing** message has been received.\n *\n * @event Input#activesensing\n *\n * @type {object}\n *\n * @property {Input} port The `Input` that triggered the event.\n * @property {Input} target The object that dispatched the event.\n * @property {Message} message A [`Message`](Message) object containing information about the\n * incoming MIDI message.\n * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n * milliseconds since the navigation start of the document).\n * @property {string} type `activesensing`\n *\n * @since 2.1\n */\n\n/**\n * Input-wide (system) event emitted when a **reset** message has been received.\n *\n * @event Input#reset\n *\n * @type {object}\n *\n * @property {Input} port The `Input` that triggered the event.\n * @property {Input} target The object that dispatched the event.\n * @property {Message} message A [`Message`](Message) object containing information about the\n * incoming MIDI message.\n * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n * milliseconds since the navigation start of the document).\n * @property {string} type `reset`\n *\n * @since 2.1\n */\n\n/**\n * Input-wide (system) event emitted when an unknown MIDI message has been received. It could\n * be, for example, one of the undefined/reserved messages.\n *\n * @event Input#unknownmessage\n *\n * @type {Object}\n *\n * @property {Input} port The `Input` that triggered the event.\n * @property {Input} target The object that dispatched the event.\n * @property {Message} message A [`Message`](Message) object containing information about the\n * incoming MIDI message.\n * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n * milliseconds since the navigation start of the document).\n * @property {string} type `unknownmessage`\n *\n * @since 2.1\n */\n\n/**\n * The `WebMidi` object makes it easier to work with the low-level Web MIDI API. Basically, it\n * simplifies sending outgoing MIDI messages and reacting to incoming MIDI messages.\n *\n * When using the WebMidi.js library, you should know that the `WebMidi` class has already been\n * instantiated. You cannot instantiate it yourself. If you use the **IIFE** version, you should\n * simply use the global object called `WebMidi`. If you use the **CJS** (CommonJS) or **ESM** (ES6\n * module) version, you get an already-instantiated object when you import the module.\n *\n * @fires WebMidi#connected\n * @fires WebMidi#disabled\n * @fires WebMidi#disconnected\n * @fires WebMidi#enabled\n * @fires WebMidi#error\n * @fires WebMidi#midiaccessgranted\n * @fires WebMidi#portschanged\n *\n * @extends EventEmitter\n * @license Apache-2.0\n */\nclass WebMidi extends EventEmitter {\n\n  /**\n   * The WebMidi class is a singleton and you cannot instantiate it directly. It has already been\n   * instantiated for you.\n   */\n  constructor() {\n\n    super();\n\n    /**\n     * Object containing system-wide default values that can be changed to customize how the library\n     * works.\n     *\n     * @type {object}\n     *\n     * @property {object}  defaults.note - Default values relating to note\n     * @property {number}  defaults.note.attack - A number between 0 and 127 representing the\n     * default attack velocity of notes. Initial value is 64.\n     * @property {number}  defaults.note.release - A number between 0 and 127 representing the\n     * default release velocity of notes. Initial value is 64.\n     * @property {number}  defaults.note.duration - A number representing the default duration of\n     * notes (in seconds). Initial value is Infinity.\n     */\n    this.defaults = {\n      note: {\n        attack: Utilities.from7bitToFloat(64),\n        release: Utilities.from7bitToFloat(64),\n        duration: Infinity\n      }\n    };\n\n    /**\n     * The [`MIDIAccess`](https://developer.mozilla.org/en-US/docs/Web/API/MIDIAccess)\n     * instance used to talk to the lower-level Web MIDI API. This should not be used directly\n     * unless you know what you are doing.\n     *\n     * @type {MIDIAccess}\n     * @readonly\n     */\n    this.interface = null;\n\n    /**\n     * Indicates whether argument validation and backwards-compatibility checks are performed\n     * throughout the WebMidi.js library for object methods and property setters.\n     *\n     * This is an advanced setting that should be used carefully. Setting `validation` to `false`\n     * improves performance but should only be done once the project has been thoroughly tested with\n     * `validation` turned on.\n     *\n     * @type {boolean}\n     */\n    this.validation = true;\n\n    /**\n     * Array of all (Input) objects\n     * @type {Input[]}\n     * @private\n     */\n    this._inputs = [];\n\n    /**\n     * Array of disconnected [`Input`](Input) objects. This is used when inputs are plugged back in\n     * to retain their previous state.\n     * @type {Input[]}\n     * @private\n     */\n    this._disconnectedInputs = [];\n\n    /**\n     * Array of all [`Output`](Output) objects\n     * @type {Output[]}\n     * @private\n     */\n    this._outputs = [];\n\n    /**\n     * Array of disconnected [`Output`](Output) objects. This is used when outputs are plugged back\n     * in to retain their previous state.\n     * @type {Output[]}\n     * @private\n     */\n    this._disconnectedOutputs = [];\n\n    /**\n     * Array of statechange events to process. These events must be parsed synchronously so they do\n     * not override each other.\n     *\n     * @type {string[]}\n     * @private\n     */\n    this._stateChangeQueue = [];\n\n    /**\n     * @type {number}\n     * @private\n     */\n    this._octaveOffset = 0;\n\n  }\n\n  /**\n   * Checks if the Web MIDI API is available in the current environment and then tries to connect to\n   * the host's MIDI subsystem. This is an asynchronous operation and it causes a security prompt to\n   * be displayed to the user.\n   *\n   * To enable the use of MIDI system exclusive messages, the `sysex` option should be set to\n   * `true`. However, under some environments (e.g. Jazz-Plugin), the `sysex` option is ignored\n   * and system exclusive messages are always enabled. You can check the\n   * [`sysexEnabled`](#sysexEnabled) property to confirm.\n   *\n   * To enable access to software synthesizers available on the host, you would set the `software`\n   * option to `true`. However, this option is only there to future-proof the library as support for\n   * software synths has not yet been implemented in any browser (as of September 2021).\n   *\n   * By the way, if you call the [`enable()`](#enable) method while WebMidi.js is already enabled,\n   * the callback function will be executed (if any), the promise will resolve but the events\n   * ([`\"midiaccessgranted\"`](#event:midiaccessgranted), [`\"connected\"`](#event:connected) and\n   * [`\"enabled\"`](#event:enabled)) will not be fired.\n   *\n   * There are 3 ways to execute code after `WebMidi` has been enabled:\n   *\n   * - Pass a callback function in the `options`\n   * - Listen to the [`\"enabled\"`](#event:enabled) event\n   * - Wait for the promise to resolve\n   *\n   * In order, this is what happens towards the end of the enabling process:\n   *\n   * 1. [`\"midiaccessgranted\"`](#event:midiaccessgranted) event is triggered once the user has\n   * granted access to use MIDI.\n   * 2. [`\"connected\"`](#event:connected) events are triggered (for each available input and output)\n   * 3. [`\"enabled\"`](#event:enabled) event is triggered when WebMidi.js is fully ready\n   * 4. specified callback (if any) is executed\n   * 5. promise is resolved and fulfilled with the `WebMidi` object.\n   *\n   * **Important note**: starting with Chrome v77, a page using Web MIDI API must be hosted on a\n   * secure origin (`https://`, `localhost` or `file:///`) and the user will always be prompted to\n   * authorize the operation (no matter if the `sysex` option is `true` or not).\n   *\n   * ##### Example\n   * ```js\n   * // Enabling WebMidi and using the promise\n   * WebMidi.enable().then(() => {\n   *   console.log(\"WebMidi.js has been enabled!\");\n   * })\n   * ```\n   *\n   * @param [options] {object}\n   *\n   * @param [options.callback] {function} A function to execute once the operation completes. This\n   * function will receive an `Error` object if enabling the Web MIDI API failed.\n   *\n   * @param [options.sysex=false] {boolean} Whether to enable MIDI system exclusive messages or not.\n   *\n   * @param [options.validation=true] {boolean} Whether to enable library-wide validation of method\n   * arguments and setter values. This is an advanced setting that should be used carefully. Setting\n   * [`validation`](#validation) to `false` improves performance but should only be done once the\n   * project has been thoroughly tested with [`validation`](#validation)  turned on.\n   *\n   * @param [options.software=false] {boolean} Whether to request access to software synthesizers on\n   * the host system. This is part of the spec but has not yet been implemented by most browsers as\n   * of April 2020.\n   *\n   * @param [options.requestMIDIAccessFunction] {function} A custom function to use to return\n   * the MIDIAccess object. This is useful if you want to use a polyfill for the Web MIDI API\n   * or if you want to use a custom implementation of the Web MIDI API - probably for testing\n   * purposes.\n   *\n   * @async\n   *\n   * @returns {Promise.<WebMidi>} The promise is fulfilled with the `WebMidi` object for\n   * chainability\n   *\n   * @throws {Error} The Web MIDI API is not supported in your environment.\n   * @throws {Error} Jazz-Plugin must be installed to use WebMIDIAPIShim.\n   */\n  async enable(options = {}, legacy = false) {\n\n    /*START-ESM*/\n\n    // This block is stripped out of the IIFE and CJS versions where it isn't needed.\n\n    // If this code is executed by Node.js in \"module\" mode (when \"type\": \"module\" is used in the\n    // package.json file), then we must import the `jzz` module. I import it in this convoluted way\n    // to prevent Webpack from automatically bundling it in browser bundles where it isn't needed.\n    if (Utilities.isNode) {\n\n      // Some environments may have both Node.js and browser runtimes (Electron, NW.js, React\n      // Native, etc.) so we also check for the presence of the window.navigator property.\n      try {\n        window.navigator;\n      } catch (err) {\n        global.navigator = await Object.getPrototypeOf(async function() {}).constructor(`\n        let jzz = await import(\"jzz\");\n        return jzz.default;\n        `)();\n      }\n\n      // The `performance` module appeared in Node.js v8.5.0 but has started to be automatically\n      // imported only in v16+.\n      try {\n        performance;\n      } catch (err) {\n        global.performance = await Object.getPrototypeOf(async function() {}).constructor(`\n        let perf_hooks = await import(\"perf_hooks\");\n        return perf_hooks.performance;\n        `)();\n      }\n\n    }\n\n    /*END-ESM*/\n\n    this.validation = (options.validation !== false);\n\n    if (this.validation) {\n      // Backwards-compatibility. Previous syntax was: enable(callback, sysex)\n      if (typeof options === \"function\") options = {callback: options, sysex: legacy};\n      if (legacy) options.sysex = true;\n    }\n\n    // If already enabled, trigger callback and resolve promise but do not dispatch events.\n    if (this.enabled) {\n      if (typeof options.callback === \"function\") options.callback();\n      return Promise.resolve();\n    }\n\n    // The Jazz-Plugin takes a while to be available (even after the Window's 'load' event has been\n    // fired). Therefore, we wait a little while to give it time to finish loading (initiqted in\n    // constructor).\n    // if (!this.supported) {\n    //\n    //   await new Promise((resolve, reject) => {\n    //\n    //     const start = this.time;\n    //\n    //     const intervalID = setInterval(() => {\n    //\n    //       if (this.supported) {\n    //         clearInterval(intervalID);\n    //         resolve();\n    //       } else {\n    //         if (this.time > start + 1500) {\n    //           clearInterval(intervalID);\n    //           let error = new Error(\"The Web MIDI API is not available in your environment.\");\n    //           if (typeof options.callback === \"function\") options.callback(error);\n    //           reject(error);\n    //         }\n    //       }\n    //\n    //     }, 25);\n    //\n    //   });\n    //\n    // }\n\n    /**\n     * Event emitted when an error occurs trying to enable `WebMidi`\n     *\n     * @event WebMidi#error\n     * @type {object}\n     * @property {DOMHighResTimeStamp} timestamp The moment when the event occurred (in\n     * milliseconds since the navigation start of the document).\n     * @property {WebMidi} target The object that triggered the event\n     * @property {string} type `error`\n     * @property {*} error Actual error that occurred\n     */\n    const errorEvent = {\n      timestamp: this.time,\n      target: this,\n      type: \"error\",\n      error: undefined\n    };\n\n    /**\n     * Event emitted once the MIDI interface has been successfully created (which implies user has\n     * granted access to MIDI).\n     *\n     * @event WebMidi#midiaccessgranted\n     * @type {object}\n     * @property {DOMHighResTimeStamp} timestamp The moment when the event occurred (in milliseconds\n     * since the navigation start of the document).\n     * @property {WebMidi} target The object that triggered the event\n     * @property {string} type `midiaccessgranted`\n     */\n    const midiAccessGrantedEvent = {\n      timestamp: this.time,\n      target: this,\n      type: \"midiaccessgranted\"\n    };\n\n    /**\n     * Event emitted once `WebMidi` has been fully enabled\n     *\n     * @event WebMidi#enabled\n     * @type {object}\n     * @property {DOMHighResTimeStamp} timestamp The moment when the event occurred (in milliseconds\n     * since the navigation start of the document).\n     * @property {WebMidi} target The object that triggered the event\n     * @property {string} type `\"enabled\"`\n     */\n    const enabledEvent = {\n      timestamp: this.time,\n      target: this,\n      type: \"enabled\"\n    };\n\n    // Request MIDI access (this is where the prompt will appear)\n    try {\n      if (typeof options.requestMIDIAccessFunction === \"function\") {\n        this.interface = await options.requestMIDIAccessFunction(\n          {sysex: options.sysex, software: options.software}\n        );\n      } else {\n        this.interface = await navigator.requestMIDIAccess(\n          {sysex: options.sysex, software: options.software}\n        );\n      }\n    } catch(err) {\n      errorEvent.error = err;\n      this.emit(\"error\", errorEvent);\n      if (typeof options.callback === \"function\") options.callback(err);\n      return Promise.reject(err);\n    }\n\n    // Now that the Web MIDI API interface has been created, we trigger the 'midiaccessgranted'\n    // event. This allows the developer an occasion to assign listeners on 'connected' events.\n    this.emit(\"midiaccessgranted\", midiAccessGrantedEvent);\n\n    // We setup the state change listener before creating the ports so that it properly catches the\n    // the ports' `connected` events\n    this.interface.onstatechange = this._onInterfaceStateChange.bind(this);\n\n    // Update inputs and outputs (this is where `Input` and `Output` objects are created).\n    try {\n      await this._updateInputsAndOutputs();\n    } catch (err) {\n      errorEvent.error = err;\n      this.emit(\"error\", errorEvent);\n      if (typeof options.callback === \"function\") options.callback(err);\n      return Promise.reject(err);\n    }\n\n    // If we make it here, the ports have been successfully created, so we trigger the 'enabled'\n    // event.\n    this.emit(\"enabled\", enabledEvent);\n\n    // Execute the callback (if any) and resolve the promise with 'this' (for chainability)\n    if (typeof options.callback === \"function\") options.callback();\n    return Promise.resolve(this);\n\n  }\n\n  /**\n   * Completely disables **WebMidi.js** by unlinking the MIDI subsystem's interface and closing all\n   * [`Input`](Input) and [`Output`](Output) objects that may have been opened. This also means that\n   * listeners added to [`Input`](Input) objects, [`Output`](Output) objects or to `WebMidi` itself\n   * are also destroyed.\n   *\n   * @async\n   * @returns {Promise<Array>}\n   *\n   * @throws {Error} The Web MIDI API is not supported by your environment.\n   *\n   * @since 2.0.0\n   */\n  async disable() {\n\n    // This needs to be done right away to prevent racing conditions in listeners while the inputs\n    // are being destroyed.\n    if (this.interface) this.interface.onstatechange = undefined;\n\n    return this._destroyInputsAndOutputs().then(() => {\n\n      if (navigator && typeof navigator.close === \"function\") navigator.close(); // jzz\n      this.interface = null; // also resets enabled, sysexEnabled\n\n      /**\n       * Event emitted once `WebMidi` has been successfully disabled.\n       *\n       * @event WebMidi#disabled\n       * @type {object}\n       * @property {DOMHighResTimeStamp} timestamp The moment when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       * @property {WebMidi} target The object that triggered the event\n       * @property {string} type `\"disabled\"`\n       */\n      let event = {\n        timestamp: this.time,\n        target: this,\n        type: \"disabled\"\n      };\n\n      // Finally, trigger the 'disabled' event and then remove all listeners.\n      this.emit(\"disabled\", event);\n      this.removeListener();\n\n    });\n\n  };\n\n  /**\n   * Returns the [`Input`](Input) object that matches the specified ID string or `false` if no\n   * matching input is found. As per the Web MIDI API specification, IDs are strings (not integers).\n   *\n   * Please note that IDs change from one host to another. For example, Chrome does not use the same\n   * kind of IDs as Jazz-Plugin.\n   *\n   * @param id {string} The ID string of the input. IDs can be viewed by looking at the\n   * [`WebMidi.inputs`](WebMidi#inputs) array. Even though they sometimes look like integers, IDs\n   * are strings.\n   * @param [options] {object}\n   * @param [options.disconnected] {boolean} Whether to retrieve a disconnected input\n   *\n   * @returns {Input} An [`Input`](Input) object matching the specified ID string or `undefined`\n   * if no matching input can be found.\n   *\n   * @throws {Error} WebMidi is not enabled.\n   *\n   * @since 2.0.0\n   */\n  getInputById(id, options = {disconnected: false}) {\n\n    if (this.validation) {\n      if (!this.enabled) throw new Error(\"WebMidi is not enabled.\");\n      if (!id) return;\n    }\n\n    if (options.disconnected) {\n      for (let i = 0; i < this._disconnectedInputs.length; i++) {\n        if (this._disconnectedInputs[i].id === id.toString()) return this._disconnectedInputs[i];\n      }\n    } else {\n      for (let i = 0; i < this.inputs.length; i++) {\n        if (this.inputs[i].id === id.toString()) return this.inputs[i];\n      }\n    }\n\n  };\n\n  /**\n   * Returns the first [`Input`](Input) object whose name **contains** the specified string. Note\n   * that the port names change from one environment to another. For example, Chrome does not report\n   * input names in the same way as the Jazz-Plugin does.\n   *\n   * @param name {string} The non-empty string to look for within the name of MIDI inputs (such as\n   * those visible in the [inputs](WebMidi#inputs) array).\n   *\n   * @returns {Input} The [`Input`](Input) that was found or `undefined` if no input contained the\n   * specified name.\n   * @param [options] {object}\n   * @param [options.disconnected] {boolean} Whether to retrieve a disconnected input\n   *\n   * @throws {Error} WebMidi is not enabled.\n   *\n   * @since 2.0.0\n   */\n  getInputByName(name, options = {disconnected: false}) {\n\n    if (this.validation) {\n      if (!this.enabled) throw new Error(\"WebMidi is not enabled.\");\n      if (!name) return;\n      name = name.toString();\n    }\n\n    if (options.disconnected) {\n      for (let i = 0; i < this._disconnectedInputs.length; i++) {\n        if (~this._disconnectedInputs[i].name.indexOf(name)) return this._disconnectedInputs[i];\n      }\n    } else {\n      for (let i = 0; i < this.inputs.length; i++) {\n        if (~this.inputs[i].name.indexOf(name)) return this.inputs[i];\n      }\n    }\n\n  };\n\n  /**\n   * Returns the first [`Output`](Output) object whose name **contains** the specified string. Note\n   * that the port names change from one environment to another. For example, Chrome does not report\n   * input names in the same way as the Jazz-Plugin does.\n   *\n   * @param name {string} The non-empty string to look for within the name of MIDI inputs (such as\n   * those visible in the [`outputs`](#outputs) array).\n   * @param [options] {object}\n   * @param [options.disconnected] {boolean} Whether to retrieve a disconnected output\n   *\n   * @returns {Output} The [`Output`](Output) that was found or `undefined` if no output matched\n   * the specified name.\n   *\n   * @throws {Error} WebMidi is not enabled.\n   *\n   * @since 2.0.0\n   */\n  getOutputByName(name, options = {disconnected: false}) {\n\n    if (this.validation) {\n      if (!this.enabled) throw new Error(\"WebMidi is not enabled.\");\n      if (!name) return;\n      name = name.toString();\n    }\n\n    if (options.disconnected) {\n      for (let i = 0; i < this._disconnectedOutputs.length; i++) {\n        if (~this._disconnectedOutputs[i].name.indexOf(name)) return this._disconnectedOutputs[i];\n      }\n    } else {\n      for (let i = 0; i < this.outputs.length; i++) {\n        if (~this.outputs[i].name.indexOf(name)) return this.outputs[i];\n      }\n    }\n\n  };\n\n  /**\n   * Returns the [`Output`](Output) object that matches the specified ID string or `false` if no\n   * matching output is found. As per the Web MIDI API specification, IDs are strings (not\n   * integers).\n   *\n   * Please note that IDs change from one host to another. For example, Chrome does not use the same\n   * kind of IDs as Jazz-Plugin.\n   *\n   * @param id {string} The ID string of the port. IDs can be viewed by looking at the\n   * [`WebMidi.outputs`](WebMidi#outputs) array.\n   * @param [options] {object}\n   * @param [options.disconnected] {boolean} Whether to retrieve a disconnected output\n   *\n   * @returns {Output} An [`Output`](Output) object matching the specified ID string. If no\n   * matching output can be found, the method returns `undefined`.\n   *\n   * @throws {Error} WebMidi is not enabled.\n   *\n   * @since 2.0.0\n   */\n  getOutputById(id, options = {disconnected: false}) {\n\n    if (this.validation) {\n      if (!this.enabled) throw new Error(\"WebMidi is not enabled.\");\n      if (!id) return;\n    }\n\n    if (options.disconnected) {\n      for (let i = 0; i < this._disconnectedOutputs.length; i++) {\n        if (this._disconnectedOutputs[i].id === id.toString()) return this._disconnectedOutputs[i];\n      }\n    } else {\n      for (let i = 0; i < this.outputs.length; i++) {\n        if (this.outputs[i].id === id.toString()) return this.outputs[i];\n      }\n    }\n\n  };\n\n  /**\n   * @private\n   * @deprecated since version 3.0.0, use Utilities.toNoteNumber() instead.\n   */\n  noteNameToNumber(name) {\n    if (this.validation) {\n      console.warn(\n        \"The noteNameToNumber() method is deprecated. Use \" +\n        \"Utilities.toNoteNumber() instead.\"\n      );\n    }\n    return Utilities.toNoteNumber(name, this.octaveOffset);\n  }\n\n  /**\n   * @private\n   * @deprecated since 3.0.0, use Utilities.getNoteDetails() instead.\n   */\n  getOctave(number) {\n\n    if (this.validation) {\n      console.warn(\"The getOctave()is deprecated. Use Utilities.getNoteDetails() instead\");\n      number = parseInt(number);\n    }\n\n    if (!isNaN(number) && number >= 0 && number <= 127) {\n      return Utilities.getNoteDetails(Utilities.offsetNumber(number, this.octaveOffset)).octave;\n    } else {\n      return false;\n    }\n\n  }\n\n  /**\n   * @private\n   * @deprecated since 3.0.0, use Utilities.sanitizeChannels() instead.\n   */\n  sanitizeChannels(channel) {\n\n    if (this.validation) {\n      console.warn(\"The sanitizeChannels() method has been moved to the utilities class.\");\n    }\n\n    return Utilities.sanitizeChannels(channel);\n\n  }\n\n  /**\n   * @private\n   * @deprecated since version 3.0.0, use Utilities.sanitizeChannels() instead.\n   */\n  toMIDIChannels(channel) {\n\n    if (this.validation) {\n      console.warn(\n        \"The toMIDIChannels() method has been deprecated. Use Utilities.sanitizeChannels() instead.\"\n      );\n    }\n\n    return Utilities.sanitizeChannels(channel);\n\n  }\n\n  /**\n   * @private\n   * @deprecated since version 3.0.0, use Utilities.guessNoteNumber() instead.\n   */\n  guessNoteNumber(input) {\n\n    if (this.validation) {\n      console.warn(\n        \"The guessNoteNumber() method has been deprecated. Use Utilities.guessNoteNumber() instead.\"\n      );\n    }\n\n    return Utilities.guessNoteNumber(input, this.octaveOffset);\n\n  }\n\n  /**\n   * @private\n   * @deprecated since version 3.0.0, use Utilities.buildNoteArray() instead.\n   */\n  getValidNoteArray(notes, options = {}) {\n    if (this.validation) {\n      console.warn(\n        \"The getValidNoteArray() method has been moved to the Utilities.buildNoteArray()\"\n      );\n    }\n    return Utilities.buildNoteArray(notes, options);\n  }\n\n  /**\n   * @private\n   * @deprecated since version 3.0.0, use Utilities.toTimestamp() instead.\n   */\n  convertToTimestamp(time) {\n\n    if (this.validation) {\n      console.warn(\n        \"The convertToTimestamp() method has been moved to Utilities.toTimestamp().\"\n      );\n    }\n\n    return Utilities.toTimestamp(time);\n\n  }\n\n  /**\n   * @return {Promise<void>}\n   * @private\n   */\n  async _destroyInputsAndOutputs() {\n\n    let promises = [];\n\n    this.inputs.forEach(input => promises.push(input.destroy()));\n    this.outputs.forEach(output => promises.push(output.destroy()));\n\n    return Promise.all(promises).then(() => {\n      this._inputs = [];\n      this._outputs = [];\n    });\n\n  }\n\n  /**\n   * @private\n   */\n  _onInterfaceStateChange(e) {\n\n    this._updateInputsAndOutputs();\n\n    /**\n     * Event emitted when an [`Input`](Input) or [`Output`](Output) port is connected or\n     * disconnected. This event is typically fired whenever a MIDI device is plugged in or\n     * unplugged. Please note that it may fire several times if a device possesses multiple inputs\n     * and/or outputs (which is often the case).\n     *\n     * @event WebMidi#portschanged\n     * @type {object}\n     * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred\n     * (in milliseconds since the navigation start of the document).\n     * @property {string} type `portschanged`\n     * @property {WebMidi} target The object to which the listener was originally added (`WebMidi`)\n     * @property {Input|Output} port The [`Input`](Input) or [`Output`](Output) object that\n     * triggered the event.\n     *\n     * @since 3.0.2\n     */\n\n    /**\n     * Event emitted when an [`Input`](Input) or [`Output`](Output) becomes available. This event is\n     * typically fired whenever a MIDI device is plugged in. Please note that it may fire several\n     * times if a device possesses multiple inputs and/or outputs (which is often the case).\n     *\n     * @event WebMidi#connected\n     * @type {object}\n     * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred\n     * (in milliseconds since the navigation start of the document).\n     * @property {string} type `connected`\n     * @property {WebMidi} target The object to which the listener was originally added (`WebMidi`)\n     * @property {Input|Output} port The [`Input`](Input) or [`Output`](Output) object that\n     * triggered the event.\n     */\n\n    /**\n     * Event emitted when an [`Input`](Input) or [`Output`](Output) becomes unavailable. This event\n     * is typically fired whenever a MIDI device is unplugged. Please note that it may fire several\n     * times if a device possesses multiple inputs and/or outputs (which is often the case).\n     *\n     * @event WebMidi#disconnected\n     * @type {object}\n     * @property {DOMHighResTimeStamp} timestamp The moment when the event occurred (in milliseconds\n     * since the navigation start of the document).\n     * @property {string} type `disconnected`\n     * @property {WebMidi} target The object to which the listener was originally added (`WebMidi`)\n     * @property {Input|Output} port The [`Input`](Input) or [`Output`](Output) object that\n     * triggered the event.\n     */\n    let event = {\n      timestamp: e.timeStamp,\n      type: e.port.state,\n      target: this\n    };\n\n    // We check if \"connection\" is \"open\" because connected events are also triggered with\n    // \"connection=closed\"\n    if (e.port.state === \"connected\" && e.port.connection === \"open\") {\n\n      if (e.port.type === \"output\") {\n        event.port = this.getOutputById(e.port.id);\n      } else if (e.port.type === \"input\") {\n        event.port = this.getInputById(e.port.id);\n      }\n\n      // Emit \"connected\" event\n      this.emit(e.port.state, event);\n\n      // Make a shallow copy of the event so we can use it for the \"portschanged\" event\n      const portsChangedEvent = Object.assign({}, event);\n      portsChangedEvent.type = \"portschanged\";\n      this.emit(portsChangedEvent.type, portsChangedEvent);\n\n    // We check if \"connection\" is \"pending\" because we do not always get the \"closed\" event\n    } else if (e.port.state === \"disconnected\" && e.port.connection === \"pending\") {\n\n      if (e.port.type === \"input\") {\n        event.port = this.getInputById(e.port.id, {disconnected: true});\n      } else if (e.port.type === \"output\") {\n        event.port = this.getOutputById(e.port.id, {disconnected: true});\n      }\n\n      // Emit \"disconnected\" event\n      this.emit(e.port.state, event);\n\n      // Make a shallow copy of the event so we can use it for the \"portschanged\" event\n      const portsChangedEvent = Object.assign({}, event);\n      portsChangedEvent.type = \"portschanged\";\n      this.emit(portsChangedEvent.type, portsChangedEvent);\n\n    }\n\n  };\n\n  /**\n   * @private\n   */\n  async _updateInputsAndOutputs() {\n\n    return Promise.all([\n      this._updateInputs(),\n      this._updateOutputs()\n    ]);\n\n  };\n\n  /**\n   * @private\n   */\n  async _updateInputs() {\n\n    // We must check for the existence of this.interface because it might have been closed via\n    // WebMidi.disable().\n    if (!this.interface) return;\n\n    // Check for items to remove from the existing array (because they are no longer being reported\n    // by the MIDI back-end).\n    for (let i = this._inputs.length - 1; i >= 0; i--) {\n      const current = this._inputs[i];\n      const inputs = Array.from(this.interface.inputs.values());\n      if (! inputs.find(input => input === current._midiInput)) {\n        // Instead of destroying removed inputs, we stash them in case they come back (which is the\n        // case when the computer goes to sleep and is later brought back online).\n        this._disconnectedInputs.push(current);\n        this._inputs.splice(i, 1);\n      }\n    }\n\n    // Array to hold pending promises from trying to open all input ports\n    let promises = [];\n\n    // Add new inputs (if not already present)\n    this.interface.inputs.forEach(nInput => {\n\n      // Check if the input is currently absent from the 'inputs' array.\n      if (! this._inputs.find(input => input._midiInput === nInput) ) {\n\n        // If the input has previously been stashed away, reuse it. If not, create a new one.\n        let input = this._disconnectedInputs.find(input => input._midiInput === nInput);\n        if (!input) input = new Input(nInput);\n        this._inputs.push(input);\n        promises.push(input.open());\n\n      }\n\n    });\n\n    // Return a promise that resolves when all promises have resolved\n    return Promise.all(promises);\n\n  };\n\n  /**\n   * @private\n   */\n  async _updateOutputs() {\n\n    // We must check for the existence of this.interface because it might have been closed via\n    // WebMidi.disable().\n    if (!this.interface) return;\n\n    // Check for items to remove from the existing array (because they are no longer being reported\n    // by the MIDI back-end).\n    for (let i = this._outputs.length - 1; i >= 0; i--) {\n      const current = this._outputs[i];\n      const outputs = Array.from(this.interface.outputs.values());\n      if (! outputs.find(output => output === current._midiOutput)) {\n        // Instead of destroying removed inputs, we stash them in case they come back (which is the\n        // case when the computer goes to sleep and is later brought back online).\n        this._disconnectedOutputs.push(current);\n        this._outputs.splice(i, 1);\n      }\n    }\n\n    // Array to hold pending promises from trying to open all output ports\n    let promises = [];\n\n    // Add new outputs (if not already present)\n    this.interface.outputs.forEach(nOutput => {\n\n      // Check if the output is currently absent from the 'outputs' array.\n      if (! this._outputs.find(output => output._midiOutput === nOutput) ) {\n\n        // If the output has previously been stashed away, reuse it. If not, create a new one.\n        let output = this._disconnectedOutputs.find(output => output._midiOutput === nOutput);\n        if (!output) output = new Output(nOutput);\n        this._outputs.push(output);\n        promises.push(output.open());\n\n      }\n\n    });\n\n    // Return a promise that resolves when all sub-promises have resolved\n    return Promise.all(promises);\n\n  };\n\n  // injectPluginMarkup(parent) {\n  //\n  //   // Silently ignore on Node.js\n  //   if (Utilities.isNode) return;\n  //\n  //   // Default to <body> if no parent is specified\n  //   if (!(parent instanceof Element) && !(parent instanceof HTMLDocument)) {\n  //     parent = document.body;\n  //   }\n  //\n  //   // IE10 needs this:\n  //   // <meta http-equiv=\"X-UA-Compatible\" content=\"requiresActiveX=true\"/>\n  //\n  //   // Create markup and add to parent\n  //   const obj = document.createElement(\"object\");\n  //   obj.classid = \"CLSID:1ACE1618-1C7D-4561-AEE1-34842AA85E90\"; // IE\n  //   if (!obj.isJazz) obj.type = \"audio/x-jazz\";                 // Standards-compliant\n  //   obj.style.visibility = \"hidden\";\n  //   obj.style.width = obj.style.height = \"0px\";\n  //   parent.appendChild(obj);\n  //\n  // }\n\n  /**\n   * Indicates whether access to the host's MIDI subsystem is active or not.\n   *\n   * @readonly\n   * @type {boolean}\n   */\n  get enabled() {\n    return this.interface !== null;\n  }\n\n  /**\n   * An array of all currently available MIDI inputs.\n   *\n   * @readonly\n   * @type {Input[]}\n   */\n  get inputs() {\n    return this._inputs;\n  }\n\n  /**\n   * @private\n   * @deprecated\n   */\n  get isNode() {\n\n    if (this.validation) {\n      console.warn(\"WebMidi.isNode has been deprecated. Use Utilities.isNode instead.\");\n    }\n\n    return Utilities.isNode;\n\n  }\n\n  /**\n   * @private\n   * @deprecated\n   */\n  get isBrowser() {\n\n    if (this.validation) {\n      console.warn(\"WebMidi.isBrowser has been deprecated. Use Utilities.isBrowser instead.\");\n    }\n\n    return Utilities.isBrowser;\n\n  }\n\n  /**\n   * An integer to offset the octave of notes received from external devices or sent to external\n   * devices.\n   *\n   * When a MIDI message comes in on an input channel the reported note name will be offset. For\n   * example, if the `octaveOffset` is set to `-1` and a [`\"noteon\"`](InputChannel#event:noteon)\n   * message with MIDI number 60 comes in, the note will be reported as C3 (instead of C4).\n   *\n   * By the same token, when [`OutputChannel.playNote()`](OutputChannel#playNote) is called, the\n   * MIDI note number being sent will be offset. If `octaveOffset` is set to `-1`, the MIDI note\n   * number sent will be 72 (instead of 60).\n   *\n   * @type {number}\n   *\n   * @since 2.1\n   */\n  get octaveOffset() {\n    return this._octaveOffset;\n  }\n  set octaveOffset(value) {\n\n    if (this.validation) {\n      value = parseInt(value);\n      if (isNaN(value)) throw new TypeError(\"The 'octaveOffset' property must be an integer.\");\n    }\n\n    this._octaveOffset = value;\n\n  }\n\n  /**\n   * An array of all currently available MIDI outputs as [`Output`](Output) objects.\n   *\n   * @readonly\n   * @type {Output[]}\n   */\n  get outputs() {\n    return this._outputs;\n  }\n\n  /**\n   * Indicates whether the environment provides support for the Web MIDI API or not.\n   *\n   * **Note**: in environments that do not offer built-in MIDI support, this will report `true` if\n   * the\n   * [`navigator.requestMIDIAccess`](https://developer.mozilla.org/en-US/docs/Web/API/MIDIAccess)\n   * function is available. For example, if you have installed WebMIDIAPIShim.js but no plugin, this\n   * property will be `true` even though actual support might not be there.\n   *\n   * @readonly\n   * @type {boolean}\n   */\n  get supported() {\n    return (typeof navigator !== \"undefined\" && navigator.requestMIDIAccess);\n  }\n\n  /**\n   * Indicates whether MIDI system exclusive messages have been activated when WebMidi.js was\n   * enabled via the [`enable()`](#enable) method.\n   *\n   * @readonly\n   * @type boolean\n   */\n  get sysexEnabled() {\n    return !!(this.interface && this.interface.sysexEnabled);\n  }\n\n  /**\n   * The elapsed time, in milliseconds, since the time\n   * [origin](https://developer.mozilla.org/en-US/docs/Web/API/DOMHighResTimeStamp#The_time_origin).\n   * Said simply, it is the number of milliseconds that passed since the page was loaded. Being a\n   * floating-point number, it has sub-millisecond accuracy. According to the\n   * [documentation](https://developer.mozilla.org/en-US/docs/Web/API/DOMHighResTimeStamp), the\n   * time should be accurate to 5 µs (microseconds). However, due to various constraints, the\n   * browser might only be accurate to one millisecond.\n   *\n   * Note: `WebMidi.time` is simply an alias to `performance.now()`.\n   *\n   * @type {DOMHighResTimeStamp}\n   * @readonly\n   */\n  get time() {\n    return performance.now();\n  }\n\n  /**\n   * The version of the library as a [semver](https://semver.org/) string.\n   *\n   * @readonly\n   * @type string\n   */\n  get version() {\n    return \"3.1.6\";\n  }\n\n  /**\n   * The flavour of the library. Can be one of:\n   *\n   * * `esm`: ECMAScript Module\n   * * `cjs`: CommonJS Module\n   * * `iife`: Immediately-Invoked Function Expression\n   *\n   * @readonly\n   * @type string\n   * @since 3.0.25\n   */\n  get flavour() {\n    return \"esm\"; // will be replaced during bundling by the correct identifier\n  }\n\n  /**\n   * @private\n   * @deprecated since 3.0.0. Use Enumerations.CHANNEL_EVENTS instead.\n   */\n  get CHANNEL_EVENTS() {\n    if (this.validation) {\n      console.warn(\n        \"The CHANNEL_EVENTS enum has been moved to Enumerations.CHANNEL_EVENTS.\"\n      );\n    }\n    return Enumerations.CHANNEL_EVENTS;\n  }\n\n  /**\n   * @private\n   * @deprecated since 3.0.0. Use Enumerations.SYSTEM_MESSAGES instead.\n   */\n  get MIDI_SYSTEM_MESSAGES() {\n\n    if (this.validation) {\n      console.warn(\n        \"The MIDI_SYSTEM_MESSAGES enum has been moved to \" +\n        \"Enumerations.SYSTEM_MESSAGES.\"\n      );\n    }\n\n    return Enumerations.SYSTEM_MESSAGES;\n\n  }\n\n  /**\n   * @private\n   * @deprecated since 3.0.0. Use Enumerations.CHANNEL_MODE_MESSAGES instead\n   */\n  get MIDI_CHANNEL_MODE_MESSAGES() {\n\n    if (this.validation) {\n      console.warn(\n        \"The MIDI_CHANNEL_MODE_MESSAGES enum has been moved to \" +\n        \"Enumerations.CHANNEL_MODE_MESSAGES.\"\n      );\n    }\n\n    return Enumerations.CHANNEL_MODE_MESSAGES;\n\n  }\n\n  /**\n   * @private\n   * @deprecated since 3.0.0. Use Enumerations.CONTROL_CHANGE_MESSAGES instead.\n   */\n  get MIDI_CONTROL_CHANGE_MESSAGES() {\n\n    if (this.validation) {\n      console.warn(\n        \"The MIDI_CONTROL_CHANGE_MESSAGES enum has been replaced by the \" +\n        \"Enumerations.CONTROL_CHANGE_MESSAGES array.\"\n      );\n    }\n\n    return Enumerations.MIDI_CONTROL_CHANGE_MESSAGES;\n\n  }\n\n  /**\n   * @deprecated since 3.0.0. Use Enumerations.REGISTERED_PARAMETERS instead.\n   * @private\n   */\n  get MIDI_REGISTERED_PARAMETER() {\n\n    if (this.validation) {\n      console.warn(\n        \"The MIDI_REGISTERED_PARAMETER enum has been moved to \" +\n        \"Enumerations.REGISTERED_PARAMETERS.\"\n      );\n    }\n\n    return Enumerations.REGISTERED_PARAMETERS;\n\n  }\n\n  /**\n   * @deprecated since 3.0.0.\n   * @private\n   */\n  get NOTES() {\n\n    if (this.validation) {\n      console.warn(\"The NOTES enum has been deprecated.\");\n    }\n\n    return [\"C\", \"C#\", \"D\", \"D#\", \"E\", \"F\", \"F#\", \"G\", \"G#\", \"A\", \"A#\", \"B\"];\n\n  }\n\n}\n\n// Export singleton instance of WebMidi class. The 'constructor' is nulled so that it cannot be used\n// to instantiate a new WebMidi object or extend it. However, it is not freezed so it remains\n// extensible (properties can be added at will).\nconst wm = new WebMidi();\nwm.constructor = null;\n\nexport { Enumerations, Forwarder, Input, InputChannel, Message, Note, Output, OutputChannel, Utilities, wm as WebMidi };\n","import * as _WebMidi from 'webmidi';\n\nexport const { WebMidi } = _WebMidi;\n\nfunction supportsMidi() {\n  return typeof navigator.requestMIDIAccess === 'function';\n}\n\nexport function enableWebMidi(options = {}) {\n  const { onReady, onConnected, onDisconnected } = options;\n\n  if (!supportsMidi()) {\n    console.error('Your Browser does not support WebMIDI.');\n    return\n  }\n  return new Promise((resolve, reject) => {\n    if (WebMidi.enabled) {\n      // if already enabled, just resolve WebMidi\n      resolve(WebMidi);\n      return;\n    }\n    WebMidi.enable((err) => {\n      if (err) {\n        reject(err);\n      }\n      WebMidi.addListener('connected', (e) => {\n        onConnected?.(WebMidi);\n      });\n      // Reacting when a device becomes unavailable\n      WebMidi.addListener('disconnected', (e) => {\n        onDisconnected?.(WebMidi, e);\n      });\n      onReady?.(WebMidi);\n      resolve(WebMidi);\n    });\n  });\n}\n// const outputByName = (name: string) => WebMidi.getOutputByName(name);\nconst outputByName = (name) => WebMidi.getOutputByName(name);\n\nexport const getDevice = (output, outputs) => {\n  if (!outputs.length) {\n    throw new Error(`🔌 No MIDI devices found. Connect a device or enable IAC Driver.`);\n  }\n  if (typeof output === 'number') {\n    return outputs[output];\n  }\n  if (typeof output === 'string') {\n    return outputByName(output);\n  }\n  return outputs[0];\n}","// Copyright 2014 Alan deLespinasse\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nvar reverbGen = {};\n\n/** Generates a reverb impulse response.\n\n @param {!Object} params TODO: Document the properties.\n @param {!function(!AudioBuffer)} callback Function to call when\n  the impulse response has been generated. The impulse response\n  is passed to this function as its parameter. May be called\n  immediately within the current execution context, or later. */\nreverbGen.generateReverb = function (params, callback) {\n  var audioContext = params.audioContext || new AudioContext();\n  var sampleRate = audioContext.sampleRate;\n  var numChannels = params.numChannels || 2;\n  // params.decayTime is the -60dB fade time. We let it go 50% longer to get to -90dB.\n  var totalTime = params.decayTime * 1.5;\n  var decaySampleFrames = Math.round(params.decayTime * sampleRate);\n  var numSampleFrames = Math.round(totalTime * sampleRate);\n  var fadeInSampleFrames = Math.round((params.fadeInTime || 0) * sampleRate);\n  // 60dB is a factor of 1 million in power, or 1000 in amplitude.\n  var decayBase = Math.pow(1 / 1000, 1 / decaySampleFrames);\n  var reverbIR = audioContext.createBuffer(numChannels, numSampleFrames, sampleRate);\n  for (var i = 0; i < numChannels; i++) {\n    var chan = reverbIR.getChannelData(i);\n    for (var j = 0; j < numSampleFrames; j++) {\n      chan[j] = randomSample() * Math.pow(decayBase, j);\n    }\n    for (var j = 0; j < fadeInSampleFrames; j++) {\n      chan[j] *= j / fadeInSampleFrames;\n    }\n  }\n\n  applyGradualLowpass(reverbIR, params.lpFreqStart || 0, params.lpFreqEnd || 0, params.decayTime, callback);\n};\n\n/** Creates a canvas element showing a graph of the given data.\n\n\n @param {!Float32Array} data An array of numbers, or a Float32Array.\n @param {number} width Width in pixels of the canvas.\n @param {number} height Height in pixels of the canvas.\n @param {number} min Minimum value of data for the graph (lower edge).\n @param {number} max Maximum value of data in the graph (upper edge).\n @return {!CanvasElement} The generated canvas element. */\nreverbGen.generateGraph = function (data, width, height, min, max) {\n  var canvas = document.createElement('canvas');\n  canvas.width = width;\n  canvas.height = height;\n  var gc = canvas.getContext('2d');\n  gc.fillStyle = '#000';\n  gc.fillRect(0, 0, canvas.width, canvas.height);\n  gc.fillStyle = '#fff';\n  var xscale = width / data.length;\n  var yscale = height / (max - min);\n  for (var i = 0; i < data.length; i++) {\n    gc.fillRect(i * xscale, height - (data[i] - min) * yscale, 1, 1);\n  }\n  return canvas;\n};\n\n/** Applies a constantly changing lowpass filter to the given sound.\n\n @private\n @param {!AudioBuffer} input\n @param {number} lpFreqStart\n @param {number} lpFreqEnd\n @param {number} lpFreqEndAt\n @param {!function(!AudioBuffer)} callback May be called\n  immediately within the current execution context, or later.*/\nvar applyGradualLowpass = function (input, lpFreqStart, lpFreqEnd, lpFreqEndAt, callback) {\n  if (lpFreqStart == 0) {\n    callback(input);\n    return;\n  }\n  var channelData = getAllChannelData(input);\n  var context = new OfflineAudioContext(input.numberOfChannels, channelData[0].length, input.sampleRate);\n  var player = context.createBufferSource();\n  player.buffer = input;\n  var filter = context.createBiquadFilter();\n\n  lpFreqStart = Math.min(lpFreqStart, input.sampleRate / 2);\n  lpFreqEnd = Math.min(lpFreqEnd, input.sampleRate / 2);\n\n  filter.type = 'lowpass';\n  filter.Q.value = 0.0001;\n  filter.frequency.setValueAtTime(lpFreqStart, 0);\n  filter.frequency.linearRampToValueAtTime(lpFreqEnd, lpFreqEndAt);\n\n  player.connect(filter);\n  filter.connect(context.destination);\n  player.start();\n  context.oncomplete = function (event) {\n    callback(event.renderedBuffer);\n  };\n  context.startRendering();\n\n  window.filterNode = filter;\n};\n\n/** @private\n @param {!AudioBuffer} buffer\n @return {!Array.<!Float32Array>} An array containing the Float32Array of each channel's samples. */\nvar getAllChannelData = function (buffer) {\n  var channels = [];\n  for (var i = 0; i < buffer.numberOfChannels; i++) {\n    channels[i] = buffer.getChannelData(i);\n  }\n  return channels;\n};\n\n/** @private\n @return {number} A random number from -1 to 1. */\nvar randomSample = function () {\n  return Math.random() * 2 - 1;\n};\n\nexport default reverbGen;","import reverbGen from './createReverb.js';\n\nif (typeof AudioContext !== 'undefined') {\n  AudioContext.prototype.adjustLength = function (duration, buffer) {\n    const newLength = buffer.sampleRate * duration;\n    const newBuffer = this.createBuffer(buffer.numberOfChannels, buffer.length, buffer.sampleRate);\n    for (let channel = 0; channel < buffer.numberOfChannels; channel++) {\n      let oldData = buffer.getChannelData(channel);\n      let newData = newBuffer.getChannelData(channel);\n\n      for (let i = 0; i < newLength; i++) {\n        newData[i] = oldData[i] || 0;\n      }\n    }\n    return newBuffer;\n  };\n\n  AudioContext.prototype.createReverb = function (duration, fade, lp, dim, ir) {\n    const convolver = this.createConvolver();\n    convolver.generate = (d = 2, fade = 0.1, lp = 15000, dim = 1000, ir) => {\n      convolver.duration = d;\n      convolver.fade = fade;\n      convolver.lp = lp;\n      convolver.dim = dim;\n      convolver.ir = ir;\n      if (ir) {\n        convolver.buffer = this.adjustLength(d, ir);\n      } else {\n        reverbGen.generateReverb(\n          {\n            audioContext: this,\n            numChannels: 2,\n            decayTime: d,\n            fadeInTime: fade,\n            lpFreqStart: lp,\n            lpFreqEnd: dim,\n          },\n          (buffer) => {\n            convolver.buffer = buffer;\n          },\n        );\n      }\n    };\n    convolver.generate(duration, fade, lp, dim, ir);\n    return convolver;\n  };\n}","// from https://github.com/mkontogiannis/euclidean-rhythms/blob/master/src/index.ts\n\nexport const getPattern = (steps, pulses, rotation) => {\n  if (pulses < 0 || steps < 0 || steps < pulses) {\n    return [];\n  }\n\n  // Create the two arrays\n  let first = new Array(pulses).fill([1]);\n  let second = new Array(steps - pulses).fill([0]);\n\n  let firstLength = first.length;\n  let minLength = Math.min(firstLength, second.length);\n\n  let loopThreshold = 0;\n  // Loop until at least one array has length gt 2 (1 for first loop)\n  while (minLength > loopThreshold) {\n    // Allow only loopThreshold to be zero on the first loop\n    if (loopThreshold === 0) {\n      loopThreshold = 1;\n    }\n\n    // For the minimum array loop and concat\n    for (let x = 0; x < minLength; x++) {\n      first[x] = [...first[x], ...second[x]];\n    }\n\n    // if the second was the bigger array, slice the remaining elements/arrays and update\n    if (minLength === firstLength) {\n      second = second.slice(minLength);\n    }\n    // Otherwise update the second (smallest array) with the remainders of the first\n    // and update the first array to include only the extended sub-arrays\n    else {\n      second = first.slice(minLength);\n      first = first.slice(0, minLength);\n    }\n    firstLength = first.length;\n    minLength = Math.min(firstLength, second.length);\n  }\n\n  const pattern = [...first.flat(), ...second.flat()];\n\n  if (rotation !== 0) {\n    return rotate(pattern, rotation)\n  }\n\n  return pattern;\n}\n\nexport const rotate = (arr, n) => arr.slice(-n).concat(arr.slice(0, -n));\n\nexport const euclidToPattern = (euclid) => {\n  let pattern = []\n  for (let i = 0; i < euclid.length; i++) {\n    if (euclid[i] === 1) {\n      pattern.push(i / euclid.length)\n    }\n  }\n  return pattern\n}\n\n","export const randRange = function (min, max) {\n  return Math.floor(Math.random() * (max - min)) + min;\n}\nexport const mapN = function (n, start1, stop1, start2, stop2) {\n  return ((n - start1) / (stop1 - start1)) * (stop2 - start2) + start2;\n};\n\n// from https://github.com/felixroos/sfumato/blob/0f5f7aa00567de9064d2b2778418e0e4c3e93429/src/util.ts#L13\nexport const tokenizeNote = (note) => {\n  if (typeof note !== \"string\") {\n    return [];\n  }\n  const [pc, acc = \"\", oct] =\n    note.match(/^([a-gA-G])([#bs]*)([0-9])?$/)?.slice(1) || [];\n  if (!pc) {\n    return [];\n  }\n  return [pc, acc, oct ? Number(oct) : undefined];\n};\n\nconst accs = { \"#\": 1, b: -1, s: 1 };\n\nexport const toMidi = (note) => {\n  if (typeof note === \"number\") {\n    return note;\n  }\n  const [pc, acc, oct] = tokenizeNote(note);\n  if (!pc) {\n    throw new Error('not a note: \"' + note + '\"');\n  }\n  const chroma = { c: 0, d: 2, e: 4, f: 5, g: 7, a: 9, b: 11 }[\n    pc.toLowerCase()\n  ];\n  const offset = acc?.split(\"\").reduce((o, char) => o + accs[char], 0) || 0;\n  return (Number(oct) + 1) * 12 + chroma + offset;\n};\n\nexport const hexToHSL = (hex) => {\n  var result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n  const r = parseInt(result[1], 16) / 255;\n  const g = parseInt(result[2], 16) / 255;\n  const b = parseInt(result[3], 16) / 255;\n  const max = Math.max(r, g, b),\n    min = Math.min(r, g, b);\n  let h,\n    s,\n    l = (max + min) / 2;\n  if (max === min) {\n    h = s = 0; // achromatic\n  } else {\n    const d = max - min;\n    s = l > 0.5 ? d / (2 - max - min) : d / (max + min);\n    switch (max) {\n      case r:\n        h = (g - b) / d + (g < b ? 6 : 0);\n        break;\n      case g:\n        h = (b - r) / d + 2;\n        break;\n      case b:\n        h = (r - g) / d + 4;\n        break;\n      default:\n        break;\n    }\n    h /= 6;\n  }\n  return {\n    h,\n    s,\n    l,\n  };\n};","\nimport { getPattern, euclidToPattern, rotate } from \"./euclid\"\n\nimport { hexToHSL } from \"./utils\"\n\nexport class Playhead {\n  constructor({\n    playing = false,\n    interval = 4,\n    pattern,\n    instrument = 92,\n    offset = -12,\n    legato = 0.5,\n    color = \"#ffff00\",\n    steps = 8,\n    events = 3,\n    instrumentName = '',\n    rotation = 0,\n    preset = '',\n    velocity = 0.4,\n  }) {\n    this.playing = playing\n    this.interval = interval\n    this.pattern = pattern\n    this.instrument = instrument\n    this.instrumentName = instrumentName\n    this.offset = offset\n    this.legato = legato\n    this.color = color\n    this.hsl = hexToHSL(color)\n    this.steps = steps\n    this.events = events\n    this.followSteps = true\n    this.rotation = rotation\n    this.midiEnabled = false\n    this.midiOutputDevice = {name: '', index: -1}\n    this.preset = preset\n    this.velocity = velocity\n  }\n\n  start = () => {\n    this.playing = true;\n    return this\n  }\n\n  pause = () => {\n    this.playing = false;\n    return this\n  }\n\n  stop = () => {\n    this.playing = false;\n    return this\n  }\n\n  updateStep = (newStep) => {\n    let copy = { ...this }\n    if (newStep > 0) {\n      copy.interval = newStep\n    }\n    return copy\n  }\n\n  followStep = (follow) => {\n    this.followSteps = follow\n    return this\n  }\n}\n\nexport const updateEuclid = (playhead) => {\n  if (playhead.steps < playhead.events) {\n    playhead.events = playhead.steps\n  }\n  playhead.euclid = getPattern(playhead.steps, playhead.events, playhead.rotation)\n  playhead.pattern = euclidToPattern(playhead.euclid)\n  return playhead\n}\n\nexport const updateRotation = (playhead) => {\n  playhead.euclid = rotate(playhead.euclid, playhead.rotation)\n  playhead.pattern = euclidToPattern(playhead.euclid)\n  return playhead\n}\n\n","console.log('load _tone_0110_Aspirin_sf2_file');\nexport const _tone_0110_Aspirin_sf2_file={\n  zones:[\n    {\n      midi:11\n      ,originalPitch:8400\n      ,keyRangeLow:0\n      ,keyRangeHigh:127\n      ,loopStart:765\n      ,loopEnd:807\n      ,coarseTune:0\n      ,fineTune:-8\n      ,sampleRate:44100\n      ,ahdsr:true\n      ,file:'SUQzBAAAAAAAI1RTU0UAAAAPAAADTGF2ZjU3LjcyLjEwMQAAAAAAAAAAAAAA//tAwAAAAAAAAAAAAAAAAAAAAAAASW5mbwAAAA8AAAACAAAHPACMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyM//////////////////////////////////////////////////////////////////8AAAAATGF2YzU3Ljk2AAAAAAAAAAAAAAAAJAOSAAAAAAAABzwhgeYAAAAAAAD/+9DEAAAJpPt39BGAJNZHK785oEmuqEIAAiSTUQvAlkBQTMYx7u+7u7oiIiJ//oiI7u7u55J//oiIiIhO7/////omiIiI7u7u////ufECCEKAh/8uCAIAgc//zkTg+BAxx9TAmIACGhoYKBAf4bAERsJmYFmAQgPN0SApjQENXqjIYgAwcUMzAI8MpDABAI8qXR4OnzEOUFNmYkJVXKBitaO6/kGVCXnDCoMGjIF8nYT1cpY1anCxdeSXkun1E5y9pwhIi5PY6MkwEXfqYmy6oOpQMqV6mXSV9naJiKvFPuohWhdA/AwIq6HGmyqlpYzWl2UxI4vfuZ3YjBMujPbHf+VSnGIukFQwgF8/7natEw496zne0+WU0OAzhBCYKta+2J3naiL+v7laApCapWNX6X7vf6X/luE1LO63f/KAbUWrbyh+mtUas8O3u/i9cx9a22fLcHF9LdyzrW5Bv7tH3nYve7rP//WOOP/////v/y//r2f/////////9fz//f/+pNAWH/+Hf5hvv9wv65zPv/hr9xqA3SJIfZAAAAAFA0vVDgaGTBwOGhsYaCJsOzGdZeZENRoYNFmpKYRJBmktAYhjQZBQCTRGSSwrywk6O1EIWlVScy5UirWVEpV5gc2V8wqZndOTE2wI8WNBouiUqBCla3N7g5MrC1P4jM9YmtgcHJ63Nbx2yvm6G8dsr6WA/nevpYEeK+gy0jxY0GS8SLaDJeaM9hSP5ozKbyHianDCjY3q2cZ3q1cX1utcX1uts01uts03W2M63W2cXjPX0sCPM+YZYEeK+gyP4jLCgyR5oz2FJHmjPZIcSd9BxMlKzJSolDSJBqlQapYKqWKw1isNETlREpnEqkpQclphszxDvERG/8ZABj6SxiQQphaKxigH5mqTxpYn5s/TRo5n5ivuxijnxmK+JnsmhlyWZhcVxhoeJki3hkpHpkPWhj/bRpHFJtMbhqWHxi4KJkkJ5n6kxnk6ZknExizERl+3JpEgBo6KYRNTJ4EBgOMIFUAm4GmowSkTHR+M8ksSnBq0lGqlOaJdhkSJmEIWZyYxqUrjUtM0ioxcNwYEjEoOMHC0kEpggSGJQ+AkYZjCRnApmbUk//vQxNWAHuWlWd3HgA/jyCF93mqcZOYZiFuGCWsZRTJmwbDSWU1Axk1LA1F0xvAG6jM1zZMDeiRLia8cZ5CYtQCF4wdAAgiDrCpwAY8Zw+Zl4YKWII5jGhny4OgCzIDGSyyWrCmfQO0ldiMYKKmRJGKUg1gKrjCnzIBho+JDUUomoClsspWVhC72OL2WKpkkakqoIpJYVujbqWl/hEBIAKICY6kFXJWpDITUOSTyt7JIGruqmMFgIyEIQRfdIhSarVdKlWkslbLWIXSyBgyEkLghgOk6mgsdmjfOK/0Rj0ep6Wkg9pqpkbUOSTyaa6GhvLD2NWauUMQh98mnKlTSR1TtVUh+QT2OMqjslmJXLJPDr/Oi3Z6n3ilHZ5Gn1gKConGIvIYef19nhgmIS+99qGXSeF6X0f+KSKKxqUx6gp72Wc6/zovE9T7w5I5DLqWtdu4ZZ0UWdluTc0xBTUUzLjk5LjWqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqg=='\n      ,anchor:0.01081633\n      //_tone.vibesc6\n    }\n  ]\n};\n","console.log('load _tone_0530_Aspirin_sf2_file');\nexport var _tone_0530_Aspirin_sf2_file={\n  zones:[\n    {\n      midi:53\n      ,originalPitch:6000\n      ,keyRangeLow:0\n      ,keyRangeHigh:47\n      ,loopStart:3777\n      ,loopEnd:4454\n      ,coarseTune:0\n      ,fineTune:19\n      ,sampleRate:25000\n      ,ahdsr:true\n      ,file:'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'\n      ,anchor:0.03056000\n      //_tone.Doo_Voice_F3\n    }\n    ,{\n      midi:53\n      ,originalPitch:6000\n      ,keyRangeLow:48\n      ,keyRangeHigh:56\n      ,loopStart:3777\n      ,loopEnd:4454\n      ,coarseTune:0\n      ,fineTune:19\n      ,sampleRate:25000\n      ,ahdsr:true\n      ,file:'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'\n      ,anchor:0.03056000\n      //_tone.Doo_Voice_F3\n    }\n    ,{\n      midi:53\n      ,originalPitch:6700\n      ,keyRangeLow:57\n      ,keyRangeHigh:61\n      ,loopStart:2876\n      ,loopEnd:4470\n      ,coarseTune:0\n      ,fineTune:19\n      ,sampleRate:44100\n      ,ahdsr:true\n      ,file:'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'\n      ,anchor:0.02365079\n      //_tone.Doo_Voice_C4\n    }\n    ,{\n      midi:53\n      ,originalPitch:7100\n      ,keyRangeLow:62\n      ,keyRangeHigh:68\n      ,loopStart:4190\n      ,loopEnd:4823\n      ,coarseTune:0\n      ,fineTune:19\n      ,sampleRate:44100\n      ,ahdsr:true\n      ,file:'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'\n      ,anchor:0.03031746\n      //_tone.Doo_Voice_E4\n    }\n    ,{\n      midi:53\n      ,originalPitch:7800\n      ,keyRangeLow:69\n      ,keyRangeHigh:127\n      ,loopStart:3242\n      ,loopEnd:4569\n      ,coarseTune:0\n      ,fineTune:19\n      ,sampleRate:44100\n      ,ahdsr:true\n      ,file:'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8Ze4dG9zdGsv/EcZmUQ/rFmTVnAnpBDVBbp6CixvWIK7DNyfbFIJzlXPLG9VkU3nS4TuN/GG5DF/yzudw7Q1fv48x/HLf///v//8P5jreOtd1+f/+G//uOP6w3qzQqDE//ugxPCAGw2VV+3h9UQpPqo+uYAB1O2XUABHQBBBF4dw61mAEAAAyOPCo2TA4aMmqk1+yzWYzEcfOYkUx0ezxYqMbMwwicjMoiMZC4FQ8zCAjGRzMrmMxYKdwAEKwAFGLhlZoekIDQMIBk10MSxQjNAP0F12GSLiDzOASDmerBQiluQgaMZdSIQAwYtNS2AiqFByGIQttFbAoKBzcqm/DWE9g4CAQWWAIIA1hUNC1YgBEEw8PJjFt1HAwQiyPDdC/qGi9BQCJCuG33gOLt8/RgwtPV6siVQJAgYDYFgJIZt+8h3JjLQKR8VWboLHZlikp2rPLZHIdwUylvHHLXOrOwRTueFwZMa9TF6X9ijLXTfdrIgAUFcvarLm3kL2PohsrlpinL0PS8UNNIlTyxGMP4u2LxZPVwb7sO1RvO+7+vnflMKfiKIdmjv9Go47kshCw0Jp5JJoeT3aW6kloZblUtcx329jW3JblyW0lHzuV7Xf3//DtnDmOdzG52/N2ubtVed33LP//n4b/89c7erbwq1LWWu5/jb8fPomMAAQgADwgw5gWcsm55qGlAYXGtha1HwywLPGEQCMCjMmiLtWtg3iDD1D1EKLlALcPUZUc5SCj0k5Q6NBVqtVqtZXtsvXr17q1q/MF691CfPYta/FrWrX/2hPnypbjmNI0lFO9Vr63ta1rf//11////ugxPmAME43TfnNgAr6MKgrsPAA/7Qnz7UJ8+jZYUNQ19l69e1xCfV/zXUJiV0WE+jZgvXtd5gvXuoTErnurWfPnz62sWta1rW9oT6NuCrVbGy9exQ1iV3//4NHv//Wd1gqTEFNRTMuOTkuNaqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq'\n      ,anchor:0.05403628\n      //_tone.Doo_Voice_B4\n    }\n  ]\n};\n","console.log('load _tone_1170_Aspirin_sf2_file');\nexport var _tone_1170_Aspirin_sf2_file = {\n    zones: [{\n        midi: 117,\n        originalPitch: 6000,\n        keyRangeLow: 0,\n        keyRangeHigh: 127,\n        loopStart: -1,\n        loopEnd: -2,\n        coarseTune: 0,\n        fineTune: 0,\n        sampleRate: 22050,\n        ahdsr: false,\n        file: '',\n        anchor: 0.00090703 //_tone.AspPower_Tom\n    }]\n};\n","console.log('load _tone_1151_FluidR3_GM_sf2_file');\nexport var _tone_1151_FluidR3_GM_sf2_file = {\n    zones: [{\n        midi: 115,\n        originalPitch: 6000,\n        keyRangeLow: 0,\n        keyRangeHigh: 127,\n        loopStart: -1,\n        loopEnd: -2,\n        coarseTune: 0,\n        fineTune: 0,\n        sampleRate: 44100,\n        ahdsr: false,\n        file: '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QqGGiSh7LaZzK0IpBhw0lM9YEhedkE8OfFzWL4oo3hxSRwP2uWEE6cHEqRIfHLCo5bj8+ofFIqsMuVYyFRJaZAfYOAiYVCI4npEjXqSzzkN7Fn7FpB9lNC+WfDshT6kjl5cASKMmOnXp8hKIrmLmkC9pTWSt2mZaf/H+znzlV4wqGPNuKZnJqR3/KyHc/W1/dL/Dt8oV319c3eTm3wRJHV+vkd7v3yradz+yNupxoLmUbStw/JgRK8xPMoAUJH5i7LWZKbRNYWXQ1AaEkDNe0qkoyXQren0o5CM/Euvy5dXqrT2hKEoSjE4BsfiSi+rJKMl39zSIKDEqqtnKI4cSJa1eZ8kUSiQV//uQxPMAF621Hcykc+MbuKM5lhpp6fDkqJJPJpEi1bNHVWyzzVEkt/apz9q2c841V2qZ/aqolOJQVPREDQc/BrDSfiIDHoNCV7IiDn+yCvJflQaDtUxBTUUzLjk5LjVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV//tAxPaD1A1HFaww0UAAAD/AAAAEVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVU=',\n        anchor: 0.00324263 //_tone.High_Woodblock_L_\n    }]\n};\n","console.log('load _tone_0161_SoundBlasterOld_sf2');\nexport var _tone_0161_SoundBlasterOld_sf2 = {\n    zones: [{\n        midi: 16,\n        originalPitch: 8800,\n        keyRangeLow: 0,\n        keyRangeHigh: 110,\n        loopStart: 69,\n        loopEnd: 135,\n        coarseTune: 0,\n        fineTune: -15,\n        sampleRate: 44100,\n        ahdsr: false,\n        sample: 'AAAAAPvgOueI9FcEZBJ8HOUizidQLdUzcjltOzE3pSwWHmQQZQfEBfcJsxBmFVoVlg/2BXL7PfLf6U7gQtPIwX6tOJr0jGuJMZCynoewHcG6zm7ZOOP87Wr6vgaYD9IS2A94Cc8DSAOmCVoWJCURMmA57TqCOL80NjFGLrAp8CDBEjYB8u/84/vgOueI9FcEZBJ8HOUizidQLdUzcjltOzE3pSwWHmQQZQfEBfcJsxBmFVoVlg/2BXL7PfLf6U7gQtPIwX6tOJr0jGuJMZCynoewHcG6zm7ZOOP87Wr6vgaYD9IS2A94Cc8DSAOmCVoWJCURMmA57TqCOL80NjFGLrAp8CDBEjYB8u/84/vgOueI9FcEAAA='//_tone.octavewave\n    }, {\n        midi: 16,\n        originalPitch: 11100,\n        keyRangeLow: 111,\n        keyRangeHigh: 127,\n        loopStart: 2963,\n        loopEnd: 5394,\n        coarseTune: 0,\n        fineTune: -48,\n        sampleRate: 44100,\n        ahdsr: false,\n        sample: ''//_tone.kpianob5\n    }]\n};\n","console.log('load _tone_0390_FluidR3_GM_sf2_file');\nexport var _tone_0390_FluidR3_GM_sf2_file = {\n    zones: [{\n        midi: 39,\n        originalPitch: 3600,\n        keyRangeLow: 0,\n        keyRangeHigh: 36,\n        loopStart: 27715,\n        loopEnd: 28392,\n        coarseTune: 0,\n        fineTune: 6,\n        sampleRate: 44100,\n        ahdsr: false,\n        file: 'n        anchor: 0.07376418 //_tone.SB2_C3\n    }, {\n        midi: 39,\n        originalPitch: 4800,\n        keyRangeLow: 37,\n        keyRangeHigh: 48,\n        loopStart: 12019,\n        loopEnd: 12357,\n        coarseTune: 0,\n        fineTune: 3,\n        sampleRate: 44100,\n        ahdsr: false,\n        file: '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        anchor: 0.05424036 //_tone.SB2_C4\n    }, {\n        midi: 39,\n        originalPitch: 6000,\n        keyRangeLow: 49,\n        keyRangeHigh: 60,\n        loopStart: 5728,\n        loopEnd: 5896,\n        coarseTune: 0,\n        fineTune: -6,\n        sampleRate: 44100,\n        ahdsr: false,\n        file: 'SUQzBAAAAAAAI1RTU0UAAAAPAAADTGF2ZjU3LjcyLjEwMQAAAAAAAAAAAAAA//tAwAAAAAAAAAAAAAAAAAAAAAAAWGluZwAAAA8AAAAHAAANWABERERERERERERERERERGNjY2NjY2NjY2NjY2NjgoKCgoKCgoKCgoKCgoKioqKioqKioqKioqKioqLJycnJycnJycnJycnJyfj4+Pj4+Pj4+Pj4+Pj4//////////////////8AAAAATGF2YzU3Ljk2AAAAAAAAAAAAAAAAJAY1AAAAAAAADVjUrSGEAAAAAAD/+8DEAAAG0BtjVGAAI9Ku6ys9oJAAAR09/rrocmAwtNojfBgILByXeoPqBCUOcH/B8H98MSkTh9QPv/lAxlHLD8H3//wQdBD/8uHwAAGMIKlXLNXorGBUF0wNQDjCWRLMrYZwwviSTbOBPMBkBMwGwBDKlA0MTQHIwERDDDfCNFABUwDB+AXMEEBIwPQpDAcAjQSsIFD5lwRqJgqCZuhtAYUDDxYSaBQoXmL7vk7MUngchgFnS5BJ80ZsbPGnRF9IjEiIUyqBolGiYU+Vjvy9/puxKcIalNA7VLR1tVY82K/TXKavNdq/vOMcrvrytDL7Ueu5VZyU3qa136bKJVpdX+tTf+ev7zmW/1u5TyqboqXn/qrSymrS81l/Pzw5//z8tb5d5W1TXct8/f1qa19am3jzGlxCv//6uR2x6goBtaqAAAm3/5a4uSY1osaPVOZHDGYxDuFHVMVwnLogQTTIMFgUESf5heVpgWAq/XsHgCJkQXA4I0Z08QIkTAcoHBDVINwRI6IQg3MLyJdRRMSKJGRNEkbJJt616zetfU6lmJRMiOImi2uWTJNE4W1KSvU+yrK1H/bRPqu60j1JBadSZ5FmSlw8XJH9pBRKsYUOln1klC7gu3ShR0YysFQDp7diYBIwFARDCvD9OENBww5QETAXA5MdgNMmV3IgrDAwDlMOoCAwBgLzABAGMTQO4wnQCDAEAHFQBgUFuwtoph4AfQe8K0F+xwvuSAHyKkEIBA8ABF2WAoIFrkoKKPt4LTEnBdkug6Wt93/Ryq3tLFzOnlrW07jSMwTMxTM+YN/oqSrYkfZqDE1CN0ih98pMxyblbYal2LYub5MSPXb8QbYhZkklmo8uqrU2WjkY5CGJX4+c+6cnN20luSrLjtQVvx/y6jlxZb66nvofVTpN9YAAGz22mAsAyYKoFxhTBlnPgLEYkwIpgmhCGJEtoY0oVRgHAMmBIAGZCgIJgP/7kMTNARN5E0L92gAjRLRmjeem3MAKiowOD8w0AICgDqoB07HQLEjhJLmJUSBJUEfcUORzzxkChtIGGyAHAUCx68xOe9ZDj2s1KQhBEM+UPKmWY3yKcTNPXH9IkkFZrRdy11gooxRRR5abn2rFCRQdZT3L30dPMmT2pJpFnj9G5NlWVStJ5iftybYJPUG7pteoOtVc7WZG1zbPcHJqDy7anfEcUxlKKRXFa6jop1Pu+ItuvYC2+spgMgOGBACqYNY4xs4qsmFuCsYKQLxjMpGGTUEQYNICpgEhiGHABeKgWFUEEwfSMTBMArZsSgHiQqw4AHBph+AXNTmBkgmMtjhBsHOLPgRNC+KLmKbnvp3Vntt2XFvPJZtpsGX6luvp5DbuxTWTWO4Xd5zzsVnmnpPUy/tbVa09WH538tzmdLy/N2O8wOe7azibOaUhMJI+A6VluXzSyqOhNrIpsBT21mnEqLzWvrU/1vVu2U11VS+NETSbf4+Za9eZZpZvkPL+WXQBb/X4RAKiAEAwIx4TGVYUMC0F0HA+mNyX2ZdAG5EF8f/7kMTcgRmFozLvcWujMzRmTeyaPIEIURxkSGAxAW/OcBsWu4CDAFGoKmSZKPAG4bHK6ThWDJQwcw4D6KaGAQTAakQ/LVS/b1Tm+tSubWxthqUbhvMpY54i14R4s2sLQXx+IZ0Xmo+dV9aNev/2FnxpMOGNXsqG/gdu9L/UyBTsC6GZXx6nhmb/XrFJ/7Q3qd5no5dqt2zfMr16xxZ7y6JllqFZc71ZGvrLc59d/e1ukN4Jlxb7H0tvsTuZeLmkMBAE//246AAYE4H5grBmGpgaqYUAIxgVg0mB8geYBQPpg4eCEIG9QgX/MCCQyzyjGwYLnignDkstl+TSAVb+idooBlO6JEMpHUUOue3EiEkgvCfWYTZvXyN5KDb4ULZODbmIbeGOYczCpEKARhW6ssby+tdpCvpTjmu3m1b7urVa+bcu/naOuZZiAt/eO/Id/i5u1qpM3qdjmTtOzemj8f2pe9co7+91s3JaxHs9Tqw0xRT3IWMptL7CzezFst7X5174oyqAACu+tpgWgCGBoBeYSYQRxngCGISAwFwMTGwJ5P/7kMTWARlNnzJvcYnrD7Rm6e4w/MrsEswVAEBQHswtwOyUBUwEgMTFFJBMJ4CMwBQDAoCWYEIAD7pIGGiDskBRjIApQBbpLQwEABojbb9ZmSegKApdzACiPk43Y1YRrl8bTQ16UyiWleYITkV5siAzj61Aaqu2N7a6gx93dddWiq0nD0Sm8GLHmTlRc5dPre2ubcu4YGbiltORYx8Q4sPpujynUknE8U3NLp4+A9H0a7waeuuqvv43WKTWNq0eEmDV+Xx14AADUAgtmDaBEYNwxJunJtGGoDaYLoQBiKIZGUuDwYJQA5gDBajweJgBAHmBOAeY6gsph7gHkwFIyAuDgRI8z0w4A0Uu5CSgOkQEs86wIANjlppgvGsHEcrXUhVJj3Pu3PeXaTi78e3ho1yhn3Hgjlh2li2ay1ztJU08cKzXrGVHqInVsUcHnlWzlsmiWkOpoXsSZ5pNGhEiys5RG0bKNFzqqxdDC9bTK02m1LJ09V8Z+HxWPWU1bLLKsa5x9D57WXU5rfKTvyrNmjlLdydvnLNSXVn//ooA2+2UiP/7oMTUgVmlozDvMRdjWbRl6eempBrMA4FAw6iXDDlWPMQsMswjwCzD5PWMDIHAmA5KgHpikAdGBUAwDAIDCNLIAgMhgeAQGA4BgNA2hcDMTHzy+oyogEhQgEyIIdxxASBOhiFwOQuu67vTFRctPt656Zp4Cry98c8N1ufZtfVnv22TeGN7VPIJ+2+DvxvvLkosVOxmIRT6T7mN+IQ5OV5XE5fblkNxuf5YpKSz9TCxzGxZ3nSWMJunrxvGUX7dqh1cwsfqYy1vDWHaS9j/c7eeqe3nl3WH9yw/msL291L2vyzt/Yzzzzvd1l9/POxhUsXs8NXt3c8+50+wqQmQmQiAqDhp9KLBUKBQDA/gRIwy0JqNdbh8jHZVZNhyepgOgGmYD8AOGNtw7RlBqL0oowIwCcC3MBsAGDMiQ10y2QxxfuKlQG0IDoM3plM0zBcoZnJeNAahUAE5w8ijOpcQNnshamlV8wDQBTAHANLtAICAypkQTCEGJMkYhswyBAMd/5gFgAGAsAMoeDgLASAaYQAapgQB8GMKNcYS4pBihgzf+tdBwC4NAHQHAIBAIACAQBhhHCDmAUCmYSARpgXAZGBICWYAQKn///7PwcBIFQCwcAuFwBUIgEAYYNoPxgPgtGC6AoYIAQ4gAbMEIEkDAaf///+GADGAMAA+oQAgKgBhABaDaWRawCAGhf/7sMT9AB1RozB17YAnUUEnPz/giAAgwJQMgCA0YD4ABgFAXqOmAYAqNAE//////jQARZCBQgABO8MADVlTjSIRaLuI2rEMAMAxBEGABCAAWuglStTRXp///////t4g4vkvmtFNdhiTaPC9EvGco/rFR/AIBCexdpMmNKqoOpoqcA0ARmSDzd3CaL//////////hPyiWTFmXzsbyl8xLKC9Tzsb7L7ksrTlPRRu2WxT1UiFwAniRWedgThggAFPVNUvtQJfMmWk18EABqqoaozXlKlNlKmbggAWTEFNRTMuOTkuNaqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq//sQxMwDwAABpBwAACAAADSAAAAEqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqo=',\n        anchor: 0.02643991 //_tone.SB2_C5\n    }, {\n        midi: 39,\n        originalPitch: 7200,\n        keyRangeLow: 61,\n        keyRangeHigh: 96,\n        loopStart: 2894,\n        loopEnd: 2978,\n        coarseTune: 0,\n        fineTune: -6,\n        sampleRate: 44100,\n        ahdsr: false,\n        file: 'SUQzBAAAAAAAI1RTU0UAAAAPAAADTGF2ZjU3LjcyLjEwMQAAAAAAAAAAAAAA//tAwAAAAAAAAAAAAAAAAAAAAAAAWGluZwAAAA8AAAAEAAAJrgBpaWlpaWlpaWlpaWlpaWlpaWlpaWlpaWmUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUysrKysrKysrKysrKysrKysrKysrKysrKyv////////////////////////////////8AAAAATGF2YzU3Ljk2AAAAAAAAAAAAAAAAJAQcAAAAAAAACa6qLZtWAAAAAAD/+9DEAAAHIDFedDGAJUxAa6s90NgABO7dKHAwN4hRAgAITriEri3eCZ8EAQLgg4Hz5c/wx+CEEHaw//Lv4IcuD9EEHT5cP0QQd////BDACAABBAMCga3F5EAAGmAgAqYAoeRh0r2mEqGsZBSI5glgWgwAA7U2vjF9HAP0A4Ywly4RGBC5Bm0o9GGsACadC45gTAVDAErDGmhEGuIkGAGuBUim/WGiZiQhRvcQRhsBRimVh7AHwQFrUGsxSHgaFJgAAxjqOREUo8l4iBEwLZ0xPBdpVuIwDODIFFAMjghg4x2TI9BwKmBgGg4roBlVx54/nLTCMMg4CjAgPxIV4rVMGg5JgBMDAwIheljfwROSqbt43IGSHlY6CrJo648OISK44B6kJmMWrVLjZrYWrsOvKodEGDPnHLLAX9eSBXGo7y/oYi9+luayu7q3MblLemq1qK3X07/557u40mTl/+862fN46xuZ1s8d8/VPyxKYZs5WtfdxxzmcMqvf1/73//////////////////////+//HHH/1l3uP45a7vVnX0V5Sq4AAAAAAAB3mDQBD76jQgMAhIxSYD1/tPfKEysUTGYuMXj4AhQGhAzHxjGAcMMgIu80MMbAYtMB1cIAwUOVSKQloBj8Dt/wMYDDBJgbEBCBKBZsMkYy6GBQMEjALtA2NDil1hCQW1HmwMBClnU1wwxNGpoovDnANFlGySLHSs6rpuOeivWYjRNUW00Wbr/b99uffb9rP0KPOlg+bYeatwIciVMqgGoaHgOBlJoHrTWAACGAr+YAoAwXAfBADRgEgWgwCgwKQpzGaYjMQELcwGAMjAQAYMCkCEaAaMCYFcxATjzBoAtAIBSTMidgKgUmDeFIXrLeJDlrDCRMygcN/+l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',\n        anchor: 0.01390023 //_tone.SB2_C6\n    }]\n};\n","console.log('load _tone_0660_Chaos_sf2_file');\nexport var _tone_0660_Chaos_sf2_file = {\n    zones: [{\n        midi: 66,\n        originalPitch: 4800,\n        keyRangeLow: 0,\n        keyRangeHigh: 48,\n        loopStart: 7710,\n        loopEnd: 9567,\n        coarseTune: 0,\n        fineTune: 0,\n        sampleRate: 22050,\n        ahdsr: true,\n        file: '',\n        anchor: 0.10512472 //_tone.Tenor_Sax_C4_SC88\n    }, {\n        midi: 66,\n        originalPitch: 5300,\n        keyRangeLow: 49,\n        keyRangeHigh: 53,\n        loopStart: 5839,\n        loopEnd: 7356,\n        coarseTune: 0,\n        fineTune: 0,\n        sampleRate: 22050,\n        ahdsr: true,\n        file: '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',\n        anchor: 0.10385487 //_tone.Tenor_Sax_F4_SC88\n    }, {\n        midi: 66,\n        originalPitch: 5900,\n        keyRangeLow: 54,\n        keyRangeHigh: 59,\n        loopStart: 4476,\n        loopEnd: 5459,\n        coarseTune: 0,\n        fineTune: 0,\n        sampleRate: 22050,\n        ahdsr: true,\n        file: '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ZD5+2H6qXDbejpY/hollIsK+GOkBOWP6vMZk9arexoIA5nzmbMZH/2cKdWrO5llnX5+rnbsIz/8w/2yOP6yC6Yy0Q6+KRPAJ61LomJcxkTR5k9SVrcSiqTpl/ktZj2ygnD7ZYeXe8+4JtRM7UBAaxy58gTj7e0oXti1Mtv/zkMTSOcQOgj7mFzXTmOSVuWMkx56Uy97lJclDT9oInQOgAAgWAMnP0+WYCIBTj6mDR6YckBhYLBAYRsWoXZDAOGHhdFll6gZgAFGNheuuB5m2quYBF5EKKaSOAnIYAgeI/HqRyHfQzM21FmEYxh92yEaNU2D07DYu5YGPq8s5SxlA4GHmcP16WvIDGErUYlNqUFgdG+T92NvuCgU5j+O2wwfz887bJccssKRwIX/wbJVlswnOyu7XemvnZzv0DZrl3m85Xh+X4TEV1z/5Adn9/2hhW9XcLbgc/eV/Gf+5rnL36w/cz3v2sKsm/W8ux3vccv3R/vHXzHcP/sFwNnl23af+5v/zkMTjQmwSgj9c0AAzNW3HZ/eOeHKTussqm8M93ssK3eb7axy/fK2F7/z7hds51r+P6vIIEEIAYqR3SlpzFBJACAJhNBSghhiMR4gS4EBEyoTsMNcxzFwwLCQzCEkweDUzlC8lEowlAwYA02ePE4zGgjIuATAAw6SjAoKJAOLA0aDpmFpGXAUYhCZlWAiSlLymBAKXpKjtMTgERCcaWxiJNmgwSQgcFNuDgaAkSkBQqAQgQEIJMRjgwOEywAh4shgAMwAswACAcChgConQppRkskoOAYnGCQAKjuBkbTIQ6Z2YIIo0PAoDx4ZhcEyqStEXK6CYzxItqpuTDAsF4413VQWBwv/z0MTRalQWiNed4SCAtkSIYKAzB2JPIzhHJI2VqljFR+nRju5f1sciZ9DNRm0GvBGmlvWwNTeUQ4FAA6bToNgpKFmi5ErUjoAR+UVl66VDowoM0eVqarjVssy+TujB7AqKs7UheiRu3KHHQHtwnVcPqr9ocKWIhRStbXW+jqJ3QlQZVGLqCqzRRIpRuTqCp3QckMqmuV1pts01XrR/KQ07oz0GYbpZZbmX5CgAd1t053uchYSGXfUDd5riwkHNuwOBmuMoflx4GTFT8dVL5ZbjKYrIcVOZYNxk5VgGWpzLBsSTlVUqiCZbjU02ttlEQBgsGiZMhFImTFIZJUKqFC8hBEMs0RCoVMrCpFKliIVM0iRNbaFDK4xjFUhFOqilCzUtuUtVQslhUCTNIkTUvGMpS21UKFm0KFnJImpUsil4xjlxjHylKVLBWIKaCmwgrIK6CmgpsIKyCugpoKbCCsgroKaCmwgrIKbBRYKKhBSIKeCi4orIKYCngpsUVkFMBTwUXFFZBVVMQU1FMy45OS41VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV//NwxPAoCd5qX8lIAVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVU=',\n        anchor: 0.07863946 //_tone.Tenor_Sax_B4_SC88\n    }, {\n        midi: 66,\n        originalPitch: 6500,\n        keyRangeLow: 60,\n        keyRangeHigh: 67,\n        loopStart: 6286,\n        loopEnd: 10518,\n        coarseTune: 0,\n        fineTune: 0,\n        sampleRate: 22050,\n        ahdsr: true,\n        file: '',\n        anchor: 0.05328798 //_tone.Tenor_Sax_F5_SC88\n    }, {\n        midi: 66,\n        originalPitch: 7200,\n        keyRangeLow: 68,\n        keyRangeHigh: 76,\n        loopStart: 10839,\n        loopEnd: 17751,\n        coarseTune: 0,\n        fineTune: 0,\n        sampleRate: 22050,\n        ahdsr: true,\n        file: '',\n        anchor: 0.04988662 //_tone.Altosax_C6_SC88\n    }, {\n        midi: 66,\n        originalPitch: 8200,\n        keyRangeLow: 77,\n        keyRangeHigh: 127,\n        loopStart: 14076,\n        loopEnd: 18544,\n        coarseTune: 0,\n        fineTune: 0,\n        sampleRate: 22050,\n        ahdsr: true,\n        file: '',\n        anchor: 0.09800453 //_tone.Altosax_A_6_SC88\n    }]\n};\n","console.log('load _tone_0320_JCLive_sf2_file');\nexport var _tone_0320_JCLive_sf2_file = {\n    zones: [{\n        midi: 32,\n        originalPitch: 3800,\n        keyRangeLow: 0,\n        keyRangeHigh: 38,\n        loopStart: 6418,\n        loopEnd: 7018,\n        coarseTune: 0,\n        fineTune: 0,\n        sampleRate: 44100,\n        ahdsr: true,\n        file: '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',\n        anchor: 0.11732426 //_tone.Acoustic_Bass_A0\n    }, {\n        midi: 32,\n        originalPitch: 5100,\n        keyRangeLow: 39,\n        keyRangeHigh: 47,\n        loopStart: 8086,\n        loopEnd: 8376,\n        coarseTune: 0,\n        fineTune: 40,\n        sampleRate: 44100,\n        ahdsr: true,\n        file: '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',\n        anchor: 0.01736961 //_tone.Acoustic_Bass_A1\n    }, {\n        midi: 32,\n        originalPitch: 3800,\n        keyRangeLow: 48,\n        keyRangeHigh: 38,\n        loopStart: 6418,\n        loopEnd: 7018,\n        coarseTune: 0,\n        fineTune: 0,\n        sampleRate: 44100,\n        ahdsr: true,\n        file: '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i0CAFWFT2GALCwBpY//////////sbLio1BAAJiIC1kF4kkS6aYZexVdAKlcgMToL/qUISkwUK010JCVaCVMZJBHpymAjIBI3MfS9f1cwwAaNrFFhpcw0VAJG5m7Eby7hQA0bWaNerrtEYBVMQU1FVUxBTUUzLjk5LjVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV//sQxNYDwAABpBwAACAAADSAAAAEVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVU=',\n        anchor: 0.11732426 //_tone.Acoustic_Bass_A0\n    }, {\n        midi: 32,\n        originalPitch: 5100,\n        keyRangeLow: 48,\n        keyRangeHigh: 49,\n        loopStart: 8086,\n        loopEnd: 8376,\n        coarseTune: 0,\n        fineTune: 40,\n        sampleRate: 44100,\n        ahdsr: true,\n        file: 'SUQzBAAAAAAAI1RTU0UAAAAPAAADTGF2ZjU2LjQwLjEwMQAAAAAAAAAAAAAA//tAwAAAAAAAAAAAAAAAAAAAAAAAWGluZwAAAA8AAAAJAAAP/gA/Pz8/Pz8/Pz8/P1NTU1NTU1NTU1NTbW1tbW1tbW1tbW2EhISEhISEhISEhJqampqampqampqatLS0tLS0tLS0tLTLy8vLy8vLy8vLy/n5+fn5+fn5+fn5//////////////8AAAAATGF2YzU2LjYwAAAAAAAAAAAAAAAAJAAAAAAAAAAAD/5zkXqhAAAAAAD/+9DEAAAGqANV9AAAJC2zK789kFAgBFUzSFkvjLXFAQQXBA4XD5c/EEEOJDkTwf8EIPvB/6w+oP/5zlDn//iR3BD/B9//Ln4nB9ABQBwAgCSCQDMUhIsGI2QwFAIhYCgwTweTDGB2MQ5BQxGitWJmAwAQGA4mAQBYYVoRhgTAdAAANIJWwWA4MMoEowrQW13uOIwUkxAEO4qXmwUTCF/UaUeAVgcIKEtY7eNQZAySGnUroyqGI8vjD0pvyN6Yy0+Nvw15XzUndjbowO7l7WEYfbB1ncgGIbuODMy7mqbHCmnKeXSqfl0B8jNWrnJZdRWqeGK8tjcvt4cmcLWqtLvHCPXqu5yZpafD937f7syyVwzIpmzZwlN6rlu3H6t+WSzP605fnJO4l/eFrDP9595hz4Zyxs47q6pscbOsfgyBpDLq03atQ5L6Wtes5///+n4xekXvs0oBqNucVKxg6MhcGmFAAAjcMAcxeDgaDFaFpUifpEDFZlIpaiwWg+CrGBsNY9WB8l/FjvU6UrDJO/o9rbef3cKW/nxitt43/v1/3mVwnrnE9d/O4MwxQsgJhwKgsJWh1pYKgZUUcNQKZYCkWtLZUwp8OkSobTW2eBnR3+OCG3Y7eYnkh17YAMNmICIaZAhg8ziUeMDGYHZSQwxAQlwGkMI0ATAv6Pe5C9KZKQLSBo/PtRXm5TY4q0WuuGkeVtQqPxANgj1tcOK84Eo6jXV5O38BXbRLjmJrGmyy4J6ZEwWimyamlnV7Vuz/csldSWV12vUZhizG2vraPJupfyn9daWkSWzUNoG2HkI6q51rQUu5GhPQO6sSup0Jc6TTUyZaTXmns/nwdU9mr1oadNq/su4h0usqCP93Kg3pbNySDH/6aalHIMHBmUSGEByahA5CVgfEC5AaCA0aU7BC6A2whGA8cSAJSVAKkU/B4/DrFVsuO9LQI7RikRC6ZNqxNKhueJz+FthpVbqbpVwuGRobmy6hOL6/T1CQxS7abLjq05LKXmteiggiXL3WWLRNElUqu1aJmA6Musfxa0ks4m69b5Welql61hZru2tA/tSlO8isvRYgxQkh1lsrRp9WwNQfH0yinK7D2tf/Tt/yq+Zl//twxPaCD2ijVH3HgCLsL2idzTD1xsOrF/KEWy6y8we2D0x5O8i8EpI2+Ax4EgKhGARYHSRYw0FAaSx6MDIoGk4MDIeKRUBTzEIFZqxpFqmqRMeCb+LhlELKZdcNyqqDkRQlWnZLIaphgyTHMKU9OKfAXpQ2i0xMK2q0eLnGzdc+2SYb05IVVmEwAHBPTCiSAayQIeqVWQRdC0xZIGRYqYOqGyez/7l710U+M+A04kibcycUHXHheTLkYp/qvrLvEENJdKbbtLWapPSWn30jKjbtNbzDcEP28o8CMjBbKOBjQwKaghtg0IiVIGQ+GAUcRY1MQSDBZYFglCQqGQAoyOAGkZEmddhUoRKbFSt0kVI/USrQbfeCKtVi1yXSuVtsAMijNRxMmvgLzDx8TQXJFkweNgUZb0a4kf/7kMTtAhdliUJuaYeq1LDoHcYapRTjM7k476VRUd1Cr6yxiQfFKCMFtIR9PfpKw1Byt4WizLvJKq8dtxVz31Vuas/5piBpVyWYyZ36nnINOAiSBh2NknzTY7lXLWtBplv9aSmEpl39k4gUBolynmwiYyexzMDjAoEl0YLRIZUR0ctlFV+ERl5ihQDpOX0y4rAbstCpotQN+zxi1qjbtwchtrpTqTgwKhv2eyHKhWsfjtUT/QqKEFWaGdbVt4rMSa9CpVxJjo2q3eI+SMD26tKx6cq2nC1G0t1yXS4LrWd7rQMhYKizm7bu7PjeYiIpr3S8Y3cveW2409l23qcMuD0bPoeUXWGZkmrJ5/tGi8KQNT6lLXSm17I1U3/1vMOx+NDZKCNeMQkCKLaIBwHi3C5piyCjoihgdiM3QgxRGBo0NoqHA8GAqAKMTIFP7whhtlZiMD9DpEcHKtwT4AvGx1lWL3JBmtjiVw4JDja0VPmNljrJ3VDPXoMOtPS8p1lxbK6i+zVn2T3Tpld5WWmFLculKxEtdf11lkQoal9yJnNe8v/7gMT6gxctmz5uJNkqzDRnjcYarHUJvDp1R+teXZLDbPRcovLRm0UaQtVydKkaUxukvjqOKhUM+unL9FaE/8C+US5DOYcF336yYGg6aPwsHXOIVSCKGEBODw5iNHwwnRQSQgmyBCwELpKE4kJIVBgmFwdBVtiQAFvR/TdJpVKFKdyCA5C4b8V9QC/KqtLK5v9Vr4qMXy2uXucRijzZdxJ+QO5S47Lz+j+QPRvuYsfb+OW4scbYveHzm65EytTRWrWqyrWQnT8vqVtWZ42zKqOSYU8goyqZg9ADIBRjCz03LzNxjD0Er+8u3e5/bDoXzCkJFDSwKld/rZzAcQzMGHDSMCDB9gDTkAzAUnhYBhAk4CBcRBKHGmDD1BQBjAVoao3jQskgIr8QINnlKCNRFGpoqsib4Xi1YjhWEheVbMpjp4zWlrie5aRpcgfOLv1Sswy06TS8hliyMu/SOF1uP3Gd3qtatFBRZDklqLnL//uAxPACFyWjPG6w0+K+M+dd1g8kZGjTnszKZZftj6ayWxMYxaqwypgnBq8N+o1OxXyWcuZs9nvNYIm3HF0YunL5qenVl8j4rFbS2tTCJw9u/ax4wPL0zDqYz3DAwlio1PCwYK53DARbTJ0CwgAAxSzApDQO/BCMIPjrEWqjAkmIEIJzm4Nnj0JgqQUkjlMjZ7PwRW1RNUwpPpdW9A6ujcRqo0iBJChAfXFFkSqO09Hz6AHZolyZWNrNmFxzuUQUS2vInJB9IhJV1v2WKappJRonmyoqYMXmzu8t91rePjDuk1iUlktzclDYOjff5/V5K1CVeXtWOwkg10lJTWgi+qOUvLqmvTF+aU226gAAABDv9rY6YAliZC1UZbhkCJIAzFCpDBgaGAiQme4DgQWiZQjAwvxpDy3o0KYwH4sBriFAGpvQelInlAT+z7QJJFmwS55I3Q8jz+tCVY0qghiVQTaOCgBSYCGlGxMhOGj/+5DE54MWQaM6brDRou00Zs3dJXRRGGtXJYokkGYk5ZhruQMkVXPyTbeu3KbCJq2NFK7M5xRLPgmh9wVcnohQIXYQ3aeZ25ldT23fvWJZ4XRdsqY+1bJxGx6hqvGK1Gpo5bb/qes7Ppe5I5lZZIB1n21kw4VphZYAYvxgBOxjmCQ6Nw8QBgYWppeAYUJ4WQowMF8eRYCAwTC+FAxT7GAGVatqFJ3L8rvdJWazU43amC4ANgmBIOqzY2tgDxMeC5ZQRb4GGA2IniUCrJ7SoW8gyRMjFFqePqBoCSa+euEFIBVJMYidKBpeWkiaghkLLO19/S18Msoq8OdDui61ZhknpNKHqLokXPi6aEquWvDjDFZphZhFKHO8tJ8aamksGjyUmmCVAPPvtbMUD4YrWsCg2HYOEILmE4hGLQOGIAHGioNmGxjAok4qJF0IgsEhDGAFKALIQCiDSLmWIXjxyq0Lt0+aD3o3XeMB+rTWxOChVD+zJqubv6tzO9lRLexMqodvLQMwd3nzLA9/NiSLuSH4NbTsEa8OBmaA4QMaru2Mwa7/+4DE9oIXTYc3rqTZKtQz5unUmpU9MQXPwu4XktmeW8WHHhPsQ8ag1nz4985iPvSdT0pAiuWabg38P6k8nj59aOXY9ZtFjPs+BfNPa+L4385mxitPedYmAQAQAwQu4wxRX6tFIlEWgbXwIblnCcIVeYuNsc6/Ib8myYlJYaniGZloyYakgaE9UZVl4ZNiQIwMMsRpMmhINGopNaicARWGhKYbHhjACmFCMcxshABgwuAYGmQROIhWYPBxjvzmLm6eAqLhF02GQsyEIAAKDAQfMXg8zn+DL8IOxvA1x5VPOvOS6lMMi0lFxjADGIg0CRaZSZ5uw7mnakZXZRs0hO/yXPxGJSJCMwuATAAWJgCECwwOEzPDlMeI0z4BTO7EMcn4MYcPxuVSyGKWB1TEQrMFApVMaEJgsCl7DGhTMJDUBDgxaPDBomMEgsxEIX7oJZDlDPw/NTgYFgMFAKAQUCQ4JmAAAWSJgQAgWFAGg//7wMTqgBf9mzj114AvlMgm/zvACADgMj0OAFQhnIXACc8OU9uB6l6KW927Bc1C4BAwZACGoKB6H6PQOAiExGWnRNT8epB4cALMUFRGBFVkNt4ZWO3reOrFTdvPQcA0A6HREQuwgjW+X7LmN6PAAuG+xWAS5BfVeK9S8y0l/ICVotWQyWk36PLAXcw5vueuYb7nrnN/3/5/9/+f8TaCut2GTMka2y1t2INabMxNwXmXQ2J3V1t3fZgjgPS09rbdHkUCaU+7EXBeh1oaeGKUrhQHXZy1SPMSXzALLVDm5MGSNZCzVG5MQU1FMy45OS41VVVVVVVVVVVVVVVVZV2lZAAtCKRShxYVCqAWDQ8IQAkuLESKLEgpJzaeCigo0KCsRcUFYCmAo7E2Kb8vBv/8VUxBTUUzLjk5LjsQxPADxnA5AzyTAAgAADSAAAAEVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVU=',\n        anchor: 0.01736961 //_tone.Acoustic_Bass_A1\n    }, {\n        midi: 32,\n        originalPitch: 5100,\n        keyRangeLow: 50,\n        keyRangeHigh: 47,\n        loopStart: 8086,\n        loopEnd: 8376,\n        coarseTune: 0,\n        fineTune: 40,\n        sampleRate: 44100,\n        ahdsr: true,\n        file: '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',\n        anchor: 0.01736961 //_tone.Acoustic_Bass_A1\n    }, {\n        midi: 32,\n        originalPitch: 5100,\n        keyRangeLow: 50,\n        keyRangeHigh: 57,\n        loopStart: 8086,\n        loopEnd: 8376,\n        coarseTune: 0,\n        fineTune: 40,\n        sampleRate: 44100,\n        ahdsr: true,\n        file: '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',\n        anchor: 0.01736961 //_tone.Acoustic_Bass_A1\n    }, {\n        midi: 32,\n        originalPitch: 8100,\n        keyRangeLow: 58,\n        keyRangeHigh: 47,\n        loopStart: 1197,\n        loopEnd: 1247,\n        coarseTune: 0,\n        fineTune: -4,\n        sampleRate: 44100,\n        ahdsr: true,\n        file: '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',\n        anchor: 0.00299320 //_tone.Acoustic_Bass_A3\n    }, {\n        midi: 32,\n        originalPitch: 8100,\n        keyRangeLow: 58,\n        keyRangeHigh: 74,\n        loopStart: 1197,\n        loopEnd: 1247,\n        coarseTune: 0,\n        fineTune: -4,\n        sampleRate: 44100,\n        ahdsr: true,\n        file: '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',\n        anchor: 0.00299320 //_tone.Acoustic_Bass_A3\n    }]\n};\n","console.log('load _tone_0270_SBAWE32_sf2_file');\nexport var _tone_0270_SBAWE32_sf2_file = {\n    zones: [{\n        midi: 27,\n        originalPitch: 6000,\n        keyRangeLow: 0,\n        keyRangeHigh: 44,\n        loopStart: -1,\n        loopEnd: -2,\n        coarseTune: 18,\n        fineTune: -7,\n        sampleRate: 11025,\n        ahdsr: false,\n        file: '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',\n        anchor: 0.02058957 //_tone.cle1_F_1\n    }, {\n        midi: 27,\n        originalPitch: 6000,\n        keyRangeLow: 45,\n        keyRangeHigh: 50,\n        loopStart: -1,\n        loopEnd: -2,\n        coarseTune: 12,\n        fineTune: 0,\n        sampleRate: 11025,\n        ahdsr: false,\n        file: '',\n        anchor: 2.95292521 //_tone.cle2_C2\n    }, {\n        midi: 27,\n        originalPitch: 6000,\n        keyRangeLow: 51,\n        keyRangeHigh: 56,\n        loopStart: -1,\n        loopEnd: -2,\n        coarseTune: 6,\n        fineTune: -3,\n        sampleRate: 11025,\n        ahdsr: false,\n        file: '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',\n        anchor: 4.88897943 //_tone.cle3_F_2\n    }, {\n        midi: 27,\n        originalPitch: 6000,\n        keyRangeLow: 57,\n        keyRangeHigh: 62,\n        loopStart: -1,\n        loopEnd: -2,\n        coarseTune: 0,\n        fineTune: -5,\n        sampleRate: 11025,\n        ahdsr: false,\n        file: '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',\n        anchor: 0.00344671 //_tone.cle4_C3\n    }, {\n        midi: 27,\n        originalPitch: 6000,\n        keyRangeLow: 63,\n        keyRangeHigh: 68,\n        loopStart: -1,\n        loopEnd: -2,\n        coarseTune: -6,\n        fineTune: 0,\n        sampleRate: 11025,\n        ahdsr: false,\n        file: '',\n        anchor: 0.02285714 //_tone.cle5_F_3\n    }, {\n        midi: 27,\n        originalPitch: 6000,\n        keyRangeLow: 69,\n        keyRangeHigh: 74,\n        loopStart: -1,\n        loopEnd: -2,\n        coarseTune: -12,\n        fineTune: 5,\n        sampleRate: 11025,\n        ahdsr: false,\n        file: '',\n        anchor: 0.00208617 //_tone.cle6_C4\n    }, {\n        midi: 27,\n        originalPitch: 6000,\n        keyRangeLow: 75,\n        keyRangeHigh: 80,\n        loopStart: -1,\n        loopEnd: -2,\n        coarseTune: -18,\n        fineTune: 10,\n        sampleRate: 11025,\n        ahdsr: false,\n        file: '',\n        anchor: 0.01160998 //_tone.cle7_F_4\n    }, {\n        midi: 27,\n        originalPitch: 6000,\n        keyRangeLow: 81,\n        keyRangeHigh: 127,\n        loopStart: -1,\n        loopEnd: -2,\n        coarseTune: -24,\n        fineTune: 5,\n        sampleRate: 11025,\n        ahdsr: false,\n        file: '',\n        anchor: 0.00217687 //_tone.cle8_C5\n    }]\n};\n","console.log('load _tone_0730_JCLive_sf2_file');\nexport var _tone_0730_JCLive_sf2_file = {\n    zones: [{\n        midi: 73,\n        originalPitch: 6700,\n        keyRangeLow: 24,\n        keyRangeHigh: 63,\n        loopStart: 64517,\n        loopEnd: 71390,\n        coarseTune: 0,\n        fineTune: 5,\n        sampleRate: 44100,\n        ahdsr: false,\n        file: '',\n        anchor: 1.50349212 //_tone.Breathy_Flute_D1\n    }, {\n        midi: 73,\n        originalPitch: 7200,\n        keyRangeLow: 64,\n        keyRangeHigh: 72,\n        loopStart: 51357,\n        loopEnd: 58204,\n        coarseTune: 0,\n        fineTune: 5,\n        sampleRate: 44100,\n        ahdsr: false,\n        file: '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kD8nmuy53HqQGsQWihA1haaxEkHVTubInKmNJM7l23jn/9y/XP5zusO4c///X0luzfpe4d3//vv71vHu//D/7+fLlux4ZsBwuB6uRWH1xSEAEAAAAAUAZD0CEBv4Y0G2BpUbWGVBkWalmYYYVRowqMpjKQyqMhU2oTknOSM4HTYXNZc1mTYbM0wxwC7S6p6Zf1yWGrmVMu5r0PX8aWUvs1pdy7l3Neh6/VpqaVRqXU1ruOWWWXfxxpaamprWXd41a1NTWsvxq0tNTU1Nl3eNWtTU1rLv445U1Nlll/7yyy//xxxyyy7/4445Zd/eOOONa0N6CgwV0FBQo7///BRXxQUFN6CgoL4KCgpvQUFd8UFFfiCgv9BQV3goKK+KCgv9BQU3kUFN+CCgvwlMQU1FMy45OS41VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVf/7YMTwg9uZJUfdjIAIAAA0gAAABFVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVQ==',\n        anchor: 1.02571428 //_tone.Breathy_Flute_G1\n    }, {\n        midi: 73,\n        originalPitch: 7700,\n        keyRangeLow: 73,\n        keyRangeHigh: 77,\n        loopStart: 49464,\n        loopEnd: 56852,\n        coarseTune: 0,\n        fineTune: 5,\n        sampleRate: 44100,\n        ahdsr: false,\n        file: '',\n        anchor: 0.03578231 //_tone.Breathy_Flute_C2\n    }, {\n        midi: 73,\n        originalPitch: 8200,\n        keyRangeLow: 78,\n        keyRangeHigh: 82,\n        loopStart: 57555,\n        loopEnd: 64656,\n        coarseTune: 0,\n        fineTune: 5,\n        sampleRate: 44100,\n        ahdsr: false,\n        file: '',\n        anchor: 1.38709748 //_tone.Breathy_Flute_F2\n    }, {\n        midi: 73,\n        originalPitch: 8700,\n        keyRangeLow: 83,\n        keyRangeHigh: 87,\n        loopStart: 55822,\n        loopEnd: 62982,\n        coarseTune: 0,\n        fineTune: 5,\n        sampleRate: 44100,\n        ahdsr: false,\n        file: '',\n        anchor: 1.35825396 //_tone.Breathy_FluteA_2\n    }, {\n        midi: 73,\n        originalPitch: 9200,\n        keyRangeLow: 88,\n        keyRangeHigh: 92,\n        loopStart: 56329,\n        loopEnd: 63258,\n        coarseTune: 0,\n        fineTune: 5,\n        sampleRate: 44100,\n        ahdsr: false,\n        file: '',\n        anchor: 0.03523809 //_tone.Breathy_FluteD_3\n    }, {\n        midi: 73,\n        originalPitch: 9700,\n        keyRangeLow: 93,\n        keyRangeHigh: 97,\n        loopStart: 63598,\n        loopEnd: 70561,\n        coarseTune: 0,\n        fineTune: 5,\n        sampleRate: 44100,\n        ahdsr: false,\n        file: '',\n        anchor: 0.02312925 //_tone.Breathy_FluteG_3\n    }, {\n        midi: 73,\n        originalPitch: 10100,\n        keyRangeLow: 98,\n        keyRangeHigh: 113,\n        loopStart: 61972,\n        loopEnd: 68230,\n        coarseTune: 0,\n        fineTune: 5,\n        sampleRate: 44100,\n        ahdsr: false,\n        file: '',\n        anchor: 1.39886618 //_tone.Breathy_Flute_C4\n    }]\n};\n","console.log('load _tone_0240_JCLive_sf2_file');\nexport var _tone_0240_JCLive_sf2_file = {\n    zones: [{\n        midi: 24,\n        originalPitch: 4000,\n        keyRangeLow: 0,\n        keyRangeHigh: 40,\n        loopStart: 95966,\n        loopEnd: 97318,\n        coarseTune: 0,\n        fineTune: 0,\n        sampleRate: 27778,\n        ahdsr: true,\n        file: '',\n        anchor: 0.03985168 //_tone.N_Gtr_1_E1_SoftL1_R_\n    }, {\n        midi: 24,\n        originalPitch: 4300,\n        keyRangeLow: 41,\n        keyRangeHigh: 45,\n        loopStart: 83076,\n        loopEnd: 84211,\n        coarseTune: 0,\n        fineTune: 0,\n        sampleRate: 27778,\n        ahdsr: true,\n        file: '',\n        anchor: 0.09431925 //_tone.N_Gtr_1_G1_SoftL1_R_\n    }, {\n        midi: 24,\n        originalPitch: 4800,\n        keyRangeLow: 46,\n        keyRangeHigh: 51,\n        loopStart: 74505,\n        loopEnd: 75784,\n        coarseTune: 0,\n        fineTune: 0,\n        sampleRate: 27778,\n        ahdsr: true,\n        file: '',\n        anchor: 0.03124775 //_tone.N_Gtr_1_C2_SoftL1_R_\n    }, {\n        midi: 24,\n        originalPitch: 5400,\n        keyRangeLow: 52,\n        keyRangeHigh: 56,\n        loopStart: 77767,\n        loopEnd: 78970,\n        coarseTune: 0,\n        fineTune: 0,\n        sampleRate: 27778,\n        ahdsr: true,\n        file: '',\n        anchor: 0.02188783 //_tone.N_Gtr_1_F_2_SofL1_R_\n    }, {\n        midi: 24,\n        originalPitch: 5900,\n        keyRangeLow: 57,\n        keyRangeHigh: 62,\n        loopStart: 40207,\n        loopEnd: 41222,\n        coarseTune: 0,\n        fineTune: 0,\n        sampleRate: 27778,\n        ahdsr: true,\n        file: '',\n        anchor: 0.01601987 //_tone.N_Gtr_1_B2_SoftL1_R_\n    }, {\n        midi: 24,\n        originalPitch: 6500,\n        keyRangeLow: 63,\n        keyRangeHigh: 68,\n        loopStart: 52703,\n        loopEnd: 53564,\n        coarseTune: 0,\n        fineTune: 0,\n        sampleRate: 20000,\n        ahdsr: true,\n        file: '',\n        anchor: 0.00805000 //_tone.N_Gtr_1_F3_SoftL1_R_\n    }, {\n        midi: 24,\n        originalPitch: 7200,\n        keyRangeLow: 69,\n        keyRangeHigh: 75,\n        loopStart: 62159,\n        loopEnd: 63543,\n        coarseTune: 0,\n        fineTune: 0,\n        sampleRate: 27778,\n        ahdsr: true,\n        file: '',\n        anchor: 0.00921593 //_tone.N_Gtr_1_C4_SoftL1_R_\n    }, {\n        midi: 24,\n        originalPitch: 7800,\n        keyRangeLow: 76,\n        keyRangeHigh: 91,\n        loopStart: 47987,\n        loopEnd: 48627,\n        coarseTune: 0,\n        fineTune: 0,\n        sampleRate: 27778,\n        ahdsr: true,\n        file: '',\n        anchor: 0.01126791 //_tone.N_Gtr_1_F_4_SofL1_R_\n    }]\n};\n","console.log('load _tone_0460_FluidR3_GM_sf2_file');\nexport var _tone_0460_FluidR3_GM_sf2_file = {\n    zones: [{\n        midi: 46,\n        originalPitch: 3400,\n        keyRangeLow: 0,\n        keyRangeHigh: 39,\n        loopStart: 52377,\n        loopEnd: 53889,\n        coarseTune: 0,\n        fineTune: 0,\n        sampleRate: 44100,\n        ahdsr: true,\n        file: '',\n        anchor: 0.03988662 //_tone.Harp_A_1_R_\n    }, {\n        midi: 46,\n        originalPitch: 4400,\n        keyRangeLow: 40,\n        keyRangeHigh: 46,\n        loopStart: 46854,\n        loopEnd: 48129,\n        coarseTune: 0,\n        fineTune: 0,\n        sampleRate: 44100,\n        ahdsr: true,\n        file: 'n        anchor: 0.01165533 //_tone.Harp_G_2_R_\n    }, {\n        midi: 46,\n        originalPitch: 4900,\n        keyRangeLow: 47,\n        keyRangeHigh: 50,\n        loopStart: 44187,\n        loopEnd: 44505,\n        coarseTune: 0,\n        fineTune: 0,\n        sampleRate: 44100,\n        ahdsr: true,\n        file: 'n        anchor: 0.05870748 //_tone.Harp_C_3_R_\n    }, {\n        midi: 46,\n        originalPitch: 5400,\n        keyRangeLow: 51,\n        keyRangeHigh: 55,\n        loopStart: 51328,\n        loopEnd: 52278,\n        coarseTune: 0,\n        fineTune: 0,\n        sampleRate: 44100,\n        ahdsr: true,\n        file: 'n        anchor: 0.20752834 //_tone.Harp_F_3_R_\n    }, {\n        midi: 46,\n        originalPitch: 5600,\n        keyRangeLow: 56,\n        keyRangeHigh: 59,\n        loopStart: 44800,\n        loopEnd: 45651,\n        coarseTune: 0,\n        fineTune: 0,\n        sampleRate: 44100,\n        ahdsr: true,\n        file: 'n        anchor: 0.01702948 //_tone.Harp_G_3_R_\n    }, {\n        midi: 46,\n        originalPitch: 6100,\n        keyRangeLow: 60,\n        keyRangeHigh: 62,\n        loopStart: 30340,\n        loopEnd: 30977,\n        coarseTune: 0,\n        fineTune: 0,\n        sampleRate: 44100,\n        ahdsr: true,\n        file: '',\n        anchor: 0.02310658 //_tone.Harp_C_4_R_\n    }, {\n        midi: 46,\n        originalPitch: 6300,\n        keyRangeLow: 63,\n        keyRangeHigh: 65,\n        loopStart: 18560,\n        loopEnd: 18985,\n        coarseTune: 0,\n        fineTune: 0,\n        sampleRate: 44100,\n        ahdsr: true,\n        file: '',\n        anchor: 0.01142857 //_tone.Harp_D_4_R_\n    }, {\n        midi: 46,\n        originalPitch: 6800,\n        keyRangeLow: 66,\n        keyRangeHigh: 68,\n        loopStart: 22767,\n        loopEnd: 23297,\n        coarseTune: 0,\n        fineTune: 0,\n        sampleRate: 44100,\n        ahdsr: true,\n        file: '',\n        anchor: 0.00680272 //_tone.Harp_G_4_R_\n    }, {\n        midi: 46,\n        originalPitch: 7000,\n        keyRangeLow: 69,\n        keyRangeHigh: 71,\n        loopStart: 25472,\n        loopEnd: 25851,\n        coarseTune: 0,\n        fineTune: 0,\n        sampleRate: 44100,\n        ahdsr: true,\n        file: '',\n        anchor: 0.01292517 //_tone.Harp_A_4_R_\n    }, {\n        midi: 46,\n        originalPitch: 7300,\n        keyRangeLow: 72,\n        keyRangeHigh: 75,\n        loopStart: 22848,\n        loopEnd: 23246,\n        coarseTune: 0,\n        fineTune: 0,\n        sampleRate: 44100,\n        ahdsr: true,\n        file: '',\n        anchor: 0.00396825 //_tone.Harp_C_5_R_\n    }, {\n        midi: 46,\n        originalPitch: 7800,\n        keyRangeLow: 76,\n        keyRangeHigh: 81,\n        loopStart: 18866,\n        loopEnd: 19105,\n        coarseTune: 0,\n        fineTune: 0,\n        sampleRate: 44100,\n        ahdsr: true,\n        file: '',\n        anchor: 0.00408163 //_tone.Harp_F_5_R_\n    }, {\n        midi: 46,\n        originalPitch: 8300,\n        keyRangeLow: 82,\n        keyRangeHigh: 98,\n        loopStart: 14176,\n        loopEnd: 14621,\n        coarseTune: 0,\n        fineTune: 0,\n        sampleRate: 44100,\n        ahdsr: true,\n        file: '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',\n        anchor: 0.00424036 //_tone.Harp_B5_R_\n    }, {\n        midi: 46,\n        originalPitch: 9900,\n        keyRangeLow: 99,\n        keyRangeHigh: 101,\n        loopStart: 10894,\n        loopEnd: 11233,\n        coarseTune: 0,\n        fineTune: 0,\n        sampleRate: 44100,\n        ahdsr: true,\n        file: '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eU0zVvSqVXZqtu4qTEFNRTMuOTkuNaqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq//uQxOcANYZBKfm+kEAAAD/DgAAEqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq',\n        anchor: 0.00326531 //_tone.Harp_D_7_R_\n    }, {\n        midi: 46,\n        originalPitch: 10200,\n        keyRangeLow: 102,\n        keyRangeHigh: 108,\n        loopStart: 8909,\n        loopEnd: 9264,\n        coarseTune: 0,\n        fineTune: 0,\n        sampleRate: 44100,\n        ahdsr: true,\n        file: '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',\n        anchor: 0.00242630 //_tone.Harp_F_7_R_\n    }]\n};\n","console.log('load _tone_1080_JCLive_sf2_file');\nexport var _tone_1080_JCLive_sf2_file = {\n    zones: [{\n        midi: 108,\n        originalPitch: 6000,\n        keyRangeLow: 0,\n        keyRangeHigh: 127,\n        loopStart: 7165,\n        loopEnd: 7333,\n        coarseTune: 0,\n        fineTune: 0,\n        sampleRate: 22050,\n        ahdsr: false,\n        file: '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',\n        anchor: 0.00947846 //_tone.Kalimba_\n    }]\n};\n","console.log('load _tone_0720_GeneralUserGS_sf2_file');\nexport var _tone_0720_GeneralUserGS_sf2_file = {\n    zones: [{\n        midi: 72,\n        originalPitch: 7000,\n        keyRangeLow: 0,\n        keyRangeHigh: 81,\n        loopStart: 14546,\n        loopEnd: 19530,\n        coarseTune: 0,\n        fineTune: 0,\n        sampleRate: 27778,\n        ahdsr: true,\n        file: '',\n        anchor: 0.28796169 //_tone.Piccolo_A_1\n    }, {\n        midi: 72,\n        originalPitch: 7000,\n        keyRangeLow: 82,\n        keyRangeHigh: 84,\n        loopStart: 14546,\n        loopEnd: 19530,\n        coarseTune: 0,\n        fineTune: 0,\n        sampleRate: 27778,\n        ahdsr: true,\n        file: '',\n        anchor: 0.28796169 //_tone.Piccolo_A_1\n    }, {\n        midi: 72,\n        originalPitch: 7400,\n        keyRangeLow: 85,\n        keyRangeHigh: 85,\n        loopStart: 9577,\n        loopEnd: 14785,\n        coarseTune: 0,\n        fineTune: 0,\n        sampleRate: 27778,\n        ahdsr: true,\n        file: '',\n        anchor: 0.45795235 //_tone.Piccolo_D2\n    }, {\n        midi: 72,\n        originalPitch: 7400,\n        keyRangeLow: 86,\n        keyRangeHigh: 88,\n        loopStart: 9577,\n        loopEnd: 14785,\n        coarseTune: 0,\n        fineTune: 0,\n        sampleRate: 27778,\n        ahdsr: true,\n        file: '',\n        anchor: 0.45795235 //_tone.Piccolo_D2\n    }, {\n        midi: 72,\n        originalPitch: 7800,\n        keyRangeLow: 89,\n        keyRangeHigh: 89,\n        loopStart: 9016,\n        loopEnd: 14264,\n        coarseTune: 0,\n        fineTune: 0,\n        sampleRate: 27778,\n        ahdsr: true,\n        file: '',\n        anchor: 0.45600834 //_tone.Piccolo_F_2\n    }, {\n        midi: 72,\n        originalPitch: 7800,\n        keyRangeLow: 90,\n        keyRangeHigh: 92,\n        loopStart: 9016,\n        loopEnd: 14264,\n        coarseTune: 0,\n        fineTune: 0,\n        sampleRate: 27778,\n        ahdsr: true,\n        file: '',\n        anchor: 0.45600834 //_tone.Piccolo_F_2\n    }, {\n        midi: 72,\n        originalPitch: 8200,\n        keyRangeLow: 93,\n        keyRangeHigh: 93,\n        loopStart: 8901,\n        loopEnd: 14399,\n        coarseTune: 0,\n        fineTune: 0,\n        sampleRate: 27778,\n        ahdsr: true,\n        file: '',\n        anchor: 0.18676651 //_tone.Piccolo_A_2\n    }, {\n        midi: 72,\n        originalPitch: 8200,\n        keyRangeLow: 94,\n        keyRangeHigh: 95,\n        loopStart: 8901,\n        loopEnd: 14399,\n        coarseTune: 0,\n        fineTune: 0,\n        sampleRate: 27778,\n        ahdsr: true,\n        file: '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ML3ceY5Y026Lnf/+Z9/DuOv/mVaUEAKaHTxLOvlj/bNE//OkxPRGXDqa/1rgAO3PULA35l8v7L5NTt8yyYhuhme2MJiIw7II7Becm3c+WxGEyeQKV3h2pns7XArXR8mKscjRQRdAo8lqzKa6Nalrl4FA8mBJgIfmJzFL1NASBwMGxZ7Gpo63FTiVJymAYApjmJ5FGD5UmrTq4/yQqNlk0B4BBsxlJAxWak7y+kyTWWfMDj4MNwLV9RAIDzB88DBsQBoFFjnWGVmhk0GThPmmNDHZtHUmMhYKumjMGAGVhLphwILxL9mTLdHQdCHBrWGTrCG8rKETLYYVrDRTBwDQMDqzGBrXd1TcLhUqQyTUQ1VLgxwSkx1K4wAKEwMNQyFSiXTblxNyX0nKsWC4AgoB0kS25fNZIcAbO0tzPUoAIS5h//PkxO17tDqq/5zoCOkQCjbMljvMIQ6HBnMujtHgGxy/EGgikhZu1P/bJ7aY7ZzBIEBYFWdv3AcbsO+YZDqZTGSYLECZoE2Y1p0YllEZGhMYYDGyMwYDcxEE0CBHSy2ls3rmTEG+vSvu+zdmNQ488xCIHdhla33AYJDTWH4gx9DCQIzBQBwQC5g8CKoAQB4CBEwOCMwODkw6BUwHDQCAmGAYYQh4FgBFAGxu0dLYaUPA9BWed6OXY1DVbOMXr1yVQJDDkXXIeEcAJgEJd9kk3D7mSVr78OG28tct3zA8HIqFwGMEQYVWQlGBYPINGCILGCYFCEBjA8CC3wXAgwPARc4VAoIBYEAiIQATPMBgZmko3dr/7q0RWjT/S61urS0vccH2Xcy6nXKoLI2UtNgwCgAxmDmKZ4qXbMWJTIhEQARjpYZiTDQ+Y4dmlJpkIEYITmcIJoiKZURmLA6chhY0ZCRGFAbmrAmNFpnB2ZgMlUmNZfjjX4HLBprob+4GokAoRmdIJmAaYCYGkpA8UGSnxop8ZaLI5mCBoCFUpDBwhdBgogYuLGJhgGCnOVtLulsWdNeh61VjMtwptRJymHMSd6nXKmK42ceTmLlIpO2CAMwYHYshigq7BdYtEzcEA5gQ//PExNFYvDoOX9jYABtTL2lxWzKVIPOchNMAAWbJUlpS8KmshfZhzEorNO071N2rGYznGYzhKo1fhl3bcMu7LbkqtTMZzjMOy3mWW8d0tLZ1l3eP1aWlpcdU1NjrtWlpcJVGuVrWdLS8lUavU0u7VpeSqNclUuv1aW9Ko1elUatY0vK1NymprW8cdZfWpsu/z//LLLLLeNL3fNVrXatLTEFNRTMuOTkuNVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV',\n        anchor: 0.18676651 //_tone.Piccolo_A_2\n    }, {\n        midi: 72,\n        originalPitch: 8600,\n        keyRangeLow: 96,\n        keyRangeHigh: 127,\n        loopStart: 8453,\n        loopEnd: 13982,\n        coarseTune: 0,\n        fineTune: 0,\n        sampleRate: 27778,\n        ahdsr: true,\n        file: '',\n        anchor: 0.43336454 //_tone.Piccolo_D3\n    }]\n};\n","console.log('load _tone_0640_JCLive_sf2_file');\nexport var _tone_0640_JCLive_sf2_file = {\n    zones: [{\n        midi: 64,\n        originalPitch: 6500,\n        keyRangeLow: 36,\n        keyRangeHigh: 58,\n        loopStart: 30319,\n        loopEnd: 40372,\n        coarseTune: 0,\n        fineTune: 16,\n        sampleRate: 44100,\n        ahdsr: false,\n        file: '',\n        anchor: 0.09560091 //_tone.Sft_Soprano_A1\n    }, {\n        midi: 64,\n        originalPitch: 6800,\n        keyRangeLow: 59,\n        keyRangeHigh: 62,\n        loopStart: 30256,\n        loopEnd: 40418,\n        coarseTune: 0,\n        fineTune: 16,\n        sampleRate: 44100,\n        ahdsr: false,\n        file: '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',\n        anchor: 0.03761905 //_tone.Sft_Soprano_C2\n    }, {\n        midi: 64,\n        originalPitch: 7200,\n        keyRangeLow: 63,\n        keyRangeHigh: 66,\n        loopStart: 29833,\n        loopEnd: 39949,\n        coarseTune: 0,\n        fineTune: 16,\n        sampleRate: 44100,\n        ahdsr: false,\n        file: '',\n        anchor: 0.04766440 //_tone.Sft_Soprano_E2\n    }, {\n        midi: 64,\n        originalPitch: 7600,\n        keyRangeLow: 67,\n        keyRangeHigh: 70,\n        loopStart: 30105,\n        loopEnd: 40284,\n        coarseTune: 0,\n        fineTune: 16,\n        sampleRate: 44100,\n        ahdsr: false,\n        file: '',\n        anchor: 0.12394558 //_tone.Sft_Soprano_G_2\n    }, {\n        midi: 64,\n        originalPitch: 8000,\n        keyRangeLow: 71,\n        keyRangeHigh: 71,\n        loopStart: 30103,\n        loopEnd: 40166,\n        coarseTune: 0,\n        fineTune: 16,\n        sampleRate: 44100,\n        ahdsr: false,\n        file: 'n        anchor: 0.65367347 //_tone.Sft_Soprano_C3\n    }, {\n        midi: 64,\n        originalPitch: 8000,\n        keyRangeLow: 72,\n        keyRangeHigh: 72,\n        loopStart: 30103,\n        loopEnd: 40166,\n        coarseTune: 0,\n        fineTune: 16,\n        sampleRate: 44100,\n        ahdsr: false,\n        file: 'SUQzBAAAAAAAI1RTU0UAAAAPAAADTGF2ZjU2LjQwLjEwMQAAAAAAAAAAAAAA//tAwAAAAAAAAAAAAAAAAAAAAAAAWGluZwAAAA8AAAAkAABExwANDRQUFBoaGiIiIioqMDAwNzc3Pz8/RUVNTU1UVFRcXFxjY2NpaXFxcXl5eX9/f4aGjIyMlJSUmpqaoKCgqKiurq61tbW7u7vBwcfHx8/Pz9XV1dvb2+Pj6enp8PDw9vb2//8AAAAATGF2YzU2LjYwAAAAAAAAAAAAAAAAJAAAAAAAAAAARMd1To4VAAAAAAD/+8DEAAAIKAFPtAAAA6mzKz81gAD7UCRuR1qRSHxA5Rc+UBAEAfB8Hw+8EAws/EAYy4P5zlz/B8/+gHwffLv+XD/lwQd/UCDvBCCFQYxACAYf9QIOBCnt2d5m5yIxEOOSdut1vJ0tsWUXWVAAkaFYyEgUAPqYEOXEN42a0XYMGGKBAgBGxAlxFLBANOsni78aV+1lHFhrwltazXYcWg3l5wa6PcAUkoWj11KFx7MofdtexpmznQXMwTEYxHsY4/lJE2tSfB9q8WgSIPhJbNuEZZ15VSP7VltSrGspJcod25Z2tjq/hKJfuc/K9yfuyqmr3JBdi1XCcqyq7hZq77q7hUqbvZSi3rHcp/HCzNUmeHL0tv7x3qvnL87d/meVfncdZWaWtDdbWsNVd2Lnb2NNdl9ezRTvceUr+nTyi/o/jVrPtZjWM2AcbcmfBQtI5aitygz7FwCypiAidapmKEodXGSALQ12MWuNc0CMf4fJ60Dh5A0r/bW03hp1r5qUFDTN5Ps31cR1O+XxSbmvvibqvZ7ueWV/f2q+o5uX9VwxjGRM7Ir+ornqP///njjnvv/9sMbL7b1DoOTdosZKx3v89HH0FYclZJkFmDohKLA4uAoLAgJgkGA0ImAQWAQeYDAqFoqNTGGtDHWa4WxoczjxtKgSpZDccMgExogkA/oLIy46CMaEs9f5QVdIBfC2FgsNuu0hibyUkqXwb64XRfl45yGYtqpAwoOGkjZlnvMie0PGVwErICiQkUfmMXbV6WXXwbqYgU2le9T9hump3IcN+JXWqxS/NSl0om0OZtyqbSTDiZcR4ROkU1IdJEnEwvcvmORZHkrAdlxk+FWJnUgQwNn0nQpKyqFklx1kuThU4obn7c9rpPDwcUG9c8Tl3m7hyY8MbBjZOEehvvWNkDzS4qHZMFlqJ/GzjuKdPFT818TU//w+5pm22W6XR8S2Yk/+vgk8PSwhWq+kQP/7oMTNABCVi1/9tYAMScKo+c0uOWYZVJVrMLH5SrwxEPAgGZWVIymAFph4AYmfG0XwCNjHA1AE0EwUQL0s+lTcSUwNFUzA1QLAoKLH2a0+z/U7g1yIklcpgajpo1q5oyEnf2RQJjDVBT2ZcOkhg4erfPalPZudnokSBcfkOqPoTbAqwidnLJK3R3r/Wly/ez1fOTEyxKOpZL5ie8XUAue4m3H1aMbTBXsrlBx4NZ+SCDAvTHvFw3uUXfxua6rZwwtKFSYzJk/2F43OSweBsU5qsBhhaQh1lTnjp/UPPRkaXkKDbdLSk9mkjHo0qLrCqPuOMSqojNSqEtyoUCVNFfJsCOAKAqDhjUBhkyweHAluBiRuVQgUPjABESjDswomfSYvTxVMCBRONABffwCjZ3okNAcmjdhx7TzQphrCysQxwmrMORmz8TATIiVDtJKZbq5nYd8ebnNe2hqRaHZ2Jy1HVCOgv5C6uer8J+cwrVR2dMNQvT7j59ardDMPLwZdn5nAUpVyp0qreJIMqfRl3q9Z4sbTsayv85OTOtZkpiLPXyvVy5yr/pn/mbCVz20QY1+v2j1ntWnJ6uNj48tGkXGUKGc0LalbLn/M9t5V1RfNM6Fen5xGmUXS1JuxKTa1D67tlCB1AlBlFwSFDBoGMFgkLARE8CBQEgMwGGU+SUQmRISYlAJh4RAEBv/7kMT8AB2NpVHNvTzDib2p+bYLqLNJAGyJWelfYKCM0IRgwKs6jNZ4ow9kasRUeFGOV7OclPzbPDBo8FgRluIRTHlFTEoDMLBR84RyAqC/hN2GYkwaprXNfHNEYoPP92c6uPjDuvOvUbWkEixU6ZtTeJ6jm+q7enLAwrzM7r9IYRtNN/69tXqfk5tqWw3/8n9+c1HM7/zldIKxemW/Gn52Gtfohu1O1qNe3aGhqiXsHjx6f0q3kntX9bObtZdP+6vv0of/r/4hzNe/ggDOCQAVkImxomHRgQHCQvMBA8KgpW0UB6YQFCBnqXGNQQY2EpgsBIMmDQCXpFgFNPiOBoyQdwYDFV2sQGjSiQnG9sXScJiJY/LDnbU81kwWQx4KyeUu1Us6qTdkGCmQS+YppbLZXuKFQAkwS3Ubu/sbdxsz/tmhZEKI/F3NgyNSUrOS+SBqBiLvdm4Lhx39ZzE85Z5vXNItbwoaCywWeK/Ergyc4WVzhxXkaFI+esNpsR6qyHCEfKzPO2HlVNW/uGQ0PHJYxRVTipMgg8eWXBEGHGlmFv/7oMTagBu+LVHOMF1D6EWp/cej0EmHjwTYd3HPCX3Hvzx80n/d//cROP/6/uOP44+vW64y85xDvmAQJQJQAohCTES8WR0cACFsIMFEyACIBxo4CFD77IJMBYzUIZ0iarSh9afxE8/VWBxewR34EUrY43SIqKlQWElWc3Y27U5Vjyq5hjmEH8chhy/vU03ykJSZ7nugJ2Ww3pbSQggDwEGSvN7Y1BFqRw9LyEDJg2DGjPvJmazsdYIsDFVteQVa9ZJz4BTxcxfqFJ6FC6iVdvKzSbgC6u4J6r1kVZjkfBvQ+3PUuxx4czXNhxeSOmogVH4g6+eHsG+Wcbpe8pB29rVpJky+qz6R9BfPsKjkn2qkqnpLB4p9y+v4vm5i/7u+mcc7P7+K5XggkPSHCY1LY082GYI37qAEYAYBSAqRgUKAIQGNwQYoBa1xIODwbBoCQGhYQhfgjobFQEvmbSlrxvGeZqbaBhQAYXO3n+jj1w86JVCSjuF7OXtrORK9CjAwGIjm8kcaPfz5YuS0Cit8LOpNGbF6ntSgOHMgpsdseNr5vKsJ2Dh9LAvXPP6b+mvuuKkiffHmmxnS5HhCi7xfUma0NdcKlkUS1HZVKixbS5v5d7W2OdtiRWfxWuTF/GO6ae1qfPziLPTPriasGKelt53elcVtNSTf7dbzVVsO2M6ey00p4t7Z3til3v/7oMTpAB9t8UvtvX6Dq8UpvceLqIr1frpv1o2oiy13y/ny08wM6HOHlb2QMBgDQhNMRIoJFWGCCJgAsMAogKlZSQLLLGOiByyoHbw8CttGFNwABQ/alqWxxKSNCzqy6lbC2du2dKg0LHcisZVpdOdqxwcOhYapY44O63bNimMSEH1hqWxqLVZbTVngARXA2/vvYloLCYltWqvyRI7Cc7JvMaPEzaW4Q2Pv/PvvTUYvz9zUpnaIS71gZG2Ex+HKLs46hyzO48ml0t7gX75fbRU/322OMeo67qOlCDtlstr3Oaby23KxveaLVbLXjQOqnupj/qv+O/15Khe/fdl66L7l2q27tGAGoKYCZIqJikRjQqAICGikYEAhiMRmAgMQhJPoqhwyjpjHgaBINVUbm7KeyLN2NDgFM1JIwUDUwn1ijbwRNzLkJliQyjdBWxmYrTXbg6YFiSx+34WvI61hw5QYpBwQBozSuayiWV3cgRaYjCVSGMQMz2ljPS0xFu34zikE9Y9a5f5l1iMMKBjPiSb/YDL3bGI2c3nNhBRI8VLlhY10p06FrMVhQ2C0HUk4KsfsssBmivZMbyuDbxGv433PpdOqQtRr41uoLEZjFqhU8uhqGz1Q0cIGUOnjzIJjjbPRXv9uh1kz+p3T467q3X9+1XrpZ+tqyTLtoRAlB2ICbGSAoAa2Ml5gof/7kMTwABstxVHtvXzD1UgpvcefoIgkUGB0dACUYLwmECpy/ObsCg4iUtadaU2ajldaMY3FmJhS5QwAcVMJkb7RdDsSBYKAKH61JKItc5AQqhDSJnNxCe7b+zQggZbNFaSgnYZqY5zAcWwiPaYFdHvDgvxKMFIDi9zTcdscoj20d9iaA1goda/+vrT8vU2tY9LZ5gJtUK5YYXJKoyecCZMpW2SCpZGFX4lJPEbZtXtPDpVmQ1DmcVxzO2MqFOZe5zGKRiYuVPY8w0Rix7HKYXnOIJC9Pza0+hb69n6/KJ87viyazyj+Jd6VEFYIchuw5wOCQoIGIhJjAwsOYMIAUVHDFzRkHNEyQE1mIAia7iQMrqU43GxhdUEIejswZkTGWczD+tKf0eMJzXdyu/ljRF5iI4n59TqxM/nfiwWOGVzWeNWrerW27A4jl9mHDYXrY21IAhqfXC3bMZ/WGZjTHZI+Y2471vCFMXz6418L6gvT5rumdmZOwoplmis8as4ITDi73XKGQfHUE2Z4czM0VkNbah7/oQ5u53zFsEr5e1yj+v/7oMTOgBxh70/tvVzDSTNqvbevmLVuolBx9rCCp8T121ipwNs0/d5H1/f7eirLogA2B3ALiGiBIbDB4iQYDCAkCTEYiCwHKolLtGAwwaItBm8KGFgSXaYKVQU1oaAVShWwZKT5hQRF60zV4odERUfWuFuxwDBw5imNSnhim3lIASIx4+wqUr4kG63LlkwyF2TMtnoy78hkc7bWyOByHZp5jL9gfzkaKd9Itr66wye69A/m3CtnLaGLG/3veNaiE1n+MUrDxOWTkn0SaMNlQ86HNWhqhacOLjAQ5oPBONpB64fsdXssXny8jazBxh5qApVqWbXbo09MASGjmqh02TDz0REZD4WAsp5yuYex6kUZ3vzW/1J/0o/prb/0/XlnC49qx+jLgAAlB1ISiEKMIiUZBpWADAofCwEMBh1BghBjzgwDGo44aQBAQJ1NGnImCIBs15k2UzyjjBoLS4LiluEq2hrtX0zEqhgwyB325KpbUgbHCCx0rkxNrRduUJpJz5co+YgEpEFaO1Ur/VhupcMGA+WdmhIZu6hhmWCPZmhvew4Hj0XDjNZucMY8WQMSJrHvn68Iy6XxLEvvMY9o7a0yHMpa1o/B61jwZ2Wme/hoGXV4k3+0hKna57I5Puay/34povllO7ppGYeuXs5SNhOWsz9GkS06lff/UO7qf/4mf+Z8/v7HOUpabP/7oMTuAB7CG03uPP0Ds7upvcevmGzuLGSdTR/cogAkBGABrFcMMh4xmHzC4GJg6YHAhhwUgkADAYLemAA+ZpzploOmBQMmK7z1sWhn6FuBpw+hwIgR2HVgBDZmj/rca+UHqD6S1fiUnvXo6SmUWAtv5RFMcqm44OCpx7Xd3quohu8AhNWvLiMuGJYkUghI2FI5qlmfMsHMCYrHkBvuxYWWxgCvVH9N43v5SX+4ldfdlMU7uVscVejS822C5GtCXLZHblK+3HPuI/YHBrvd5MV6azfIFfTCgzeeptI5ASO9n0yNg9UvRFGvpYkbDq7oRyEtvVrKdbdYuOn5qutEfparaTsxQYy6ZvFpba2/N7cCIGYKxCTQzaLpj4UIwsYDguBgAeGQccF3YAICcpmgMbCDhJtdEratjvUBnNqwsBrIbC7kpbdg7SxUCJRkKhkrlWNaPRCzqJlRbi9R9s2KZxe92qdUiUorlHq1iVwHa4GxnLle/L90ueFAnju5N1s7v51rj29rfnllU7RuTn3fd/q5rTs56+3Vy33CbaFJ3bkD6zE1hAktayNGlMbjmUAPZL5Vbd2RxzVtS2tto6l1LpxJt7yKbbJlz6bIiDmmww3NXTJq2WSgXuPvQBk5B6TUqyyuTbbU3/P//+p7ok9XqZ5XvnNKyXIAJQNwAqg0jBIdKByTB9i6YIQKgf/7kMT3AB49o03uPZzDlzjp/bwvKAAxCGQcBjAYoMyfAy6KDAwLRWUpWGSpRku7hBtwvqE34YzWAgxYaMhgSSpDFA0Gfw1JJTRwBNkB5GhXO8feTU97HCPggUpmQm5AMKvSWApyOERWm+qFmiMB3Ig/RTAfJ2MacqeU0Caq+Rz/SvxFzSZSDunp96mtrcY0o2cXzfNJkyumG6t2xaYYS8kBfudtZu3xYND4eS4t9yZpBVMf4kxN82evLWvvdLfnw7lvvw673ZuznT+HWNl21HHPa1GOsTOpfqlst99z06+Ztv02od13IyUb0RJgws46KXVGb1yICUFcAqUVsyUFToCxQAQlGQdGRgYFTBgZhgYdbtHXAAkVpmNsvBH92LXyo788T7tulHH/T3fZAoLgZIGGJBMY7hjBv/2kIFsoN6/YJe3K9l9MYjA0DIqJ8KLKnbvHfGxL1HWpdfcmZDcGn3flmMWp7k/AT/thJmJqIzMQjD/zefVL5dz6u8+61783f13/w3yhYpJJfGsIjJbEprMYKw5Bbpq1HMxaKXXTikQrzf/7oMTRAB5qG0vuPF1DzcTpvbyvKCiNn7SGqocdqX7HjRM266XefB40a+HQ/QeusxrmqmrEEgHjzJ8zT09iajdn9/fz//23+OPv//4i+v/+Fv+PiU/+VX2YpZxzADMGcACwJNDwUCoQJzAAJWGMGAUwKCgQJgcATAQpMw/UzEKTCYWLgwM11kUq1hVNrD8s6tKUtHmy9SRLrgACiECybnXq2MYi1NQVyppJqchpYNfKzfqX4ABqJKPVW1v7tTVUaN2snHeZ2rscdJ2BUKWelEoi8PyTtemtNbIit6HYDqS+5lKJS1mbpjWfXFMnVb6i1te1kgnYHjTP6b3s9CuiUbtz3ebfJFzh3xnN84ujaX+9Z8ssCHjP3mN9bKpUt241YMakG8vzO5O38jJOzmXGdZtMpHKB53KP8Y/99/fz8Y+NZk6jBBBDRFWM5g3NuQmPoctZCcgBAlB0AJcESFiAwMKJjIxAURXBA8Mg44MtIMLBTyvs8cFDjxINUjFlesO7WxPTNFJpctCaW/EOt2d9WQZHmdGP/lXyxuUmq5V0k2bPTxuZZtVs7ph1qaz+y6d3naj9NOBCyxr8s6kFY2ZSTEMbdSpynj8C11DysRze479WrNxhRyV4Yfz+WN6eXHtfPHe8e1mLyLc5M3qWOyyLJSJ5WaKzYrwNlKrTKIVu1dSpNcUlDydnQ6aeJ//7oMTYAB8Rx0vuafHDvcNpfb0quBj0WzuGAoJUcx2sokG5pyHFUHoqErJQ1jZAebNPNZ2VF7ZmVZ6LRc5ddOx3ouezdU5EERWGoExIvHIANQaAAZA0gCITD4QMBA0wWFluA4NFlRCFwcBjAIoMufgyqKDBwZCoAQZQyVLjr6htQVpMyJOV3GyqZl3liGEQAKAMDIB1Z7Dkvyr2qpUM5Qd72MFyHHmM5EzBsmLnnaq18pdTaO4aPV+Myq9AUN8UcGkyylpY5S0F2KVSqMmDTU8tmOyT3/ss6YpvvM8+fj732Msfw3zHkfb6R402r9yhp7ifjrWKbHC5h/Nsyluee5lzeg8HbfbXLRLz1VXN26BCDiE8Uy0Wn2wx0qsMHri9yzXyqflxy9zGdVXF/W6/pv9TER7Pjn/iv/v9X/+f06nSQELR6/xxIBYGgAK0Ns0UFEQ2AQww8dWQOi44EDowz8wwCObogWYDQe0B+hIAVeujDVo58MURWNRQHKKjElgBUDIAIBGss3hqZq8uZFRDImO1WgmW3+ZcjwWw/r9UudSplEbvTsq93OtNRTThVVUgy9NBcWpOwZyrWKi2a/hanIYryuktr7eTf+M/Vdozd8f78TS+qGG2ocuN4jjSdx80va+Jox7xd+mKZ3bSngXtXUXd6Q2S02MZpul1wWlaTx8vN7unbQ/nOLWmfv/7oMTegB7iHUvuYXlDjjip/bw/GJ6Pe2JN6xWHHn3i3//x//j//yb8fTr11o92IYqquryTABMIkAi0RIrFJhQBpkBhJEgEYcAoCAQMDRdECCEyLyTIAjLhLljSnoAncMKE1oCY3E010fWRoSIEL/GBgSg0YxAMDbn7c/f1Q3ywSysf1Kd4YRdxoK8AGPxSL9c3luYuWDKHXYGikOz8D9p18g8USh2Ana+kkLvRAgazTUrh2GZmMQDGIkjbIta1/6xxwdf+/z91LW8mOztrtJdm60ZmUlp7OWdx3l3OGYJnsaXTXMOJwoEMRzWvcTWPQxTTnKi4INXaYyDAmV2YoWMUkDF2Y89ZzEpC5pqb/Xv7bm11bOavl39Wz/2fKPUxAmpVl0AgCgrAAyiNIbkSUDg8RDgFBzBEghBRwTbgAg87LFA72PAjfw4kk5DX99jh1YclBDcENLVwv1YRnacg6DmShD9y3POM3bmfCFPInK3HXpnLvLXJkG/WtRS/OVWrNLc0ckdvxWv27SUWTMRJDkT8prxuANyycIFtBlD/3r0dznarzJeP3vXc957111Mr2WW//WpU48P2oXV1qlzqKHNns0GWV7lHhQQQ81JWvFHPJmMAnmD09JBaFOY5JdDC5OFQDrKbPPHTDw8nKaQOca5wVDXYtlTZYxFZrdPW+6md7c5uzej/6/+hm//7oMTrgB3eHU3uYVlDscYpvbwrKGZyq4GqzYQAVQaACbQ2zAgdEheUDAWGbUDDIAMDAcwCJUNgSGDIGKMhhoxEKTAYIEQJLzNBhj95mjAyUBpM/rXFAluKiSFAIJVUDZIOu4WM7eruiGSTRsq9DCJdHPpnjBisrDTudNKK+UFUuAKNy2+jkJ8XSeemYAQody4965zJl6DvFoSLWoLQVhtUNhFo+Pr/f32nc1bffxWGh0FzZq3tO3R1423zVLndZL6PiFD1nXtiLpDH+p6W+87lbKUmt968YqIsXU1/WXNF06194tDrG0h7hHjRMxsTZhkznIvvr25P16a3eisPUa75wICYEcAlwNoaK4YFjA4GBIxEAEJQuMAgZCymZhQKGx4gbYAwcO0IG2RYBQTZ5Y1ga/HxQCG3i9tkqhRfpSoLgkgCBhoMwxVqdl89nVwKptDh1R7els2EOUGUjMECISELvUtqvTSt9bmYkNO4R1ZVW0gvWwEuzO5IMA/VM+fBCQeLbFUTIkj7bb7Qomn3alabvzRiwr1tbctdDNWYsbbbmFe0MN6NNB9dbjQj2St9z0z84iIKkfEbErh7xjlnjS6v5t7O4p9emPmtJVesbtB+r3pZlc5b4rPa1KU3f5bW29WpdT3rerBFJVfiijtoBZGrQxB1BZ1VvpMANgVwAdzGjCgAIhYYTBAKFP/7kMT4ABy5mU/uafFD274pfceLqJgEBEAZAIMAgmLemABCZd25mYQmEQgWxbYQAkDBKc79OagJKQUqoKJaUDq0sWIgQu4OSbnUX9wz7VpCwX17VeXpNT7sbhgduS7pqt3lNQQZOdFpr3YVEZXRuxBr7s9BAUUiDpN+88WeOOvOlONmWYLnIxBMPwfD0aGQ2m9w7rtf93Gldz3zDu+5ypg8io4zjLKe/LPbG1fWssd3J3CltvLQ6tJo3UsOSbl10FGialJCLQMaSKS00icGtOyBxN2YaTWpVEwKBqoZmSSSWbIKoFC1LU3Vr/9qu6H+s9s0rkJdzBw8Y2uscTAlBGIRlMSBQ5S4EITMBAYLgMQB4VBooHUUDC4pNRRU1iCQgWKTXYXXfh4/7UNOlhOBr8tnmqwMw5LchARKZAKKA49Xyrdy/RDjTwp7cQY7UtzFLDBEqDI0p5Wu8zlfemSB2uUW7NaG5RZjgkJpZXOdiszK9yuoRIKkqhE7TTMfmaVWWmwwz/u8a/Gi3t63++WLMfa12QyqdnKtjDJVOF42bdBWmv/7oMTPgB8B803uZblDsUNpvc02uKCgtNlgW3ZzUgkfU4sM670lOZjwSUnQPOZyeKSa1qQmSKI0rdBBIzOmqliXpVooG5i1T6HX+9Xqfv8x9vm//p/866rM5xXNtCAqBnAKvLTBAdFhu/xgsGGBgSDR4BAeDReBgcYLGBkyeGUwgBgKu5mKcRZlI7Wq5m4koE3NnphjLjspVyozBxWyhF/HkpxptXCpHIhl3lZ7bPf+ZGWLSIdtcuUVmIXaQx4q9lOTUrx7lMt2LpyenoNSx/InxyFUCZx2Yc6tLZbXq2ow33/r/1/+3Tvcs8O/n+2onbKWHzisMCuIat6DJeIp+bd/+Pa1Sy6r2FPx9VFCsc3s45nKV5cnTkVagQDkqqbuuUJbS3+z1bc55P191mfu4EgFgaAEbjEgMrjEYKMPAgwKERAAjColFAUKhpWMwQHjTswNTAoMCbBI0pBRdPTDOgNInQMBlR9FSPIxKG0JhKHSwOCpOgr43rlrPHpVwk1DdZnjFJfS2446Zkk49Nt2rt2zcldWlMMT3cisXqZxi/BK+wMGt26eWR+nnonA5UGFCy1XjMN2rFbbuIeSfncOfj+6rK8se/+/wvzTX5ddu8qUdm1go6p7Cxzt6V1N/eheVmbc9nQ4KQ9DD5x9lC0hjoqmrB1FYx5Q2wgC6IzsMi55otGkhhzsSrQjO//7oMTXgBpJo1HuaXPDzkZpvc0quOd9Ofr396H7uranEP32X1+e/q15HF5l/YIAFAhwAZg2jCAQMEB1WMwkG01jBQFBoGFA8WtMBB0zvlzPAdAwGWLAymLJnJ3zRow/ly1a29ZEmghu0FoSTDXxZHOvOX69yn7jWKpjKxhVsQVCez+7ceBguXLD1LMfjlSVLxjpu9II7SV+0UuaqJAvV6urDsasv2SaHsxew3STTDTYLjruuuy1dS0nusRhOtSatzoX4+iXUCWWfOHg/ispSDH0kDSIIbI1VLQMTQTueuxtpk8lEE3UktBI1D6Nmi7rWVJDGLi1PUyRcWMllumpaKBoYnEU1epqqtutbNb3tr9TLPq67PW376v26HziO5IkBsDwA1sWmYMHmSCq0woRBUFCg4KgIwGskAImbpzm6gYOJFY2WJpsUpPubNnWlZ2Nua2aRKaxVKkqgBYBQoCVf3btds8qFRHJkXdKzBbtins1VyGroPhUmFN87uJ2eABf7Xw/OyaHcaVbBaGkh/KbicPOVLoHHEisKtamJ99rlHF3fbvSvXUp1rEbUi1bqolYcwxXRQPmSSQsxELRso4xgYDiLi0V6rqIz3ZJb5wbaKatVg+kFq2SWmqSZ5SBmkbF9kjMcSK6KKqTrMSIqr9bfT93kvVWvP5J/qIQJgeQA5y2zJwkMUgIZAYCI//7kMTvAB4OP03uYbqDabNqPby3GBgQAmFRIX1GQmW+MBhwytNDKoOAQFXc4K5lYWlfl0zMXXDZI6yo3ZRfYyUBCY27g1ZhFH9uM6y7SkMcoiV9RyTc7lqUhc2+0CyqGbNi/IN6MSm7L6SkvYYfGKZLPOTS6/OVJFZj5YPEQWZmI9upGqZxKSGYulp1IqcRhZ6pnu5MC+skidSRWikLorJG7MgpkmGOe30VVjKPMydjVI1ODnvVoqRD+WHl3TMlrPDtNmTvZVEYU1QpqU7IJOp0v////b/zyet38lKa86TMCYIcBrcqMDS5kIGY0QAU5BgAYSXiAUEJUrGYMPG68xuwEHB7JIPToduBNbzNpWk+kL26OzOPBTsgEQOWAQKgc1zuGGHMNlVHKyLsqaI+UvtSuyys1Lx7nCxjXqYxuxoAM1/eeRTF+X16ybac1yrlKZLRalnSq4RAy14oapZyalWUUcCVJqe7MuF7QT6rpE4L+tJJBSLJKGcROtGjTmJ9DUt03jJUmx1JmrMwsjQwrOUlFENI2NRatFFQnhstTXdajf/7oMTPgBtp8VHuabHDZjNqPby3GMeTsyCCjiZ1Zapn+z0+o/5L163T+GXfowAWB4ACmLjDDHGqm4egCkPUQaYU8j6CImVZqZUB6AJnMWQxYE5P4YGaiy8qd0kdAkADV1LJlYj/jxag/C1nfv6yzKpJIh7wzKBUTXTLADtCtR3OTxu5wqToGHDmyRmUSaMTIzLILAl81LZNkmUDQxCdA3kmTIompwfRHmBSSJq1VaS4rRNCizugxTFGNy66zxcTxaxUXZkk3RN0yMPoqppoLUodzsaJO6CUjx2IUq6jhcEtLSrrNUFmaiDFpbMoyWifUQFaK0UUXW6KK6n+v/3/9v/P+t3VyUpq3YIgJgh2Et0mjG0ExAGAReCghOcKBgqFig20wAiJu3CbuBhwYvdyEi0kYG72+bWqKUNuVgLqvy3BiNKgUSFZghVBMNSe5qverYFRHKDm7Ubk3libs076GS4NPWeVLW843jiYTPcZdMW30hnclUoLiya5JYPiborWicEjsBMDS24XAr8XmPy594ecnD9/rDLLa56l3Gv3PX3o6wQ1jGZTmgyEFK2ZpEYrXWrGCa5Iyo56uYB0/NoYawOkpqsZMo4jsyqznsegijbKrGpc91/r/5X/3/6ov+rf9Pq3I0zSvKEAFgdgAXQWjBoACgUDhaMgYBAkwGKi8oqES3xgMOGcs0Z1D//7kMTvgBuB8VHscmnDdsZqPbyrIAKAqxmssqTRi2erJpQ7qXrGT0XCovLFMGSK+ZYNhW8nsOx+5hj0kwkWD/gyEWd58mQqrYdAtqkqUWEs+kAJzH7OHeZ48iw8Hn7FjvKWFyCWkpRPGrPQRjhORamuvHGqK3dkGhaE9KtE/KgvqB9VSVJY0iI66kGcntXdFbpsJkxonZBBFzIOe6jqqz7F0MJAsmyV2Ydp9rJJpOtESU8pTpJL1JVO/17/0U/+z/88/21sr32s/W3MH7nc1yIBQGUAi0loxIAxIbgQFGGRKgIMBh0KBQQipWMwMHjTsyNSAwMCbNJO2Zn69a31DSJ4QCsluP1BzZ2e1FFSUYYMfLuXuzUn1hWILJF03t6HknqSzYfcwisoSW7la1/yP8QsTt8p5TT2InL5EwkRgJNjGqOX6lPK5YJNRocI3V+bqQFLZa1/PPPf6vY9Uvyv44Ya1laplRmyJ9BbJ1k0UG1UKpW7XdJ2QRCopIFSjdFJUmhemUpFSlzwjxQPJuimk60kC3RRefrEceoVpmLtNFOpC//7oMTYgBuyPU3uabHDmkNpvc02eP/+p61/Ul/fT2+u3d+s64yvNZzvoyA6CZASeAJMqCgqOiIWMcHwaAGKA4jABQSLsmBDpnfKZ8CgYGVLB5b1ccAf9s0Y/Dh2SuM3dda7WYKOgoBlYm9A+FrlT8N9JNydzH26QL2vUvRwxNC6LzSzKzjWhzLozFhhYzwl9TK/fQtuWPx6/Lc35fcgkpI9Yg2YbfT3NZlaID/LrprNncHIdU86tZgsiiTLVVWnQTFFS7u/Y3VqZEzWmJsg/s64kE3q10R2ig1FtalD8lXelVHfCxdDGkP9X2+r/27ZXTd0IAUgzgEbGJGRCMfMHBwIFAEFBhUMgIoFwgRgJtnubqDhgYyd3AMLP0Dgv/uGvsSUCvocgJRViCRSjYjCQ6mYNKcubp6PmPRy0j4u+8EJyo6nugF8CJPPX4552tZlUnmMzTz09LqCTLBIB4hLZ2MSiRwbOyggW5MS6Ov/Bun3q7T2aAqqtSzrBxGSLL3RdQUpYYmRkYliymZDGBdMVqdzc0Pmw0FNNSnvdETen9lJDn1UlJ1nBRvZGuofjRa1GDopLSNHqWjazv1f/+r/1f+j/7/9b+rzmirNgyAlBHARmESMLhUwUGE9DB4YUBAIcBgTCovMEgAwmNDN1KM8hQBBVMJlKpmIS/HUlMyINCOAMZ9q6J7dWGFn0//7kMTxABkNhVXt5bHjX8YqPby2OCDZA4Et44TestWhRONsKTFWadqy+koaQyJcOlRXUslFjOZsRoLGLW6ehkVqWUFSPp9W+xiUWmsPxBdCQFFL5yblT1wbNw9GW4ioNUP/hhzDn7aTe/ef93rtxr+cpmLlreNm6o40GxuN5XL9etUlVzWq6HUc4CgchirohUFzQxNYZAWnT5kx3GQmIi6ue5R7sj+PjC7MN+KJt0ZyW1b9knkN1P5JEBwCwAFYKkYrEgwFAUJACGSzhgkNiADBcIKMhQOGXYwZsBQCD6mkDqYId20+vBBkM9F8H+gCCVehACdVOYwIC09jFIBgazyrnf/HqHEmVk5cej9Y7wrkItZw6t+nxqU0W+UmBQrZvr8Ncw21+xM4dC+unkIuT9r22h3B2wocWfcWBElA3xvX/G/vBUf41TOf5Ul1Y9dwpKKKcexc9utyxHkfEZsYs4kRW4LTHIdm1OCqsycjGOMgPnKYyHTZEKLmJZKHH1NeeqmCrb/3///X/yv3e3bW6iqdkgA3BHABoCKHhmheCAsEBv/7kMTmgBxlnU/uaVXDYL4qPcermELgYwAHRGDBQRJEmAAeZ9j5pAHmHQEW9X8XRAoChGqkBmNE6mG4ktkEmZuuxYMuYQgUwuEofwyzs91lRpGETNsYPF+N7lyVggKlAota7lU3Ha1sFBCFYx+1TUlJMfI1MZytRyGl4jSCf1HHMjyR4qq47oBc2bumd8WDm5a7l9prhPqZfrIvMH1V6SToiPZqk+8cT2SrzAnh6TQdbO5is4NqlrUjMnURakWWkpBNReUqn2rbt9+ttql/13OWq7a/t1/Q866vskhA4BZAKiNTMojQxKNDCYRBgALRmEAsFQKDAeqEZD5lS2mZQqYKAygbDAKB36Lv5XXoMJqRMh2oKql401XIYiNCprokjHtrc12xvkbFBEPLWcjDGJHexy3aMBCoOFLjWbG8qj0dxDBk3lqG8gucC8yTApXhP9x67tVdiijYjxNe2o8Ur8a1j6tfklcdZpje5NSiic3GOr259FvYjYrX9G+BBl1Fckhessf4zuuUY5a3vf3vVDR+d7+PJVIkkmvmmolJtSIGuv/7oMTOgBq6MU/uLb6DrMYp/ceLqNxq0pBzSPW2s4xfWW363f8/7LQ9vdffdsp/3u7+u9W882DfLd2REBcGcAGEVI0gRMEJjNQMVFhQDMDNBwHHRcvEYWJHGcBz4MHCLJoqXib6Nb02MdqVD1GmD8S4W+8ayBQFLAQIxWg1eqUVFvUrHEAakZZcgqB6XmFeUDpwiPKsb9WrnN3rpgwPT/Mp3BeZEMumQaEBSuk7HpPWh8o7frfGKVudiOzm/97fBIp9/Naa/gk0i6VjK5ueILwoyELdGt9aBt1GPaLna3STrUHKSoJuymxOjyG80UkTAhUEXbtSHSmkkpOipPSuggtUnOH2xQmhOq89skhSIKqpiPuRrlHrRnUggjBVAN4ruC0YCCgywWJitAAYmHggCBIQvYsBxkP8ZQEAUFWg9bYG5wBrckMEaAAAM7cBy0GxkCTURKBwI7YklQupf3vLfLpIWDRbhOQ0zel3Up34AxENK0tzpJjXYxlYAIxY9EPD9WcuDgkBuxbJ9j3v66Zx/r/X3o+Kb3SmM61kgetfOd4jXbi/vu7PJDWaWCyp0RCLP6PWVOv4C8UkKR3PPyFdsueYmcaH91zTpB5G7p1PnWTDl6+7isiwuixp6F3rKtIs/q/8v/6NlWmscRA2BIABQFRKgyYWNkxAIRtN4cGR0OICItiYgInY454QGP/7kMTogBu1nU/tvbzDQbOqvbevmBl4OCU1i9Lttc/UEmc4KKsBWWXLBM5XcIwcEjgwEmTCz85XbV27vKqSNAYQ1LkWc7DO7qPg1DTCf21M7yrW8I+SD+fe+/2y98cU9Ja1xe+Eysf6tiutaSTRvOdf/Vi2V3m2/jHuW5jw/WLztGY56DVgZiMjZljf3fn1BpF1m19WQhp9tapj3yZdv7+mK7JIPaVlqW6bE8jLnWmiroH0U9BHpbLoL7X6+qq7V8zZ978881bfSiQXNVGRco6OxRBoBYAJpPbIhU08eDZiQCGDQ6ZGHRgsDmBgSnyQBcwtNTDoPMDCYRgVTAQhwUASj7jHjYckwmrfPl7H+a2tAQg1DAFFimfOY1u9qlWAyf7MbhVPreEBghaRHN9zxp+2e5CAR3HD55eHqApSkezss7jr5u1oD+uvnWct6a/xn51fJ5PtZtnfr6F5YIK7ZkPQrUCKMpv80WRiZXsd6QNUw5b/H+9k+ifP39fd0M9M2pj5qvk2+d/5+MploxrOL33uEvU+b/G72vFYDyv5H1/f///7oMTXgBvB8U3tvb0DUjNqfc09uFa8ltXMkTA2BXAKoFLAUkYeCDIaOjBVBQoNEgKVRUAgBjogcMvBJUHHqFzeOMUDsxjlHTTX1K1p3HvTmjS5WPlxUtjLwGBt1q0e7+F0hSBoz7jK4XTW8pyjMEFBYpgarWh3ecawiJhYjO6l0P8x3CqWo6MrwrWI5bjpu9q4s0VVd2TDknkWr6UW5SNB3E88kgWmg0BnMzAvGtBQ+mIgqZMMkqqVYm67KtsgT7V6rCsPFdOdxFC1a3yi2kFaD/LJdHZ+T6TqT1PkfV93o9WILW7J12AFcIcgKEZIaIiyDBYIMIg9qAkIzCwGMLgBWIZCRge2GDAsIw+OAJF0lGCIKtDDc0drkHNmuSqD1/ReBn7BgoZFmjLO/SZ3YL5vLyWANZ8ORORUW+V4IKrRWOHpnt3LOP0koMkAt3sx394ckBbS08Nykt/vwDU9a/VMeCYLn8Zv8/2Ni/z9fH1lOHK7y3ZdZa50PHktMDPeFJO8XJMUvu8v+v6HRHzatPr4unqU19Vx8QSs1q1tfONnrvHzrX/vBnprObYpnE38l6n+z0+1vkLzyCmXn3AwNQWACaRSjMAkwIFMQIjDD1RQADpYBiqKGABJlwid2bi8yLLw0EpXOaRATac7KTj48MAZp/37HAUva8BaUHAywoOpG9v1MLNB+paMpP/7kMT4gBmRm1HttX7DVjOqPc09uA1j99o8nrY423AMTEhpaitNuev9gr9FYnIPspWFoa8NqqOCJBkXSoxn9IHjrWr59K9kNbHzvX+Kkjk1CzrPv9HKw3Vikiub9rRBhm21yb05v6saoSiCpHfY1v6wc0TP+sa9dITnWvnHrtIDNiXzm1/aOkUvXdM4i6zIuo3+cb+PMz4+OjXyenkfzrqD+3iPnXvb+nqHakE6rOlQA3BHACxVLMUgIwWCBYjmCgEs4OCokHxYKJqiIJjlvHQuQghZOmSoIk7c91jOBYSapJdIUm3air4DAHLAEFAfMXa2q3e28B0QESjyuwXItd/5kLitdT+w9KbV/5L3IFCWfssydlZ2tzyrDmnVLcnTg+d1TEX1t/f40Zjvcmc7xquB0S2pu+843DHkg7xKwswoT0oTwxqJmfUSjAejnnE3PcYi9c2z4xz/zzdgsS+Itj7a8pHNcsP2tON96sujqZONLsxter7vL6d/kNsu6tXfgjA4BZALqfTD44sbMIVMMaXmSkCwHJCqlQkaBcUr2kyFcf/7kMTtgBzyMU3tvF1DPzOqPcevmDqI9MdaX/aU6rFS1v71OoIxVUi3hIZFyKdC+Y8sb5rFD4o929tlnt67qJhRGRELGFSOcuQRYxMaKnc4q88ntrL0r3toqrvnX6Yc/rFNf3qezhHrX/6vQh0auK3vTUVtGIhMeyQ1JmzOWYqNxJY0sCfUAgDyBfDV1KGI7e+slKPtSJwe31qbSJhH1KX1ml+pGpzdHv8h6vu9H3VbdmbLABMCMAEwbCYTBRhMAFuzCYQJgSUC4OIph0LobBcNGBNEYHDgiArMm6lum+s4Z0xpIgIxUkuicTa6km6JICJBJiCUM0G7dyX83x5imvbttF12x/L5gCgsVcqKwVP93G61CYY3XlMfLjSSr7doS6owvs5p15p3f11/nv3Wc5pb4xcnOfM8n9PaAdurqJPq2NBa3JsDz8vXDV2fDxPTf/6+nsAm7hFv75l+IBV5fXtfF6Xbyuvrf38fa4d5184+bd97Z/1/rEBHW+qxHYvfaH/K1dyyxmR2qruBMBUGgAOE1oIKRoNHAYLg6SgiGyQEIf/7kMTXgBflm1XtPbzDXDNp/c0+KBRI0mLDhz4fJCsFas/TioR3/7SnBkpQCS+AIwoovcIAoMCoCrYDmV7M7H52ssuEIGTWVPdfHm9YXYIHTJPtyopAVaT5xjGGgCUUlm2qRY0KLMfUXE8J/r/UJB53mS2P9HzX/+u9YgF2n3m294xrJjNLUzRHUS+3RUFZXFK7jOGsL6Nru+MbtnZ07993pau5TipvOPa0jiCMQzOrtd0BjTOY1DRJXRNEmmUX6v/7fTr1/b//f9k5XDmzeyCBXBZIbrPcEQTZ4BgSYeApEEggkmIwUYcGxdEGCMwTDTBQJAoUL6v0nKCQE1vvMjMAIWdXgSbYkWqVtZcFCx0I1xZdzWpq1/6ISynK/grLJpnOWS+KDVwmdLZ/eGWEX/RA7T6vJJP/bRY406unxfdaWK/3zm9vTJdVvVP/n/J7/Gvnf/qeCRT6wnJU+wRIQkRierY9iP+2bRLi3wpN4r94N6nzb51jWj63re/q/ij3VFf623u0RJJXGo+vj/akt/mn3mm1q9JG6PW72ev7/7a9df/7oMTSABoaJ1HtvV0DSrQqvcy+KMxwEBYGgAGo1IeSyYTMVAwQQI7gQSJQEgD27CwWc42h6WTCDV3cTXSRlPe2TnwtMxUzd2vq2MDYINAwIBEZzMwB16S/utasauEpWTXVPWbDRfduZQaMn7SH9tfXqY0WdQYFK1mI8YY8V+ylvL9GbI8VKSRol1ONvOcwLUviEfiOgf4pvOcD4zf7n+87XB+41vcZuhxrhQG2fUBcVfvIWoK3SuVr1nRHzdCjpTgw7JpvqQREeHhbr3qYY5BUpFFSKmSHG1a3RWt1jw3Tb577df/r1X+bWXf77W9f0T8AIoy6UQNwRwCYRWUZxYlDwIHgeGBEDFowgBTBIlBwGAIqMTZYxSHAAC0MlDQaAlSMqx7mDpwoVE6OSQwXlkcrQTDgE1gZ+bWsM6fDeJC5H01vNnsJw3T1H3MYdJoNrO7QVOU2N0Kk8e0c/A9Lykld5zNaxlsoRdKP4iucZOsvCoaILWtXRDlqvQ3xIjzWQlDBmxMJc8DELdZKqMzFNziiYUi1CYKWbuoJokpNzVZilOhzjBNdczzEUKa6Tu6YzrReyrIOeddndVajqr/qPf7r19X/+aaHv+3Iy15ZvJEQFwWAAYTUTFhlhjzCo2IgQYMSAKHRh6wgEOXlAlQIhNjjvA4AFgdaFJ2YEzJCiUMppkxl1NCWYCQscP/7kMT6gBvSKU/tvbzDZT4p/c02MBDJguHLeWMzR7ryghRRqCzxfWTfrPcSChciLD2Pb8/8zcuGBBl/3kBk3O9mhknfSRWDGdxtplp19za3msBTJT+mN+1OXiv1nFvNSCSxCYcqqY3CF04UQq4zysWJNuFFLtGxqJdanA1llocz3LApPWlkdBgB2t02MEcbzHmpRSJtV9x9+s9G/9/+n78/fb2/6v6JyuV37QANwVwE6lUzGwDDgqYPBACAAKCxiQFlmgQFFNQsDTE8tMWA8AgRYV+lLUfnD7jmZsA5MC28dqlhh3mcqiSJYEEFeFWeZzV3K7MEo3GhdX6+r5V88Kd4AKSBoX27sbjcivQFylMKgmQ5yv3sz/d351PnJXtLP7b572zveta14KLSu8Yp/LuhOnKmKUxrOJDNkgapB1JXUYj3J5WSa9cYXU1sUrzwXTmQ1DfC2Zf1cGAby9ZVDjVCqJ1WVWPMYRzVvofcRJr0/L//8p/7dsq+lc5yIEgEgBJkYEMOmyAAbMGEk0xQSEYmIiVlBhIWcdonRgIGYBYLRP/7kMTkgBoqMU/tvVzDQTYqfcermMJh9iye+epw5EuGgB/3cla3EBraJ7joMShJg4pDdym7VtfnTFhVL1Zy/28v09BTwIYmJiTFIb8muXM4LtVyIthXYVt0tqLMlabhzxvqvXKUxnbyutVqZsW3//+slDNW9/n01k6m96yqFOtUkB8NEcSlZIrZWr2IyH8s7cZu2NDsr+Si/bmwru2q2dI63WyKToqY3QtSQ0iWOqY1Z53J7Fr+H/T68pkd2dRACSBQAFAKmTAsoN5iQDmEREYGBZgUNAwChUMlvjAIeMxa4ziIDEQfMAgALAEwCAFbFf4YRM08WVR4y+kR/V4oiW1CBG5pMrGoW71mDbVS7UKhhDBBK8IxB286/ILFSS2B3c4AwhF6GL1kw2DpNYZJX7fDhsrol8c/2+s28zYaz6+c+nzjolz/zW/pvBIJf/A1bP5SoRCTzk/c4B1NSJG0x4i0YldIr8tyg3SLjWM10j3HyfEvvmhf9+lMYlxEKs0n+HsGP7xayld5axZdxdQkx8wo7zMSFjJ0xcf+rDfqWrsbvv/7oMTZgBnNm0/tvbzDwUYpvceLqL/9q9PJt+rWzeCwOsyBEDYDUACAIkwmBAwZEwGMGg0uYYfHYiCAhEC9zAQWNZ1w2UEjF4BDAAvYeBAQCVhKl2CDVaEGgD8x/J6b601UCUCSlDEpX2q0E03Cj1QwQQaQ0hYyiD20dJnUfcwSsogd1Od/lPZmQARo8JmH+XZuSxihUevUlFILjLSTYRLqUmtbrY1HVnUynpRKz86dpqUicDfKSzY3Nj7G5qwUh5FGYmyCTplyzr1rWIKX1VJVuksXGZ2WyCCI0hKMpFSKjlMwG9ToIvZSzdaS2Z3zpCd973VfXV1v+i1WqrtP6vtNX6vW20z9R7El3BgBqBwAQYGBwaUCEwyBgQEVBjDAFMBiAAD4FAEwQIzR/JNQCUxGEgECWLl0XBa1zB0zSyfQPyf9+WGJfhcDIRmDgEXnMxgZf8ozsvtObxlQgJoc3JBQNwgWpVwpJ4wEKhIWw9Zo8rmGF+YJQtzlIuUPXYSAZWIUwnlrZUgD7Ncne+cEw2iza03XLgCor0atSeqyCEMurF549WwmAZhg2UiE6n5DNcp9USgUDs93biBuk3dCADq632QUqzbNmv6eNaN/L+nrpT6N31zV+vL+7XWWdsg0qWNlRtW6siBFBXAAgFSCA8YcCxQOTAwIMIh8xIUAqEwYIUCQBFZoa2mnQv/7kMT0gB0WNUvuabGDZkapecYrmKYqCAQB0TGXu6sH2q9BmlPBwUY/H4Q3JfaZ6i4FAgwCTHQWd2tM6nd3qt0UDZM5JZQNiw3zVeCiqRFL5djndysU1WlBoPpew26dj09eH4BzZnSWSUKlvpMfWfX/5yZ2s/Fc//kavi+NfW/AO1xhsrG6ht2EiW4x9yufxHYm16fKacbQsaxq3OJozJ8fOtSl+387zi9oy8Te+fv23TOEFe2d58Ku5I2s0xXV6dVb+P86f8+qfq2v5un6b19Cvz+D010kIJALAAdapYCAICDRigamEQ4KAUGhgRAcVDaAIwKFDNECM9goxMCQUBlSl6kMWC81BZjJAlx2CRGURZeBctbAXBo4ADEANhynwqV6+tX3EKFbZ09WfcdblAVAhWEZzOWTVm7AO4CMNBB5sYfYrQ3rM2hoLzCyw39szzHsY9csFL0k3ojSU+aW/vuo34317UtTEEhWqNW5ZXFhfzjXZ93Za405uBgvMea3iz+7UI4W/ysN5JalLQWizi+vUtPSM2W6kqmSWUaS1/t/1v/7oMTZABy+MU3uPF1DXsYqPce3mN/1/+v/1/9S/bzupd2DAGgGgAzJdtHQxCASqAjBIbWIYDBYUAwNCDfEAEMfxIycCjFIfMAAJYcRAIuqwzC7BhhE7F8E33QeduycaQLSi3rWgg1vdYz7la3epxwHER9nLj4T+GPf4Fw+LA5ps1e3P3HomJwWKS3KZrZ1y8bGvpAOGEu4jhAv/4xt/Vtemc2jHhnFre+cZMlxkl3Wtv9E1UCGt0dVK5WKtVlClo75t2rITgrYhhssFtfPZzXC8G7GWTWBM66sqGjECBqoazLPC0ljT3farOujx9kdP3f9X3+nfW+jOoQAlAGADiOTMQDDHxpIIxclLVGTDgiCBwYMMBDGTk42/OuEDEApS1daEtYZIiVxpEwwCNC4CknG8nMnJUomBQUQhpKMMEfzn4asQwzgYLgcu1Nxqjv9z+GyQrbRTR2Jybr08BvuwwxodTDfu/cszuqtW6wamv6vVt497E3m/ut913V193sx/Xdf/Nsyt7/D+Y4YZudMTM7LKlfHccfdakswsVqXfd4th1jlh/P1rrdrnNc1rv6qO7rf6/9Z5wA2uu/396wwqwff7+985+61Tuv3l+v3M79X3ec8n93pzND6VahwEFgAEAUCQHwunm83lPDGgEMQrUygLzXcXNkUE3ELjEYmNlNcxwKzYeMManYxgf/7kMT0gBrZnVPuPVzDhjOqPrewAHzT4XEgYckoRjQKmShKWsC4vNGgwgPJi4hGEBuY8GK13hFR6DiiY4FxoA5hgtZyz5H19SEKGaSuZrBZECTD5rNcrgEggKAUwQDTCAVMCARg5c0iZs2GU8ZAhkJQC5ZMKCaJMCBIE1BK6TAIUqZx3hgkCGZkWrC85egiAoEAatzzxWIu7UvvzJ9YqEsPZIFwQ19H9dyGcMNJgV0rLSljV7yq8KxhhOi9bdt3xUQy5QB2S47SKatDy8WlQMyG0+shxfLDcIrYwQ2u8kbEIY3GWTxdr7Sh4F08YlMO1JTelXIah6taW02fsTSvnsadqV/Ur+kqQek1KC+AwElAI2hAPA9ocOvM6a02dshcKRTURZzAsph14nZpHa0/1//3z+8/ev/+f3//9fc+/v8O5Ycw/D+Ybzzv/vLncP1vDDH861q7lul3Vwq2a2OstZZ5dq5b5VpcN/Zc5UFbc5MnsYRGsDBwQMFFU6MbjOZXoVEZRA5TtqAzjSlTBqGQBQIx81QA8O46kbOmoJQ7mkodxP/7sMTeADBKQVH5zgACZzPnt7CwBePS2vc7moNidSRsbOk1JJNtE1NWw5zv5bTjYdx1I2NncJG1Oc53z/w7aamtta35aa3Jqdbw51Q7+EjanOdfudw51+1v/8omtta1v//LahI2qHfuNjanGx6/3e5ztpqapUxBTUUzLjk5Ljn        anchor: 0.65367347 //_tone.Sft_Soprano_C3\n    }, {\n        midi: 64,\n        originalPitch: 8000,\n        keyRangeLow: 73,\n        keyRangeHigh: 74,\n        loopStart: 30103,\n        loopEnd: 40166,\n        coarseTune: 0,\n        fineTune: 16,\n        sampleRate: 44100,\n        ahdsr: false,\n        file: 'n        anchor: 0.65367347 //_tone.Sft_Soprano_C3\n    }, {\n        midi: 64,\n        originalPitch: 8400,\n        keyRangeLow: 75,\n        keyRangeHigh: 78,\n        loopStart: 19931,\n        loopEnd: 24952,\n        coarseTune: 0,\n        fineTune: 16,\n        sampleRate: 44100,\n        ahdsr: false,\n        file: 'n        anchor: 0.33052155 //_tone.Sft_Soprano_E3\n    }, {\n        midi: 64,\n        originalPitch: 8800,\n        keyRangeLow: 79,\n        keyRangeHigh: 82,\n        loopStart: 19950,\n        loopEnd: 25289,\n        coarseTune: 0,\n        fineTune: 16,\n        sampleRate: 44100,\n        ahdsr: false,\n        file: '',\n        anchor: 0.39968255 //_tone.Sft_Soprano_G_3\n    }, {\n        midi: 64,\n        originalPitch: 9200,\n        keyRangeLow: 83,\n        keyRangeHigh: 83,\n        loopStart: 30295,\n        loopEnd: 30322,\n        coarseTune: 0,\n        fineTune: 32,\n        sampleRate: 44100,\n        ahdsr: false,\n        file: '',\n        anchor: 0.12038549 //_tone.Sft_Soprano_C4\n    }, {\n        midi: 64,\n        originalPitch: 9200,\n        keyRangeLow: 84,\n        keyRangeHigh: 101,\n        loopStart: 30295,\n        loopEnd: 30322,\n        coarseTune: 0,\n        fineTune: 32,\n        sampleRate: 44100,\n        ahdsr: false,\n        file: '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AAAAIEAEMFRGXRuiqcYyRZBEDIhWAEDJS/DYBCBSgYZccAABgGCIKwGMAowGthEIGEMFoBwSwbBggoI8HIIAThukdMy4QQgYucugUAIBgeBcBgyC0BmGRMAoYMEQBBCAEIDwAgGi4xmz55IwL5ogSZJMVTANWAPByHMKi6CKz52SBmmnUtaZmMcDgfjjN1LU9F19SmRNz5gCED5VLhJG9lVrSc0dAwOGBaH2GAwWAwTiCk7G5kamZgaUktaYz4spkU707fet0h0ACgLKCKCCJumt1/MCcMCfEdgAgVBYDBMIpmBEbvr/oDUEnN3y7/71IFwXN0C4f9vvWmM+VabyX91dRf8iTajHK6d4MucABGJAA2OORROowGmVhhgYiZkbGgIxhBGY8NjRWIlcxoAM7OTCBVxjAUMSjTf6c4lHEAGYkTmG7xG8I1mTS4EaZhUBE2TCsDt6MTQZGghMEQdRNiUPYhYDQKmRmuYIGCcw0DQwkJw4hG61ASxlsmKwjA5Ei2D9rGMVSOMhRzMcw1MehmMXBQdJdzOquBgEIRjIGSFtpsr3mCQLGBI2mF4PmDICgYQE587r6tZiTlWknTBYQnFp+yxm5gECBhEAIQBBgiBZgaBYOBNrVLSynLdLjQmAwVIH8+988YRAkYGAcKhnUbg2gNAE//uwxPyAIZ45P/WLAAZHQSx/N9SAwFAcunNOU5UpjL+1qaVJKz/4WNZpovfzEAAIkItRDdx4vLXCXuiohI+tTVZTGa1NGscf/NBA4tbef2iqDNDay2pYXHTDEIKKqNccSBocuDAQoRsrSsaxjuU0taVQ1Mxl2cqtmtTf9A1eg//3Bkguc5/0NJuj/mFvPXfhyLxBzo25b9rsYYzhlbvxuBLtuGGSQIutnb9sQjEOUconDwK2VhIGuoKgqriqmIRWOMFKWQRiOOgCABCNYlJCIJuubErvAgwMVphaoFCp1ypCj+XzpcVMaSilevnz58+jesG1oT59GzBe2tb1riE+1CfPrZrWvrWvt61t81rrD59qz6Nb1rXda11//i1t5riE+ri0a26vXu6vXsXVnz7UJ9G3nXxWuvbeYL22a1rrD59qz6Nb1rX1rX//P/9fi1q+1rby9e7gvYrj0GsGnUxBTUUzLjk5LjVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVX/+1DE24PUPYMn/YeAAAAANIAAAARVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV',\n        anchor: 0.12038549 //_tone.Sft_Soprano_C4\n    }]\n};\n","console.log('load _tone_0130_GeneralUserGS_sf2_file');\nexport var _tone_0130_GeneralUserGS_sf2_file = {\n    zones: [{\n        midi: 13,\n        originalPitch: 7600,\n        keyRangeLow: 21,\n        keyRangeHigh: 79,\n        loopStart: -1,\n        loopEnd: -2,\n        coarseTune: 0,\n        fineTune: 0,\n        sampleRate: 20000,\n        ahdsr: false,\n        file: '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',\n        anchor: 0.00570000 //_tone.Xylophone_E4\n    }, {\n        midi: 13,\n        originalPitch: 8000,\n        keyRangeLow: 80,\n        keyRangeHigh: 84,\n        loopStart: -1,\n        loopEnd: -2,\n        coarseTune: 0,\n        fineTune: 0,\n        sampleRate: 20000,\n        ahdsr: false,\n        file: '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',\n        anchor: 0.01155000 //_tone.Xylophone_G_4\n    }, {\n        midi: 13,\n        originalPitch: 8800,\n        keyRangeLow: 85,\n        keyRangeHigh: 103,\n        loopStart: -1,\n        loopEnd: -2,\n        coarseTune: 0,\n        fineTune: 0,\n        sampleRate: 20000,\n        ahdsr: false,\n        file: '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',\n        anchor: 0.00760000 //_tone.Xylophone_E5\n    }, {\n        midi: 13,\n        originalPitch: 10800,\n        keyRangeLow: 104,\n        keyRangeHigh: 127,\n        loopStart: -1,\n        loopEnd: -2,\n        coarseTune: 0,\n        fineTune: 0,\n        sampleRate: 20000,\n        ahdsr: false,\n        file: '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',\n        anchor: 0.00340000 //_tone.Xylophone_C7\n    }]\n};\n","console.log('load _drum_35_0_Chaos_sf2_file');\nexport const _drum_35_0_Chaos_sf2_file = {\n  zones: [{\n    midi: 128,\n    loopStart: 0,\n    loopEnd: 0,\n    keyRangeLow: 35,\n    keyRangeHigh: 35,\n    sampleRate: 44100,\n    coarseTune: 0,\n    fineTune: 0,\n    originalPitch: 3500,\n    file: '',\n    anchor: 0.01709750 //'Kick Drum 2 [Stan1]\n  }]\n};\n","console.log('load _drum_36_0_Chaos_sf2_file');\nexport const _drum_36_0_Chaos_sf2_file = {\n    zones: [{\n        midi: 128,\n        loopStart: 0,\n        loopEnd: 0,\n        keyRangeLow: 36,\n        keyRangeHigh: 36,\n        sampleRate: 44100,\n        coarseTune: 0,\n        fineTune: 0,\n        originalPitch: 3600,\n        file: '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RTMuOTkuNaqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqTEFNRTMuOTkuNaqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq//uAxOiAFgGjMe2kdaJcLGT9gw59qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqr/+xDE1gPAAAH+AAAAIAAANIAAAASqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqg==',\n        anchor: 0.01494331 //'Kick Drum 1 [Stan1]\n    }]\n};\n","console.log('load _tone_0380_Chaos_sf2_file');\nexport const _tone_0380_Chaos_sf2_file = {\n    zones: [{\n        midi: 38,\n        originalPitch: 4000,\n        keyRangeLow: 0,\n        keyRangeHigh: 33,\n        loopStart: 2173,\n        loopEnd: 2708,\n        coarseTune: 0,\n        fineTune: 2,\n        sampleRate: 44100,\n        ahdsr: true,\n        file: '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',\n        anchor: 0.05566894 //_tone.SawBassWave_C1\n    }, {\n        midi: 38,\n        originalPitch: 4000,\n        keyRangeLow: 34,\n        keyRangeHigh: 42,\n        loopStart: 2173,\n        loopEnd: 2708,\n        coarseTune: 0,\n        fineTune: 2,\n        sampleRate: 44100,\n        ahdsr: true,\n        file: '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',\n        anchor: 0.05566894 //_tone.SawBassWave_C1\n    }, {\n        midi: 38,\n        originalPitch: 5200,\n        keyRangeLow: 43,\n        keyRangeHigh: 49,\n        loopStart: 1804,\n        loopEnd: 2072,\n        coarseTune: 0,\n        fineTune: 5,\n        sampleRate: 44100,\n        ahdsr: true,\n        file: 'SUQzBAAAAAAAI1RTU0UAAAAPAAADTGF2ZjU3LjcyLjEwMQAAAAAAAAAAAAAA//tAwAAAAAAAAAAAAAAAAAAAAAAAWGluZwAAAA8AAAADAAAJrgBpaWlpaWlpaWlpaWlpaWlpaWlpaWlpaWlpaWlpaWlpaWmpqampqampqampqampqampqampqampqampqampqampqan///////////////////////////////////////////8AAAAATGF2YzU3Ljk2AAAAAAAAAAAAAAAAJAMgAAAAAAAACa6YCwHWAAAAAAD/+9DEAAAL7ANjtBAALNPBLj83kkEAAJS6yy2y3gEZh4egADABGHh4eHgDvAAMPDw8PAAAR6MPDw8f/gHow/8x4AAAAAjDw8fHAAAAEf///gAj0YenDx4AAAAAjDw8Pe7/////AAAAAEYeHh48AAAAxGHh4eABBIrK5mqERnmo1Y5DInEZiVmFhIgCwKDDIUtk5sdNBTTJyQcCxUCMDBDGx8DF5nQSYuaAwFTGOg4YHEBZkBqmZyhuaRRbxSKMpgCyJ3orxYjEIELgv9BaAmFwNCX7aQW4SQLfw8tJgzZWRKDUc5L7csiiYbX6NnbO3GjjWlzP7Yp69JT3ajr2XbdddEmp1VmGstfRrLDWmyurQV6WtVa47liGH8lluYnLMMrtiU84LpOVbxy5jlzHvHft6f+N26eNz9i7Enaf7c07UdnYlHX953DncMM8NZ5yyx8spL2FJYt65G7dmhhmGbVV9Y1LpLDT/T1aGsNb1lvWWPcse5c/PPv59w/6TD8MOdwwp+/T2+50+dNj9arjqrS2eVaXXatam3Wpqb60qq8rLq6P7VXTVjZVRZUszN5yRWJsyFMyBQNlwIZrQBNkyw0xBIDMiYQY8aeJWYooYAvAYGDopoCRwaYICVAAKw/x/AOQhoD6Q8hBOAH1AJAEPBTC6pRVsDo0kNN0/SwDdTh5Iezv4sNC1klpuI4byDJybpeX7I81t4zR2JiivT+gHUmYydiP77zDjtrWuUNYm6x+IailGcze0RNfFKX36Rn0PWpoME/WRXKZaUsqpXV77p/ilN+e2pIT6ubZi6fN8ZtePZI7Ff3ven9Kav9Xu9pfMaFC17S1i404sLp9CZm3L1qqxQ30EPQBt/4G2/8AkWDRiWhmaSNGNtRpNFptJuRylQTG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',\n        anchor: 0.01693878 //_tone.SawBassWave_C2\n    }, {\n        midi: 38,\n        originalPitch: 5200,\n        keyRangeLow: 50,\n        keyRangeHigh: 54,\n        loopStart: 1804,\n        loopEnd: 2072,\n        coarseTune: 0,\n        fineTune: 5,\n        sampleRate: 44100,\n        ahdsr: true,\n        file: 'SUQzBAAAAAAAI1RTU0UAAAAPAAADTGF2ZjU3LjcyLjEwMQAAAAAAAAAAAAAA//tAwAAAAAAAAAAAAAAAAAAAAAAAWGluZwAAAA8AAAADAAAJrgBpaWlpaWlpaWlpaWlpaWlpaWlpaWlpaWlpaWlpaWlpaWmpqampqampqampqampqampqampqampqampqampqampqan///////////////////////////////////////////8AAAAATGF2YzU3Ljk2AAAAAAAAAAAAAAAAJAMgAAAAAAAACa6YCwHWAAAAAAD/+9DEAAAL7ANjtBAALNPBLj83kkEAAJS6yy2y3gEZh4egADABGHh4eHgDvAAMPDw8PAAAR6MPDw8f/gHow/8x4AAAAAjDw8fHAAAAEf///gAj0YenDx4AAAAAjDw8Pe7/////AAAAAEYeHh48AAAAxGHh4eABBIrK5mqERnmo1Y5DInEZiVmFhIgCwKDDIUtk5sdNBTTJyQcCxUCMDBDGx8DF5nQSYuaAwFTGOg4YHEBZkBqmZyhuaRRbxSKMpgCyJ3orxYjEIELgv9BaAmFwNCX7aQW4SQLfw8tJgzZWRKDUc5L7csiiYbX6NnbO3GjjWlzP7Yp69JT3ajr2XbdddEmp1VmGstfRrLDWmyurQV6WtVa47liGH8lluYnLMMrtiU84LpOVbxy5jlzHvHft6f+N26eNz9i7Enaf7c07UdnYlHX953DncMM8NZ5yyx8spL2FJYt65G7dmhhmGbVV9Y1LpLDT/T1aGsNb1lvWWPcse5c/PPv59w/6TD8MOdwwp+/T2+50+dNj9arjqrS2eVaXXatam3Wpqb60qq8rLq6P7VXTVjZVRZUszN5yRWJsyFMyBQNlwIZrQBNkyw0xBIDMiYQY8aeJWYooYAvAYGDopoCRwaYICVAAKw/x/AOQhoD6Q8hBOAH1AJAEPBTC6pRVsDo0kNN0/SwDdTh5Iezv4sNC1klpuI4byDJybpeX7I81t4zR2JiivT+gHUmYydiP77zDjtrWuUNYm6x+IailGcze0RNfFKX36Rn0PWpoME/WRXKZaUsqpXV77p/ilN+e2pIT6ubZi6fN8ZtePZI7Ff3ven9Kav9Xu9pfMaFC17S1i404sLp9CZm3L1qqxQ30EPQBt/4G2/8AkWDRiWhmaSNGNtRpNFptJuRylQTG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',\n        anchor: 0.01693878 //_tone.SawBassWave_C2\n    }, {\n        midi: 38,\n        originalPitch: 6400,\n        keyRangeLow: 55,\n        keyRangeHigh: 59,\n        loopStart: 1995,\n        loopEnd: 2129,\n        coarseTune: 0,\n        fineTune: 5,\n        sampleRate: 44100,\n        ahdsr: true,\n        file: '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fg1dubyAAqKyZXewwABa0zM1rXFy7ml37XGl3WXB0SgqvWd5WkxBTUUzLjk5LjWqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqo=',\n        anchor: 0.00834467 //_tone.SawBassWave_C3\n    }, {\n        midi: 38,\n        originalPitch: 6400,\n        keyRangeLow: 60,\n        keyRangeHigh: 65,\n        loopStart: 1995,\n        loopEnd: 2129,\n        coarseTune: 0,\n        fineTune: 5,\n        sampleRate: 44100,\n        ahdsr: true,\n        file: 'SUQzBAAAAAAAI1RTU0UAAAAPAAADTGF2ZjU3LjcyLjEwMQAAAAAAAAAAAAAA//tAwAAAAAAAAAAAAAAAAAAAAAAAWGluZwAAAA8AAAADAAAI3gBmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmbFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcX///////////////////////////////////////////8AAAAATGF2YzU3Ljk2AAAAAAAAAAAAAAAAJALnAAAAAAAACN5Aq9CiAAAAAAD/+8DEAAAGLAFztAAAI3AzLbMzgABApu+/bT+6/qBA4D4HeCCxwPvB8Hwcdzhd8SO6OUORACB//D/L+D//5R3OcoclDn/D5hmWvcrSLfz7UtVYsEhxGuzrkVcEQo7BERgogMIsCxkiZViBW4qmYaxMY1piiEhgq6B47j3HkfmUtmblPNmh+7hK2sM/m3eZW8MjahBcqqx2JTsuhbwSSCK8il8xes5WLGcti1eWxuDcodm5NKqXDCvrKvrKdvVsJjVPbj1yim9WsdWr3crFu/ar5Z3cL3L967y1hr8vwp7us7uXMcrt6pdztYZZ3NZ3ruNuxc+jr3OXu4WM8NZ6y3rLlm/vm7uV7DX3P7fsXqHG1hbxrVOXd37F1//tWgbv/kh1/SpGVXc4Q4UjNFFsllRGJJJkWV4HaWaFgqdSIcZBjgbIrOYEpOZrAYZOGabIDMYZKQZvEyPIyFBiND0HMyx9MlQwKhDgZjKKo1t5OZXjaD03IQC5SCgQiPTFChAEVlACRyoTCyKYIYCMPBSMYOJiNLMSEgU7majhCEEIMx4oEAuDFkS4hgAGKggNF1CBpFHRJAgKAKmTcS+8wy9K5Wd3FIqGDQ8Cg0lD1FR4XFQhJtK5KePMMdt2yYCRviCbCQlYCASXgcCorjwaBguSrsKAEhAFO5ampBbHl1wC2rJHScpobSR4TEQEgga4XZGQdzSISGQRZywqTjfJxvKvFvlg2ksVXM9DjNZdtwX+aY0Z22OK5XxIlamEwG1BpzPH1Y6r5VJ/XYaxLmOsBapGWbqdxJmjGIJb9qsGPk2SC4tBcYVgYSvdu8LbMvZaDpKcKdtVn11S938Yu6zY45OSfB7YKeu8+VSU1L8e7OyXGXRytLZurLpRWpaeZrWJq7fodSS3IY7SUcum+SCgwl9mv2X1Jyk5R2afGjmLlaNVYh2RS2CdRu/Sy6PUMsoq1mUzFPPSmtTSuowExNCQYP/70MTcADZOQVf53YAFNbzsPzmQAahGgpDWZDGYzG6Dl6aQigkGBAJQw2mMSUYAZRikVjIsCCMTFc0qAjeBKMyGowUFQqMBsfmWVKw0m1UGbURVG2CAoS5hMoIQi+y4SqiFBFCAIWIjmiIZrDLKgVkwGZgMiJGkAsMqYrDQohbSpa1JypkKqiANfQiLVTSCVhYSx5dKqLzvNVft87yIybDMGDLCJSNLdlNNbMjV+2OG4Pikfo4pJbC9lhm4qfWuo7B7No0/bvN2cOw6HYpH8ZBE6tFK4w3dureM1hD6tQcB44S3kvkDew1EIFeJ8JmxTyXC3JbnaGgZ/SvtBMjb6HIakbwQVUiEERqKTkag6Hc5BEY7LJXlKYKylsBak0NfJoexnZFLXGpnded94jSvD8JfmOS2BK+F+39+1vPK7vme+d/mWuZa1+GseX8d9x/t79MqYOk59B5y8vPsr/ZIyj5udzuJzptVRqR3MSpDekUofThSZNEwYVELmChMwjNNUHDDA9CcbQ3GfSJ4g6aNNGPjACGhaEjaN3MHpNXLughgGkLhNs8QxLLLajIBqyBkSW6ECb4lSQyqUg64uEtFIlgpeVl5MoMBLbMBhDkECpFoCXwYNTr5MAlm6nLGG+Zy/zdlCEOkRJg0j0vVpJjNOq2WcPIxmOtXdRsroF6VMGnJnIHpL1tSp2n1cmHXNWM6EOM3WCfpcLO16KcMItteeODJC6mu49qvrEn+h5uvGWyx+3cbtgp923oS3jbFmjQtyYLfWHmCN0x5WxuPtEXJf2tfmGSwW5kebi6bZ26V3yeZ8Mo6/q9m4tcZy3S+qNXcBvy11pUocqrluUxJ/oeq2a2PJqZjP9vbx7zXda53f85/P/+///93DmG9dy7jnvvP/XOc/+//d/S6HsFgaEuVCR7VZZdEYyWGU3BGA20NqjOAOEwkuqYBmo69i5oKDDimSRUnaSqVUOINRFAysJQlLsOj7680ZCU60u9lbzRk6dCUTj72Vq29azn6yt+teaXRsmPsnK13rLl02tO9jS7rW/a9luta1v1l3617LatW/Va7lrbX9rWvY0u5p761xcZc0utNazMza1v1lb9a9ltZWvMrXev/+6DE8wAqfg1dubyAAqKyZXewwABa0zM1rXFy7ml37XGl3WXB0SgqvWd5WkxBTUUzLjk5LjWqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqo=',\n        anchor: 0.00834467 //_tone.SawBassWave_C3\n    }, {\n        midi: 38,\n        originalPitch: 7400,\n        keyRangeLow: 66,\n        keyRangeHigh: 74,\n        loopStart: 2196,\n        loopEnd: 2347,\n        coarseTune: 0,\n        fineTune: 13,\n        sampleRate: 44100,\n        ahdsr: true,\n        file: 'SUQzBAAAAAAAI1RTU0UAAAAPAAADTGF2ZjU3LjcyLjEwMQAAAAAAAAAAAAAA//tAwAAAAAAAAAAAAAAAAAAAAAAAWGluZwAAAA8AAAAEAAAIdQBra2tra2tra2tra2tra2tra2tra2tra2upqampqampqampqampqampqampqampqamp8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/////////////////////////////////8AAAAATGF2YzU3Ljk2AAAAAAAAAAAAAAAAJAaNAAAAAAAACHUzIaZLAAAAAAD/+8DEAAAHOANztBAAI4Iybz83QACxFMhNNpRtymD7xACAPxAcUCAIOggcwccXB/5cP/BAMQQBCXBB38T8uD//4IfWD8H35cP//gg74fieqlVWrmLZoZpW93S6bOWqQWUy8o8jWisRjBiIKrYJHCf4YfJ7FVKAzyWIAGBJCcBi2TIGLJkSADEFAAkEYi6DeBUwmEDkR2C1AoDMwyGWx0EMAsEDehZbB1jQbosElB6SDVKhCMixKj24/lpAZtApEsoh4xyRNjeWM8NFY+z0iq0iomUXMJ0bx4Z6P06WnI2WEJskWDOWzUkFjpNVELHy56UHWfmDqRptPTB1qJNyVc6V5kW50rTQ+gZUz96mp1NT2mizjTScZRpnlF9Rw9N5xln5Jt//17UrvZb+1C7mJVpVh4VUhnWXR2dkzskkskciSKDobJh44TTuGbRKPJqrIpGAmrCOoD/cXJviEkbORCIURkBlFxMA4kmUxDh6DPRfDwMaCwgiYWfGiOYfDCJLisHhPBsXxQR0kRomQ2GHwbrHNUM8N84O9Af05EiUcjS3IQcK0SXkTlktMR05LJaclanH8tHh8Tpak2gdSl5iWmizpUWWZal5KWpo6zScqPTuo1ueWbzp6o3lOxtWeUpxxhVc6guqeJpuOMXexCvvcwAte2q9nexU1T2fW8uRG6OqKaGprVPtXXUZqMCgEbkNAgjJtkcADC1YOIiRbJiAxB6DDsA1pv4gSJKwA5UnHA0rNRHeIYiL5NDHbdRQaYyQlJKpvKmULM29MaKJgJUGwodLx1hkSMgCHgRYHFAe0tONXF3XUXWKR0iCYu46tRJuYYQ911dj0dYxlcesSCzKizQLqY3qzwmRrb96/bLjefD5L1qs/PNh98Xy9uM7HIF92sIO9sFuDM9tjxhO2ZyyCnv07F+u93ZbR0D5cjmO5LU49GVPV1Bk/cqtQ+fnY62f78izhF2Szvxvckv8jv/7oMTVgBk1PXn5mgAEy0SsuzegAWrlHqb5BeO5j5J2/H/oL+4tqO3/lPyT+TH0Hfrd3a3V7y9zvMb/buu54VsuXLm/1d5d5q5+s9V/5rd3n61c7ves/xqZ7vfnz7/87le9Q2RNnkpYkSJFlVYVUkZGlVLNZOJ4mRCyRq8iMCHAgSYdEZhkhg4GGPCcYLA5k0bmAggFhONNBfgtSTHjQPVEdrY9GUpl6gYOIlSZe9u48JIiDhSQhDZREIg6UpRUKfhy3HMDHU+SoDpiGSF4YTmAACgtYkAmbypFus4TQpswMIckCj7hMMV/Uttm9kqnVtbbm+rWAjVTslGYrCQgc41V76Jo3tl62Vs9G1X2y2CQDIht5R0QpCwFyHJhkryXFpypzP3noI+83tl2nHaBwKvVDu6FAg459BFffHdSUcgvD5pt+0UimnV96YO1E1/YqOVoNbe3Svldg7dWj+NfJP7E/oL3H7w5B/v78GfhDH0EmzYRI24Kc5phcWxP12D0saXDSZ/q99X96+53PPWufl+uc3vfOY4639Tv3vuc/W9f3m9c5rfOdudyv6rc1n+fNY/c72/qCnmYkjluAABAiICm6ZyibEmY5oWZDmhJyajklqYBmQpkGWtX6tJOpYAwAgBAkGhUiIgqAEAIAQRDIpFIVCwAgBAkCQqFQJAkFQyKRSKRSKQRBEVIkf/7sMTRgCoiMWP5zYALEJ8q87CQASJEiIhUKkMYxQoRSKUO3HKltqylKUpSWRIWYxjFChQompSksiRIkMYxiqhQoZSlJEiaCgUFBXW+3QU7+BQSbFBQUKCgoKCQUFBScIKCn+Cgv///03//kUFBRVQUFBRSKCgoKSCgoKCv////////pFeCgtVMQU1FMy45OS41VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVUxBTUUzLjk5LjVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV//sQxNYDwAABpAAAACAAADSAAAAEVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVU=',\n        anchor: 0.02145125 //_tone.SawBassWave_Bb3\n    }, {\n        midi: 38,\n        originalPitch: 7400,\n        keyRangeLow: 75,\n        keyRangeHigh: 83,\n        loopStart: 2196,\n        loopEnd: 2347,\n        coarseTune: 0,\n        fineTune: 13,\n        sampleRate: 44100,\n        ahdsr: true,\n        file: 'SUQzBAAAAAAAI1RTU0UAAAAPAAADTGF2ZjU3LjcyLjEwMQAAAAAAAAAAAAAA//tAwAAAAAAAAAAAAAAAAAAAAAAAWGluZwAAAA8AAAAEAAAIdQBra2tra2tra2tra2tra2tra2tra2tra2upqampqampqampqampqampqampqampqamp8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/////////////////////////////////8AAAAATGF2YzU3Ljk2AAAAAAAAAAAAAAAAJAaNAAAAAAAACHUzIaZLAAAAAAD/+8DEAAAHOANztBAAI4Iybz83QACxFMhNNpRtymD7xACAPxAcUCAIOggcwccXB/5cP/BAMQQBCXBB38T8uD//4IfWD8H35cP//gg74fieqlVWrmLZoZpW93S6bOWqQWUy8o8jWisRjBiIKrYJHCf4YfJ7FVKAzyWIAGBJCcBi2TIGLJkSADEFAAkEYi6DeBUwmEDkR2C1AoDMwyGWx0EMAsEDehZbB1jQbosElB6SDVKhCMixKj24/lpAZtApEsoh4xyRNjeWM8NFY+z0iq0iomUXMJ0bx4Z6P06WnI2WEJskWDOWzUkFjpNVELHy56UHWfmDqRptPTB1qJNyVc6V5kW50rTQ+gZUz96mp1NT2mizjTScZRpnlF9Rw9N5xln5Jt//17UrvZb+1C7mJVpVh4VUhnWXR2dkzskkskciSKDobJh44TTuGbRKPJqrIpGAmrCOoD/cXJviEkbORCIURkBlFxMA4kmUxDh6DPRfDwMaCwgiYWfGiOYfDCJLisHhPBsXxQR0kRomQ2GHwbrHNUM8N84O9Af05EiUcjS3IQcK0SXkTlktMR05LJaclanH8tHh8Tpak2gdSl5iWmizpUWWZal5KWpo6zScqPTuo1ueWbzp6o3lOxtWeUpxxhVc6guqeJpuOMXexCvvcwAte2q9nexU1T2fW8uRG6OqKaGprVPtXXUZqMCgEbkNAgjJtkcADC1YOIiRbJiAxB6DDsA1pv4gSJKwA5UnHA0rNRHeIYiL5NDHbdRQaYyQlJKpvKmULM29MaKJgJUGwodLx1hkSMgCHgRYHFAe0tONXF3XUXWKR0iCYu46tRJuYYQ911dj0dYxlcesSCzKizQLqY3qzwmRrb96/bLjefD5L1qs/PNh98Xy9uM7HIF92sIO9sFuDM9tjxhO2ZyyCnv07F+u93ZbR0D5cjmO5LU49GVPV1Bk/cqtQ+fnY62f78izhF2Szvxvckv8jv/7oMTVgBk1PXn5mgAEy0SsuzegAWrlHqb5BeO5j5J2/H/oL+4tqO3/lPyT+TH0Hfrd3a3V7y9zvMb/buu54VsuXLm/1d5d5q5+s9V/5rd3n61c7ves/xqZ7vfnz7/87le9Q2RNnkpYkSJFlVYVUkZGlVLNZOJ4mRCyRq8iMCHAgSYdEZhkhg4GGPCcYLA5k0bmAggFhONNBfgtSTHjQPVEdrY9GUpl6gYOIlSZe9u48JIiDhSQhDZREIg6UpRUKfhy3HMDHU+SoDpiGSF4YTmAACgtYkAmbypFus4TQpswMIckCj7hMMV/Uttm9kqnVtbbm+rWAjVTslGYrCQgc41V76Jo3tl62Vs9G1X2y2CQDIht5R0QpCwFyHJhkryXFpypzP3noI+83tl2nHaBwKvVDu6FAg459BFffHdSUcgvD5pt+0UimnV96YO1E1/YqOVoNbe3Svldg7dWj+NfJP7E/oL3H7w5B/v78GfhDH0EmzYRI24Kc5phcWxP12D0saXDSZ/q99X96+53PPWufl+uc3vfOY4639Tv3vuc/W9f3m9c5rfOdudyv6rc1n+fNY/c72/qCnmYkjluAABAiICm6ZyibEmY5oWZDmhJyajklqYBmQpkGWtX6tJOpYAwAgBAkGhUiIgqAEAIAQRDIpFIVCwAgBAkCQqFQJAkFQyKRSKRSKQRBEVIkf/7sMTRgCoiMWP5zYALEJ8q87CQASJEiIhUKkMYxQoRSKUO3HKltqylKUpSWRIWYxjFChQompSksiRIkMYxiqhQoZSlJEiaCgUFBXW+3QU7+BQSbFBQUKCgoKCQUFBScIKCn+Cgv///03//kUFBRVQUFBRSKCgoKSCgoKCv////////pFeCgtVMQU1FMy45OS41VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVUxBTUUzLjk5LjsQxNYDwAABpAAAACAAADSAAAAEVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVU=',\n        anchor: 0.02145125 //_tone.SawBassWave_Bb3\n    }, {\n        midi: 38,\n        originalPitch: 9400,\n        keyRangeLow: 84,\n        keyRangeHigh: 97,\n        loopStart: 91,\n        loopEnd: 114,\n        coarseTune: 0,\n        fineTune: -45,\n        sampleRate: 44100,\n        ahdsr: true,\n        file: 'SUQzBAAAAAAAI1RTU0UAAAAPAAADTGF2ZjU3LjcyLjEwMQAAAAAAAAAAAAAA//tAwAAAAAAAAAAAAAAAAAAAAAAAWGluZwAAAA8AAAACAAADqgDc3Nzc3Nzc3Nzc3Nzc3Nzc3Nzc3Nzc3Nzc3Nzc3Nzc3Nzc3Nzc3Nzc3Nzc3Nzc3Nzc//////////////////////////////////////////////////////////////////8AAAAATGF2YzU3Ljk2AAAAAAAAAAAAAAAAJAZGAAAAAAAAA6pHQDxuAAAAAAD/+7DEAAAF4AGH4AAAIXWZbrjzDhC4eoeFMBlPTRUB8ocJpKHJyXgg7KOn5fEDtRynxAcLv/y7y5//5//1Bj/1Ah/8EP3MuadQCTOVP0FEAOggxMQMpNSfJYkROlUfqEm8on5fWaVlXiQCScFJJfnEtfJUp1SmwZqFAV8mbvD/v/W1VS/bUtu9XnVJgEBCQd/4NPDv/ER4S/8seErv/Knf/UogAhGI3wAAjLGMorKpJpJgqCwOgcXURqTup5KKyqyxUsVOFyhcocOnE1F1Aymn/xCStNNVVVVdv//pppoqqqqt////TTVVVUxBTUUzLjk5Ljf/7IMToA8jUaQWAgSJIAAA0gAAABFVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVU=',\n        anchor: 0.00235828 //_tone.SawBassWave_F5\n    }, {\n        midi: 38,\n        originalPitch: 10900,\n        keyRangeLow: 98,\n        keyRangeHigh: 108,\n        loopStart: 297,\n        loopEnd: 307,\n        coarseTune: 0,\n        fineTune: 13,\n        sampleRate: 44100,\n        ahdsr: true,\n        file: 'SUQzBAAAAAAAI1RTU0UAAAAPAAADTGF2ZjU3LjcyLjEwMQAAAAAAAAAAAAAA//tAwAAAAAAAAAAAAAAAAAAAAAAAWGluZwAAAA8AAAACAAAFzwDT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT//////////////////////////////////////////////////////////////////8AAAAATGF2YzU3Ljk2AAAAAAAAAAAAAAAAJAWFAAAAAAAABc+hx204AAAAAAD/++DEAAAIqO959BEAJ5lILX894CBWVmZ4rJ/AcAQG5AAAABjGMbG5CEYjVkIQhCEIxznOc5/+pyECABCfyEIQhznO/kIT///+c5zgZ3QDAwff///qBA5UCAYc4qGx4tXpXVII9WjiEjMACAYkkgMALHzNpWmM1katngsAOLAKKBAoqkwLAD1jJKL9VOYiovhgJjgrBvjBMqMDQM0xQA5WWyrN1H8eMw3SIjC1GCMX0F6rWlT7UcDuREzICNZMXwpUxlhHDJdKMxlLSR0BYwCgA5bL3IFQCBYBoxUReDF2IZMl9go0GWhDMpK5DgEYk7UPVaVNSGINo5HGDFKKGMS8nYylxYDFiLxMPIcExTAIL2GWW7NLXisjjEqlsPmFSGkYJYPgFBpMDwDYgAkMHsGwwThAdZVqqZIGAKZVzLO5ycZmXRa7fsGCkGCYXwC5hwi7GGmIUYTAnZhulvGISOIYgoM5hAAob5jruv//+aq27dTG9bqU14QgFGA6AcYAQG5gAANjwEpgGgQAEA4ueLAAtNMAcAzX6UxMBUAJA1/a1qm3jjrLPdaCE5YcxvZ4Zcz3oKAQhQB0wNADzA/COMBsC4QATgkF4wCQIAgBcwCAAVhS+xCAKlqDgBf/9/rKq/Lff//////////lDfOb/uGdVkT3565zv/////v+4PiCQFgqAQUADmAIAmBAByQAAZAJMAgCUiAcX+BAFzAYABAoDQVAEUmiq1lmS22Yp0hcAgvMnGAACTAAABMA0BYwGgbVlskkcs3yIACYQgPFpKIJjE0tWu4uXPaty7vGlpeVo1ZrSqXU2VWUxnNrLEYrEnKcp3pGmkAQF8mNmA5qOkCFUHFimgBMaRJnJogAJdl3Evl2vzg4UNQ9fiL+35TDstwrU1Nlqmpu1aWz+WOPMqam7Vpe40tnH8qamuQ1D2cMv7LZp/r0qjVqrGaXCtjj+ssu7x7vHH//Lv5ZfvHH/xx5rLLuOPcccefrLLVbLdWlxrUwCDolDSw0oOlcNKPM5VwinRL////tUeKqTEFNRTMuOTkuNaqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqr/+2DE6YPZDWkPvMwAIAAANIAAAASqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqo=',\n        anchor: 0.00351474 //_tone.SawBassWave_F6\n    }]\n};\n","\nimport { _tone_0110_Aspirin_sf2_file } from \"./soundfonts/_tone_0110_Aspirin_sf2_file\"; // vibes\nimport { _tone_0530_Aspirin_sf2_file } from \"./soundfonts/_tone_0530_Aspirin_sf2_file\"; // vox \nimport { _tone_1170_Aspirin_sf2_file } from \"./soundfonts/_tone_1170_Aspirin_sf2_file\";  // toms\nimport { _tone_1151_FluidR3_GM_sf2_file } from \"./soundfonts/_tone_1151_FluidR3_GM_sf2_file\";  // woodblock\nimport { _tone_0161_SoundBlasterOld_sf2 } from \"./soundfonts/_tone_0161_SoundBlasterOld_sf2\";  // organ\nimport { _tone_0390_FluidR3_GM_sf2_file} from \"./soundfonts/_tone_0390_FluidR3_GM_sf2_file\"; //  electric bass\nimport { _tone_0660_Chaos_sf2_file} from \"./soundfonts/_tone_0660_Chaos_sf2_file\"; //  altosax\nimport { _tone_0320_JCLive_sf2_file} from \"./soundfonts/_tone_0320_JCLive_sf2_file\"; //  plucked bass\nimport { _tone_0270_SBAWE32_sf2_file} from \"./soundfonts/_tone_0270_SBAWE32_sf2_file\"; //  electric guitar\nimport { _tone_0730_JCLive_sf2_file} from \"./soundfonts/_tone_0730_JCLive_sf2_file\"; //  flute\nimport { _tone_0240_JCLive_sf2_file} from \"./soundfonts/_tone_0240_JCLive_sf2_file\"; //  guitar\nimport { _tone_0460_FluidR3_GM_sf2_file} from \"./soundfonts/_tone_0460_FluidR3_GM_sf2_file\"; //  harp\nimport { _tone_1080_JCLive_sf2_file} from \"./soundfonts/_tone_1080_JCLive_sf2_file\"; //  kalimba\nimport { _tone_0720_GeneralUserGS_sf2_file} from \"./soundfonts/_tone_0720_GeneralUserGS_sf2_file\"; //  piccolo\nimport { _tone_0640_JCLive_sf2_file} from \"./soundfonts/_tone_0640_JCLive_sf2_file\"; //  soprano sax\nimport { _tone_0130_GeneralUserGS_sf2_file} from \"./soundfonts/_tone_0130_GeneralUserGS_sf2_file\"; //  xylophone\nimport { _drum_35_0_Chaos_sf2_file} from \"./soundfonts/_drum_35_0_Chaos_sf2_file.js\"; //  kickdrum 1\nimport { _drum_36_0_Chaos_sf2_file} from \"./soundfonts/_drum_36_0_Chaos_sf2_file.js\"; //  kickdrum 2\nimport { _tone_0380_Chaos_sf2_file} from \"./soundfonts/_tone_0380_Chaos_sf2_file.js\"; //  synth\n\nexport const instruments = {\n  vibe: 'vibe',\n  vox: 'choir',\n  toms: 'toms',\n  woodblock: 'woodblock',\n  organ: 'organ',\n  e_bass: 'e_bass',\n  altosax: 'altosax',\n  bass: 'bass',\n  e_guitar: 'e_guitar',\n  flute: 'flute',\n  guitar: 'guitar',\n  harp: 'harp',\n  kalimba: 'kalimba',\n  piccolo: 'piccolo',\n  saxophone: 'saxophone',\n  xylophone: 'xylophone',\n  kick: 'kick',\n  kick2: 'kick2',\n  synth: 'synth',\n}\n\nexport const presetMappings = [\n  {\n    name: instruments.vibe,\n    file: _tone_0110_Aspirin_sf2_file,\n    velocity: 0.5,\n    octave: 0,\n    legato: 0.4,\n  },\n  { \n    name: instruments.vox,\n    file: _tone_0530_Aspirin_sf2_file,\n    velocity: 0.3,\n    octave: 0,\n    legato: 0.4,\n  },\n  // { \n  //   name: instruments.toms,\n  //   file: _tone_1170_Aspirin_sf2_file \n  // },\n  { \n    name: instruments.woodblock,\n    file: _tone_1151_FluidR3_GM_sf2_file,\n    velocity: 0.5,\n    octave: 0,\n    legato: 0.4, \n  },\n  { \n    name: instruments.organ,\n    file: _tone_0161_SoundBlasterOld_sf2,\n    velocity: 0.5,\n    octave: 0,\n    legato: 0.4,\n  },\n  // { \n  //   name: instruments.e_bass,\n  //   file: _tone_0390_FluidR3_GM_sf2_file \n  // },\n  // { \n  //   name: instruments.altosax,\n  //   file: _tone_0660_Chaos_sf2_file \n  // },\n  { \n    name: instruments.bass,\n    file: _tone_0320_JCLive_sf2_file,\n    velocity: 0.5,\n    octave: -2,\n    legato: 0.4,\n  },\n  // { \n  //   name: instruments.e_guitar,\n  //   file: _tone_0270_SBAWE32_sf2_file \n  // },\n  { \n    name: instruments.flute,\n    file: _tone_0730_JCLive_sf2_file,\n    velocity: 0.4,\n    octave: 0,\n    legato: 0.4,\n  },\n  { \n    name: instruments.guitar,\n    file: _tone_0240_JCLive_sf2_file,\n    velocity: 0.5,\n    octave: 0,\n    legato: 0.4,\n  },\n  // { \n  //   name: instruments.harp,\n  //   file: _tone_0460_FluidR3_GM_sf2_file \n  // },\n  { \n    name: instruments.kalimba,\n    file: _tone_1080_JCLive_sf2_file,\n    velocity: 0.5,\n    octave: 0,\n    legato: 0.4,\n  },\n  // { \n  //   name: instruments.piccolo,\n  //   file: _tone_0720_GeneralUserGS_sf2_file \n  // },\n  // { \n  //   name: instruments.saxophone,\n  //   file: _tone_0640_JCLive_sf2_file \n  // },\n  { \n    name: instruments.xylophone,\n    file: _tone_0130_GeneralUserGS_sf2_file,\n    velocity: 0.3,\n    octave: 0,\n    legato: 0.4,\n  },\n  { \n    name: instruments.synth,\n    file: _tone_0380_Chaos_sf2_file,\n    velocity: 0.4,\n    octave: -1,\n    legato: 0.2,\n  },\n  { \n    name: instruments.kick,\n    file: _drum_35_0_Chaos_sf2_file,\n    velocity: 1,\n    octave: -2,\n    legato: 0.5,\n  },\n  { \n    name: instruments.kick2,\n    file: _drum_36_0_Chaos_sf2_file,\n    velocity: 1,\n    octave: -2,\n    legato: 0.5,\n  },\n];\n\n","import { Playhead } from \"./playhead\";\nimport { instruments } from \"./soundfonts\";\n\nexport const p1 = new Playhead({\n  playing: true,\n  pattern: [0, 2 / 8, 3 / 8, 5 / 8, 6 / 8],\n  interval: 4,\n  offset: 0,\n  legato: 0.6,\n  steps: 8,\n  events: 4,\n  preset: instruments.guitar,\n  instrumentName: '1',\n  color: \"#ed1c51\",\n  velocity: 0.4,\n});\n\nexport const p2 = new Playhead({\n  playing: false,\n  interval: 4,\n  pattern: [0, 0.5, 0.75],\n  offset: 12,\n  legato: 0.4,\n  preset: instruments.kalimba,\n  instrumentName: '2',\n  color: \"#2277E8\",\n  velocity: 0.4,\n});\n\nexport const p3 = new Playhead({\n  playing: false,\n  pattern: [0, 1 / 4, 2 / 4, 3 / 4], // 1(3,8)\n  interval: 4,\n  offset: 0,\n  legato: 0.3,\n  rotation: 1,\n  preset: instruments.flute,\n  instrumentName: '3',\n  color: \"#ffa333\",\n  velocity: 0.4,\n});\n\nexport const p4 = new Playhead({\n  playing: false,\n  pattern: [0],\n  interval: 4,\n  events: 2,\n  offset: -24,\n  legato: 1,\n  preset: instruments.bass,\n  instrumentName: '4',\n  color: \"#11CA3A\",\n  velocity: 0.4,\n});\n\nexport const p5 = new Playhead({\n  playing: false,\n  pattern: [0, 0.75],\n  interval: 4,\n  events: 3,\n  offset: 0,\n  legato: 0.5,\n  preset: instruments.xylophone,\n  instrumentName: '5',\n  color: \"#ff00ff\",\n  velocity: 0.4,\n});","export const codonMappings = {\n  ATT: \"I\",\n  ATC: \"I\",\n  ATA: \"I\",\n  CTT: \"L\",\n  CTC: \"L\",\n  CTA: \"L\",\n  CTG: \"L\",\n  TTA: \"L\",\n  TTG: \"L\",\n  GTT: \"V\",\n  GTC: \"V\",\n  GTA: \"V\",\n  GTG: \"V\",\n  TTT: \"F\",\n  TTC: \"F\",\n  ATG: \"M\",\n  TGT: \"C\",\n  TGC: \"C\",\n  GCT: \"A\",\n  GCC: \"A\",\n  GCA: \"A\",\n  GCG: \"A\",\n  GGT: \"G\",\n  GGC: \"G\",\n  GGA: \"G\",\n  GGG: \"G\",\n  CCT: \"P\",\n  CCC: \"P\",\n  CCA: \"P\",\n  CCG: \"P\",\n  ACT: \"T\",\n  ACC: \"T\",\n  ACA: \"T\",\n  ACG: \"T\",\n  TCT: \"S\",\n  TCC: \"S\",\n  TCA: \"S\",\n  TCG: \"S\",\n  AGT: \"S\",\n  AGC: \"S\",\n  TAT: \"Y\",\n  TAC: \"Y\",\n  TGG: \"W\",\n  CAA: \"Q\",\n  CAG: \"Q\",\n  AAT: \"N\",\n  AAC: \"N\",\n  CAT: \"H\",\n  CAC: \"H\",\n  GAA: \"E\",\n  GAG: \"E\",\n  GAT: \"D\",\n  GAC: \"D\",\n  AAA: \"K\",\n  AAG: \"K\",\n  CGT: \"R\",\n  CGC: \"R\",\n  CGA: \"R\",\n  CGG: \"R\",\n  AGA: \"R\",\n  AGG: \"R\",\n  TAA: \"*\",\n  TAG: \"*\",\n  TGA: \"*\",\n};\n\nexport const codonNames = {\n  I: \"Isoleucine\",\n  L: \"Leucine\",\n  V: \"Valine\",\n  F: \"Phenylalanine\",\n  M: \"Methionine\",\n  C: \"Cysteine\",\n  A: \"Alanine\",\n  G: \"Glycine\",\n  P: \"Proline\",\n  T: \"Threonine\",\n  S: \"Serine\",\n  Y: \"Tyrosine\",\n  W: \"Tryptophan\",\n  Q: \"Glutamine\",\n  N: \"Asparagine\",\n  H: \"Histidine\",\n  E: \"Glutamicacid\",\n  D: \"Asparticacid\",\n  K: \"Lysine\",\n  R: \"Arginine\",\n  \"*\": \"Stop\",\n};\n\nexport const aminoAcidToCodons = {\n  I: [\"ATT\", \"ATC\", \"ATA\"],\n  L: [\"CTT\", \"CTC\", \"CTA\", \"CTG\", \"TTA\", \"TTG\"],\n  V: [\"GTT\", \"GTC\", \"GTA\", \"GTG\"],\n  F: [\"TTT\", \"TTC\"],\n  M: [\"ATG\"],\n  C: [\"TGT\", \"TGC\"],\n  A: [\"GCT\", \"GCC\", \"GCA\", \"GCG\"],\n  G: [\"GGT\", \"GGC\", \"GGA\", \"GGG\"],\n  P: [\"CCT\", \"CCC\", \"CCA\", \"CCG\"],\n  T: [\"ACT\", \"ACC\", \"ACA\", \"ACG\"],\n  S: [\"TCT\", \"TCC\", \"TCA\", \"TCG\", \"AGT\", \"AGC\"],\n  Y: [\"TAT\", \"TAC\"],\n  W: [\"TGG\"],\n  Q: [\"CAA\", \"CAG\"],\n  N: [\"AAT\", \"AAC\"],\n  H: [\"CAT\", \"CAC\"],\n  E: [\"GAA\", \"GAG\"],\n  D: [\"GAT\", \"GAC\"],\n  K: [\"AAA\", \"AAG\"],\n  R: [\"CGT\", \"CGC\", \"CGA\", \"CGG\", \"AGA\", \"AGG\"],\n  \"*\": [\"TAA\", \"TAG\", \"TGA\"],\n};\n\n// export const noteMappings = {\n//     'I': 'A3',\n//     'L': 'E4',\n//     'V': 'G3',\n//     'F': 'D5',\n//     'M': 'B4',\n//     'C': 'G5',\n//     'A': 'F5',\n//     'G': 'E3',\n//     'P': 'D4',\n//     'T': 'F4',\n//     'S': 'C5',\n//     'Y': 'C3',\n//     'W': 'B3',\n//     'Q': 'A5',\n//     'N': 'D3',\n//     'H': 'G4',\n//     'E': 'A4',\n//     'D': 'F3',\n//     'K': 'E5',\n//     'R': 'C4',\n//     \"*\": 'B5'\n// }\n\nexport const noteMappings = {\n  I: \"A3\",\n  L: \"E4\",\n  V: \"G3\",\n  F: \"D5\",\n  M: \"B4\",\n  C: \"G5\",\n  A: \"F5\",\n  G: \"E3\",\n  P: \"D4\",\n  T: \"F4\",\n  S: \"C5\",\n  Y: \"C3\",\n  W: \"B3\",\n  Q: \"A5\",\n  N: \"D3\",\n  H: \"G4\",\n  E: \"A4\",\n  D: \"F3\",\n  K: \"E5\",\n  R: \"C4\",\n  \"*\": \"B5\",\n};\n\nexport const noteMappingsMinor = {\n  I: \"A3\",\n  L: \"E4\",\n  V: \"G3\",\n  F: \"D5\",\n  M: \"B4\",\n  C: \"G5\",\n  A: \"F5\",\n  G: \"E3\",\n  P: \"D4\",\n  T: \"F4\",\n  S: \"C5\",\n  Y: \"C3\",\n  W: \"B3\",\n  Q: \"A5\",\n  N: \"D3\",\n  H: \"G4\",\n  E: \"A4\",\n  D: \"F3\",\n  K: \"E5\",\n  R: \"C4\",\n  \"*\": \"B5\",\n};\n\nexport const aminoAcidColors = {\n  I: \"#FADADD\",\n  L: \"#E9F7EF\",\n  V: \"#F2E8E4\",\n  F: \"#FFF8E1\",\n  M: \"#F4E3E3\",\n  C: \"#F0E68C\",\n  A: \"#F0EAD6\",\n  G: \"#F0F8FF\",\n  P: \"#F9EBB2\",\n  T: \"#E0FFFF\",\n  S: \"#E6E6FA\",\n  Y: \"#E0E0E0\",\n  W: \"#F5DEB3\",\n  Q: \"#E1EDFF\",\n  N: \"#FFDAB9\",\n  H: \"#F0FFF0\",\n  E: \"#FFC0CB\",\n  D: \"#F5F5DC\",\n  K: \"#E6E6E6\",\n  R: \"#FFE4E1\",\n  \"*\": \"#FFFFFF\",\n};\n\nexport const dnaMapping = { A: 0, C: 1, T: 2, G: 3 };\nexport const numberMapping = { 0: \"A\", 1: \"C\", 2: \"T\", 3: \"G\" };\n\nconst gem = `bg-gradient-to-r from-[#888] via-[#222] to-[#888] \nbg-clip-text font-bold text-transparent text-[3rem] tracking-[0.5rem]`;\n\nexport const emojiPalettes = [\n  {\n    theme: \"Fruits\",\n    emojis: [\"🍎\", \"🍌\", \"🍊\", \"🍇\"],\n  },\n  {\n    theme: \"Animals\",\n    emojis: [\"🐶\", \"🐱\", \"🦁\", \"🐼\"],\n  },\n  {\n    theme: \"Planets\",\n    emojis: [\"🌍\", \"🌕\", \"🪐\", \"🌞\"],\n  },\n  {\n    theme: \"Music Instruments\",\n    emojis: [\"🎵\", \"🎹\", \"🥁\", \"🎸\"],\n  },\n  {\n    theme: \"Sports Balls\",\n    emojis: [\"⚽\", \"🏀\", \"🎾\", \"🏈\"],\n  },\n  {\n    theme: \"Travel Modes\",\n    emojis: [\"✈️\", \"🚆\", \"🚗\", \"🚀\"],\n  },\n  {\n    theme: \"Food Items\",\n    emojis: [\"🍔\", \"🍕\", \"🍣\", \"🍦\"],\n  },\n  {\n    theme: \"Holidays\",\n    emojis: [\"🎄\", \"🎃\", \"🎂\", \"🎉\"],\n  },\n  {\n    theme: \"Art Supplies\",\n    emojis: [\"🎨\", \"✏️\", \"🖌️\", \"📐\"],\n  },\n  {\n    theme: \"Technology\",\n    emojis: [\"📱\", \"💻\", \"📷\", \"🎮\"],\n  },\n  {\n    theme: \"Shapes\",\n    emojis: [\"🔺\", \"🔵\", \"🔶\", \"🔘\"],\n  },\n  {\n    theme: \"Elements\",\n    emojis: [\"🔥\", \"💧\", \"🌱\", \"🌪️\"],\n  },\n  {\n    theme: \"Transportation\",\n    emojis: [\"🚲\", \"🛴\", \"🚁\", \"🚂\"],\n  },\n  {\n    theme: \"Timepieces\",\n    emojis: [\"⌚\", \"🕰️\", \"⏱️\", \"⏲️\"],\n  },\n  {\n    theme: \"Cute Animals\",\n    emojis: [\"🐼\", \"🐧\", \"🦊\", \"🐢\"],\n  },\n];\n","import { codonMappings, aminoAcidToCodons } from \"./mappings\";\n\nimport { randRange } from \"./utils\";\n\nimport { updateEuclid } from \"./playhead\";\n\nexport const interpretSequence = (seq) => {\n  if (!seq) {\n    return\n  }\n  const splitUp = seq.toUpperCase().split(\"\");\n  let combined = \"\"\n  for (let i = 0; i < splitUp.length; i++) {\n    const codons = aminoAcidToCodons[splitUp[i]]\n    if (codons === undefined) {\n      combined += splitUp[i] + splitUp[i] + splitUp[i]\n    } else {\n      combined += codons[Math.floor(Math.random() * codons.length)]\n    }\n  }\n  return combined\n}\n\nexport const parseAllSequence = (seq) => {\n  if (!seq) {\n    return {\n      nodes: [],\n      sequence: [],\n    }\n  }\n  const filtered = seq.split(\"\")\n  let amount = 0;\n  let tempNodes = [];\n  let triNucleotide = \"\";\n  if (filtered) {\n    for (let i = 0; i < filtered.length; i++) {\n      const l = filtered[i].toLowerCase();\n      triNucleotide += filtered[i];\n      amount = amount + 1;\n      if (amount === 3) {\n        if ((l === \"c\" || l === \"a\" || l === \"t\" || l === \"g\")) {\n          tempNodes.push({\n            nucleotide: triNucleotide.toUpperCase(),\n            aminoacid: codonMappings[triNucleotide.toUpperCase()],\n            index: i,\n          });\n        } else {\n          tempNodes.push({\n            nucleotide: triNucleotide,\n            aminoacid: '-1',\n            index: i,\n          });\n        }\n        triNucleotide = \"\";\n        amount = 0;\n      }\n    }\n  }\n  return {\n    nodes: tempNodes,\n    sequence: filtered,\n  };\n};\n\nexport const parseSequence = (seq) => {\n  const splitUp = seq.split(\"\");\n  const filtered = splitUp.filter((el) => {\n    const l = el.toString().toLowerCase();\n    if (l === \"c\" || l === \"a\" || l === \"t\" || l === \"g\") {\n      return l;\n    }\n  });\n\n  let amount = 0;\n  let tempNodes = [];\n  let triNucleotide = \"\";\n  if (filtered) {\n    for (let i = 0; i < filtered.length; i++) {\n      triNucleotide += filtered[i];\n      amount = amount + 1;\n      if (amount === 3) {\n        tempNodes.push({\n          nucleotide: triNucleotide.toUpperCase(),\n          aminoacid: codonMappings[triNucleotide.toUpperCase()],\n          index: i,\n        });\n        triNucleotide = \"\";\n        amount = 0;\n      }\n    }\n  }\n  return {\n    nodes: tempNodes,\n    sequence: filtered,\n  };\n};\n\nexport const generatePattern = ({\n  playheads,\n  updateTempo,\n  setNoteOffset,\n  setMasterSteps,\n  setPlayheads,\n}) => {\n  // resetCounters();\n  setNoteOffset(randRange(-5, 5));\n  const tempo = randRange(100, 200);\n  const special = [5, 7, 15, 10, 7, 7, 13];\n  const steps =\n    Math.random() > 0.3\n      ? randRange(3, 5) * randRange(2, 5)\n      : special[Math.floor(Math.random() * special.length)];\n  const normalRotation = randRange(0, steps);\n  let updated = [];\n  for (let i = 0; i < playheads.length; i++) {\n    const events = tempo > 140 ? randRange(1, 5) : randRange(2, steps);\n    // let playing = i === 0 ? true : Math.random() > 0.3;\n    const p = {\n      ...playheads[i],\n      steps,\n      interval: 4,\n      events: i === 3 ? randRange(1, 2) : events,\n      rotation: Math.random() > 0.5 ? normalRotation : randRange(0, steps),\n      // playing: playing,\n    };\n    updated.push(updateEuclid(p));\n  }\n  updateTempo(tempo);\n  setMasterSteps(steps);\n  setPlayheads(updated);\n};\n","export const SingleButton = ({\n  children,\n  onClick,\n  buttonStyle,\n}) => {\n  return (\n    <div className=\"flex items-center\">\n      <button\n        className=\"font-bold bg-[#232323] hover:bg-[#353535] py-1 w-[1.5rem] rounded-[0.25rem]\"\n        style={buttonStyle}\n        onClick={onClick}\n      >\n        {children}\n      </button>\n    </div>\n  );\n};\n","import React from \"react\";\n\nimport { SingleButton } from \"./singleButton\";\n\nexport const RotationToggle = ({ p, onClick, children }) => {\n  return (\n    <SingleButton\n      onClick={onClick}\n      buttonStyle={{\n        color: p.color,\n        fontWeight: \"bold\",\n      }}\n    >\n      {children}\n    </SingleButton>\n  );\n};\n","export const PlayheadView = ({\n  p,\n  masterSteps,\n  playing,\n  ticker,\n  index,\n  width,\n}) => {\n  const rem = width < 1200 ? 16 : 20;\n  return (\n    <div className=\"flex items-center\">\n      <div className=\"flex w-[17rem]  h-[1.85rem] rounded-[0.25rem]\">\n        {p.euclid.map((hap, i) => {\n          const active = Math.floor(ticker / p.interval) % masterSteps === i;\n          return (\n            <div\n              className=\"flex h-[100%] items-center transition-all rounded-[0.25rem]\"\n              key={`${hap} + ${i} + ${index}`}\n              style={{\n                width: `${rem * 20 * (1 / masterSteps)}px`,\n                backgroundColor:\n                  active && playing && p.playing\n                    ? \"rgba(255,255,255,0.1)\"\n                    : \"rgba(255,255,255,0)\",\n                transitionDuration: \"50ms\",\n              }}\n            >\n              <div\n                className=\"bg-[#00f] rounded-[0.2rem] m-auto transition-all\"\n                style={{\n                  backgroundColor:\n                    hap === 0\n                      ? \"#444\"\n                      : active && playing && p.playing\n                      ? \"#fff\"\n                      : `${p.color}`,\n                  opacity: p.playing ? 1 : 0.3,\n                  width: hap === 0 ? 4 : rem * 0.8,\n                  height:\n                    hap === 0\n                      ? rem * 1.85 * 1\n                      : p.rotation === i\n                      ? rem * 1.85 * 0.9\n                      : rem * 1.85 * 0.5,\n                  transitionDuration: active ? \"10ms\" : \"250ms\",\n                }}\n              ></div>\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n","import React from \"react\";\n\nexport const SwitchButtonCenterText = ({\n  leftText,\n  leftOnClick,\n  rightText,\n  rightOnClick,\n  leftStyle,\n  rightStyle,\n  value,\n}) => {\n  return (\n    <div className=\"flex items-center select-none\">\n      <div className=\"relative flex w-[3.7rem]\">\n        <button\n          className={`font-bold bg-[#232323] hover:bg-[#353535] py-[0.25rem] px-2 w-[1.85rem] text-left rounded-l-[0.25rem]`}\n          style={leftStyle}\n          onClick={leftOnClick}\n        >\n          {leftText}\n        </button>\n        <button\n          className=\"font-bold bg-[#232323] hover:bg-[#353535] text-right py-[0.25rem] px-2 w-[1.85rem] rounded-r-[0.25rem]\"\n          style={rightStyle}\n          onClick={rightOnClick}\n        >\n          {rightText}\n        </button>\n        <p className=\"absolute top-[0] w-[3.7rem] pointer-events-none font-bold py-[0.25rem] text-center\">\n          {value}\n        </p>\n      </div>\n    </div>\n  );\n};\n","import React from \"react\";\n\nimport { SwitchButtonCenterText } from \"./switchButtonCenterText\";\n\nexport const HitsToggle = ({\n  p,\n  masterSteps,\n  leftOnClick,\n  rightOnClick,\n}) => {\n  return (\n    <SwitchButtonCenterText\n      leftOnClick={leftOnClick}\n      leftText=\"-\"\n      rightOnClick={rightOnClick}\n      rightText=\"+\"\n      leftStyle={{\n        // color: p.color,\n        fontWeight: \"bold\",\n      }}\n      rightStyle={{\n        // color: p.color,\n        fontWeight: \"bold\",\n      }}\n      value={p.events}\n    />\n  );\n};\n","import React from \"react\";\n\nexport const ToggleButton = ({\n  playhead,\n  onClick,\n  activeNotes,\n  index,\n}) => {\n  return (\n    <div className=\"flex items-center\">\n      <label>\n        <button\n          className={`hidden`}\n          onClick={onClick}\n        >\n          {playhead.playing ? 'on' : 'off'}\n        </button>\n        <div className={`h-[1.85rem] bg-[#232323] hover:bg-[#353535] \n        p-1 w-[3rem] rounded-[0.25rem] relative`} style={{ cursor: 'pointer' }}>\n          <div\n            className={'absolute w-[1.2rem] h-[1.35rem] rounded-[0.4rem] transition-translate'}\n            style={{\n              left: playhead.playing ? '1.5rem' : '0.25rem',\n              transitionDuration: '100ms',\n              backgroundColor: playhead.playing\n                ? \n                playhead.playing && activeNotes[index].current\n                  ? `hsla(${playhead.hsl.h * 0},${playhead.hsl.s * 100}%,100%,1)`\n                  : `hsla(${playhead.hsl.h * 360},${playhead.hsl.s * 100}%,${playhead.hsl.l * 100\n                  }%,0.7)`\n                : '#aaaaaa',\n              transition: activeNotes[index].current\n              ? \"background-color 100ms linear\" : \"background-color 10ms linear\"\n            }}\n          >\n          </div>\n        </div>\n      </label>\n    </div>\n  );\n};\n","import { RotationToggle } from \"./rotationToggle\";\nimport { PlayheadView } from \"./playheadView\";\nimport { HitsToggle } from \"./hitsToggle\";\nimport { ToggleButton } from \"./toggleButton\";\n\nimport { updateEuclid } from \"../playhead\";\n\nexport const PlayheadsView = ({\n  playheads,\n  updatePlayhead,\n  playing,\n  ticker,\n  masterSteps,\n  playheadCount,\n  width,\n  setSelectedPlayhead,\n  activeNotes,\n  setMenu,\n  selectedPlayhead,\n  setPlayheadCount,\n  setShowHelp,\n  showControls,\n}) => {\n  return (\n    <div className=\"pt-[0.5rem]\">\n      <div className=\"flex\">\n        <div \n          classNames={!showControls && `select-none`}\n        >\n        <div className=\"flex pb-[0.25rem] text-center text-[#888] text-[0.8rem] select-none uppercase\">\n            <p className=\"w-[2.5rem]\"></p>\n            <p className=\"w-[3.5rem]\">off/on</p>\n            <p className=\"w-[17.5rem]\">rhythm</p>\n            <p className=\"w-[4rem]\">beats</p>\n            <p className=\"w-[3.8rem]\">offset</p>\n            {/* <p className=\"w-[4rem]\">octave</p> */}\n            {/* <p className=\"w-[4rem]\">length</p> */}\n          </div>\n          {playheads.map((p, index) => {\n            if (index >= playheadCount) return;\n            return (\n              <div\n                key={\"playheads\" + index}\n                className=\"relative mb-1 flex items-center text-center\"\n              >\n                <button className=\"px-[0.75rem] ml-[0.5rem] py-[0.25rem]\"\n                  style={{\n                    backgroundColor: selectedPlayhead === index ? p.color : 'rgba(0,0,0,0)',\n                  }}\n                  onClick={() => {\n                    setMenu(1)\n                    setShowHelp(false)\n                    setSelectedPlayhead(index)\n                  }}\n                >\n                  {index + 1}\n                </button>\n                <div className=\"mx-1 mr-[0.5rem]\">\n                  <ToggleButton\n                    onClick={() => {\n                      updatePlayhead(index, { ...p, playing: !p.playing });\n                      setSelectedPlayhead(index);\n                      setShowHelp(false)\n                      setMenu(1);\n                    }}\n                    playhead={p}\n                    index={index}\n                    activeNotes={activeNotes}\n                  />\n                </div>\n                <PlayheadView\n                  p={p}\n                  playing={playing}\n                  ticker={ticker}\n                  masterSteps={masterSteps}\n                  index={index}\n                  width={width}\n                />\n\n                <div className=\"flex items-center ml-2\">\n                  <HitsToggle\n                    leftOnClick={() => {\n                      setShowHelp(false)\n                      if (p.events > 1) {\n                        updatePlayhead(\n                          index,\n                          updateEuclid({ ...p, events: p.events - 1 })\n                        );\n                      }\n                      setSelectedPlayhead(index);\n                      setMenu(1);\n                    }}\n                    rightOnClick={() => {\n                      if (p.events < masterSteps) {\n                        updatePlayhead(\n                          index,\n                          updateEuclid({ ...p, events: p.events + 1 })\n                        );\n                      }\n                      setSelectedPlayhead(index);\n                      setMenu(1);\n                    }}\n                    p={p}\n                    masterSteps={masterSteps}\n                  />\n                </div>\n                <div className=\"ml-2\">\n                  <RotationToggle\n                    onClick={() => {\n                      setShowHelp(false)\n                      updatePlayhead(\n                        index,\n                        updateEuclid({\n                          ...p,\n                          rotation:\n                            p.rotation - 1 < 0 ? masterSteps - 1 : p.rotation - 1,\n                        })\n                      );\n                      setSelectedPlayhead(index);\n                      setMenu(1);\n                    }}\n                    p={p}\n                    masterSteps={masterSteps}\n                  >\n                    {\"<\"}\n                  </RotationToggle>\n                </div>\n                <div className=\"ml-1 mr-2\">\n                  <RotationToggle\n                    onClick={() => {\n                      setShowHelp(false)\n                      updatePlayhead(\n                        index,\n                        updateEuclid({\n                          ...p,\n                          rotation:\n                            p.rotation + 1 >= masterSteps ? 0 : p.rotation + 1,\n                        })\n                      );\n                      setSelectedPlayhead(index);\n                      setMenu(1);\n                    }}\n                    p={p}\n                    masterSteps={masterSteps}\n                  >\n                    {\">\"}\n                  </RotationToggle>\n                </div>\n              </div>\n            );\n          })}\n        </div>\n        {\n          false &&\n          <div className=\"relative h-full text-center text-[0.8rem]\">\n            {playheads.map((p, index) => {\n              const buttonLabel = p.midiEnabled ? `MIDI ${p.midiOutputDevice.index}` : p.preset;\n              if (index >= playheadCount) return;\n              return (\n                <div key={index} className=\"flex items-center relative\">\n                  <div className=\"w-[5.25rem] mb-1\">\n                    <button\n                      className=\"w-[5.25rem] h-[1.85rem] p-1 rounded-[0.25rem] bg-[#232323] hover:bg-[#353535] uppercase\"\n                      onClick={() => {\n                        setShowHelp(false)\n                        setMenu(1);\n                        setSelectedPlayhead(index)\n                      }}\n                    >\n                      {buttonLabel}\n                    </button>\n                  </div>\n                </div>\n              );\n            })}\n            <div className=\"flex text-center select-none uppercase\">\n              <p className=\"pb-[0.25rem] w-[5.25rem] text-[#888] text-[0.8rem]\">\n                SOUND\n              </p>\n            </div>\n          </div>\n        }\n      </div>\n    </div>\n  );\n};\n","export const SequenceInput = ({\n  userSequence,\n  setUserSequence,\n  width,\n}) => {\n  return (\n    <div className=\"flex mt-1\">\n      <input\n        id=\"user-input-name\"\n        className={`sequence-input text-[1.3rem] h-[1.9rem] text-center mx-auto mt-3 border-b-[1px] border-b-[#aaa] hover:border-b-[#fff]`}\n        style={{\n          backgroundColor: 'rgba(0,0,0,0)',\n          width: width ? width : '17rem',\n        }}\n        value={userSequence}\n        onChange={(e) => {\n          setUserSequence(e.target.value);\n        }}\n      />\n    </div>\n  );\n};\n","\nexport const helpMessages = {\n  introduction: [\n    {\n      name: 'What is DNA?',\n      description: 'At its simplest, DNA is the blueprint for life. It contains the genetic code used to build and maintain organisms. It is made up of four basic letters called nucleotides: adenine (A), cytosine (C), guanine (G), and thymine (T).',\n    },\n    {\n      name: 'How is DNA Read?',\n      description: 'The order of these nucleotides are super important. They form the instructions. To read these instructions, DNA is grouped into sets of three nucleotides, which are called codons. For example, \"ATG\" is a codon.',\n    },\n    {\n      name: 'What is a Codon?',\n      description: `\nA codon is the basic unit of information in DNA. Each three-letter codon corresponds to one of 20 different amino acids, which are the building blocks of proteins. In this way, the DNA sequence provides the blueprint for making proteins, which are the machinery of the cell.\n\nThe special codons are \"start\" codons and \"stop\" codons. A start codon (ATG) signals the beginning of a protein-coding sequence, while three different stop codons (TGA, TAG, TAA) signal its end.\n\nLet’s translate a word into a DNA sequence. This is an over-simplified and not entirely accurate example, because not every alphabetical letter maps directly to a codon in biology. Like there’s no “O” or “B” amino acid. In our hypothetical example, we'll assign each letter in \"HELLO\" to a codon. \n  \nH = CAT (Histidine)  \nE = GAG (Glutamicacid)  \nL = CTA (Leucine)  \nL = CTG (Leucine)  \nO = - - - (No corresponding amino acid)  \n\nThis gives us a DNA sequence: CAT, GAG, CTA, CTG\n                `,\n    },\n    {\n      name: '',\n      description: 'This diagram shows all of the mappings between codons and amino acids.',\n      img: \"./assets/codon_wheel.png\",\n      imgHeight: '13rem',\n    },\n    {\n      name: 'What is DNA Sonification?',\n      description: 'DNA sonification is a way of translating the information in DNA into sound. By mapping musical notes or sound elements to different nucleotides or codons, we can \"play\" the sequence of DNA as a piece of music. So now, instead of making proteins, your DNA makes music.',\n    },\n    {\n      name: '\"Hello World\" Example',\n      description: 'To Come',\n    },\n  ],\n  acids: {\n    I: {\n      name: \"Isoleucine\",\n      description: \"\",\n      source: \"https://en.wikipedia.org/wiki/Isoleucine\",\n      img: \"./assets/structures/L-Isoleucin_-_L-Isoleucine.svg\"\n    },\n    L: {\n      name: \"Leucine\",\n      description2: \"Leucine (symbol Leu or L) is an essential amino acid that is used in the biosynthesis of proteins. It is essential in humans, meaning the body cannot synthesize it: it must be obtained from the diet. Human dietary sources are foods that contain protein, such as meats, dairy products, soy products, and beans and other legumes.\",\n      source: \"https://en.wikipedia.org/wiki/Leucine\",\n      img: \"./assets/structures/L-Leucine.svg\",\n    },\n    V: {\n      name: \"Valine\",\n      description2: \"Valine (symbol Val or V) is an α-amino acid that is used in the biosynthesis of proteins. Valine, like other branched-chain amino acids, is synthesized by plants, but not by animals.[9] It is therefore an essential amino acid in animals, and needs to be present in the diet.\",\n      source: \"https://en.wikipedia.org/wiki/Valine\",\n      img: \"./assets/structures/L-valine-skeletal.svg\",\n    },\n    F: {\n      name: \"Phenylalanine\",\n      description: \"\",\n      source: \"https://en.wikipedia.org/wiki/Phenylalanine\",\n      img: \"./assets/structures/L-Phenylalanin_-_L-Phenylalanine.svg\",\n    },\n    M: {\n      name: \"Methionine\",\n      description: \"\",\n      source: \"https://en.wikipedia.org/wiki/Methionine\",\n      img: \"./assets/structures/Methionin_-_Methionine.svg\",\n    },\n    C: {\n      name: \"Cysteine\",\n      description: \"\",\n      source: \"https://en.wikipedia.org/wiki/Cysteine\",\n      img: \"./assets/structures/L-Cystein_-_L-Cysteine.svg\",\n    },\n    A: {\n      name: \"Alanine\",\n      description: \"\",\n      source: \"https://en.wikipedia.org/wiki/Alanine\",\n      img: \"./assets/structures/L-Alanin_-_L-Alanine.svg\",\n    },\n    G: {\n      name: \"Glycine\",\n      description: \"\",\n      source: \"https://en.wikipedia.org/wiki/Glycine\",\n      img: \"./assets/structures/Glycine-zwitterion-2D-skeletal.svg\",\n    },\n    P: {\n      name: \"Proline\",\n      description: \"\",\n      source: \"https://en.wikipedia.org/wiki/Proline\",\n      img: \"./assets/structures/Prolin_-_Proline.svg\",\n    },\n    T: {\n      name: \"Threonine\",\n      description: \"\",\n      source: \"https://en.wikipedia.org/wiki/Threonine\",\n      img: \"./assets/structures/L-Threonin_-_L-Threonine.svg\",\n    },\n    S: {\n      name: \"Serine\",\n      description: \"\",\n      source: \"https://en.wikipedia.org/wiki/Serine\",\n      img: \"./assets/structures/L-Serin_-_L-Serine.svg\",\n    },\n    Y: {\n      name: \"Tyrosine\",\n      description: \"\",\n      source: \"https://en.wikipedia.org/wiki/Tyrosine\",\n      img: \"./assets/structures/L-Tyrosin_-_L-Tyrosine.svg\",\n    },\n    W: {\n      name: \"Tryptophan\",\n      description: \"\",\n      source: \"https://en.wikipedia.org/wiki/Tryptophan\",\n      img: \"./assets/structures/L-Tryptophan_-_L-Tryptophan.svg\",\n    },\n    Q: {\n      name: \"Glutamine\",\n      description: \"\",\n      source: \"https://en.wikipedia.org/wiki/Glutamine\",\n      img: \"./assets/structures/L-Glutamin_-_L-Glutamine.svg\",\n    },\n    N: {\n      name: \"Asparagine\",\n      description: \"\",\n      source: \"https://en.wikipedia.org/wiki/Asparagine\",\n      img: \"./assets/structures/L-Asparagin_-_L-Asparagine.svg\",\n    },\n    H: {\n      name: \"Histidine\",\n      description: \"\",\n      source: \"https://en.wikipedia.org/wiki/Histidine\",\n      img: \"./assets/structures/L-Histidine_physiological.svg\",\n    },\n    E: {\n      name: \"Glutamicacid\",\n      description: \"\",\n      source: \"https://en.wikipedia.org/wiki/Glutamic_acid\",\n      img: \"./assets/structures/L-Glutaminsaure_-_L-Glutamic_acid.svg\",\n    },\n    D: {\n      name: \"Asparticacid\",\n      description: \"\",\n      source: \"https://en.wikipedia.org/wiki/Aspartic_acid\",\n      img: \"./assets/structures/L-Asparaginsaure_-_L-Aspartic_acid.svg\",\n    },\n    K: {\n      name: \"Lysine\",\n      description: \"\",\n      source: \"https://en.wikipedia.org/wiki/Lysine\",\n      img: \"./assets/structures/L-Lysin_-_L-Lysine.svg\",\n    },\n    R: {\n      name: \"Arginine\",\n      description: \"\",\n      source: \"https://en.wikipedia.org/wiki/Arginine\",\n      img: \"./assets/structures/Arginin_-_Arginine.svg\",\n    },\n    \"*\": {\n      name: \"Stop Codon\",\n      description: \"In biology, certain codons signal the start and stop of a protein-coding sequence.\",\n      source: \"https://en.wikipedia.org/wiki/Stop_codon\",\n      img: \"\",\n    },\n    \"other\": {\n      name: \"Not an Amino Acid!\",\n      description: \"There are 20 Amino acids, which means that some letters of the alphabet, and other characters are not included. The letters \\\"O\\\", \\\"J\\\", \\\"X\\\", \\\"U\\\", \\\"Z\\\", and \\\"B\\\".\",\n      source: \"https://en.wikipedia.org/wiki/DNA_and_RNA_codon_tables\",\n      img: \"\",\n    }\n  },\n}","import React, { useState } from \"react\";\n\nimport { mapN, toMidi } from \"../utils\";\n\nimport { noteMappings } from \"../mappings\";\n\nimport { helpMessages } from \"../information\";\n\nexport const VisualizerSequence = ({\n  sequence,\n  nodes,\n  activeNodes,\n  activeSequence,\n  showOnlyActive,\n  bounds,\n  zoom,\n  width,\n  height,\n  setShowHelp,\n  setHelpMessage,\n  playheads,\n  getNote,\n  noteOffsetRef,\n  playSoundFont,\n  setMenu,\n  showSequenceAbove,\n  showControlsTransition,\n}) => {\n  // boxSide x amount =\n\n  const currentSequence = showOnlyActive ? activeSequence : sequence;\n\n  const showDetails = showSequenceAbove;\n\n  const spacingX = width / 10;\n  const boxSide = 30 * zoom;\n  const colSpace = (0 * boxSide) / 5;\n  const rowSpace = boxSide / 2.5;\n  const boxAspect = 1;\n  const detailSpace = showDetails ? boxSide * boxAspect * 1.1 : 0;\n\n  const [noteActive, setNoteActive] = useState(false)\n\n  const cols =\n    Math.floor(\n      Math.floor((width - spacingX * 2) / (boxSide + colSpace / 3)) / 3\n    ) * 3;\n  const rows = Math.ceil(currentSequence.length / cols);\n  const spacingY =\n    height -\n    height / 8 -\n    rows * (boxSide * boxAspect + rowSpace * 1.5 + detailSpace) +\n    detailSpace;\n\n  const boxScale = 0.92;\n\n  const getCoord = (i) => {\n    const col = i % cols;\n    const row = Math.floor(i / cols);\n    const offsetX = Math.floor(col / 3);\n    const x = col * boxSide + offsetX * colSpace;\n    const y = row * (boxSide + rowSpace + detailSpace);\n    const unit = boxSide + colSpace / 3;\n    const xRemainder =\n      rows === 1\n        ? (width - unit * currentSequence.length) / 2\n        : (width - unit * cols) / 2;\n    return {\n      //   y: x%2 === 1 ? y : ((cols - 1) * boxSide) - y ,\n      y: spacingY + y * boxAspect,\n      x: spacingX + x + xRemainder - spacingX,\n    };\n  };\n\n  return (\n    <div\n      className=\"relative transition-translate\"\n      style={{\n        width: width,\n        height: height,\n        transitionDuration: showControlsTransition ? '200ms' : 0,\n        // transitionDuration: 0\n      }}\n    >\n      <div>\n        <div\n          className=\"relative transition-translate\"\n          style={{\n            width: width,\n            height: height,\n            transitionDuration: showControlsTransition ? '200ms' : 0,\n            // transitionDuration: 0\n          }}\n        >\n          {currentSequence.map((letter, index) => {\n            const { x, y } = getCoord(index);\n            if (nodes[Math.floor(index / 3)] === undefined) {\n              return;\n            }\n\n            const currentAcid = nodes[Math.floor(index / 3)].aminoacid;\n            const note =\n              currentAcid !== \"-1\" ? toMidi(noteMappings[currentAcid]) : -1;\n            // const noteColor = parseInt(currentAcid) !== -1 ? mapN(note, 55, 90, 80, 150) : 20\n            const noteColor =\n              parseInt(currentAcid) !== -1 ? mapN(note, 55, 90, 120, 120) : 20;\n\n            const isActive = showOnlyActive\n              ? true\n              : index >= bounds[0] && index <= bounds[1];\n            return (\n              <div\n                key={index}\n                className=\"absolute transition-translate\"\n                style={{\n                  left: x,\n                  top: y,\n                  transitionDuration: showControlsTransition ? '200ms' : '0ms',\n                  // transitionDuration: 0\n                }}\n              >\n                <span className=\"relative select-text\">\n                  <span\n                    className=\"absolute box-border text-center\"\n                    style={{\n                      top: detailSpace,\n                      left: boxScale * ((1 - boxScale) / 2),\n                      width: boxSide * boxScale,\n                      height: boxSide * boxAspect,\n                      // border: \"1px solid #888\",\n                      borderRadius: zoom * 5,\n                      lineHeight: `${boxSide * boxAspect}px`,\n                      // backgroundColor: 'rgba(255,255,255,0.4)'\n                      // backgroundColor: `hsla(192,0%,${noteColor}%, 0.5)`\n                      backgroundColor: isActive\n                        ? (showDetails ? `hsla(192,0%,${noteColor}%, 0.6)` : `rgba(255,255,255, 0.5)`)\n                        : `hsla(192,0%,${noteColor}%, 0.2)`,\n                    }}\n                  ></span>\n                  <span\n                    className=\"absolute box-border text-center uppercase pointer-events-none\"\n                    style={{\n                      top: detailSpace,\n                      left: boxScale * ((1 - boxScale) / 2),\n                      width: boxSide * boxScale,\n                      height: boxSide * boxAspect,\n                      lineHeight: `${boxSide * boxAspect}px`,\n                      fontSize: `${20 * zoom}px`,\n                      // color: '#ddd'\n                      // color: isActive ? '#fff' : '#000'\n                      color: showDetails ? \"#000\" : '#fff',\n                    }}\n                  >\n                    <span>{parseInt(currentAcid) === -1 ? \"-\" : letter}</span>\n                  </span>\n                  {(index - 1) % 3 === 0 &&\n                    (\n                      <div className=\"relative\">\n                        <div\n                          className={`absolute opacity-[0] ${showDetails ? 'hover:opacity-[0.8]' : 'hover:opacity-[1]'} z-[999] cursor-pointer`}\n                          style={{\n                            left: boxScale * ((1 - boxScale) / 2) - boxSide,\n                            width: boxSide * 2.95,\n                            height: boxSide * 1.05 * boxAspect * (showDetails ? 2 : 1),\n                            borderRadius: zoom * 5,\n                            backgroundColor: '#fff',\n                            lineHeight: `${boxSide * boxAspect}px`,\n                          }}\n                          onClick={() => {\n                            const note = getNote(Math.floor(index / 3))\n                            playSoundFont(\n                              0,\n                              playheads[0].preset,\n                              note + noteOffsetRef.current,\n                              0,\n                              playheads[0].legato * 300,\n                              playheads[0].velocity\n                            );\n                            setNoteActive(true)\n                            setTimeout(() => {\n                              setNoteActive(false)\n                            }, 100)\n                            let helpMessage = {}\n                            if (helpMessages.acids[currentAcid] !== undefined) {\n                              helpMessage = {\n                                name: helpMessages.acids[currentAcid].name,\n                                description: helpMessages.acids[currentAcid].description,\n                                img: helpMessages.acids[currentAcid].img,\n                                source: helpMessages.acids[currentAcid].source,\n                              }\n                            } else {\n                              helpMessage = {\n                                name: helpMessages.acids.other.name,\n                                description: helpMessages.acids.other.description,\n                                img: helpMessages.acids.other.img,\n                                source: helpMessages.acids.other.source,\n                              }\n                            }\n                            setMenu(0)\n                            setShowHelp(true)\n                            setHelpMessage(\n                              helpMessage\n                            )\n                            console.log(currentAcid, currentSequence[index - 1], letter, currentSequence[index + 1])\n                          }}\n                        >\n                          <span\n                          className=\"absolute box-border text-center uppercase\"\n                          // className=\"absolute box-border text-center uppercase opacity-[0] hover:opacity-[1]\"\n                          style={{\n                            lineHeight: `${boxSide * boxAspect}px`,\n                            fontSize: `${20 * zoom}px`,\n                            width: '100%',\n                            // color: '#ddd'\n                            color: '#000'\n                          }}\n                        >\n                          <span>\n                            {parseInt(currentAcid) === -1 ? letter : currentAcid}\n                          </span>\n                        </span>\n                        </div>\n                        <span\n                          className=\"absolute box-border text-center uppercase\"\n                          // className=\"absolute box-border text-center uppercase opacity-[0] hover:opacity-[1]\"\n                          style={{\n                            left: boxScale * ((1 - boxScale) / 2),\n                            width: boxSide * boxScale,\n                            height: boxSide * boxAspect,\n                            lineHeight: `${boxSide * boxAspect}px`,\n                            fontSize: `${20 * zoom}px`,\n                            // color: '#ddd'\n                            color: isActive ? \"#fff\" : \"#888\",\n                            display: showDetails ? 'initial' : 'none'\n                          }}\n                        >\n                          <span>\n                            {parseInt(currentAcid) === -1 ? letter : currentAcid}\n                          </span>\n                        </span>\n                      </div>\n                    )\n                  }\n                </span>\n              </div>\n            );\n          })}\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React, { useState, useEffect, useRef } from \"react\";\n\nimport { aminoAcidColors } from \"../mappings\";\n\nexport const VisualizerPlayheads = ({\n  playing,\n  counter, // renderframes\n  playheads, // main playheads\n  counters, // separate counts from each playhead\n  activeSequence,\n  sequence,\n  nodes,\n  zoom,\n  width,\n  height,\n  bounds,\n  showOnlyActive,\n  playheadCount,\n  showSequenceAbove,\n  showControlsTransition,\n}) => {\n\n  const showDetails = showSequenceAbove;\n  const currentSequence = showOnlyActive ? activeSequence : sequence;\n\n  const lastCounter = useRef(counter);\n  const spacingX = width / 10;\n  const boxSide = 30 * zoom;\n  const colSpace = 0 * boxSide / 5;\n  const rowSpace = boxSide / 2.5;\n  const boxAspect = 1;\n  const detailSpace = showDetails ? boxSide * boxAspect * 1.1 : 0\n\n  const cols =\n    Math.floor(\n      Math.floor((width - spacingX * 2) / (boxSide + colSpace / 3)) / 3\n    ) * 3;\n  const rows = Math.ceil(currentSequence.length / cols);\n  const spacingY = height - (height / 8) - rows * (boxSide * boxAspect + rowSpace * 1.5 + detailSpace) + detailSpace;\n\n  const letterScale = 0.8;\n\n  const [showLettersColors, setShowLettersColors] = useState(false);\n  const [showAminoAcids, setShowAminoAcids] = useState(false);\n\n  useEffect(() => {\n    lastCounter.current = playing ? counter : lastCounter.current;\n  }, [counter]);\n\n  const getCoord = (i) => {\n    const col = i % cols;\n    const row = Math.floor(i / cols);\n    const offsetX = Math.floor(col / 3);\n    const x = col * boxSide + offsetX * colSpace;\n    const y = row * (boxSide + rowSpace + detailSpace);\n    const unit = boxSide + colSpace / 3\n    const xRemainder = rows === 1 ? (width - unit * currentSequence.length) / 2 : (width - unit * cols) / 2\n    return {\n      //   y: x%2 === 1 ? y : ((cols - 1) * boxSide) - y ,\n      y: spacingY + y * boxAspect,\n      x: spacingX + x + xRemainder - spacingX,\n    };\n  };\n  const getAcidSprite = (letter) => {\n    const spritePath = `/assets/acids/amino_${letter.toLowerCase()}.png`;\n    return spritePath;\n  };\n\n  const dnaColors = {\n    A: \"#FADADD\",\n    C: \"#E9F7EF\",\n    T: \"#F0E68C\",\n    G: \"#FFFFFF\",\n  };\n\n  const getDnaColor = (letter) => {\n    if (!showLettersColors) return 0xffffff;\n    if (showAminoAcids) {\n      return aminoAcidColors[letter];\n    } else {\n      return dnaColors[letter.toUpperCase()];\n    }\n  };\n\n  return (\n    <div className=\"pointer-events-none\">\n      {sequence.length ? (\n        <div\n          className=\"absolute transition-translate\"\n          style={{\n            top: 0,\n            left: 0,\n            width: width,\n            height: height,\n            transitionDuration: showControlsTransition ? '200ms' : 0,\n            // transitionDuration: 0,\n          }}\n        >\n          <div\n          className=\"relative transition-translate\"\n          style={{\n            width: width,\n            height: height,\n            transitionDuration: showControlsTransition ? '200ms' : 0,\n            // transitionDuration: 0,\n          }}\n        >\n            {playheads.map((playhead, index) => {\n              if (index >= playheadCount) return;\n              const count = showOnlyActive ? counters[index] * 3 : Math.ceil((bounds[0] + counters[index] * 3) / 3) * 3;\n              const { x, y } = getCoord(count);\n              const currentNode = nodes[count / 3]\n              if (currentNode === undefined) return;\n              const currentAcid = currentNode.aminoacid;\n              const letter = currentNode.nucleotide[0]\n              const spritePathAcid = getAcidSprite(currentAcid);\n              return (\n                <div key={index + x}>\n                  <div\n                    className=\"absolute box-border text-center transition-translate\"\n                    style={{\n                      left: x,\n                      top: playhead.playing ? y : y + boxSide * boxAspect,\n                      // transition: \"top 100ms linear\",\n                      transitionDuration: showControlsTransition ? '200ms' : '0ms',\n                      // transitionDuration: 0,\n                    }}\n                  >\n                    <div\n                      style={{\n                        width: boxSide * 2.95,\n                        height: playhead.playing ? boxSide * boxAspect : \"3px\",\n                        borderRadius: playhead.playing ? zoom * 5 : 0,\n                        backgroundColor: playhead.playing\n                          ? playhead.color\n                          : \"rgba(0,0,0,0)\",\n                        // backgroundColor: playhead.color,\n                        opacity: playhead.playing ? 1 : 0.5,\n                        borderBottom: `2px solid ${playhead.color}`,\n                        lineHeight: `${boxSide * boxAspect}px`,\n                        // transition: playhead.playing\n                        //   ? \"height 100ms linear, color 200ms linear\"\n                        //   : \"height 100ms linear\",\n                        fontSize: `${20 * zoom}px`,\n                        color: playhead.playing ? \"#fff\" : \"rgba(0,0,0,0)\",\n                      }}\n                    >\n                      <div>{playhead.playing ? parseInt(currentAcid) === -1 ? letter : currentAcid : \"\"}</div>\n                    </div>\n                  </div>\n                </div>\n              );\n            })}\n          </div>\n        </div>\n      ) : (\n        <div></div>\n      )}\n    </div>\n  );\n};\n","import React, { useState, useEffect, useRef } from \"react\";\n\nimport { randRange } from \"../utils\";\n\nimport { useAnimationFrame } from \"../graphics\";\n\nexport const VisualizerBlobs = ({\n  playing,\n  counter, // renderframes\n  playheads, // main playheads\n  activeNotes, // active note refs, for actual gate\n  countRefs, // count references\n  sequence,\n  nodes,\n  zoom,\n  width,\n  height,\n  cps,\n  bounds,\n  activeSequence,\n  showOnlyActive,\n  clearClick,\n  playheadCount,\n  showSequenceAbove\n}) => {\n\n  const currentSequence = showOnlyActive ? activeSequence : sequence\n  const fixedLength = false;\n  const ANIMATION_TIME = 3.0;\n\n  const showDetails = showSequenceAbove;\n  const lastCounter = useRef(counter);\n  const spacingX = width / 10;\n  const boxSide = 30 * zoom;\n  // 1.2 * x + spacingX * 2 = 1200 * y .. TODO figure out this equation so the sequence takes up the whole space!\n  const colSpace = 0 * boxSide / 5;\n  const rowSpace = boxSide / 2.5;\n  const boxAspect = 1;\n  const detailSpace = showDetails ? boxSide * boxAspect * 1.1 : 0\n\n  const cols =\n    Math.floor(\n      Math.floor((width - spacingX * 2) / (boxSide + colSpace / 3)) / 3\n    ) * 3;\n  const rows = Math.ceil(currentSequence.length / cols);\n  const spacingY = height - (height / 8) - rows * (boxSide * boxAspect + rowSpace * 1.5 + detailSpace) + detailSpace;\n\n  useEffect(() => {\n    lastCounter.current = playing ? counter : lastCounter.current;\n  }, [counter]);\n\n  useEffect(() => {\n    setUpdatedCount(0)\n    endAllAnimations()\n  }, [clearClick])\n\n  const getCoord = (i) => {\n    const col = i % cols;\n    const row = Math.floor(i / cols);\n    const offsetX = Math.floor(col / 3);\n    const x = col * boxSide + offsetX * colSpace;\n    const y = row * (boxSide + rowSpace + detailSpace);\n    const unit = boxSide + colSpace / 3\n    const xRemainder = rows === 1 ? (width - unit * currentSequence.length) / 2 : (width - unit * cols) / 2\n    return {\n      //   y: x%2 === 1 ? y : ((cols - 1) * boxSide) - y ,\n      y: spacingY + y * boxAspect,\n      x: spacingX + x + xRemainder - spacingX,\n    };\n  };\n\n  let lastTick = [-1, -1, -1, -1, -1];\n  let lastSpawned = [false, false, false, false, false];\n  let lastIndex = [-1, -1, -1, -1, -1];\n  let ticks = 0;\n\n  let blobCount = 0;\n\n  const [updatedCount, setUpdatedCount] = useState(0);\n\n  const updatedRef = useRef(0);\n\n  useEffect(() => {\n    updatedRef.current = updatedCount;\n  }, [updatedCount]);\n\n  const renderDebounce = 600\n\n  const animationCallback = (delta) => {\n    const svg = document.querySelector(\".svg\");\n    ticks = ticks + 1;\n\n    const timeWindow = cps * 1000;\n\n    // check to add new blobs\n    for (let i = 0; i < playheadCount; i++) {\n      if (activeNotes[i].current && updatedRef.current > renderDebounce) {\n        // note is currently active\n        const index = countRefs[i].current;\n        const currentNode = nodes[Math.floor(index)];\n        if (currentNode === undefined) return;\n        const count = showOnlyActive ? countRefs[i].current * 3 : Math.ceil((bounds[0] + countRefs[i].current * 3) / 3) * 3\n        // const noteX = mapN(midi, 45, 90, 0, width)\n        // const x = noteX;\n        // const y = 400;\n        if (parseInt(currentNode.aminoacid) === -1) continue;\n        const { x, y } = getCoord(count);\n        // check if just switched from note active to active\n        if (lastIndex[i] !== index) {\n          if (!lastSpawned[i]) {\n            blobCount += 1;\n            startNoteAnimation(\n              x + boxSide * 1.5,\n              // x,\n              y,\n              `${i}-${ticks}`,\n              playheads[i].hsl,\n              svg\n            );\n            lastTick[i] = ticks;\n            lastSpawned[i] = true;\n            lastIndex[i] = index;\n          }\n          else {\n            if (lastIndex[i] !== index) {\n              endNoteAnimation(\n                `${i}-${lastTick[i]}`,\n                playheads[i].hsl,\n                svg\n              );\n              startNoteAnimation(\n                x + boxSide * 1.5,\n                // x,\n                y,\n                `${i}-${ticks}`,\n                playheads[i].hsl,\n                svg\n              );\n              lastTick[i] = ticks;\n              lastSpawned[i] = true;\n              lastIndex[i] = index;\n            }\n          }\n          lastSpawned[i] = true;\n          lastIndex[i] = index;\n        }\n      } else {\n        // check if note has become not active\n        if (lastSpawned[i]) {\n          blobCount -= 1;\n          endNoteAnimation(`${i}-${lastTick[i]}`, playheads[i].hsl, svg);\n        }\n        lastSpawned[i] = false;\n      }\n    }\n    if (updatedRef.current <= renderDebounce) {\n      setUpdatedCount(updatedRef.current + delta);\n      endAllAnimations();\n    }\n  };\n\n  const animationCallbackRef = useRef(animationCallback);\n\n  useEffect(() => {\n    setUpdatedCount(0);\n    endAllAnimations();\n    animationCallbackRef.current = animationCallback;\n  }, [sequence, cps, zoom, height, bounds, playheadCount, width]);\n\n  useEffect(() => {\n    setUpdatedCount(0);\n    endAllAnimations();\n  }, [playing])\n\n\n  // main animation loop\n  useAnimationFrame(animationCallbackRef);\n\n  var paramSet = 1;\n  var params = [\n    {\n      x: 0.05227467811158796,\n      y: 0.05744431418522861,\n    },\n    {\n      x: 0.2618025751072961,\n      y: 0.08366013071895424,\n    },\n    {\n      x: 0.5507868383404864,\n      y: 0.4856711915535445,\n    },\n    {\n      x: 0.621173104434907,\n      y: 0.53215686274509803,\n    },\n  ];\n\n  var px = params[paramSet].x;\n  var py = params[paramSet].y;\n\n  var svg = document.querySelector(\".svg\");\n\n  var generatePoints = (initialX, initialY) => {\n    const num = 7;\n    var scaleX = height / 88;\n    var scaleY = height / num;\n    var points = [];\n    for (var i = 0; i < num; i++) {\n      var dir = Math.random() < 0.5 ? -1 : 1;\n      var offsetFactorX = randRange(0, 300) * px;\n      var x = initialX + dir * 0.2 * i * offsetFactorX;\n      var y = initialY - i * scaleY;\n      points.push([x, y]);\n    }\n    points.push([initialX, -10]); // final point\n    return points;\n  };\n\n  var getAnimationTimeForParam = (param) => {\n    if (param === 0) {\n      return \"6s\";\n    } else if (param === 1) {\n      return \"7s\";\n    } else if (param === 2) {\n      return \"10s\";\n    } else if (param === 3) {\n      return \"11s\";\n    }\n  };\n\n  var createSVGPath = (path, animation, id, hsl) => {\n    var newPath = document.createElementNS(\n      \"http://www.w3.org/2000/svg\",\n      \"path\"\n    );\n    newPath.setAttributeNS(null, \"class\", animation);\n    newPath.setAttributeNS(null, \"id\", id);\n    newPath.setAttributeNS(null, \"d\", path);\n    // newPath.setAttributeNS(null, \"data-velocity\", velocity);\n\n    var len = newPath.getTotalLength();\n    var path_offset = len;\n    var start = len;\n    var initial = len;\n    var segment_length = len;\n    var end = len * 2;\n\n    newPath.setAttributeNS(\n      null,\n      \"style\",\n      `--h: ${hsl.h * 360};\n      --s: ${hsl.s * 100}%;\n      --l: ${hsl.l * 100}%;\n      --a: 0.5;\n      --stroke-width: ${40 * zoom};\n        --offset: ${path_offset};\n        --start: ${start};\n        --end: ${end};\n        --initial: ${initial};\n        --timeout: ${getAnimationTimeForParam(paramSet)};\n        --segment_length: ${segment_length}`\n    );\n\n    return newPath;\n  };\n\n  var startNoteAnimation = (x, y, id, hsl, svg) => {\n    var steps = width / 65;\n    // where do the notes appear?\n    var points = generatePoints(x, y);\n    var d = svgPath(points, bezierCommand);\n    var path = createSVGPath(d, \"animating\", id, hsl);\n    if (svg) {\n      svg.appendChild(path);\n    }\n  };\n\n  var endAllAnimations = () => {\n    const animating = [...document.querySelectorAll(\".animating\")];\n    let allPaths = animating.length;\n    let removedCount = 0;\n    if (animating.length) {\n      svg = document.querySelector(\".svg\");\n      animating.forEach((path) => {\n        var i = path.id.split(\"-\")[0];\n        const playhead = playheads[i];\n        // console.log(playhead)\n        if (playhead) {\n          endNoteAnimation(path.id, playhead.hsl, svg);\n        } else {\n          svg.removeChild(path);\n        }\n      });\n    }\n\n    const remaining = [...document.querySelectorAll(\".animating\")];\n    remaining.forEach((path) => {\n      svg.removeChild(path);\n    });\n  };\n\n  var endNoteAnimation = (id, hsl, svg) => {\n    var path = document.getElementById(id);\n    if (!path) {\n      // TODO: do this in a cleaner way\n      return;\n    }\n    if (path.classList.contains(\"animatingEnd\")) {\n      return;\n    }\n    var matrix = getComputedStyle(path).getPropertyValue(\"stroke-dasharray\");\n    var dashArrayStart = parseFloat(matrix.split(\"px\")[0], 10);\n\n    var len = path.getTotalLength();\n    var path_offset = len * 2;\n    var start = len;\n    var initial = len;\n    var segment_length = dashArrayStart - len;\n    var end = len + len + segment_length;\n\n    path.setAttributeNS(\n      null,\n      \"style\",\n      `--h: ${hsl.h * 360};\n      --s: ${hsl.s * 100}%;\n      --l: ${hsl.l * 100}%;\n      --a: 0.5;\n      --stroke-width: ${40 * zoom};\n      --offset: ${path_offset};\n      --start: ${start};\n      --end: ${end};\n      --initial: ${initial};\n      --start_transition: ${(start + end) * 0.5};\n      --start_midway: ${(start + end) * 0.5};\n      --timeout2: ${fixedLength ? \"1.5s\" : \"2s\"};\n      --segment_length: ${segment_length}`\n    );\n    path.setAttributeNS(null, \"class\", \"animatingEnd\");\n\n    setTimeout(() => {\n      svg.removeChild(path);\n    }, 1000 * ANIMATION_TIME);\n  };\n\n  var svgPath = (points, command) => {\n    var d = points.reduce(\n      (acc, point, i, a) =>\n        i === 0\n          ? `M ${point[0]},${point[1]}`\n          : `${acc} ${command(point, i, a)}`,\n      \"\"\n    );\n    return d;\n  };\n\n  var line = (pointA, pointB) => {\n    var lengthX = pointB[0] - pointA[0];\n    var lengthY = pointB[1] - pointA[1];\n    return {\n      length: Math.sqrt(Math.pow(lengthX, 2) + Math.pow(lengthY, 2)),\n      angle: Math.atan2(lengthY, lengthX),\n    };\n  };\n\n  var controlPoint = (current, previous, next, reverse) => {\n    var p = previous || current;\n    var n = next || current;\n    // The smoothing ratio\n    var smoothing = 2 * py;\n    // Properties of the opposed-line\n    var o = line(p, n);\n    // If is end-control-point, add PI to the angle to go backward\n    var angle = o.angle + (reverse ? Math.PI : 0);\n    var length = o.length * smoothing;\n    // The control point position is relative to the current point\n    var x = current[0] + Math.cos(angle) * length;\n    var y = current[1] + Math.sin(angle) * length;\n    return [x, y];\n  };\n\n  var bezierCommand = (point, i, a) => {\n    var [cpsX, cpsY] = controlPoint(a[i - 1], a[i - 2], point);\n    var [cpeX, cpeY] = controlPoint(point, a[i - 1], a[i + 1], true);\n    return `C ${cpsX},${cpsY} ${cpeX},${cpeY} ${point[0]},${point[1]}`;\n  };\n\n  return <div></div>;\n};\n","import React, { useCallback } from \"react\";\n\nexport const useAnimationFrame = (callback) => {\n  // Use useRef for mutable variables that we want to persist\n  // without triggering a re-render on their change\n  const requestRef = React.useRef();\n  const previousTimeRef = React.useRef();\n\n  const animate = (time) => {\n    if (previousTimeRef.current != undefined) {\n      const deltaTime = time - previousTimeRef.current;\n      callback.current(deltaTime);\n    }\n    previousTimeRef.current = time;\n    requestRef.current = requestAnimationFrame(animate);\n  };\n\n  React.useEffect(() => {\n    requestRef.current = requestAnimationFrame(animate);\n    return () => cancelAnimationFrame(requestRef.current);\n  }, []); // Make sure the effect runs only once\n};","import { noteMappings, codonNames } from \"../mappings\";\n\nexport const VisualizerMappings = ({\n  playheads,\n  countRefs,\n  activeNodes,\n  playheadCount\n}) => {\n  return (\n    <div className=\"relative\">\n      <div className=\"px-[0.5rem] h-[10rem] rounded-[0.25rem] pt-[0.5rem]\">\n              <div className=\"flex px-[0.5rem] justify-between pb-[0.25rem] text-[#888] text-[0.8rem] select-none\">\n                <p className=\"text-left\">CODON</p>\n                <p className=\"text-center\">AMINO ACID</p>\n                <p className=\"text-right\">NOTE</p>\n              </div>\n        {playheads.map((p, index) => {\n          const note = countRefs[index].current;\n          const node = activeNodes[note];\n          if (node === undefined) return;\n          if (index >= playheadCount) return;\n          return (\n            <div\n              key={index}\n              className=\"flex items-center mb-1 h-[1.85rem]\"\n              style={{\n                opacity: p.playing ? 1 : 0.3,\n              }}\n            >\n              <div className=\"flex\">\n                {node.nucleotide.split(\"\").map((letter, index) => {\n                  return (\n                    <div\n                      key={index}\n                      className=\"box-border text-center uppercase text-[0.8rem]\"\n                      style={{\n                        width: \"0.9rem\",\n                        borderRadius: \"0.25rem\",\n                        height: \"1.8rem\",\n                        lineHeight: \"1.8rem\",\n                      }}\n                    >\n                      {parseInt(node.aminoacid) === -1 ? \"-\" : letter}\n                    </div>\n                  );\n                })}\n              </div>\n              <div\n                className=\"px-[0.25rem] w-[1.5rem] text-center text-[1rem]\"\n                style={{ color: p.color }}\n              >\n                {\">\"}\n              </div>\n              {parseInt(node.aminoacid) === -1 ? (\n                <div className=\"p-[0.25rem] rounded-[0.25rem] text-[0.8rem] w-[7.5rem] text-center box-border\">\n                  n/a\n                </div>\n              ) : (\n                <div className=\"p-[0.25rem] rounded-[0.25rem] text-[0.8rem] w-[7.5rem] text-center box-border\">\n                  {node.aminoacid} = {codonNames[node.aminoacid]}\n                </div>\n              )}\n              <div\n                className=\"px-[0.25rem] w-[1.5rem] text-[1rem]\"\n                style={{ color: p.color }}\n              >\n                {\">\"}\n              </div>\n              <div className=\"px-[0.5rem] text-[0.8rem]\">\n                {parseInt(node.aminoacid) === -1\n                  ? \"-\"\n                  : noteMappings[node.aminoacid]}\n              </div>\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n","import e from\"@babel/runtime/helpers/inheritsLoose\";import t from\"react\";function s(e){return e&&e.stopPropagation&&e.stopPropagation(),e&&e.preventDefault&&e.preventDefault(),!1}function n(e){return null==e?[]:Array.isArray(e)?e.slice():[e]}function i(e){return null!==e&&1===e.length?e[0]:e.slice()}function o(e){Object.keys(e).forEach((t=>{\"undefined\"!=typeof document&&document.addEventListener(t,e[t],!1)}))}function r(e,t){return a(function(e,t){let s=e;s<=t.min&&(s=t.min);s>=t.max&&(s=t.max);return s}(e,t),t)}function a(e,t){const s=(e-t.min)%t.step;let n=e-s;return 2*Math.abs(s)>=t.step&&(n+=s>0?t.step:-t.step),parseFloat(n.toFixed(5))}let p=function(p){function u(e){var a;(a=p.call(this,e)||this).onKeyUp=()=>{a.onEnd()},a.onMouseUp=()=>{a.onEnd(a.getMouseEventMap())},a.onTouchEnd=e=>{e.preventDefault(),a.onEnd(a.getTouchEventMap())},a.onBlur=()=>{a.setState({index:-1},a.onEnd(a.getKeyDownEventMap()))},a.onMouseMove=e=>{a.setState({pending:!0});const t=a.getMousePosition(e),s=a.getDiffPosition(t[0]),n=a.getValueFromPosition(s);a.move(n)},a.onTouchMove=e=>{if(e.touches.length>1)return;a.setState({pending:!0});const t=a.getTouchPosition(e);if(void 0===a.isScrolling){const e=t[0]-a.startPosition[0],s=t[1]-a.startPosition[1];a.isScrolling=Math.abs(s)>Math.abs(e)}if(a.isScrolling)return void a.setState({index:-1});const s=a.getDiffPosition(t[0]),n=a.getValueFromPosition(s);a.move(n)},a.onKeyDown=e=>{if(!(e.ctrlKey||e.shiftKey||e.altKey||e.metaKey))switch(a.setState({pending:!0}),e.key){case\"ArrowLeft\":case\"ArrowDown\":case\"Left\":case\"Down\":e.preventDefault(),a.moveDownByStep();break;case\"ArrowRight\":case\"ArrowUp\":case\"Right\":case\"Up\":e.preventDefault(),a.moveUpByStep();break;case\"Home\":e.preventDefault(),a.move(a.props.min);break;case\"End\":e.preventDefault(),a.move(a.props.max);break;case\"PageDown\":e.preventDefault(),a.moveDownByStep(a.props.pageFn(a.props.step));break;case\"PageUp\":e.preventDefault(),a.moveUpByStep(a.props.pageFn(a.props.step))}},a.onSliderMouseDown=e=>{if(!a.props.disabled&&2!==e.button){if(a.setState({pending:!0}),!a.props.snapDragDisabled){const t=a.getMousePosition(e);a.forceValueFromPosition(t[0],(e=>{a.start(e,t[0]),o(a.getMouseEventMap())}))}s(e)}},a.onSliderClick=e=>{if(!a.props.disabled&&a.props.onSliderClick&&!a.hasMoved){const t=a.getMousePosition(e),s=r(a.calcValue(a.calcOffsetFromPosition(t[0])),a.props);a.props.onSliderClick(s)}},a.createOnKeyDown=e=>t=>{a.props.disabled||(a.start(e),o(a.getKeyDownEventMap()),s(t))},a.createOnMouseDown=e=>t=>{if(a.props.disabled||2===t.button)return;a.setState({pending:!0});const n=a.getMousePosition(t);a.start(e,n[0]),o(a.getMouseEventMap()),s(t)},a.createOnTouchStart=e=>t=>{if(a.props.disabled||t.touches.length>1)return;a.setState({pending:!0});const s=a.getTouchPosition(t);a.startPosition=s,a.isScrolling=void 0,a.start(e,s[0]),o(a.getTouchEventMap()),function(e){e.stopPropagation&&e.stopPropagation()}(t)},a.handleResize=()=>{const e=window.setTimeout((()=>{a.pendingResizeTimeouts.shift(),a.resize()}),0);a.pendingResizeTimeouts.push(e)},a.renderThumb=(e,t)=>{const s=a.props.thumbClassName+\" \"+a.props.thumbClassName+\"-\"+t+\" \"+(a.state.index===t?a.props.thumbActiveClassName:\"\"),n={ref:e=>{a[\"thumb\"+t]=e},key:a.props.thumbClassName+\"-\"+t,className:s,style:e,onMouseDown:a.createOnMouseDown(t),onTouchStart:a.createOnTouchStart(t),onFocus:a.createOnKeyDown(t),tabIndex:0,role:\"slider\",\"aria-orientation\":a.props.orientation,\"aria-valuenow\":a.state.value[t],\"aria-valuemin\":a.props.min,\"aria-valuemax\":a.props.max,\"aria-label\":Array.isArray(a.props.ariaLabel)?a.props.ariaLabel[t]:a.props.ariaLabel,\"aria-labelledby\":Array.isArray(a.props.ariaLabelledby)?a.props.ariaLabelledby[t]:a.props.ariaLabelledby,\"aria-disabled\":a.props.disabled},o={index:t,value:i(a.state.value),valueNow:a.state.value[t]};return a.props.ariaValuetext&&(n[\"aria-valuetext\"]=\"string\"==typeof a.props.ariaValuetext?a.props.ariaValuetext:a.props.ariaValuetext(o)),a.props.renderThumb(n,o)},a.renderTrack=(e,t,s)=>{const n={key:a.props.trackClassName+\"-\"+e,className:a.props.trackClassName+\" \"+a.props.trackClassName+\"-\"+e,style:a.buildTrackStyle(t,a.state.upperBound-s)},o={index:e,value:i(a.state.value)};return a.props.renderTrack(n,o)};let u=n(e.value);u.length||(u=n(e.defaultValue)),a.pendingResizeTimeouts=[];const h=[];for(let t=0;t<u.length;t+=1)u[t]=r(u[t],e),h.push(t);return a.resizeObserver=null,a.resizeElementRef=t.createRef(),a.state={index:-1,upperBound:0,sliderLength:0,value:u,zIndices:h},a}e(u,p);var h=u.prototype;return h.componentDidMount=function(){\"undefined\"!=typeof window&&(this.resizeObserver=new ResizeObserver(this.handleResize),this.resizeObserver.observe(this.resizeElementRef.current),this.resize())},u.getDerivedStateFromProps=function(e,t){const s=n(e.value);return s.length?t.pending?null:{value:s.map((t=>r(t,e)))}:null},h.componentDidUpdate=function(){0===this.state.upperBound&&this.resize()},h.componentWillUnmount=function(){this.clearPendingResizeTimeouts(),this.resizeObserver&&this.resizeObserver.disconnect()},h.onEnd=function(e){e&&function(e){Object.keys(e).forEach((t=>{\"undefined\"!=typeof document&&document.removeEventListener(t,e[t],!1)}))}(e),this.hasMoved&&this.fireChangeEvent(\"onAfterChange\"),this.setState({pending:!1}),this.hasMoved=!1},h.getValue=function(){return i(this.state.value)},h.getClosestIndex=function(e){let t=Number.MAX_VALUE,s=-1;const{value:n}=this.state,i=n.length;for(let o=0;o<i;o+=1){const i=this.calcOffset(n[o]),r=Math.abs(e-i);r<t&&(t=r,s=o)}return s},h.getMousePosition=function(e){return[e[\"page\"+this.axisKey()],e[\"page\"+this.orthogonalAxisKey()]]},h.getTouchPosition=function(e){const t=e.touches[0];return[t[\"page\"+this.axisKey()],t[\"page\"+this.orthogonalAxisKey()]]},h.getKeyDownEventMap=function(){return{keydown:this.onKeyDown,keyup:this.onKeyUp,focusout:this.onBlur}},h.getMouseEventMap=function(){return{mousemove:this.onMouseMove,mouseup:this.onMouseUp}},h.getTouchEventMap=function(){return{touchmove:this.onTouchMove,touchend:this.onTouchEnd}},h.getValueFromPosition=function(e){const t=e/(this.state.sliderLength-this.state.thumbSize)*(this.props.max-this.props.min);return r(this.state.startValue+t,this.props)},h.getDiffPosition=function(e){let t=e-this.state.startPosition;return this.props.invert&&(t*=-1),t},h.resize=function(){const{slider:e,thumb0:t}=this;if(!e||!t)return;const s=this.sizeKey(),n=e.getBoundingClientRect(),i=e[s],o=n[this.posMaxKey()],r=n[this.posMinKey()],a=t.getBoundingClientRect()[s.replace(\"client\",\"\").toLowerCase()],p=i-a,u=Math.abs(o-r);this.state.upperBound===p&&this.state.sliderLength===u&&this.state.thumbSize===a||this.setState({upperBound:p,sliderLength:u,thumbSize:a})},h.calcOffset=function(e){const t=this.props.max-this.props.min;if(0===t)return 0;return(e-this.props.min)/t*this.state.upperBound},h.calcValue=function(e){return e/this.state.upperBound*(this.props.max-this.props.min)+this.props.min},h.calcOffsetFromPosition=function(e){const{slider:t}=this,s=t.getBoundingClientRect(),n=s[this.posMaxKey()],i=s[this.posMinKey()];let o=e-(window[\"page\"+this.axisKey()+\"Offset\"]+(this.props.invert?n:i));return this.props.invert&&(o=this.state.sliderLength-o),o-=this.state.thumbSize/2,o},h.forceValueFromPosition=function(e,t){const s=this.calcOffsetFromPosition(e),n=this.getClosestIndex(s),i=r(this.calcValue(s),this.props),o=this.state.value.slice();o[n]=i;for(let e=0;e<o.length-1;e+=1)if(o[e+1]-o[e]<this.props.minDistance)return;this.fireChangeEvent(\"onBeforeChange\"),this.hasMoved=!0,this.setState({value:o},(()=>{t(n),this.fireChangeEvent(\"onChange\")}))},h.clearPendingResizeTimeouts=function(){do{const e=this.pendingResizeTimeouts.shift();clearTimeout(e)}while(this.pendingResizeTimeouts.length)},h.start=function(e,t){const s=this[\"thumb\"+e];s&&s.focus();const{zIndices:n}=this.state;n.splice(n.indexOf(e),1),n.push(e),this.setState((s=>({startValue:s.value[e],startPosition:void 0!==t?t:s.startPosition,index:e,zIndices:n})))},h.moveUpByStep=function(e){void 0===e&&(e=this.props.step);const t=this.state.value[this.state.index],s=r(this.props.invert&&\"horizontal\"===this.props.orientation?t-e:t+e,this.props);this.move(Math.min(s,this.props.max))},h.moveDownByStep=function(e){void 0===e&&(e=this.props.step);const t=this.state.value[this.state.index],s=r(this.props.invert&&\"horizontal\"===this.props.orientation?t+e:t-e,this.props);this.move(Math.max(s,this.props.min))},h.move=function(e){const t=this.state.value.slice(),{index:s}=this.state,{length:n}=t,i=t[s];if(e===i)return;this.hasMoved||this.fireChangeEvent(\"onBeforeChange\"),this.hasMoved=!0;const{pearling:o,max:r,min:a,minDistance:p}=this.props;if(!o){if(s>0){const n=t[s-1];e<n+p&&(e=n+p)}if(s<n-1){const n=t[s+1];e>n-p&&(e=n-p)}}t[s]=e,o&&n>1&&(e>i?(this.pushSucceeding(t,p,s),function(e,t,s,n){for(let i=0;i<e;i+=1){const o=n-i*s;t[e-1-i]>o&&(t[e-1-i]=o)}}(n,t,p,r)):e<i&&(this.pushPreceding(t,p,s),function(e,t,s,n){for(let i=0;i<e;i+=1){const e=n+i*s;t[i]<e&&(t[i]=e)}}(n,t,p,a))),this.setState({value:t},this.fireChangeEvent.bind(this,\"onChange\"))},h.pushSucceeding=function(e,t,s){let n,i;for(n=s,i=e[n]+t;null!==e[n+1]&&i>e[n+1];n+=1,i=e[n]+t)e[n+1]=a(i,this.props)},h.pushPreceding=function(e,t,s){for(let n=s,i=e[n]-t;null!==e[n-1]&&i<e[n-1];n-=1,i=e[n]-t)e[n-1]=a(i,this.props)},h.axisKey=function(){return\"vertical\"===this.props.orientation?\"Y\":\"X\"},h.orthogonalAxisKey=function(){return\"vertical\"===this.props.orientation?\"X\":\"Y\"},h.posMinKey=function(){return\"vertical\"===this.props.orientation?this.props.invert?\"bottom\":\"top\":this.props.invert?\"right\":\"left\"},h.posMaxKey=function(){return\"vertical\"===this.props.orientation?this.props.invert?\"top\":\"bottom\":this.props.invert?\"left\":\"right\"},h.sizeKey=function(){return\"vertical\"===this.props.orientation?\"clientHeight\":\"clientWidth\"},h.fireChangeEvent=function(e){this.props[e]&&this.props[e](i(this.state.value),this.state.index)},h.buildThumbStyle=function(e,t){const s={position:\"absolute\",touchAction:\"none\",willChange:this.state.index>=0?this.posMinKey():void 0,zIndex:this.state.zIndices.indexOf(t)+1};return s[this.posMinKey()]=e+\"px\",s},h.buildTrackStyle=function(e,t){const s={position:\"absolute\",willChange:this.state.index>=0?this.posMinKey()+\",\"+this.posMaxKey():void 0};return s[this.posMinKey()]=e,s[this.posMaxKey()]=t,s},h.buildMarkStyle=function(e){var t;return(t={position:\"absolute\"})[this.posMinKey()]=e,t},h.renderThumbs=function(e){const{length:t}=e,s=[];for(let n=0;n<t;n+=1)s[n]=this.buildThumbStyle(e[n],n);const n=[];for(let e=0;e<t;e+=1)n[e]=this.renderThumb(s[e],e);return n},h.renderTracks=function(e){const t=[],s=e.length-1;t.push(this.renderTrack(0,0,e[0]));for(let n=0;n<s;n+=1)t.push(this.renderTrack(n+1,e[n],e[n+1]));return t.push(this.renderTrack(s+1,e[s],this.state.upperBound)),t},h.renderMarks=function(){let{marks:e}=this.props;const t=this.props.max-this.props.min+1;return\"boolean\"==typeof e?e=Array.from({length:t}).map(((e,t)=>t)):\"number\"==typeof e&&(e=Array.from({length:t}).map(((e,t)=>t)).filter((t=>t%e==0))),e.map(parseFloat).sort(((e,t)=>e-t)).map((e=>{const t=this.calcOffset(e),s={key:e,className:this.props.markClassName,style:this.buildMarkStyle(t)};return this.props.renderMark(s)}))},h.render=function(){const e=[],{value:s}=this.state,n=s.length;for(let t=0;t<n;t+=1)e[t]=this.calcOffset(s[t],t);const i=this.props.withTracks?this.renderTracks(e):null,o=this.renderThumbs(e),r=this.props.marks?this.renderMarks():null;return t.createElement(\"div\",{ref:e=>{this.slider=e,this.resizeElementRef.current=e},style:{position:\"relative\"},className:this.props.className+(this.props.disabled?\" disabled\":\"\"),onMouseDown:this.onSliderMouseDown,onClick:this.onSliderClick},i,o,r)},u}(t.Component);p.displayName=\"ReactSlider\",p.defaultProps={min:0,max:100,step:1,pageFn:e=>10*e,minDistance:0,defaultValue:0,orientation:\"horizontal\",className:\"slider\",thumbClassName:\"thumb\",thumbActiveClassName:\"active\",trackClassName:\"track\",markClassName:\"mark\",withTracks:!0,pearling:!1,disabled:!1,snapDragDisabled:!1,invert:!1,marks:[],renderThumb:e=>t.createElement(\"div\",e),renderTrack:e=>t.createElement(\"div\",e),renderMark:e=>t.createElement(\"span\",e)};var u=p;export{u as default};\n","import setPrototypeOf from \"./setPrototypeOf.js\";\nexport default function _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  setPrototypeOf(subClass, superClass);\n}","import React from \"react\";\n\nimport { SwitchButtonCenterText } from \"./switchButtonCenterText\";\n\nexport const SpeedToggle = ({ leftOnClick, rightOnClick, value }) => {\n  return <SwitchButtonCenterText\n    leftOnClick={leftOnClick}\n    leftText=\"-\"\n    rightOnClick={rightOnClick}\n    rightText=\"+\"\n    leftStyle={{\n      fontWeight: \"bold\",\n      padding: '0.16rem 0.3rem'\n    }}\n    rightStyle={{\n      fontWeight: \"bold\",\n      padding: '0.16rem 0.3rem'\n    }}\n    value={value}\n  />;\n};\n","import ReactSlider from \"react-slider\";\n\nimport { SwitchButtonCenterText } from \"./switchButtonCenterText\";\n\nimport { SpeedToggle } from \"./speedToggle\";\n\nexport const InstrumentMenu = ({\n  playheads,\n  selectedPlayhead,\n  updatePlayhead,\n  WebMidi,\n  presetMappings,\n  playheadCount,\n  setSelectedPlayhead,\n  updatePlayer\n}) => {\n  const p = playheads[selectedPlayhead]\n  return <div className=\"w-[16.5rem] px-[0.5rem]\">\n    <div className=\"w-full my-[0.5rem] pt-[0.125rem] pb-[0.125rem] text-left text-[0.8rem] select-none uppercase text-[#fff]\"\n      style={{\n        // backgroundColor: p.color,\n      }}\n    >\n      Playhead {selectedPlayhead + 1}: <span><u>{p.preset}</u></span>\n    </div>\n    <div className=\"flex\">\n      <div className=\" flex\">\n        <div className=\"h-[8.5rem] w-[8.2rem]\"\n          style={{border: '1px white solid'}}\n        >\n          {p.midiEnabled ? (\n            <div>\n              <div className=\"flex flex-col overflow-y-scroll h-[8.4rem] w-[8rem]\">\n                {WebMidi &&\n                  WebMidi._outputs.map((midi, index) => {\n                    return (\n                      <button\n                        key={midi._midiOutput.name}\n                        className=\"text-left py-[0.05rem] px-[0.25rem] text-[0.8rem] w-full\"\n                        style={{\n                          backgroundColor:\n                            index ===\n                              p\n                                .midiOutputDevice.index\n                              ? p.color\n                              : \"rgba(0,0,0,0)\",\n                        }}\n                        onClick={() => {\n                          updatePlayhead(selectedPlayhead, {\n                            ...p,\n                            midiOutputDevice: {\n                              name: midi._midiOutput.name,\n                              index,\n                            },\n                          });\n                        }}\n                      >\n                        <p className=\"whitespace-nowrap overflow-hidden\">\n                          {index + 1}: {midi._midiOutput.name}\n                        </p>\n                      </button>\n                    );\n                  })}\n              </div>\n            </div>\n          ) : (\n            <div className=\"\">\n              <div className=\"flex flex-wrap w-[8rem] h-[8.5rem] overflow-y-scroll rounded-[0.25rem]\">\n                {presetMappings.map((preset, index) => {\n                  return (\n                    <div key={index}>\n                      <button\n                        key={index}\n                        className=\"text-left text-[0.8rem] w-[4rem] px-[0.25rem]\"\n                        style={{\n                          backgroundColor:\n                            presetMappings[index].name ===\n                              p.preset\n                              ? p.color\n                              : \"rgba(0,0,0,0)\",\n                        }}\n                        onClick={() => {\n                          updatePlayer(\n                            selectedPlayhead,\n                            presetMappings[index].name\n                          );\n                          updatePlayhead(selectedPlayhead, {\n                            ...p,\n                            preset: presetMappings[index].name,\n                            offset: preset.octave * 12,\n                            legato: preset.legato,\n                            velocity: preset.velocity\n                          });\n                        }}\n                      >\n                        <p className=\"whitespace-nowrap overflow-hidden\">\n                          {preset.name}\n                        </p>\n                      </button>\n                    </div>\n                  );\n                })}\n              </div>\n            </div>\n          )}\n                    <div className=\"w-full text-center\">\n            {p.midiEnabled ?\n              <div className=\"w-full text-center\">\n                <div className=\"py-[0.25rem] px-[1rem] rounded-[0.25rem] text-[0.8rem] text-[#aaa]\">\n                  midi channel = {selectedPlayhead + 1}\n                </div>\n              </div>\n              :\n              <button\n                className=\"hidden w-full mt-[0.25rem] hover:bg-[#444] px-[1rem] rounded-[0.25rem] text-[0.8rem]\"\n                onClick={() => {\n                  const presetIndex = Math.floor(Math.random() * presetMappings.length)\n                  updatePlayer(\n                    selectedPlayhead,\n                    presetMappings[presetIndex].name\n                  );\n                  updatePlayhead(selectedPlayhead, {\n                    ...p, preset: presetMappings[presetIndex].name,\n                  });\n                }}\n              >\n                Random\n              </button>\n            }\n          </div>\n        </div>\n        <div className=\"w-[8rem] px-[0.5rem] flex-col\">\n          <div className=\"flex items-center justify-between mb-[0.5rem]\">\n            <p className=\"text-[#888] text-[0.8rem] select-none uppercase\">\n              Octave\n            </p>\n            <SwitchButtonCenterText\n              leftOnClick={() => {\n                updatePlayhead(selectedPlayhead, {\n                  ...p,\n                  offset: p.offset > -4 * 12 ? p.offset - 12 : p.offset,\n                });\n                setSelectedPlayhead(selectedPlayhead);\n              }}\n              leftStyle={{\n                fontWeight: \"bold\",\n                padding: '0.16rem 0.3rem'\n              }}\n              rightStyle={{\n                fontWeight: \"bold\",\n                padding: '0.16rem 0.3rem'\n              }}\n              rightOnClick={() => {\n                updatePlayhead(selectedPlayhead, {\n                  ...p,\n                  offset: p.offset < 4 * 12 ? p.offset + 12 : p.offset,\n                });\n                setSelectedPlayhead(selectedPlayhead);\n              }}\n              leftText={\"-\"}\n              rightText={\"+\"}\n              value={p.offset / 12}\n            />\n          </div>\n          <div className=\"flex items-center justify-between mb-[0.5rem]\">\n            <p className=\"text-[#888] text-[0.8rem] select-none uppercase\">\n              Length\n            </p>\n            <div className=\"ml-1 bg-[#393939] rounded-[0.25rem] w-[3.75rem]\">\n              <ReactSlider\n                className=\"length-slider\"\n                thumbClassName=\"length-thumb\"\n                trackClassName=\"length-track\"\n                min={0.1}\n                max={1}\n                value={p.legato}\n                step={0.1}\n                onChange={(value) => {\n                  updatePlayhead(selectedPlayhead, {\n                    ...p,\n                    legato: value,\n                  });\n                  setSelectedPlayhead(selectedPlayhead);\n                }}\n                renderThumb={(props, state) => <div {...props}></div>}\n              />\n            </div>\n          </div>\n          <div className=\"flex items-center justify-between mb-[0.5rem]\">\n            <p className=\"text-[#888] text-[0.8rem] select-none uppercase\">\n              Volume\n            </p>\n            <div className=\"ml-1 bg-[#393939] rounded-[0.25rem] w-[3.75rem]\">\n              <ReactSlider\n                className=\"length-slider\"\n                thumbClassName=\"length-thumb\"\n                trackClassName=\"length-track\"\n                min={0.2}\n                max={1.2}\n                value={p.velocity}\n                step={0.1}\n                onChange={(value) => {\n                  updatePlayhead(selectedPlayhead, {\n                    ...p,\n                    velocity: value,\n                  });\n                  setSelectedPlayhead(selectedPlayhead);\n                }}\n                renderThumb={(props, state) => <div {...props}></div>}\n              />\n            </div>\n          </div>\n          <div className=\"flex items-center justify-between mb-[0.5rem]\">\n            <p className=\"text-[#888] text-[0.8rem] select-none uppercase\">\n              Speed\n            </p>\n            <SpeedToggle\n              leftOnClick={() => {\n                updatePlayhead(selectedPlayhead, {\n                  ...p,\n                  interval: p.interval + 1,\n                });\n              }}\n              rightOnClick={() => {\n                updatePlayhead(selectedPlayhead, {\n                  ...p,\n                  interval: p.interval > 1 ? p.interval - 1 : p.interval,\n                });\n              }}\n              value={`${(1 / (p.interval/4)).toFixed(1)}`}\n            />\n          </div>\n          <div className=\"flex items-center justify-between mb-[0.5rem]\">\n            <p className=\"text-[#888] text-[0.8rem] select-none uppercase\">\n              MIDI\n            </p>\n            <label>\n              <button\n                className={`hidden`}\n                onClick={() => {\n                  updatePlayhead(selectedPlayhead, {\n                    ...p,\n                    midiEnabled: !p.midiEnabled,\n                  });\n                }}\n              >\n              </button>\n              <div className={`bg-[#393939] h-[1.5rem] hover:bg-[#444] p-1 w-[2.5rem] rounded-[0.25rem] relative`} style={{ cursor: 'pointer' }}>\n                <div\n                  className={'absolute w-[1rem] h-[1rem] rounded-[0.2rem] transition-translate'}\n                  style={{\n                    left: p.midiEnabled ? '1.3rem' : '0.25rem',\n                    transitionDuration: '100ms',\n                    backgroundColor: '#aaa'\n                  }}\n                >\n                </div>\n              </div>\n            </label>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n}\n\n","export const PlayPauseButton = ({\n  playing,\n  pause,\n  play,\n  stop,\n  counter,\n  showControls\n}) => {\n  return (\n    <div className=\"relative\">\n      <div className=\"flex text-center text-[#888] select-none uppercase\">\n        <button\n          className=\"bg-[#232323] hover:bg-[#353535] w-[3.5rem] text-[1.2rem]\"\n          onClick={() => (playing ? pause() : play())}\n          style={{\n            backgroundColor:\n              playing && ((counter - 1) / 2) % 1 === 0 ? \"#777\" : \"#555\",\n            borderRight: '1px white solid',\n            height: showControls ? '2.5rem' : '3.5rem'\n          }}\n        >\n          <div className=\"pl-[0.1rem] w-[1.2rem] h-[1.2rem] m-auto\">\n            {playing ? (\n              <svg\n                viewBox=\"0 0 30 30\"\n                fill=\"none\"\n                xmlns=\"http://www.w3.org/2000/svg\"\n              >\n                <rect x=\"5\" width=\"7\" height=\"30\" rx=\"2\" fill=\"white\" />\n                <rect x=\"18\" width=\"7\" height=\"30\" rx=\"2\" fill=\"white\" />\n              </svg>\n            ) : (\n              <svg viewBox=\"0 0 28 29\" fill=\"#fff\">\n                <path\n                  d=\"M26.7793 13.1932C27.5007 13.5658 27.5007 14.5975 26.7793 14.9701L1.45812 28.0504C0.792534 28.3942 -0.000834731 27.9111 -0.000834699 27.162L-0.000833555 1.00134C-0.000833522 0.252187 0.792537 -0.23095 1.45812 0.112876L26.7793 13.1932Z\"\n                  fill=\"#fff\"\n                />\n              </svg>\n            )}\n          </div>\n        </button>\n        <button\n          className=\"bg-[#232323] hover:bg-[#353535] h-[2.5rem] w-[3.5rem] text-[1.2rem]\"\n          onClick={stop}\n          style={{\n            borderRight: '1px white solid',\n            height: showControls ? '2.5rem' : '3.5rem'\n          }}\n        >\n          <div className=\"w-[1rem] h-[1rem] m-auto\">\n            <svg\n              viewBox=\"0 0 30 30\"\n              fill=\"none\"\n              xmlns=\"http://www.w3.org/2000/svg\"\n            >\n              <rect width=\"30\" height=\"30\" rx=\"3\" fill=\"white\" />\n            </svg>\n          </div>\n        </button>\n      </div>\n    </div>\n  );\n};\n","export const RemixButton = ({ onclick }) => {\n  return (\n    <div className=\"px-[0.5rem] remix\">\n      <div\n        onClick={() => {\n          onclick();\n        }}\n      >\n        <button className=\"h-[2rem] w-[2rem]  hover:bg-[#666] rounded-[0.25rem]\">\n          <div className=\"ml-[0.5rem] m-auto\">\n            <svg\n              width=\"1rem\"\n              height=\"1rem\"\n              viewBox=\"0 0 30 30\"\n              fill=\"#ddd\"\n              xmlns=\"http://www.w3.org/2000/svg\"\n            >\n              <path\n                fillRule=\"evenodd\"\n                clipRule=\"evenodd\"\n                d=\"M0 3C0 1.34314 1.34375 0 3 0H27C28.6562 0 30 1.34314 30 3V27C30 28.6569 28.6562 30 27 30H3C1.34375 30 0 28.6569 0 27V3ZM13 9.5C13 11.433 11.4336 13 9.5 13C7.56641 13 6 11.433 6 9.5C6 7.56702 7.56641 6 9.5 6C11.4336 6 13 7.56702 13 9.5ZM21.5 13C23.4336 13 25 11.433 25 9.5C25 7.56702 23.4336 6 21.5 6C19.5664 6 18 7.56702 18 9.5C18 11.433 19.5664 13 21.5 13ZM13 21.5C13 23.433 11.4336 25 9.5 25C7.56641 25 6 23.433 6 21.5C6 19.567 7.56641 18 9.5 18C11.4336 18 13 19.567 13 21.5ZM21.5 25C23.4336 25 25 23.433 25 21.5C25 19.567 23.4336 18 21.5 18C19.5664 18 18 19.567 18 21.5C18 23.433 19.5664 25 21.5 25Z\"\n                fill=\"#ddd\"\n              />\n            </svg>\n          </div>\n        </button>\n      </div>\n    </div>\n  );\n};\n","import React from \"react\";\n\nexport const SwitchButton = ({\n  leftText,\n  leftOnClick,\n  rightText,\n  rightOnClick,\n  leftStyle,\n  rightStyle,\n}) => {\n  return (\n    <div className=\"flex items-center\">\n      <button\n        className={`font-bold bg-[#232323] hover:bg-[#353535] \n      p-1 w-[2rem] rounded-l-[0.25rem]`}\n        style={leftStyle}\n        onClick={leftOnClick}\n      >\n        {leftText}\n      </button>\n      <button\n        className=\"font-bold bg-[#232323] hover:bg-[#353535] p-1 w-[2rem] rounded-r-[0.25rem]\"\n        style={rightStyle}\n        onClick={rightOnClick}\n      >\n        {rightText}\n      </button>\n    </div>\n  );\n};\n","import React from \"react\";\n\nexport const ToggleVerticalButton = ({\n  playhead,\n  onClick,\n  activeNotes,\n  index,\n}) => {\n  return (\n    <div className=\"flex items-center\">\n      <label>\n        <button\n          className={`hidden`}\n          onClick={onClick}\n        >\n          {playhead.playing ? 'on' : 'off'}\n        </button>\n        <div className={`w-[1.85rem] bg-[#232323] hover:bg-[#353535] \n        p-[0.25rem] h-[2.75rem] ml-[0.5rem] rounded-[0.25rem] relative`} style={{ cursor: 'pointer' }}>\n          <div\n            className={'absolute w-[1.35rem] h-[1.35rem] rounded-[0.4rem] transition-translate'}\n            style={{\n              // backgroundColor: playhead.playing ? playhead.color : ,\n              bottom: playhead.playing ? '1.3rem' : '0.125rem',\n              transitionDuration: '100ms',\n              // backgroundColor: `hsl(${playhead.hsl.h*360},${playhead.hsl.s*100}%,${playhead.hsl.l})`\n              backgroundColor: playhead.playing\n                ? // ? playing && ((counter - 1) / 2) % 1 === 0 ? `hsla(${playhead.hsl.h * 360},${playhead.hsl.s * 100}%,${playhead.hsl.l * 100\n                playhead.playing && activeNotes[index].current\n                  ? `hsla(${playhead.hsl.h * 0},${playhead.hsl.s * 100}%,100%,1)`\n                  : `hsla(${playhead.hsl.h * 360},${playhead.hsl.s * 100}%,${playhead.hsl.l * 100\n                  }%,1)`\n                : '#aaaaaa',\n              transition: activeNotes[index].current\n                ? \"background-color 100ms linear\" : \"background-color 10ms linear\"\n            }}\n          >\n          </div>\n        </div>\n      </label>\n    </div>\n  );\n};\n","import ReactSlider from \"react-slider\";\n\nimport { PlayPauseButton } from \"./playPauseButton\";\nimport { RemixButton } from \"./remixButton\";\nimport { SwitchButton } from \"./switchButton\";\nimport { updateEuclid } from \"../playhead\";\nimport { generatePattern } from \"../helpers\";\n\nimport { ToggleVerticalButton } from \"./toggleVerticalButton\";\n\nexport const SequencerSettings = ({\n  playing,\n  counter,\n  play,\n  pause,\n  bpm,\n  stop,\n  updateTempo,\n  setPlayheads,\n  masterSteps,\n  setMasterSteps,\n  playheads,\n  setNoteOffset,\n  noteOffset,\n  zoom,\n  setZoom,\n  updatePlayhead,\n  showControls,\n  setShowControls,\n  activeNotes,\n  setShowControlsTransition,\n  setShowHelp,\n}) => {\n  return (\n    <div className=\"flex z-[9999]\">\n      <div className=\"flex items-center justify-between\"\n        style={{\n          border: \"1px white solid\",\n          width: showControls ? '37.5rem' : '55rem'\n        }}>\n        <PlayPauseButton\n          playing={playing}\n          counter={counter}\n          play={() => {\n            play();\n          }}\n          pause={pause}\n          stop={stop}\n          showControls={showControls}\n        />\n        <div>\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center\">\n              {!showControls && (\n                <div\n                  className=\"flex\"\n                >\n                  {playheads.map((p, index) => {\n                    return (\n                      <div key={index} className=\"\">\n                        <ToggleVerticalButton\n                          onClick={() => {\n                            updatePlayhead(index, { ...p, playing: !p.playing });\n                          }}\n                          playhead={p}\n                          index={index}\n                          activeNotes={activeNotes}\n                        />\n                      </div>\n                    );\n                  })}\n                </div>\n              )}\n              <div className=\"flex mr-[2rem] items-center\">\n                <div className=\"leading-[1rem] text-[#888] w-[3rem] text-center\"\n                  style={{ marginLeft: showControls ? '0rem' : '0.5rem' }}\n                >\n                  <p className=\"text-[0.7rem]\">BPM</p>\n                  <p className=\"text-[#fff] text-[1rem] mt-[-0.15rem]\">{bpm / 2}</p>\n                </div>\n                <div className=\"rounded-[0.25rem]\"\n                  style={{\n                    width: showControls ? '8rem' : '10rem',\n                    marginRight: showControls ? '0rem' : '1.25rem',\n                  }}\n                >\n                  <ReactSlider\n                    className={showControls ? 'tempo-slider' : 'tempo-slider expanded'}\n                    thumbClassName={showControls ? 'tempo-thumb' : 'tempo-thumb expanded'}\n                    trackClassName={showControls ? 'tempo-track' : 'tempo-track expanded'}\n                    min={60}\n                    max={300}\n                    step={1}\n                    value={bpm}\n                    onChange={(value) => {\n                      updateTempo(value);\n                    }}\n                  ></ReactSlider>\n                </div>\n              </div>\n              {\n                showControls && <div className=\"flex items-center mr-[1rem]\">\n                  <div className=\"leading-[1rem] px-1 ml-[0.5rem] text-[#888] text-center\">\n                    <p className=\"text-[0.7rem]\">METER</p>\n                    <p className=\"text-[#fff] text-[1rem] mt-[-0.15rem]\">\n                      {masterSteps}/4\n                    </p>\n                  </div>\n                  <SwitchButton\n                    leftOnClick={() => {\n                      if (masterSteps > 3) {\n                        let updated = [];\n                        for (let i = 0; i < playheads.length; i++) {\n                          const cur = playheads[i];\n                          updated.push(\n                            updateEuclid({\n                              ...cur,\n                              steps: masterSteps - 1,\n                            })\n                          );\n                        }\n                        setPlayheads(updated);\n                        setMasterSteps(masterSteps - 1);\n                      }\n                    }}\n                    rightOnClick={() => {\n                      if (masterSteps < 16) {\n                        let updated = [];\n                        for (let i = 0; i < playheads.length; i++) {\n                          const cur = playheads[i];\n                          updated.push(\n                            updateEuclid({\n                              ...cur,\n                              steps: masterSteps + 1,\n                            })\n                          );\n                        }\n                        setPlayheads(updated);\n                        setMasterSteps(masterSteps + 1);\n                      }\n                    }}\n                    leftStyle={{\n                      opacity: masterSteps > 3 ? 1 : 0.3,\n                      fontWeight: \"bold\",\n                    }}\n                    rightStyle={{\n                      opacity: masterSteps < 16 ? 1 : 0.3,\n                      fontWeight: \"bold\",\n                    }}\n                    leftText={\"<\"}\n                    rightText={\">\"}\n                  />\n                </div>\n              }\n            </div>\n\n            {\n              false && <div className=\"flex items-center\">\n                <div className=\"leading-[1rem] ml-[0.125rem] pl-[0.5rem] pr-[0.25rem] text-[#888] w-[2.7rem] text-center\">\n                  <p className=\"text-[0.7rem]\">ZOOM</p>\n                  <p className=\"text-[#fff] text-[1rem] mt-[-0.15rem]\">\n                    {zoom.toFixed(2)}\n                  </p>\n                </div>\n                <div className=\"rounded-[0.25rem] w-[5rem] mr-[0.3rem]\">\n                  <ReactSlider\n                    className=\"tempo-slider\"\n                    thumbClassName=\"tempo-thumb\"\n                    trackClassName=\"tempo-track\"\n                    min={0.3}\n                    max={1}\n                    step={0.01}\n                    value={zoom}\n                    onChange={(value) => {\n                      setZoom(value);\n                    }}\n                  ></ReactSlider>\n                </div>\n              </div>\n            }\n            <button\n              className=\"bg-[#232323] hover:bg-[#353535] w-[3.5rem] text-[1.2rem]\"\n              onClick={() => {\n                setShowHelp(false);\n                setShowControls(!showControls);\n                setShowControlsTransition(true);\n                setTimeout(() => {\n                  setShowControlsTransition(false);\n                }, 400);\n              }}\n              style={{\n                borderLeft: '1px white solid',\n                height: showControls ? '2.5rem' : '3.5rem'\n              }}\n            >\n              <div className=\"w-[1.4rem] h-[1.4rem] m-auto\"\n                style={{\n                  transform: showControls ? 'rotate(180deg)' : 'rotate(0)'\n                }}\n              >\n                <svg viewBox=\"0 0 39 39\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                  <mask id=\"mask0_317_1325\" style={{ maskType: 'alpha' }} maskUnits=\"userSpaceOnUse\" x=\"0\" y=\"0\" width=\"39\" height=\"39\">\n                    <rect x=\"0.619141\" y=\"0.574219\" width=\"38.335\" height=\"38.335\" fill=\"#D9D9D9\" />\n                  </mask>\n                  <g mask=\"url(#mask0_317_1325)\">\n                    <mask id=\"mask1_317_1325\" style={{ maskType: 'alpha' }} maskUnits=\"userSpaceOnUse\" x=\"0\" y=\"21\" width=\"39\" height=\"15\">\n                      <rect width=\"38.2188\" height=\"14.0137\" transform=\"matrix(1 0 0 -1 0.677734 35.0669)\" fill=\"#D9D9D9\" />\n                    </mask>\n                    <g mask=\"url(#mask1_317_1325)\">\n                      <rect width=\"22.3832\" height=\"5.39961\" transform=\"matrix(0.785731 0.618568 -0.785731 0.618568 20.5215 21.2012)\" fill=\"white\" />\n                      <rect width=\"22.3832\" height=\"5.39961\" transform=\"matrix(-0.785731 0.618568 -0.785731 -0.618568 24.7646 24.5425)\" fill=\"white\" />\n                    </g>\n                    <mask id=\"mask2_317_1325\" style={{ maskType: 'alpha' }} maskUnits=\"userSpaceOnUse\" x=\"0\" y=\"4\" width=\"39\" height=\"15\">\n                      <rect width=\"38.2188\" height=\"14.0137\" transform=\"matrix(1 0 0 -1 0.677734 18.4307)\" fill=\"#D9D9D9\" />\n                    </mask>\n                    <g mask=\"url(#mask2_317_1325)\">\n                      <rect width=\"22.3832\" height=\"5.39961\" transform=\"matrix(0.785731 0.618568 -0.785731 0.618568 20.5215 4.56494)\" fill=\"white\" />\n                      <rect width=\"22.3832\" height=\"5.39961\" transform=\"matrix(-0.785731 0.618568 -0.785731 -0.618568 24.7646 7.90625)\" fill=\"white\" />\n                    </g>\n                  </g>\n                </svg>\n              </div>\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n","export const factoryPresets = [\n  {\n    name: 'bio bachata',\n    author: 'karyo',\n    bpm: 185,\n    steps: 8,\n    keyOffset: 0,\n    sequence: 'hello world',\n    sequenceBounds: false,\n    playheads: [\n      {\n        playing: true, events: 5, rotation: 7, offset: 0, legato: 0.4, preset: \"guitar\", velocity: 0.7,\n      },\n      {\n        playing: true, events: 5, rotation: 0, offset: 0, legato: 0.7, preset: \"woodblock\", velocity: 0.,\n      },\n      {\n        playing: true, events: 3, rotation: 1, offset: -24, legato: 0.7, preset: \"bass\", velocity: 0.7,\n      },\n      {\n        playing: false, events: 2, rotation: 1, offset: -24, legato: 0.5, preset: \"kick2\", velocity: 0.9,\n      },\n      {\n        playing: true, events: 3, rotation: 5, offset: -24, legato: 0.1, preset: \"kick\", velocity: 0.9,\n      },\n    ]\n  },\n  {\n    \"name\": \"mutaded melody\",\n    \"author\": \"karyo\",\n    \"bpm\": 125,\n    \"steps\": 16,\n    \"keyOffset\": -1,\n    \"userSequence\": \"rainbows\",\n    \"playheads\": [\n      {\n        \"playing\": true,\n        \"events\": 4,\n        \"rotation\": 0,\n        \"offset\": 12,\n        \"legato\": 0.2,\n        \"preset\": \"synth\",\n        \"interval\": 6\n      },\n      {\n        \"playing\": true,\n        \"events\": 2,\n        \"rotation\": 1,\n        \"offset\": 0,\n        \"legato\": 0.2,\n        \"preset\": \"synth\",\n        \"interval\": 5\n      },\n      {\n        \"playing\": true,\n        \"events\": 3,\n        \"rotation\": 2,\n        \"offset\": -12,\n        \"legato\": 0.2,\n        \"preset\": \"synth\",\n        \"interval\": 4\n      },\n      {\n        \"playing\": true,\n        \"events\": 2,\n        \"rotation\": 3,\n        \"offset\": -24,\n        \"legato\": 0.5,\n        \"preset\": \"kick2\",\n        \"interval\": 3\n      },\n      {\n        \"playing\": true,\n        \"events\": 2,\n        \"rotation\": 4,\n        \"offset\": -12,\n        \"legato\": 0.2,\n        \"preset\": \"synth\",\n        \"interval\": 2\n      }\n    ]\n  },\n  {\n    \"name\": \"cell conversation\",\n    \"author\": \"karyo\",\n    \"bpm\": 233,\n    \"steps\": 8,\n    \"keyOffset\": 0,\n    \"userSequence\": \"mitochondria\",\n    \"playheads\": [\n      {\n        \"playing\": true,\n        \"events\": 5,\n        \"rotation\": 7,\n        \"offset\": 0,\n        \"legato\": 0.7,\n        \"preset\": \"choir\",\n        \"interval\": 4\n      },\n      {\n        \"playing\": true,\n        \"events\": 5,\n        \"rotation\": 0,\n        \"offset\": 0,\n        \"legato\": 0.5,\n        \"preset\": \"choir\",\n        \"interval\": 4\n      },\n      {\n        \"playing\": false,\n        \"events\": 3,\n        \"rotation\": 1,\n        \"offset\": -12,\n        \"legato\": 0.5,\n        \"preset\": \"choir\",\n        \"interval\": 4\n      },\n      {\n        \"playing\": false,\n        \"events\": 2,\n        \"rotation\": 1,\n        \"offset\": -24,\n        \"legato\": 0.5,\n        \"preset\": \"kick2\",\n        \"interval\": 4\n      },\n      {\n        \"playing\": false,\n        \"events\": 3,\n        \"rotation\": 5,\n        \"offset\": -24,\n        \"legato\": 0.1,\n        \"preset\": \"kick\",\n        \"interval\": 4\n      }\n    ]\n  },\n  {\n    name: 'cell genesis',\n    author: 'karyo',\n    \"bpm\": 180,\n    \"steps\": 8,\n    \"keyOffset\": 0,\n    \"userSequence\": \"\",\n    \"playheads\": [\n      {\n        \"playing\": true,\n        \"events\": 5,\n        \"rotation\": 0,\n        \"offset\": 0,\n        \"legato\": 0.6,\n        \"preset\": \"guitar\"\n      },\n      {\n        \"playing\": false,\n        \"events\": 3,\n        \"rotation\": 0,\n        \"offset\": 12,\n        \"legato\": 0.4,\n        \"preset\": \"kalimba\"\n      },\n      {\n        \"playing\": false,\n        \"events\": 3,\n        \"rotation\": 1,\n        \"offset\": 0,\n        \"legato\": 0.3,\n        \"preset\": \"flute\"\n      },\n      {\n        \"playing\": false,\n        \"events\": 2,\n        \"rotation\": 0,\n        \"offset\": -24,\n        \"legato\": 1,\n        \"preset\": \"bass\"\n      },\n      {\n        \"playing\": false,\n        \"events\": 3,\n        \"rotation\": 0,\n        \"offset\": 0,\n        \"legato\": 0.5,\n        \"preset\": \"xylophone\"\n      }\n    ]\n  },\n  {\n    \"name\": \"all low end\",\n    \"author\": \"karyo\",\n    \"bpm\": 168,\n    \"steps\": 8,\n    \"keyOffset\": 0,\n    \"userSequence\": \"kalimbas\",\n    \"playheads\": [\n      {\n        \"playing\": true,\n        \"events\": 3,\n        \"rotation\": 4,\n        \"offset\": -24,\n        \"legato\": 0.5,\n        \"preset\": \"bass\"\n      },\n      {\n        \"playing\": true,\n        \"events\": 1,\n        \"rotation\": 2,\n        \"offset\": -24,\n        \"legato\": 0.6,\n        \"preset\": \"bass\"\n      },\n      {\n        \"playing\": true,\n        \"events\": 2,\n        \"rotation\": 1,\n        \"offset\": -24,\n        \"legato\": 0.5,\n        \"preset\": \"bass\"\n      },\n      {\n        \"playing\": false,\n        \"events\": 5,\n        \"rotation\": 2,\n        \"offset\": -24,\n        \"legato\": 0.5,\n        \"preset\": \"kick2\"\n      },\n      {\n        \"playing\": false,\n        \"events\": 2,\n        \"rotation\": 0,\n        \"offset\": -24,\n        \"legato\": 0.1,\n        \"preset\": \"kick\"\n      }\n    ]\n  },\n  {\n    \"name\": \"kalimbas!\",\n    \"author\": \"karyo\",\n    \"bpm\": 199,\n    \"steps\": 8,\n    \"keyOffset\": 0,\n    \"userSequence\": \"leucine\",\n    \"playheads\": [\n      {\n        \"playing\": true,\n        \"events\": 4,\n        \"rotation\": 4,\n        \"offset\": 12,\n        \"legato\": 0.4,\n        \"preset\": \"kalimba\"\n      },\n      {\n        \"playing\": true,\n        \"events\": 2,\n        \"rotation\": 4,\n        \"offset\": -12,\n        \"legato\": 0.4,\n        \"preset\": \"kalimba\"\n      },\n      {\n        \"playing\": false,\n        \"events\": 2,\n        \"rotation\": 3,\n        \"offset\": 0,\n        \"legato\": 0.4,\n        \"preset\": \"kalimba\"\n      },\n      {\n        \"playing\": false,\n        \"events\": 3,\n        \"rotation\": 3,\n        \"offset\": 0,\n        \"legato\": 0.4,\n        \"preset\": \"woodblock\"\n      },\n      {\n        \"playing\": false,\n        \"events\": 3,\n        \"rotation\": 0,\n        \"offset\": -24,\n        \"legato\": 0.1,\n        \"preset\": \"kick\"\n      }\n    ]\n  },\n  {\n    \"name\": \"mallets^2\",\n    \"author\": \"karyo\",\n    \"bpm\": 137,\n    \"steps\": 9,\n    \"keyOffset\": 2,\n    \"userSequence\": \"leucine\",\n    \"playheads\": [\n      {\n        \"playing\": true,\n        \"events\": 8,\n        \"rotation\": 6,\n        \"offset\": 0,\n        \"legato\": 0.4,\n        \"preset\": \"vibe\"\n      },\n      {\n        \"playing\": true,\n        \"events\": 4,\n        \"rotation\": 8,\n        \"offset\": -12,\n        \"legato\": 0.4,\n        \"preset\": \"xylophone\"\n      },\n      {\n        \"playing\": true,\n        \"events\": 6,\n        \"rotation\": 7,\n        \"offset\": 0,\n        \"legato\": 0.4,\n        \"preset\": \"xylophone\"\n      },\n      {\n        \"playing\": true,\n        \"events\": 1,\n        \"rotation\": 6,\n        \"offset\": 0,\n        \"legato\": 0.4,\n        \"preset\": \"woodblock\"\n      },\n      {\n        \"playing\": true,\n        \"events\": 5,\n        \"rotation\": 6,\n        \"offset\": -24,\n        \"legato\": 0.1,\n        \"preset\": \"kick\"\n      }\n    ]\n  },\n]","import { factoryPresets } from \"../presets\";\nimport { updateEuclid } from \"../playhead\";\n\nimport { generatePattern } from \"../helpers\";\n\nimport { RemixButton } from \"./remixButton\";\n\nimport { SwitchButton } from \"./switchButton\";\n\nexport const PresetMenu = ({\n  playheads,\n  updatePlayer,\n  setPlayheads,\n  updateTempo,\n  setMasterSteps,\n  setNoteOffset,\n  noteOffset,\n}) => {\n  const updatePlayheads = (preset) => {\n    let updated = [];\n    for (let i = 0; i < preset.playheads.length; i++) {\n      const p = preset.playheads[i];\n      const current = playheads[i];\n      updated.push(\n        updateEuclid({\n          ...current,\n          interval: p.interval ? p.interval : 4,\n          steps: preset.steps,\n          events: p.events,\n          rotation: p.rotation,\n          playing: p.playing,\n          offset: p.offset,\n          legato: p.legato,\n          preset: p.preset,\n          velocity: p.velocity,\n        })\n      );\n    }\n    setPlayheads(updated);\n    updateTempo(preset.bpm);\n    setMasterSteps(preset.steps);\n    setNoteOffset(preset.keyOffset);\n  };\n\n  return (\n    <div className=\"px-[0.5rem]\">\n      <div className=\"flex justify-between w-full pt-[0.5rem] px-[0.5rem] pb-[0.25rem] text-[#888] text-[0.8rem] select-none\">\n        <p className=\"text-left\">NAME</p>\n        <p className=\"text-right\">AUTHOR</p>\n      </div>\n      <div className=\"h-[8rem] overflow-y-scroll w-full bg-[#222]\"\n        style={{\n          border: '1px white solid'\n        }}\n      >\n        <div className=\"flex flex-wrap mx-auto h-[6rem]\"\n        >\n          {factoryPresets.map((preset, index) => {\n            return (\n              <div className=\"bg-[#181818]\">\n                <label className=\"cursor-pointer\">\n                  <button\n                    key={index}\n                    className=\"hidden text-left justify-between text-[0.8rem] w-[15.5em]\"\n                    style={{\n                      backgroundColor: \"rgba(0,0,0,0)\",\n                    }}\n                    onClick={() => {\n                      console.log(preset);\n                      updatePlayheads(preset);\n                    }}\n                  ></button>\n                  <div className=\"flex px-[0.75rem] py-[0.2rem] justify-between text-[0.8rem] w-[15.25rem]\">\n                    <p className=\"whitespace-nowrap overflow-hidden\">\n                      {preset.name}\n                    </p>\n                    <p className=\"whitespace-nowrap overflow-hidden\">\n                      {preset.author}\n                    </p>\n                  </div>\n                </label>\n              </div>\n            );\n          })}\n        </div>\n      </div>\n      <div className=\"flex justify-between w-[100%] px-[0.5rem] pt-[0.25rem] text-left pb-[0.25rem] uppercase text-[0.8rem] select-none\">\n        <div>\n          <button className=\"text-[#fff] bg-[#232323] hover:bg-[#353535] py-[0.25rem] px-2 text-left rounded-[0.25rem]\"\n            onClick={() =>\n              generatePattern({\n                playheads,\n                updateTempo,\n                setNoteOffset,\n                setMasterSteps,\n                setPlayheads,\n              })\n            }\n          >\n            Randomize!\n          </button>\n        </div>\n        <div className=\"flex items-center\">\n          <div className=\"leading-[1rem] ml-[0.25rem] px-2 text-[#888] text-center\">\n            <p className=\"text-[0.7rem]\">KEY</p>\n            <p className=\"text-[#fff] text-[1rem] mt-[-0.15rem]\">\n              {noteOffset}\n            </p>\n          </div>\n          <SwitchButton\n            leftOnClick={() =>\n              setNoteOffset(noteOffset > -12 ? noteOffset - 1 : noteOffset)\n            }\n            rightOnClick={() =>\n              setNoteOffset(noteOffset < 12 ? noteOffset + 1 : noteOffset)\n            }\n            leftText={\"-\"}\n            rightText={\"+\"}\n          />\n\n        </div>\n      </div>\n    </div>\n  );\n};\n","/**\n * @typedef {import('hast').Nodes} Nodes\n */\n\n// HTML whitespace expression.\n// See <https://infra.spec.whatwg.org/#ascii-whitespace>.\nconst re = /[ \\t\\n\\f\\r]/g\n\n/**\n * Check if the given value is *inter-element whitespace*.\n *\n * @param {Nodes | string} thing\n *   Thing to check (`Node` or `string`).\n * @returns {boolean}\n *   Whether the `value` is inter-element whitespace (`boolean`): consisting of\n *   zero or more of space, tab (`\\t`), line feed (`\\n`), carriage return\n *   (`\\r`), or form feed (`\\f`); if a node is passed it must be a `Text` node,\n *   whose `value` field is checked.\n */\nexport function whitespace(thing) {\n  return typeof thing === 'object'\n    ? thing.type === 'text'\n      ? empty(thing.value)\n      : false\n    : empty(thing)\n}\n\n/**\n * @param {string} value\n * @returns {boolean}\n */\nfunction empty(value) {\n  return value.replace(re, '') === ''\n}\n","/**\n * @typedef {import('./info.js').Info} Info\n * @typedef {Record<string, Info>} Properties\n * @typedef {Record<string, string>} Normal\n */\n\nexport class Schema {\n  /**\n   * @constructor\n   * @param {Properties} property\n   * @param {Normal} normal\n   * @param {string} [space]\n   */\n  constructor(property, normal, space) {\n    this.property = property\n    this.normal = normal\n    if (space) {\n      this.space = space\n    }\n  }\n}\n\n/** @type {Properties} */\nSchema.prototype.property = {}\n/** @type {Normal} */\nSchema.prototype.normal = {}\n/** @type {string|null} */\nSchema.prototype.space = null\n","/**\n * @typedef {import('./schema.js').Properties} Properties\n * @typedef {import('./schema.js').Normal} Normal\n */\n\nimport {Schema} from './schema.js'\n\n/**\n * @param {Schema[]} definitions\n * @param {string} [space]\n * @returns {Schema}\n */\nexport function merge(definitions, space) {\n  /** @type {Properties} */\n  const property = {}\n  /** @type {Normal} */\n  const normal = {}\n  let index = -1\n\n  while (++index < definitions.length) {\n    Object.assign(property, definitions[index].property)\n    Object.assign(normal, definitions[index].normal)\n  }\n\n  return new Schema(property, normal, space)\n}\n","/**\n * @param {string} value\n * @returns {string}\n */\nexport function normalize(value) {\n  return value.toLowerCase()\n}\n","export class Info {\n  /**\n   * @constructor\n   * @param {string} property\n   * @param {string} attribute\n   */\n  constructor(property, attribute) {\n    /** @type {string} */\n    this.property = property\n    /** @type {string} */\n    this.attribute = attribute\n  }\n}\n\n/** @type {string|null} */\nInfo.prototype.space = null\nInfo.prototype.boolean = false\nInfo.prototype.booleanish = false\nInfo.prototype.overloadedBoolean = false\nInfo.prototype.number = false\nInfo.prototype.commaSeparated = false\nInfo.prototype.spaceSeparated = false\nInfo.prototype.commaOrSpaceSeparated = false\nInfo.prototype.mustUseProperty = false\nInfo.prototype.defined = false\n","let powers = 0\n\nexport const boolean = increment()\nexport const booleanish = increment()\nexport const overloadedBoolean = increment()\nexport const number = increment()\nexport const spaceSeparated = increment()\nexport const commaSeparated = increment()\nexport const commaOrSpaceSeparated = increment()\n\nfunction increment() {\n  return 2 ** ++powers\n}\n","import {Info} from './info.js'\nimport * as types from './types.js'\n\n/** @type {Array<keyof types>} */\n// @ts-expect-error: hush.\nconst checks = Object.keys(types)\n\nexport class DefinedInfo extends Info {\n  /**\n   * @constructor\n   * @param {string} property\n   * @param {string} attribute\n   * @param {number|null} [mask]\n   * @param {string} [space]\n   */\n  constructor(property, attribute, mask, space) {\n    let index = -1\n\n    super(property, attribute)\n\n    mark(this, 'space', space)\n\n    if (typeof mask === 'number') {\n      while (++index < checks.length) {\n        const check = checks[index]\n        mark(this, checks[index], (mask & types[check]) === types[check])\n      }\n    }\n  }\n}\n\nDefinedInfo.prototype.defined = true\n\n/**\n * @param {DefinedInfo} values\n * @param {string} key\n * @param {unknown} value\n */\nfunction mark(values, key, value) {\n  if (value) {\n    // @ts-expect-error: assume `value` matches the expected value of `key`.\n    values[key] = value\n  }\n}\n","/**\n * @typedef {import('./schema.js').Properties} Properties\n * @typedef {import('./schema.js').Normal} Normal\n *\n * @typedef {Record<string, string>} Attributes\n *\n * @typedef {Object} Definition\n * @property {Record<string, number|null>} properties\n * @property {(attributes: Attributes, property: string) => string} transform\n * @property {string} [space]\n * @property {Attributes} [attributes]\n * @property {Array<string>} [mustUseProperty]\n */\n\nimport {normalize} from '../normalize.js'\nimport {Schema} from './schema.js'\nimport {DefinedInfo} from './defined-info.js'\n\nconst own = {}.hasOwnProperty\n\n/**\n * @param {Definition} definition\n * @returns {Schema}\n */\nexport function create(definition) {\n  /** @type {Properties} */\n  const property = {}\n  /** @type {Normal} */\n  const normal = {}\n  /** @type {string} */\n  let prop\n\n  for (prop in definition.properties) {\n    if (own.call(definition.properties, prop)) {\n      const value = definition.properties[prop]\n      const info = new DefinedInfo(\n        prop,\n        definition.transform(definition.attributes || {}, prop),\n        value,\n        definition.space\n      )\n\n      if (\n        definition.mustUseProperty &&\n        definition.mustUseProperty.includes(prop)\n      ) {\n        info.mustUseProperty = true\n      }\n\n      property[prop] = info\n\n      normal[normalize(prop)] = prop\n      normal[normalize(info.attribute)] = prop\n    }\n  }\n\n  return new Schema(property, normal, definition.space)\n}\n","import {create} from './util/create.js'\n\nexport const xlink = create({\n  space: 'xlink',\n  transform(_, prop) {\n    return 'xlink:' + prop.slice(5).toLowerCase()\n  },\n  properties: {\n    xLinkActuate: null,\n    xLinkArcRole: null,\n    xLinkHref: null,\n    xLinkRole: null,\n    xLinkShow: null,\n    xLinkTitle: null,\n    xLinkType: null\n  }\n})\n","import {create} from './util/create.js'\n\nexport const xml = create({\n  space: 'xml',\n  transform(_, prop) {\n    return 'xml:' + prop.slice(3).toLowerCase()\n  },\n  properties: {xmlLang: null, xmlBase: null, xmlSpace: null}\n})\n","/**\n * @param {Record<string, string>} attributes\n * @param {string} attribute\n * @returns {string}\n */\nexport function caseSensitiveTransform(attributes, attribute) {\n  return attribute in attributes ? attributes[attribute] : attribute\n}\n","import {caseSensitiveTransform} from './case-sensitive-transform.js'\n\n/**\n * @param {Record<string, string>} attributes\n * @param {string} property\n * @returns {string}\n */\nexport function caseInsensitiveTransform(attributes, property) {\n  return caseSensitiveTransform(attributes, property.toLowerCase())\n}\n","import {create} from './util/create.js'\nimport {caseInsensitiveTransform} from './util/case-insensitive-transform.js'\n\nexport const xmlns = create({\n  space: 'xmlns',\n  attributes: {xmlnsxlink: 'xmlns:xlink'},\n  transform: caseInsensitiveTransform,\n  properties: {xmlns: null, xmlnsXLink: null}\n})\n","import {booleanish, number, spaceSeparated} from './util/types.js'\nimport {create} from './util/create.js'\n\nexport const aria = create({\n  transform(_, prop) {\n    return prop === 'role' ? prop : 'aria-' + prop.slice(4).toLowerCase()\n  },\n  properties: {\n    ariaActiveDescendant: null,\n    ariaAtomic: booleanish,\n    ariaAutoComplete: null,\n    ariaBusy: booleanish,\n    ariaChecked: booleanish,\n    ariaColCount: number,\n    ariaColIndex: number,\n    ariaColSpan: number,\n    ariaControls: spaceSeparated,\n    ariaCurrent: null,\n    ariaDescribedBy: spaceSeparated,\n    ariaDetails: null,\n    ariaDisabled: booleanish,\n    ariaDropEffect: spaceSeparated,\n    ariaErrorMessage: null,\n    ariaExpanded: booleanish,\n    ariaFlowTo: spaceSeparated,\n    ariaGrabbed: booleanish,\n    ariaHasPopup: null,\n    ariaHidden: booleanish,\n    ariaInvalid: null,\n    ariaKeyShortcuts: null,\n    ariaLabel: null,\n    ariaLabelledBy: spaceSeparated,\n    ariaLevel: number,\n    ariaLive: null,\n    ariaModal: booleanish,\n    ariaMultiLine: booleanish,\n    ariaMultiSelectable: booleanish,\n    ariaOrientation: null,\n    ariaOwns: spaceSeparated,\n    ariaPlaceholder: null,\n    ariaPosInSet: number,\n    ariaPressed: booleanish,\n    ariaReadOnly: booleanish,\n    ariaRelevant: null,\n    ariaRequired: booleanish,\n    ariaRoleDescription: spaceSeparated,\n    ariaRowCount: number,\n    ariaRowIndex: number,\n    ariaRowSpan: number,\n    ariaSelected: booleanish,\n    ariaSetSize: number,\n    ariaSort: null,\n    ariaValueMax: number,\n    ariaValueMin: number,\n    ariaValueNow: number,\n    ariaValueText: null,\n    role: null\n  }\n})\n","import {\n  boolean,\n  overloadedBoolean,\n  booleanish,\n  number,\n  spaceSeparated,\n  commaSeparated\n} from './util/types.js'\nimport {create} from './util/create.js'\nimport {caseInsensitiveTransform} from './util/case-insensitive-transform.js'\n\nexport const html = create({\n  space: 'html',\n  attributes: {\n    acceptcharset: 'accept-charset',\n    classname: 'class',\n    htmlfor: 'for',\n    httpequiv: 'http-equiv'\n  },\n  transform: caseInsensitiveTransform,\n  mustUseProperty: ['checked', 'multiple', 'muted', 'selected'],\n  properties: {\n    // Standard Properties.\n    abbr: null,\n    accept: commaSeparated,\n    acceptCharset: spaceSeparated,\n    accessKey: spaceSeparated,\n    action: null,\n    allow: null,\n    allowFullScreen: boolean,\n    allowPaymentRequest: boolean,\n    allowUserMedia: boolean,\n    alt: null,\n    as: null,\n    async: boolean,\n    autoCapitalize: null,\n    autoComplete: spaceSeparated,\n    autoFocus: boolean,\n    autoPlay: boolean,\n    blocking: spaceSeparated,\n    capture: boolean,\n    charSet: null,\n    checked: boolean,\n    cite: null,\n    className: spaceSeparated,\n    cols: number,\n    colSpan: null,\n    content: null,\n    contentEditable: booleanish,\n    controls: boolean,\n    controlsList: spaceSeparated,\n    coords: number | commaSeparated,\n    crossOrigin: null,\n    data: null,\n    dateTime: null,\n    decoding: null,\n    default: boolean,\n    defer: boolean,\n    dir: null,\n    dirName: null,\n    disabled: boolean,\n    download: overloadedBoolean,\n    draggable: booleanish,\n    encType: null,\n    enterKeyHint: null,\n    fetchPriority: null,\n    form: null,\n    formAction: null,\n    formEncType: null,\n    formMethod: null,\n    formNoValidate: boolean,\n    formTarget: null,\n    headers: spaceSeparated,\n    height: number,\n    hidden: boolean,\n    high: number,\n    href: null,\n    hrefLang: null,\n    htmlFor: spaceSeparated,\n    httpEquiv: spaceSeparated,\n    id: null,\n    imageSizes: null,\n    imageSrcSet: null,\n    inert: boolean,\n    inputMode: null,\n    integrity: null,\n    is: null,\n    isMap: boolean,\n    itemId: null,\n    itemProp: spaceSeparated,\n    itemRef: spaceSeparated,\n    itemScope: boolean,\n    itemType: spaceSeparated,\n    kind: null,\n    label: null,\n    lang: null,\n    language: null,\n    list: null,\n    loading: null,\n    loop: boolean,\n    low: number,\n    manifest: null,\n    max: null,\n    maxLength: number,\n    media: null,\n    method: null,\n    min: null,\n    minLength: number,\n    multiple: boolean,\n    muted: boolean,\n    name: null,\n    nonce: null,\n    noModule: boolean,\n    noValidate: boolean,\n    onAbort: null,\n    onAfterPrint: null,\n    onAuxClick: null,\n    onBeforeMatch: null,\n    onBeforePrint: null,\n    onBeforeUnload: null,\n    onBlur: null,\n    onCancel: null,\n    onCanPlay: null,\n    onCanPlayThrough: null,\n    onChange: null,\n    onClick: null,\n    onClose: null,\n    onContextLost: null,\n    onContextMenu: null,\n    onContextRestored: null,\n    onCopy: null,\n    onCueChange: null,\n    onCut: null,\n    onDblClick: null,\n    onDrag: null,\n    onDragEnd: null,\n    onDragEnter: null,\n    onDragExit: null,\n    onDragLeave: null,\n    onDragOver: null,\n    onDragStart: null,\n    onDrop: null,\n    onDurationChange: null,\n    onEmptied: null,\n    onEnded: null,\n    onError: null,\n    onFocus: null,\n    onFormData: null,\n    onHashChange: null,\n    onInput: null,\n    onInvalid: null,\n    onKeyDown: null,\n    onKeyPress: null,\n    onKeyUp: null,\n    onLanguageChange: null,\n    onLoad: null,\n    onLoadedData: null,\n    onLoadedMetadata: null,\n    onLoadEnd: null,\n    onLoadStart: null,\n    onMessage: null,\n    onMessageError: null,\n    onMouseDown: null,\n    onMouseEnter: null,\n    onMouseLeave: null,\n    onMouseMove: null,\n    onMouseOut: null,\n    onMouseOver: null,\n    onMouseUp: null,\n    onOffline: null,\n    onOnline: null,\n    onPageHide: null,\n    onPageShow: null,\n    onPaste: null,\n    onPause: null,\n    onPlay: null,\n    onPlaying: null,\n    onPopState: null,\n    onProgress: null,\n    onRateChange: null,\n    onRejectionHandled: null,\n    onReset: null,\n    onResize: null,\n    onScroll: null,\n    onScrollEnd: null,\n    onSecurityPolicyViolation: null,\n    onSeeked: null,\n    onSeeking: null,\n    onSelect: null,\n    onSlotChange: null,\n    onStalled: null,\n    onStorage: null,\n    onSubmit: null,\n    onSuspend: null,\n    onTimeUpdate: null,\n    onToggle: null,\n    onUnhandledRejection: null,\n    onUnload: null,\n    onVolumeChange: null,\n    onWaiting: null,\n    onWheel: null,\n    open: boolean,\n    optimum: number,\n    pattern: null,\n    ping: spaceSeparated,\n    placeholder: null,\n    playsInline: boolean,\n    popover: null,\n    popoverTarget: null,\n    popoverTargetAction: null,\n    poster: null,\n    preload: null,\n    readOnly: boolean,\n    referrerPolicy: null,\n    rel: spaceSeparated,\n    required: boolean,\n    reversed: boolean,\n    rows: number,\n    rowSpan: number,\n    sandbox: spaceSeparated,\n    scope: null,\n    scoped: boolean,\n    seamless: boolean,\n    selected: boolean,\n    shape: null,\n    size: number,\n    sizes: null,\n    slot: null,\n    span: number,\n    spellCheck: booleanish,\n    src: null,\n    srcDoc: null,\n    srcLang: null,\n    srcSet: null,\n    start: number,\n    step: null,\n    style: null,\n    tabIndex: number,\n    target: null,\n    title: null,\n    translate: null,\n    type: null,\n    typeMustMatch: boolean,\n    useMap: null,\n    value: booleanish,\n    width: number,\n    wrap: null,\n\n    // Legacy.\n    // See: https://html.spec.whatwg.org/#other-elements,-attributes-and-apis\n    align: null, // Several. Use CSS `text-align` instead,\n    aLink: null, // `<body>`. Use CSS `a:active {color}` instead\n    archive: spaceSeparated, // `<object>`. List of URIs to archives\n    axis: null, // `<td>` and `<th>`. Use `scope` on `<th>`\n    background: null, // `<body>`. Use CSS `background-image` instead\n    bgColor: null, // `<body>` and table elements. Use CSS `background-color` instead\n    border: number, // `<table>`. Use CSS `border-width` instead,\n    borderColor: null, // `<table>`. Use CSS `border-color` instead,\n    bottomMargin: number, // `<body>`\n    cellPadding: null, // `<table>`\n    cellSpacing: null, // `<table>`\n    char: null, // Several table elements. When `align=char`, sets the character to align on\n    charOff: null, // Several table elements. When `char`, offsets the alignment\n    classId: null, // `<object>`\n    clear: null, // `<br>`. Use CSS `clear` instead\n    code: null, // `<object>`\n    codeBase: null, // `<object>`\n    codeType: null, // `<object>`\n    color: null, // `<font>` and `<hr>`. Use CSS instead\n    compact: boolean, // Lists. Use CSS to reduce space between items instead\n    declare: boolean, // `<object>`\n    event: null, // `<script>`\n    face: null, // `<font>`. Use CSS instead\n    frame: null, // `<table>`\n    frameBorder: null, // `<iframe>`. Use CSS `border` instead\n    hSpace: number, // `<img>` and `<object>`\n    leftMargin: number, // `<body>`\n    link: null, // `<body>`. Use CSS `a:link {color: *}` instead\n    longDesc: null, // `<frame>`, `<iframe>`, and `<img>`. Use an `<a>`\n    lowSrc: null, // `<img>`. Use a `<picture>`\n    marginHeight: number, // `<body>`\n    marginWidth: number, // `<body>`\n    noResize: boolean, // `<frame>`\n    noHref: boolean, // `<area>`. Use no href instead of an explicit `nohref`\n    noShade: boolean, // `<hr>`. Use background-color and height instead of borders\n    noWrap: boolean, // `<td>` and `<th>`\n    object: null, // `<applet>`\n    profile: null, // `<head>`\n    prompt: null, // `<isindex>`\n    rev: null, // `<link>`\n    rightMargin: number, // `<body>`\n    rules: null, // `<table>`\n    scheme: null, // `<meta>`\n    scrolling: booleanish, // `<frame>`. Use overflow in the child context\n    standby: null, // `<object>`\n    summary: null, // `<table>`\n    text: null, // `<body>`. Use CSS `color` instead\n    topMargin: number, // `<body>`\n    valueType: null, // `<param>`\n    version: null, // `<html>`. Use a doctype.\n    vAlign: null, // Several. Use CSS `vertical-align` instead\n    vLink: null, // `<body>`. Use CSS `a:visited {color}` instead\n    vSpace: number, // `<img>` and `<object>`\n\n    // Non-standard Properties.\n    allowTransparency: null,\n    autoCorrect: null,\n    autoSave: null,\n    disablePictureInPicture: boolean,\n    disableRemotePlayback: boolean,\n    prefix: null,\n    property: null,\n    results: number,\n    security: null,\n    unselectable: null\n  }\n})\n","import {\n  boolean,\n  number,\n  spaceSeparated,\n  commaSeparated,\n  commaOrSpaceSeparated\n} from './util/types.js'\nimport {create} from './util/create.js'\nimport {caseSensitiveTransform} from './util/case-sensitive-transform.js'\n\nexport const svg = create({\n  space: 'svg',\n  attributes: {\n    accentHeight: 'accent-height',\n    alignmentBaseline: 'alignment-baseline',\n    arabicForm: 'arabic-form',\n    baselineShift: 'baseline-shift',\n    capHeight: 'cap-height',\n    className: 'class',\n    clipPath: 'clip-path',\n    clipRule: 'clip-rule',\n    colorInterpolation: 'color-interpolation',\n    colorInterpolationFilters: 'color-interpolation-filters',\n    colorProfile: 'color-profile',\n    colorRendering: 'color-rendering',\n    crossOrigin: 'crossorigin',\n    dataType: 'datatype',\n    dominantBaseline: 'dominant-baseline',\n    enableBackground: 'enable-background',\n    fillOpacity: 'fill-opacity',\n    fillRule: 'fill-rule',\n    floodColor: 'flood-color',\n    floodOpacity: 'flood-opacity',\n    fontFamily: 'font-family',\n    fontSize: 'font-size',\n    fontSizeAdjust: 'font-size-adjust',\n    fontStretch: 'font-stretch',\n    fontStyle: 'font-style',\n    fontVariant: 'font-variant',\n    fontWeight: 'font-weight',\n    glyphName: 'glyph-name',\n    glyphOrientationHorizontal: 'glyph-orientation-horizontal',\n    glyphOrientationVertical: 'glyph-orientation-vertical',\n    hrefLang: 'hreflang',\n    horizAdvX: 'horiz-adv-x',\n    horizOriginX: 'horiz-origin-x',\n    horizOriginY: 'horiz-origin-y',\n    imageRendering: 'image-rendering',\n    letterSpacing: 'letter-spacing',\n    lightingColor: 'lighting-color',\n    markerEnd: 'marker-end',\n    markerMid: 'marker-mid',\n    markerStart: 'marker-start',\n    navDown: 'nav-down',\n    navDownLeft: 'nav-down-left',\n    navDownRight: 'nav-down-right',\n    navLeft: 'nav-left',\n    navNext: 'nav-next',\n    navPrev: 'nav-prev',\n    navRight: 'nav-right',\n    navUp: 'nav-up',\n    navUpLeft: 'nav-up-left',\n    navUpRight: 'nav-up-right',\n    onAbort: 'onabort',\n    onActivate: 'onactivate',\n    onAfterPrint: 'onafterprint',\n    onBeforePrint: 'onbeforeprint',\n    onBegin: 'onbegin',\n    onCancel: 'oncancel',\n    onCanPlay: 'oncanplay',\n    onCanPlayThrough: 'oncanplaythrough',\n    onChange: 'onchange',\n    onClick: 'onclick',\n    onClose: 'onclose',\n    onCopy: 'oncopy',\n    onCueChange: 'oncuechange',\n    onCut: 'oncut',\n    onDblClick: 'ondblclick',\n    onDrag: 'ondrag',\n    onDragEnd: 'ondragend',\n    onDragEnter: 'ondragenter',\n    onDragExit: 'ondragexit',\n    onDragLeave: 'ondragleave',\n    onDragOver: 'ondragover',\n    onDragStart: 'ondragstart',\n    onDrop: 'ondrop',\n    onDurationChange: 'ondurationchange',\n    onEmptied: 'onemptied',\n    onEnd: 'onend',\n    onEnded: 'onended',\n    onError: 'onerror',\n    onFocus: 'onfocus',\n    onFocusIn: 'onfocusin',\n    onFocusOut: 'onfocusout',\n    onHashChange: 'onhashchange',\n    onInput: 'oninput',\n    onInvalid: 'oninvalid',\n    onKeyDown: 'onkeydown',\n    onKeyPress: 'onkeypress',\n    onKeyUp: 'onkeyup',\n    onLoad: 'onload',\n    onLoadedData: 'onloadeddata',\n    onLoadedMetadata: 'onloadedmetadata',\n    onLoadStart: 'onloadstart',\n    onMessage: 'onmessage',\n    onMouseDown: 'onmousedown',\n    onMouseEnter: 'onmouseenter',\n    onMouseLeave: 'onmouseleave',\n    onMouseMove: 'onmousemove',\n    onMouseOut: 'onmouseout',\n    onMouseOver: 'onmouseover',\n    onMouseUp: 'onmouseup',\n    onMouseWheel: 'onmousewheel',\n    onOffline: 'onoffline',\n    onOnline: 'ononline',\n    onPageHide: 'onpagehide',\n    onPageShow: 'onpageshow',\n    onPaste: 'onpaste',\n    onPause: 'onpause',\n    onPlay: 'onplay',\n    onPlaying: 'onplaying',\n    onPopState: 'onpopstate',\n    onProgress: 'onprogress',\n    onRateChange: 'onratechange',\n    onRepeat: 'onrepeat',\n    onReset: 'onreset',\n    onResize: 'onresize',\n    onScroll: 'onscroll',\n    onSeeked: 'onseeked',\n    onSeeking: 'onseeking',\n    onSelect: 'onselect',\n    onShow: 'onshow',\n    onStalled: 'onstalled',\n    onStorage: 'onstorage',\n    onSubmit: 'onsubmit',\n    onSuspend: 'onsuspend',\n    onTimeUpdate: 'ontimeupdate',\n    onToggle: 'ontoggle',\n    onUnload: 'onunload',\n    onVolumeChange: 'onvolumechange',\n    onWaiting: 'onwaiting',\n    onZoom: 'onzoom',\n    overlinePosition: 'overline-position',\n    overlineThickness: 'overline-thickness',\n    paintOrder: 'paint-order',\n    panose1: 'panose-1',\n    pointerEvents: 'pointer-events',\n    referrerPolicy: 'referrerpolicy',\n    renderingIntent: 'rendering-intent',\n    shapeRendering: 'shape-rendering',\n    stopColor: 'stop-color',\n    stopOpacity: 'stop-opacity',\n    strikethroughPosition: 'strikethrough-position',\n    strikethroughThickness: 'strikethrough-thickness',\n    strokeDashArray: 'stroke-dasharray',\n    strokeDashOffset: 'stroke-dashoffset',\n    strokeLineCap: 'stroke-linecap',\n    strokeLineJoin: 'stroke-linejoin',\n    strokeMiterLimit: 'stroke-miterlimit',\n    strokeOpacity: 'stroke-opacity',\n    strokeWidth: 'stroke-width',\n    tabIndex: 'tabindex',\n    textAnchor: 'text-anchor',\n    textDecoration: 'text-decoration',\n    textRendering: 'text-rendering',\n    transformOrigin: 'transform-origin',\n    typeOf: 'typeof',\n    underlinePosition: 'underline-position',\n    underlineThickness: 'underline-thickness',\n    unicodeBidi: 'unicode-bidi',\n    unicodeRange: 'unicode-range',\n    unitsPerEm: 'units-per-em',\n    vAlphabetic: 'v-alphabetic',\n    vHanging: 'v-hanging',\n    vIdeographic: 'v-ideographic',\n    vMathematical: 'v-mathematical',\n    vectorEffect: 'vector-effect',\n    vertAdvY: 'vert-adv-y',\n    vertOriginX: 'vert-origin-x',\n    vertOriginY: 'vert-origin-y',\n    wordSpacing: 'word-spacing',\n    writingMode: 'writing-mode',\n    xHeight: 'x-height',\n    // These were camelcased in Tiny. Now lowercased in SVG 2\n    playbackOrder: 'playbackorder',\n    timelineBegin: 'timelinebegin'\n  },\n  transform: caseSensitiveTransform,\n  properties: {\n    about: commaOrSpaceSeparated,\n    accentHeight: number,\n    accumulate: null,\n    additive: null,\n    alignmentBaseline: null,\n    alphabetic: number,\n    amplitude: number,\n    arabicForm: null,\n    ascent: number,\n    attributeName: null,\n    attributeType: null,\n    azimuth: number,\n    bandwidth: null,\n    baselineShift: null,\n    baseFrequency: null,\n    baseProfile: null,\n    bbox: null,\n    begin: null,\n    bias: number,\n    by: null,\n    calcMode: null,\n    capHeight: number,\n    className: spaceSeparated,\n    clip: null,\n    clipPath: null,\n    clipPathUnits: null,\n    clipRule: null,\n    color: null,\n    colorInterpolation: null,\n    colorInterpolationFilters: null,\n    colorProfile: null,\n    colorRendering: null,\n    content: null,\n    contentScriptType: null,\n    contentStyleType: null,\n    crossOrigin: null,\n    cursor: null,\n    cx: null,\n    cy: null,\n    d: null,\n    dataType: null,\n    defaultAction: null,\n    descent: number,\n    diffuseConstant: number,\n    direction: null,\n    display: null,\n    dur: null,\n    divisor: number,\n    dominantBaseline: null,\n    download: boolean,\n    dx: null,\n    dy: null,\n    edgeMode: null,\n    editable: null,\n    elevation: number,\n    enableBackground: null,\n    end: null,\n    event: null,\n    exponent: number,\n    externalResourcesRequired: null,\n    fill: null,\n    fillOpacity: number,\n    fillRule: null,\n    filter: null,\n    filterRes: null,\n    filterUnits: null,\n    floodColor: null,\n    floodOpacity: null,\n    focusable: null,\n    focusHighlight: null,\n    fontFamily: null,\n    fontSize: null,\n    fontSizeAdjust: null,\n    fontStretch: null,\n    fontStyle: null,\n    fontVariant: null,\n    fontWeight: null,\n    format: null,\n    fr: null,\n    from: null,\n    fx: null,\n    fy: null,\n    g1: commaSeparated,\n    g2: commaSeparated,\n    glyphName: commaSeparated,\n    glyphOrientationHorizontal: null,\n    glyphOrientationVertical: null,\n    glyphRef: null,\n    gradientTransform: null,\n    gradientUnits: null,\n    handler: null,\n    hanging: number,\n    hatchContentUnits: null,\n    hatchUnits: null,\n    height: null,\n    href: null,\n    hrefLang: null,\n    horizAdvX: number,\n    horizOriginX: number,\n    horizOriginY: number,\n    id: null,\n    ideographic: number,\n    imageRendering: null,\n    initialVisibility: null,\n    in: null,\n    in2: null,\n    intercept: number,\n    k: number,\n    k1: number,\n    k2: number,\n    k3: number,\n    k4: number,\n    kernelMatrix: commaOrSpaceSeparated,\n    kernelUnitLength: null,\n    keyPoints: null, // SEMI_COLON_SEPARATED\n    keySplines: null, // SEMI_COLON_SEPARATED\n    keyTimes: null, // SEMI_COLON_SEPARATED\n    kerning: null,\n    lang: null,\n    lengthAdjust: null,\n    letterSpacing: null,\n    lightingColor: null,\n    limitingConeAngle: number,\n    local: null,\n    markerEnd: null,\n    markerMid: null,\n    markerStart: null,\n    markerHeight: null,\n    markerUnits: null,\n    markerWidth: null,\n    mask: null,\n    maskContentUnits: null,\n    maskUnits: null,\n    mathematical: null,\n    max: null,\n    media: null,\n    mediaCharacterEncoding: null,\n    mediaContentEncodings: null,\n    mediaSize: number,\n    mediaTime: null,\n    method: null,\n    min: null,\n    mode: null,\n    name: null,\n    navDown: null,\n    navDownLeft: null,\n    navDownRight: null,\n    navLeft: null,\n    navNext: null,\n    navPrev: null,\n    navRight: null,\n    navUp: null,\n    navUpLeft: null,\n    navUpRight: null,\n    numOctaves: null,\n    observer: null,\n    offset: null,\n    onAbort: null,\n    onActivate: null,\n    onAfterPrint: null,\n    onBeforePrint: null,\n    onBegin: null,\n    onCancel: null,\n    onCanPlay: null,\n    onCanPlayThrough: null,\n    onChange: null,\n    onClick: null,\n    onClose: null,\n    onCopy: null,\n    onCueChange: null,\n    onCut: null,\n    onDblClick: null,\n    onDrag: null,\n    onDragEnd: null,\n    onDragEnter: null,\n    onDragExit: null,\n    onDragLeave: null,\n    onDragOver: null,\n    onDragStart: null,\n    onDrop: null,\n    onDurationChange: null,\n    onEmptied: null,\n    onEnd: null,\n    onEnded: null,\n    onError: null,\n    onFocus: null,\n    onFocusIn: null,\n    onFocusOut: null,\n    onHashChange: null,\n    onInput: null,\n    onInvalid: null,\n    onKeyDown: null,\n    onKeyPress: null,\n    onKeyUp: null,\n    onLoad: null,\n    onLoadedData: null,\n    onLoadedMetadata: null,\n    onLoadStart: null,\n    onMessage: null,\n    onMouseDown: null,\n    onMouseEnter: null,\n    onMouseLeave: null,\n    onMouseMove: null,\n    onMouseOut: null,\n    onMouseOver: null,\n    onMouseUp: null,\n    onMouseWheel: null,\n    onOffline: null,\n    onOnline: null,\n    onPageHide: null,\n    onPageShow: null,\n    onPaste: null,\n    onPause: null,\n    onPlay: null,\n    onPlaying: null,\n    onPopState: null,\n    onProgress: null,\n    onRateChange: null,\n    onRepeat: null,\n    onReset: null,\n    onResize: null,\n    onScroll: null,\n    onSeeked: null,\n    onSeeking: null,\n    onSelect: null,\n    onShow: null,\n    onStalled: null,\n    onStorage: null,\n    onSubmit: null,\n    onSuspend: null,\n    onTimeUpdate: null,\n    onToggle: null,\n    onUnload: null,\n    onVolumeChange: null,\n    onWaiting: null,\n    onZoom: null,\n    opacity: null,\n    operator: null,\n    order: null,\n    orient: null,\n    orientation: null,\n    origin: null,\n    overflow: null,\n    overlay: null,\n    overlinePosition: number,\n    overlineThickness: number,\n    paintOrder: null,\n    panose1: null,\n    path: null,\n    pathLength: number,\n    patternContentUnits: null,\n    patternTransform: null,\n    patternUnits: null,\n    phase: null,\n    ping: spaceSeparated,\n    pitch: null,\n    playbackOrder: null,\n    pointerEvents: null,\n    points: null,\n    pointsAtX: number,\n    pointsAtY: number,\n    pointsAtZ: number,\n    preserveAlpha: null,\n    preserveAspectRatio: null,\n    primitiveUnits: null,\n    propagate: null,\n    property: commaOrSpaceSeparated,\n    r: null,\n    radius: null,\n    referrerPolicy: null,\n    refX: null,\n    refY: null,\n    rel: commaOrSpaceSeparated,\n    rev: commaOrSpaceSeparated,\n    renderingIntent: null,\n    repeatCount: null,\n    repeatDur: null,\n    requiredExtensions: commaOrSpaceSeparated,\n    requiredFeatures: commaOrSpaceSeparated,\n    requiredFonts: commaOrSpaceSeparated,\n    requiredFormats: commaOrSpaceSeparated,\n    resource: null,\n    restart: null,\n    result: null,\n    rotate: null,\n    rx: null,\n    ry: null,\n    scale: null,\n    seed: null,\n    shapeRendering: null,\n    side: null,\n    slope: null,\n    snapshotTime: null,\n    specularConstant: number,\n    specularExponent: number,\n    spreadMethod: null,\n    spacing: null,\n    startOffset: null,\n    stdDeviation: null,\n    stemh: null,\n    stemv: null,\n    stitchTiles: null,\n    stopColor: null,\n    stopOpacity: null,\n    strikethroughPosition: number,\n    strikethroughThickness: number,\n    string: null,\n    stroke: null,\n    strokeDashArray: commaOrSpaceSeparated,\n    strokeDashOffset: null,\n    strokeLineCap: null,\n    strokeLineJoin: null,\n    strokeMiterLimit: number,\n    strokeOpacity: number,\n    strokeWidth: null,\n    style: null,\n    surfaceScale: number,\n    syncBehavior: null,\n    syncBehaviorDefault: null,\n    syncMaster: null,\n    syncTolerance: null,\n    syncToleranceDefault: null,\n    systemLanguage: commaOrSpaceSeparated,\n    tabIndex: number,\n    tableValues: null,\n    target: null,\n    targetX: number,\n    targetY: number,\n    textAnchor: null,\n    textDecoration: null,\n    textRendering: null,\n    textLength: null,\n    timelineBegin: null,\n    title: null,\n    transformBehavior: null,\n    type: null,\n    typeOf: commaOrSpaceSeparated,\n    to: null,\n    transform: null,\n    transformOrigin: null,\n    u1: null,\n    u2: null,\n    underlinePosition: number,\n    underlineThickness: number,\n    unicode: null,\n    unicodeBidi: null,\n    unicodeRange: null,\n    unitsPerEm: number,\n    values: null,\n    vAlphabetic: number,\n    vMathematical: number,\n    vectorEffect: null,\n    vHanging: number,\n    vIdeographic: number,\n    version: null,\n    vertAdvY: number,\n    vertOriginX: number,\n    vertOriginY: number,\n    viewBox: null,\n    viewTarget: null,\n    visibility: null,\n    width: null,\n    widths: null,\n    wordSpacing: null,\n    writingMode: null,\n    x: null,\n    x1: null,\n    x2: null,\n    xChannelSelector: null,\n    xHeight: number,\n    y: null,\n    y1: null,\n    y2: null,\n    yChannelSelector: null,\n    z: null,\n    zoomAndPan: null\n  }\n})\n","/**\n * @typedef {import('./lib/util/info.js').Info} Info\n * @typedef {import('./lib/util/schema.js').Schema} Schema\n */\n\nimport {merge} from './lib/util/merge.js'\nimport {xlink} from './lib/xlink.js'\nimport {xml} from './lib/xml.js'\nimport {xmlns} from './lib/xmlns.js'\nimport {aria} from './lib/aria.js'\nimport {html as htmlBase} from './lib/html.js'\nimport {svg as svgBase} from './lib/svg.js'\n\nexport {find} from './lib/find.js'\nexport {hastToReact} from './lib/hast-to-react.js'\nexport {normalize} from './lib/normalize.js'\nexport const html = merge([xml, xlink, xmlns, aria, htmlBase], 'html')\nexport const svg = merge([xml, xlink, xmlns, aria, svgBase], 'svg')\n","/**\n * @typedef {import('./util/schema.js').Schema} Schema\n */\n\nimport {normalize} from './normalize.js'\nimport {DefinedInfo} from './util/defined-info.js'\nimport {Info} from './util/info.js'\n\nconst valid = /^data[-\\w.:]+$/i\nconst dash = /-[a-z]/g\nconst cap = /[A-Z]/g\n\n/**\n * @param {Schema} schema\n * @param {string} value\n * @returns {Info}\n */\nexport function find(schema, value) {\n  const normal = normalize(value)\n  let prop = value\n  let Type = Info\n\n  if (normal in schema.normal) {\n    return schema.property[schema.normal[normal]]\n  }\n\n  if (normal.length > 4 && normal.slice(0, 4) === 'data' && valid.test(value)) {\n    // Attribute or property.\n    if (value.charAt(4) === '-') {\n      // Turn it into a property.\n      const rest = value.slice(5).replace(dash, camelcase)\n      prop = 'data' + rest.charAt(0).toUpperCase() + rest.slice(1)\n    } else {\n      // Turn it into an attribute.\n      const rest = value.slice(4)\n\n      if (!dash.test(rest)) {\n        let dashes = rest.replace(cap, kebab)\n\n        if (dashes.charAt(0) !== '-') {\n          dashes = '-' + dashes\n        }\n\n        value = 'data' + dashes\n      }\n    }\n\n    Type = DefinedInfo\n  }\n\n  return new Type(prop, value)\n}\n\n/**\n * @param {string} $0\n * @returns {string}\n */\nfunction kebab($0) {\n  return '-' + $0.toLowerCase()\n}\n\n/**\n * @param {string} $0\n * @returns {string}\n */\nfunction camelcase($0) {\n  return $0.charAt(1).toUpperCase()\n}\n","/**\n * `hast` is close to `React`, but differs in a couple of cases.\n *\n * To get a React property from a hast property, check if it is in\n * `hastToReact`, if it is, then use the corresponding value,\n * otherwise, use the hast property.\n *\n * @type {Record<string, string>}\n */\nexport const hastToReact = {\n  classId: 'classID',\n  dataType: 'datatype',\n  itemId: 'itemID',\n  strokeDashArray: 'strokeDasharray',\n  strokeDashOffset: 'strokeDashoffset',\n  strokeLineCap: 'strokeLinecap',\n  strokeLineJoin: 'strokeLinejoin',\n  strokeMiterLimit: 'strokeMiterlimit',\n  typeOf: 'typeof',\n  xLinkActuate: 'xlinkActuate',\n  xLinkArcRole: 'xlinkArcrole',\n  xLinkHref: 'xlinkHref',\n  xLinkRole: 'xlinkRole',\n  xLinkShow: 'xlinkShow',\n  xLinkTitle: 'xlinkTitle',\n  xLinkType: 'xlinkType',\n  xmlnsXLink: 'xmlnsXlink'\n}\n","import StyleToObject from './index.js';\n\nexport default StyleToObject;\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Point} Point\n * @typedef {import('unist').Position} Position\n */\n\n/**\n * @typedef NodeLike\n * @property {string} type\n * @property {PositionLike | null | undefined} [position]\n *\n * @typedef PositionLike\n * @property {PointLike | null | undefined} [start]\n * @property {PointLike | null | undefined} [end]\n *\n * @typedef PointLike\n * @property {number | null | undefined} [line]\n * @property {number | null | undefined} [column]\n * @property {number | null | undefined} [offset]\n */\n\n/**\n * Get the ending point of `node`.\n *\n * @param node\n *   Node.\n * @returns\n *   Point.\n */\nexport const pointEnd = point('end')\n\n/**\n * Get the starting point of `node`.\n *\n * @param node\n *   Node.\n * @returns\n *   Point.\n */\nexport const pointStart = point('start')\n\n/**\n * Get the positional info of `node`.\n *\n * @param {'end' | 'start'} type\n *   Side.\n * @returns\n *   Getter.\n */\nfunction point(type) {\n  return point\n\n  /**\n   * Get the point info of `node` at a bound side.\n   *\n   * @param {Node | NodeLike | null | undefined} [node]\n   * @returns {Point | undefined}\n   */\n  function point(node) {\n    const point = (node && node.position && node.position[type]) || {}\n\n    if (\n      typeof point.line === 'number' &&\n      point.line > 0 &&\n      typeof point.column === 'number' &&\n      point.column > 0\n    ) {\n      return {\n        line: point.line,\n        column: point.column,\n        offset:\n          typeof point.offset === 'number' && point.offset > -1\n            ? point.offset\n            : undefined\n      }\n    }\n  }\n}\n\n/**\n * Get the positional info of `node`.\n *\n * @param {Node | NodeLike | null | undefined} [node]\n *   Node.\n * @returns {Position | undefined}\n *   Position.\n */\nexport function position(node) {\n  const start = pointStart(node)\n  const end = pointEnd(node)\n\n  if (start && end) {\n    return {start, end}\n  }\n}\n","import setPrototypeOf from \"./setPrototypeOf.js\";\nimport isNativeReflectConstruct from \"./isNativeReflectConstruct.js\";\nexport default function _construct(Parent, args, Class) {\n  if (isNativeReflectConstruct()) {\n    _construct = Reflect.construct.bind();\n  } else {\n    _construct = function _construct(Parent, args, Class) {\n      var a = [null];\n      a.push.apply(a, args);\n      var Constructor = Function.bind.apply(Parent, a);\n      var instance = new Constructor();\n      if (Class) setPrototypeOf(instance, Class.prototype);\n      return instance;\n    };\n  }\n  return _construct.apply(null, arguments);\n}","import getPrototypeOf from \"./getPrototypeOf.js\";\nimport setPrototypeOf from \"./setPrototypeOf.js\";\nimport isNativeFunction from \"./isNativeFunction.js\";\nimport construct from \"./construct.js\";\nexport default function _wrapNativeSuper(Class) {\n  var _cache = typeof Map === \"function\" ? new Map() : undefined;\n  _wrapNativeSuper = function _wrapNativeSuper(Class) {\n    if (Class === null || !isNativeFunction(Class)) return Class;\n    if (typeof Class !== \"function\") {\n      throw new TypeError(\"Super expression must either be null or a function\");\n    }\n    if (typeof _cache !== \"undefined\") {\n      if (_cache.has(Class)) return _cache.get(Class);\n      _cache.set(Class, Wrapper);\n    }\n    function Wrapper() {\n      return construct(Class, arguments, getPrototypeOf(this).constructor);\n    }\n    Wrapper.prototype = Object.create(Class.prototype, {\n      constructor: {\n        value: Wrapper,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n    return setPrototypeOf(Wrapper, Class);\n  };\n  return _wrapNativeSuper(Class);\n}","export default function _isNativeFunction(fn) {\n  return Function.toString.call(fn).indexOf(\"[native code]\") !== -1;\n}","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Point} Point\n * @typedef {import('unist').Position} Position\n */\n\n/**\n * @typedef NodeLike\n * @property {string} type\n * @property {PositionLike | null | undefined} [position]\n *\n * @typedef PointLike\n * @property {number | null | undefined} [line]\n * @property {number | null | undefined} [column]\n * @property {number | null | undefined} [offset]\n *\n * @typedef PositionLike\n * @property {PointLike | null | undefined} [start]\n * @property {PointLike | null | undefined} [end]\n */\n\n/**\n * Serialize the positional info of a point, position (start and end points),\n * or node.\n *\n * @param {Node | NodeLike | Point | PointLike | Position | PositionLike | null | undefined} [value]\n *   Node, position, or point.\n * @returns {string}\n *   Pretty printed positional info of a node (`string`).\n *\n *   In the format of a range `ls:cs-le:ce` (when given `node` or `position`)\n *   or a point `l:c` (when given `point`), where `l` stands for line, `c` for\n *   column, `s` for `start`, and `e` for end.\n *   An empty string (`''`) is returned if the given value is neither `node`,\n *   `position`, nor `point`.\n */\nexport function stringifyPosition(value) {\n  // Nothing.\n  if (!value || typeof value !== 'object') {\n    return ''\n  }\n\n  // Node.\n  if ('position' in value || 'type' in value) {\n    return position(value.position)\n  }\n\n  // Position.\n  if ('start' in value || 'end' in value) {\n    return position(value)\n  }\n\n  // Point.\n  if ('line' in value || 'column' in value) {\n    return point(value)\n  }\n\n  // ?\n  return ''\n}\n\n/**\n * @param {Point | PointLike | null | undefined} point\n * @returns {string}\n */\nfunction point(point) {\n  return index(point && point.line) + ':' + index(point && point.column)\n}\n\n/**\n * @param {Position | PositionLike | null | undefined} pos\n * @returns {string}\n */\nfunction position(pos) {\n  return point(pos && pos.start) + '-' + point(pos && pos.end)\n}\n\n/**\n * @param {number | null | undefined} value\n * @returns {number}\n */\nfunction index(value) {\n  return value && typeof value === 'number' ? value : 1\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Point} Point\n * @typedef {import('unist').Position} Position\n */\n\n/**\n * @typedef {object & {type: string, position?: Position | undefined}} NodeLike\n *\n * @typedef Options\n *   Configuration.\n * @property {Array<Node> | null | undefined} [ancestors]\n *   Stack of (inclusive) ancestor nodes surrounding the message (optional).\n * @property {Error | null | undefined} [cause]\n *   Original error cause of the message (optional).\n * @property {Point | Position | null | undefined} [place]\n *   Place of message (optional).\n * @property {string | null | undefined} [ruleId]\n *   Category of message (optional, example: `'my-rule'`).\n * @property {string | null | undefined} [source]\n *   Namespace of who sent the message (optional, example: `'my-package'`).\n */\n\nimport {stringifyPosition} from 'unist-util-stringify-position'\n\n/**\n * Message.\n */\nexport class VFileMessage extends Error {\n  /**\n   * Create a message for `reason`.\n   *\n   * > 🪦 **Note**: also has obsolete signatures.\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Options | null | undefined} [options]\n   * @returns\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @overload\n   * @param {string} reason\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @param {Error | VFileMessage | string} causeOrReason\n   *   Reason for message, should use markdown.\n   * @param {Node | NodeLike | Options | Point | Position | string | null | undefined} [optionsOrParentOrPlace]\n   *   Configuration (optional).\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns\n   *   Instance of `VFileMessage`.\n   */\n  // eslint-disable-next-line complexity\n  constructor(causeOrReason, optionsOrParentOrPlace, origin) {\n    super()\n\n    if (typeof optionsOrParentOrPlace === 'string') {\n      origin = optionsOrParentOrPlace\n      optionsOrParentOrPlace = undefined\n    }\n\n    /** @type {string} */\n    let reason = ''\n    /** @type {Options} */\n    let options = {}\n    let legacyCause = false\n\n    if (optionsOrParentOrPlace) {\n      // Point.\n      if (\n        'line' in optionsOrParentOrPlace &&\n        'column' in optionsOrParentOrPlace\n      ) {\n        options = {place: optionsOrParentOrPlace}\n      }\n      // Position.\n      else if (\n        'start' in optionsOrParentOrPlace &&\n        'end' in optionsOrParentOrPlace\n      ) {\n        options = {place: optionsOrParentOrPlace}\n      }\n      // Node.\n      else if ('type' in optionsOrParentOrPlace) {\n        options = {\n          ancestors: [optionsOrParentOrPlace],\n          place: optionsOrParentOrPlace.position\n        }\n      }\n      // Options.\n      else {\n        options = {...optionsOrParentOrPlace}\n      }\n    }\n\n    if (typeof causeOrReason === 'string') {\n      reason = causeOrReason\n    }\n    // Error.\n    else if (!options.cause && causeOrReason) {\n      legacyCause = true\n      reason = causeOrReason.message\n      options.cause = causeOrReason\n    }\n\n    if (!options.ruleId && !options.source && typeof origin === 'string') {\n      const index = origin.indexOf(':')\n\n      if (index === -1) {\n        options.ruleId = origin\n      } else {\n        options.source = origin.slice(0, index)\n        options.ruleId = origin.slice(index + 1)\n      }\n    }\n\n    if (!options.place && options.ancestors && options.ancestors) {\n      const parent = options.ancestors[options.ancestors.length - 1]\n\n      if (parent) {\n        options.place = parent.position\n      }\n    }\n\n    const start =\n      options.place && 'start' in options.place\n        ? options.place.start\n        : options.place\n\n    /* eslint-disable no-unused-expressions */\n    /**\n     * Stack of ancestor nodes surrounding the message.\n     *\n     * @type {Array<Node> | undefined}\n     */\n    this.ancestors = options.ancestors || undefined\n\n    /**\n     * Original error cause of the message.\n     *\n     * @type {Error | undefined}\n     */\n    this.cause = options.cause || undefined\n\n    /**\n     * Starting column of message.\n     *\n     * @type {number | undefined}\n     */\n    this.column = start ? start.column : undefined\n\n    /**\n     * State of problem.\n     *\n     * * `true` — error, file not usable\n     * * `false` — warning, change may be needed\n     * * `undefined` — change likely not needed\n     *\n     * @type {boolean | null | undefined}\n     */\n    this.fatal = undefined\n\n    /**\n     * Path of a file (used throughout the `VFile` ecosystem).\n     *\n     * @type {string | undefined}\n     */\n    this.file\n\n    // Field from `Error`.\n    /**\n     * Reason for message.\n     *\n     * @type {string}\n     */\n    this.message = reason\n\n    /**\n     * Starting line of error.\n     *\n     * @type {number | undefined}\n     */\n    this.line = start ? start.line : undefined\n\n    // Field from `Error`.\n    /**\n     * Serialized positional info of message.\n     *\n     * On normal errors, this would be something like `ParseError`, buit in\n     * `VFile` messages we use this space to show where an error happened.\n     */\n    this.name = stringifyPosition(options.place) || '1:1'\n\n    /**\n     * Place of message.\n     *\n     * @type {Point | Position | undefined}\n     */\n    this.place = options.place || undefined\n\n    /**\n     * Reason for message, should use markdown.\n     *\n     * @type {string}\n     */\n    this.reason = this.message\n\n    /**\n     * Category of message (example: `'my-rule'`).\n     *\n     * @type {string | undefined}\n     */\n    this.ruleId = options.ruleId || undefined\n\n    /**\n     * Namespace of message (example: `'my-package'`).\n     *\n     * @type {string | undefined}\n     */\n    this.source = options.source || undefined\n\n    // Field from `Error`.\n    /**\n     * Stack of message.\n     *\n     * This is used by normal errors to show where something happened in\n     * programming code, irrelevant for `VFile` messages,\n     *\n     * @type {string}\n     */\n    this.stack =\n      legacyCause && options.cause && typeof options.cause.stack === 'string'\n        ? options.cause.stack\n        : ''\n\n    // The following fields are “well known”.\n    // Not standard.\n    // Feel free to add other non-standard fields to your messages.\n\n    /**\n     * Specify the source value that’s being reported, which is deemed\n     * incorrect.\n     *\n     * @type {string | undefined}\n     */\n    this.actual\n\n    /**\n     * Suggest acceptable values that can be used instead of `actual`.\n     *\n     * @type {Array<string> | undefined}\n     */\n    this.expected\n\n    /**\n     * Long form description of the message (you should use markdown).\n     *\n     * @type {string | undefined}\n     */\n    this.note\n\n    /**\n     * Link to docs for the message.\n     *\n     * > 👉 **Note**: this must be an absolute URL that can be passed as `x`\n     * > to `new URL(x)`.\n     *\n     * @type {string | undefined}\n     */\n    this.url\n    /* eslint-enable no-unused-expressions */\n  }\n}\n\nVFileMessage.prototype.file = ''\nVFileMessage.prototype.name = ''\nVFileMessage.prototype.reason = ''\nVFileMessage.prototype.message = ''\nVFileMessage.prototype.stack = ''\nVFileMessage.prototype.column = undefined\nVFileMessage.prototype.line = undefined\nVFileMessage.prototype.ancestors = undefined\nVFileMessage.prototype.cause = undefined\nVFileMessage.prototype.fatal = undefined\nVFileMessage.prototype.place = undefined\nVFileMessage.prototype.ruleId = undefined\nVFileMessage.prototype.source = undefined\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Nodes} Nodes\n * @typedef {import('hast').Parents} Parents\n *\n * @typedef {import('property-information').Schema} Schema\n *\n * @typedef {import('./components.js').Components} Components\n */\n\n/**\n * @typedef {JSX.Element | string | null | undefined} Child\n *   Child.\n *\n * @callback Create\n *   Create something in development or production.\n * @param {Nodes} node\n *   hast node.\n * @param {unknown} type\n *   Fragment symbol or tag name.\n * @param {Props} props\n *   Properties and children.\n * @param {string | undefined} key\n *   Key.\n * @returns {JSX.Element}\n *   Result.\n *\n * @typedef {'html' | 'react'} ElementAttributeNameCase\n *   Casing to use for attribute names.\n *\n *   HTML casing is for example `class`, `stroke-linecap`, `xml:lang`.\n *   React casing is for example `className`, `strokeLinecap`, `xmlLang`.\n *\n * @typedef {[string, Value]} Field\n *   Property field.\n *\n * @typedef {unknown} Fragment\n *   Represent the children, typically a symbol.\n *\n * @callback Jsx\n *   Create a production element.\n * @param {unknown} type\n *   Element type: `Fragment` symbol, tag name (`string`), component.\n * @param {Props} props\n *   Element props, `children`, and maybe `node`.\n * @param {string | undefined} [key]\n *   Dynamicly generated key to use.\n * @returns {JSX.Element}\n *   An element from your framework.\n *\n * @callback JsxDev\n *   Create a development element.\n * @param {unknown} type\n *   Element type: `Fragment` symbol, tag name (`string`), component.\n * @param {Props} props\n *   Element props, `children`, and maybe `node`.\n * @param {string | undefined} key\n *   Dynamicly generated key to use.\n * @param {boolean} isStaticChildren\n *   Whether two or more children are passed (in an array), which is whether\n *   `jsxs` or `jsx` would be used.\n * @param {Source} source\n *   Info about source.\n * @param {undefined} self\n *   Nothing (this is used by frameworks that have components, we don’t).\n * @returns {JSX.Element}\n *   An element from your framework.\n *\n * @typedef {{children?: Array<Child> | Child, node?: Element | undefined, [prop: string]: Array<Child> | Child | Element | Value | undefined}} Props\n *   Properties and children.\n *\n * @typedef RegularFields\n *   Configuration.\n * @property {Partial<Components> | null | undefined} [components]\n *   Components to use (optional).\n * @property {ElementAttributeNameCase | null | undefined} [elementAttributeNameCase='react']\n *   Specify casing to use for attribute names (default: `'react'`).\n * @property {string | null | undefined} [filePath]\n *   File path to the original source file (optional).\n *\n *   Passed in source info to `jsxDEV` when using the automatic runtime with\n *   `development: true`.\n * @property {boolean | null | undefined} [ignoreInvalidStyle=false]\n *   Ignore invalid CSS in `style` props (default: `false`);\n *   the default behavior is to throw an error.\n * @property {boolean | null | undefined} [passKeys=true]\n *   Generate keys to optimize frameworks that support them (default: `true`).\n *\n *   > 👉 **Note**: Solid currently fails if keys are passed.\n * @property {boolean | null | undefined} [passNode=false]\n *   Pass the hast element node to components (default: `false`).\n * @property {Space | null | undefined} [space='html']\n *   Whether `tree` is in the `'html'` or `'svg'` space (default: `'html'`).\n *\n *   When an `<svg>` element is found in the HTML space, this package already\n *   automatically switches to and from the SVG space when entering and exiting\n *   it.\n * @property {StylePropertyNameCase | null | undefined} [stylePropertyNameCase='dom']\n *   Specify casing to use for property names in `style` objects (default:\n *   `'dom'`).\n * @property {boolean | null | undefined} [tableCellAlignToStyle=true]\n *   Turn obsolete `align` props on `td` and `th` into CSS `style` props\n *   (default: `true`).\n *\n * @typedef RuntimeDevelopment\n *   Runtime fields when development is on.\n * @property {Fragment} Fragment\n *   Fragment.\n * @property {true} development\n *   Whether to use `jsxDEV` (when on) or `jsx` and `jsxs` (when off).\n * @property {Jsx | null | undefined} [jsx]\n *   Dynamic JSX (optional).\n * @property {JsxDev} jsxDEV\n *   Development JSX.\n * @property {Jsx | null | undefined} [jsxs]\n *   Static JSX (optional).\n *\n * @typedef RuntimeProduction\n *   Runtime fields when development is off.\n * @property {Fragment} Fragment\n *   Fragment.\n * @property {false | null | undefined} [development]\n *   Whether to use `jsxDEV` (when on) or `jsx` and `jsxs` (when off) (optional).\n * @property {Jsx} jsx\n *   Dynamic JSX.\n * @property {JsxDev | null | undefined} [jsxDEV]\n *   Development JSX (optional).\n * @property {Jsx} jsxs\n *   Static JSX.\n *\n * @typedef RuntimeUnknown\n *   Runtime fields when development might be on or off.\n * @property {Fragment} Fragment\n *   Fragment.\n * @property {boolean} development\n *   Whether to use `jsxDEV` (when on) or `jsx` and `jsxs` (when off).\n * @property {Jsx | null | undefined} [jsx]\n *   Dynamic JSX (optional).\n * @property {JsxDev | null | undefined} [jsxDEV]\n *   Development JSX (optional).\n * @property {Jsx | null | undefined} [jsxs]\n *   Static JSX (optional).\n *\n * @typedef Source\n *   Info about source.\n * @property {number | undefined} columnNumber\n *   Column where thing starts (0-indexed).\n * @property {string | undefined} fileName\n *   Name of source file.\n * @property {number | undefined} lineNumber\n *   Line where thing starts (1-indexed).\n *\n * @typedef {'html' | 'svg'} Space\n *   Namespace.\n *\n *   > 👉 **Note**: hast is not XML.\n *   > It supports SVG as embedded in HTML.\n *   > It does not support the features available in XML.\n *   > Passing SVG might break but fragments of modern SVG should be fine.\n *   > Use `xast` if you need to support SVG as XML.\n *\n * @typedef State\n *   Info passed around.\n * @property {unknown} Fragment\n *   Fragment symbol.\n * @property {Array<Parents>} ancestors\n *   Stack of parents.\n * @property {Partial<Components>} components\n *   Components to swap.\n * @property {Create} create\n *   Create something in development or production.\n * @property {ElementAttributeNameCase} elementAttributeNameCase\n *   Casing to use for attribute names.\n * @property {string | undefined} filePath\n *   File path.\n * @property {boolean} ignoreInvalidStyle\n *   Ignore invalid CSS in `style` props.\n * @property {boolean} passKeys\n *   Generate keys to optimize frameworks that support them.\n * @property {boolean} passNode\n *   Pass `node` to components.\n * @property {Schema} schema\n *   Current schema.\n * @property {StylePropertyNameCase} stylePropertyNameCase\n *   Casing to use for property names in `style` objects.\n * @property {boolean} tableCellAlignToStyle\n *   Turn obsolete `align` props on `td` and `th` into CSS `style` props.\n *\n * @typedef {Record<string, string>} Style\n *   Style map.\n *\n * @typedef {'css' | 'dom'} StylePropertyNameCase\n *   Casing to use for property names in `style` objects.\n *\n *   CSS casing is for example `background-color` and `-webkit-line-clamp`.\n *   DOM casing is for example `backgroundColor` and `WebkitLineClamp`.\n *\n * @typedef {Style | boolean | number | string} Value\n *   Primitive property value and `Style` map.\n */\n\n/**\n * @typedef {RuntimeDevelopment & RegularFields} Development\n *   Configuration (development).\n * @typedef {Development | Production | Unknown} Options\n *   Configuration.\n * @typedef {RegularFields & RuntimeProduction} Production\n *   Configuration (production).\n * @typedef {RegularFields & RuntimeUnknown} Unknown\n *   Configuration (production or development).\n */\n\nimport {stringify as commas} from 'comma-separated-tokens'\nimport {whitespace} from 'hast-util-whitespace'\nimport {find, hastToReact, html, svg} from 'property-information'\nimport {stringify as spaces} from 'space-separated-tokens'\nimport styleToObject from 'style-to-object'\nimport {pointStart} from 'unist-util-position'\nimport {VFileMessage} from 'vfile-message'\n\nconst own = {}.hasOwnProperty\n\n/** @type {Map<string, number>} */\nconst emptyMap = new Map()\n\nconst cap = /[A-Z]/g\nconst dashSomething = /-([a-z])/g\n\n// `react-dom` triggers a warning for *any* white space in tables.\n// To follow GFM, `mdast-util-to-hast` injects line endings between elements.\n// Other tools might do so too, but they don’t do here, so we remove all of\n// that.\n\n// See: <https://github.com/facebook/react/pull/7081>.\n// See: <https://github.com/facebook/react/pull/7515>.\n// See: <https://github.com/remarkjs/remark-react/issues/64>.\n// See: <https://github.com/rehypejs/rehype-react/pull/29>.\n// See: <https://github.com/rehypejs/rehype-react/pull/32>.\n// See: <https://github.com/rehypejs/rehype-react/pull/45>.\nconst tableElements = new Set(['table', 'tbody', 'thead', 'tfoot', 'tr'])\n\nconst tableCellElement = new Set(['td', 'th'])\n\n/**\n * Transform a hast tree to preact, react, solid, svelte, vue, etc.,\n * with an automatic JSX runtime.\n *\n * @param {Nodes} tree\n *   Tree to transform.\n * @param {Options} options\n *   Configuration (required).\n * @returns {JSX.Element}\n *   JSX element.\n */\n\nexport function toJsxRuntime(tree, options) {\n  if (!options || options.Fragment === undefined) {\n    throw new TypeError('Expected `Fragment` in options')\n  }\n\n  const filePath = options.filePath || undefined\n  /** @type {Create} */\n  let create\n\n  if (options.development) {\n    if (typeof options.jsxDEV !== 'function') {\n      throw new TypeError(\n        'Expected `jsxDEV` in options when `development: true`'\n      )\n    }\n\n    create = developmentCreate(filePath, options.jsxDEV)\n  } else {\n    if (typeof options.jsx !== 'function') {\n      throw new TypeError('Expected `jsx` in production options')\n    }\n\n    if (typeof options.jsxs !== 'function') {\n      throw new TypeError('Expected `jsxs` in production options')\n    }\n\n    create = productionCreate(filePath, options.jsx, options.jsxs)\n  }\n\n  /** @type {State} */\n  const state = {\n    Fragment: options.Fragment,\n    ancestors: [],\n    components: options.components || {},\n    create,\n    elementAttributeNameCase: options.elementAttributeNameCase || 'react',\n    filePath,\n    ignoreInvalidStyle: options.ignoreInvalidStyle || false,\n    passKeys: options.passKeys !== false,\n    passNode: options.passNode || false,\n    schema: options.space === 'svg' ? svg : html,\n    stylePropertyNameCase: options.stylePropertyNameCase || 'dom',\n    tableCellAlignToStyle: options.tableCellAlignToStyle !== false\n  }\n\n  const result = one(state, tree, undefined)\n\n  // JSX element.\n  if (result && typeof result !== 'string') {\n    return result\n  }\n\n  // Text node or something that turned into nothing.\n  return state.create(\n    tree,\n    state.Fragment,\n    {children: result || undefined},\n    undefined\n  )\n}\n\n/**\n * Transform a node.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Nodes} node\n *   Current node.\n * @param {string | undefined} key\n *   Key.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction one(state, node, key) {\n  if (node.type === 'element' || node.type === 'root') {\n    const parentSchema = state.schema\n    let schema = parentSchema\n\n    if (\n      node.type === 'element' &&\n      node.tagName.toLowerCase() === 'svg' &&\n      parentSchema.space === 'html'\n    ) {\n      schema = svg\n      state.schema = schema\n    }\n\n    state.ancestors.push(node)\n\n    let children = createChildren(state, node)\n    const props = createProperties(state, state.ancestors)\n    let type = state.Fragment\n\n    state.ancestors.pop()\n\n    if (node.type === 'element') {\n      if (children && tableElements.has(node.tagName)) {\n        children = children.filter(function (child) {\n          return typeof child === 'string' ? !whitespace(child) : true\n        })\n      }\n\n      if (own.call(state.components, node.tagName)) {\n        const key = /** @type {keyof JSX.IntrinsicElements} */ (node.tagName)\n        type = state.components[key]\n\n        // If this is swapped out for a component:\n        if (\n          typeof type !== 'string' &&\n          type !== state.Fragment &&\n          state.passNode\n        ) {\n          props.node = node\n        }\n      } else {\n        type = node.tagName\n      }\n    }\n\n    if (children.length > 0) {\n      const value = children.length > 1 ? children : children[0]\n\n      if (value) {\n        props.children = value\n      }\n    }\n\n    // Restore parent schema.\n    state.schema = parentSchema\n\n    return state.create(node, type, props, key)\n  }\n\n  if (node.type === 'text') {\n    return node.value\n  }\n}\n\n/**\n * @param {string | undefined} _\n *   Path to file.\n * @param {Jsx} jsx\n *   Dynamic.\n * @param {Jsx} jsxs\n *   Static.\n * @returns {Create}\n *   Create a production element.\n */\nfunction productionCreate(_, jsx, jsxs) {\n  return create\n  /** @type {Create} */\n  function create(_, type, props, key) {\n    // Only an array when there are 2 or more children.\n    const isStaticChildren = Array.isArray(props.children)\n    const fn = isStaticChildren ? jsxs : jsx\n    return key ? fn(type, props, key) : fn(type, props)\n  }\n}\n\n/**\n * @param {string | undefined} filePath\n *   Path to file.\n * @param {JsxDev} jsxDEV\n *   Development.\n * @returns {Create}\n *   Create a development element.\n */\nfunction developmentCreate(filePath, jsxDEV) {\n  return create\n  /** @type {Create} */\n  function create(node, type, props, key) {\n    // Only an array when there are 2 or more children.\n    const isStaticChildren = Array.isArray(props.children)\n    const point = pointStart(node)\n    return jsxDEV(\n      type,\n      props,\n      key,\n      isStaticChildren,\n      {\n        columnNumber: point ? point.column - 1 : undefined,\n        fileName: filePath,\n        lineNumber: point ? point.line : undefined\n      },\n      undefined\n    )\n  }\n}\n\n/**\n * Create children.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Parents} node\n *   Current element.\n * @returns {Array<Child>}\n *   Children.\n */\nfunction createChildren(state, node) {\n  /** @type {Array<Child>} */\n  const children = []\n  let index = -1\n  /** @type {Map<string, number>} */\n  // Note: test this when Solid doesn’t want to merge my upcoming PR.\n  /* c8 ignore next */\n  const countsByTagName = state.passKeys ? new Map() : emptyMap\n\n  while (++index < node.children.length) {\n    const child = node.children[index]\n    /** @type {string | undefined} */\n    let key\n\n    if (state.passKeys && child.type === 'element') {\n      const count = countsByTagName.get(child.tagName) || 0\n      key = child.tagName + '-' + count\n      countsByTagName.set(child.tagName, count + 1)\n    }\n\n    const result = one(state, child, key)\n    if (result !== undefined) children.push(result)\n  }\n\n  return children\n}\n\n/**\n * Handle properties.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Array<Parents>} ancestors\n *   Stack of parents.\n * @returns {Props}\n *   Props for runtime.\n */\nfunction createProperties(state, ancestors) {\n  const node = ancestors[ancestors.length - 1]\n  /** @type {Props} */\n  const props = {}\n  /** @type {string} */\n  let prop\n\n  if ('properties' in node && node.properties) {\n    /** @type {string | undefined} */\n    let alignValue\n\n    for (prop in node.properties) {\n      if (prop !== 'children' && own.call(node.properties, prop)) {\n        const result = createProperty(\n          state,\n          ancestors,\n          prop,\n          node.properties[prop]\n        )\n\n        if (result) {\n          const [key, value] = result\n\n          if (\n            state.tableCellAlignToStyle &&\n            key === 'align' &&\n            typeof value === 'string' &&\n            tableCellElement.has(node.tagName)\n          ) {\n            alignValue = value\n          } else {\n            props[key] = value\n          }\n        }\n      }\n    }\n\n    if (alignValue) {\n      // Assume style is an object.\n      const style = /** @type {Style} */ (props.style || (props.style = {}))\n      style[\n        state.stylePropertyNameCase === 'css' ? 'text-align' : 'textAlign'\n      ] = alignValue\n    }\n  }\n\n  return props\n}\n\n/**\n * Handle a property.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Array<Parents>} ancestors\n *   Stack of parents.\n * @param {string} prop\n *   Key.\n * @param {Array<number | string> | boolean | number | string | null | undefined} value\n *   hast property value.\n * @returns {Field | undefined}\n *   Field for runtime, optional.\n */\nfunction createProperty(state, ancestors, prop, value) {\n  const info = find(state.schema, prop)\n\n  // Ignore nullish and `NaN` values.\n  if (\n    value === null ||\n    value === undefined ||\n    (typeof value === 'number' && Number.isNaN(value))\n  ) {\n    return\n  }\n\n  if (Array.isArray(value)) {\n    // Accept `array`.\n    // Most props are space-separated.\n    value = info.commaSeparated ? commas(value) : spaces(value)\n  }\n\n  // React only accepts `style` as object.\n  if (info.property === 'style') {\n    let styleObject =\n      typeof value === 'object'\n        ? value\n        : parseStyle(state, ancestors, String(value))\n\n    if (state.stylePropertyNameCase === 'css') {\n      styleObject = transformStylesToCssCasing(styleObject)\n    }\n\n    return ['style', styleObject]\n  }\n\n  return [\n    state.elementAttributeNameCase === 'react' && info.space\n      ? hastToReact[info.property] || info.property\n      : info.attribute,\n    value\n  ]\n}\n\n/**\n * Parse a CSS declaration to an object.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Array<Nodes>} ancestors\n *   Stack of nodes.\n * @param {string} value\n *   CSS declarations.\n * @returns {Style}\n *   Properties.\n * @throws\n *   Throws `VFileMessage` when CSS cannot be parsed.\n */\nfunction parseStyle(state, ancestors, value) {\n  /** @type {Style} */\n  const result = {}\n\n  try {\n    styleToObject(value, replacer)\n  } catch (error) {\n    if (!state.ignoreInvalidStyle) {\n      const cause = /** @type {Error} */ (error)\n      const message = new VFileMessage('Cannot parse `style` attribute', {\n        ancestors,\n        cause,\n        source: 'hast-util-to-jsx-runtime',\n        ruleId: 'style'\n      })\n      message.file = state.filePath || undefined\n      message.url =\n        'https://github.com/syntax-tree/hast-util-to-jsx-runtime#cannot-parse-style-attribute'\n\n      throw message\n    }\n  }\n\n  return result\n\n  /**\n   * Add a CSS property (normal, so with dashes) to `result` as a DOM CSS\n   * property.\n   *\n   * @param {string} name\n   *   Key.\n   * @param {string} value\n   *   Value\n   * @returns {undefined}\n   *   Nothing.\n   */\n  function replacer(name, value) {\n    let key = name\n\n    if (key.slice(0, 2) !== '--') {\n      if (key.slice(0, 4) === '-ms-') key = 'ms-' + key.slice(4)\n      key = key.replace(dashSomething, toCamel)\n    }\n\n    result[key] = value\n  }\n}\n\n/**\n * Transform a DOM casing style object to a CSS casing style object.\n *\n * @param {Style} domCasing\n * @returns {Style}\n */\nfunction transformStylesToCssCasing(domCasing) {\n  /** @type {Style} */\n  const cssCasing = {}\n  /** @type {string} */\n  let from\n\n  for (from in domCasing) {\n    if (own.call(domCasing, from)) {\n      cssCasing[transformStyleToCssCasing(from)] = domCasing[from]\n    }\n  }\n\n  return cssCasing\n}\n\n/**\n * Transform a DOM casing style field to a CSS casing style field.\n *\n * @param {string} from\n * @returns {string}\n */\nfunction transformStyleToCssCasing(from) {\n  let to = from.replace(cap, toDash)\n  // Handle `ms-xxx` -> `-ms-xxx`.\n  if (to.slice(0, 3) === 'ms-') to = '-' + to\n  return to\n}\n\n/**\n * Make `$1` capitalized.\n *\n * @param {string} _\n *   Whatever.\n * @param {string} $1\n *   Single ASCII alphabetical.\n * @returns {string}\n *   Capitalized `$1`.\n */\nfunction toCamel(_, $1) {\n  return $1.toUpperCase()\n}\n\n/**\n * Make `$0` dash cased.\n *\n * @param {string} $0\n *   Capitalized ASCII leter.\n * @returns {string}\n *   Dash and lower letter.\n */\nfunction toDash($0) {\n  return '-' + $0.toLowerCase()\n}\n","/**\n * @typedef Options\n *   Configuration for `stringify`.\n * @property {boolean} [padLeft=true]\n *   Whether to pad a space before a token.\n * @property {boolean} [padRight=false]\n *   Whether to pad a space after a token.\n */\n\n/**\n * @typedef {Options} StringifyOptions\n *   Please use `StringifyOptions` instead.\n */\n\n/**\n * Parse comma-separated tokens to an array.\n *\n * @param {string} value\n *   Comma-separated tokens.\n * @returns {Array<string>}\n *   List of tokens.\n */\nexport function parse(value) {\n  /** @type {Array<string>} */\n  const tokens = []\n  const input = String(value || '')\n  let index = input.indexOf(',')\n  let start = 0\n  /** @type {boolean} */\n  let end = false\n\n  while (!end) {\n    if (index === -1) {\n      index = input.length\n      end = true\n    }\n\n    const token = input.slice(start, index).trim()\n\n    if (token || !end) {\n      tokens.push(token)\n    }\n\n    start = index + 1\n    index = input.indexOf(',', start)\n  }\n\n  return tokens\n}\n\n/**\n * Serialize an array of strings or numbers to comma-separated tokens.\n *\n * @param {Array<string|number>} values\n *   List of tokens.\n * @param {Options} [options]\n *   Configuration for `stringify` (optional).\n * @returns {string}\n *   Comma-separated tokens.\n */\nexport function stringify(values, options) {\n  const settings = options || {}\n\n  // Ensure the last empty entry is seen.\n  const input = values[values.length - 1] === '' ? [...values, ''] : values\n\n  return input\n    .join(\n      (settings.padRight ? ' ' : '') +\n        ',' +\n        (settings.padLeft === false ? '' : ' ')\n    )\n    .trim()\n}\n","/**\n * Parse space-separated tokens to an array of strings.\n *\n * @param {string} value\n *   Space-separated tokens.\n * @returns {Array<string>}\n *   List of tokens.\n */\nexport function parse(value) {\n  const input = String(value || '').trim()\n  return input ? input.split(/[ \\t\\n\\r\\f]+/g) : []\n}\n\n/**\n * Serialize an array of strings as space separated-tokens.\n *\n * @param {Array<string|number>} values\n *   List of tokens.\n * @returns {string}\n *   Space-separated tokens.\n */\nexport function stringify(values) {\n  return values.join(' ').trim()\n}\n","/**\n * HTML URL properties.\n *\n * Each key is a property name and each value is a list of tag names it applies\n * to or `null` if it applies to all elements.\n *\n * @type {Record<string, Array<string> | null>}\n */\nexport const urlAttributes = {\n  action: ['form'],\n  cite: ['blockquote', 'del', 'ins', 'q'],\n  data: ['object'],\n  formAction: ['button', 'input'],\n  href: ['a', 'area', 'base', 'link'],\n  icon: ['menuitem'],\n  itemId: null,\n  manifest: ['html'],\n  ping: ['a', 'area'],\n  poster: ['video'],\n  src: [\n    'audio',\n    'embed',\n    'iframe',\n    'img',\n    'input',\n    'script',\n    'source',\n    'track',\n    'video'\n  ]\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n */\n\nconst unicodePunctuationInternal = regexCheck(/\\p{P}/u)\n\n/**\n * Check whether the character code represents an ASCII alpha (`a` through `z`,\n * case insensitive).\n *\n * An **ASCII alpha** is an ASCII upper alpha or ASCII lower alpha.\n *\n * An **ASCII upper alpha** is a character in the inclusive range U+0041 (`A`)\n * to U+005A (`Z`).\n *\n * An **ASCII lower alpha** is a character in the inclusive range U+0061 (`a`)\n * to U+007A (`z`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAlpha = regexCheck(/[A-Za-z]/)\n\n/**\n * Check whether the character code represents an ASCII alphanumeric (`a`\n * through `z`, case insensitive, or `0` through `9`).\n *\n * An **ASCII alphanumeric** is an ASCII digit (see `asciiDigit`) or ASCII alpha\n * (see `asciiAlpha`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAlphanumeric = regexCheck(/[\\dA-Za-z]/)\n\n/**\n * Check whether the character code represents an ASCII atext.\n *\n * atext is an ASCII alphanumeric (see `asciiAlphanumeric`), or a character in\n * the inclusive ranges U+0023 NUMBER SIGN (`#`) to U+0027 APOSTROPHE (`'`),\n * U+002A ASTERISK (`*`), U+002B PLUS SIGN (`+`), U+002D DASH (`-`), U+002F\n * SLASH (`/`), U+003D EQUALS TO (`=`), U+003F QUESTION MARK (`?`), U+005E\n * CARET (`^`) to U+0060 GRAVE ACCENT (`` ` ``), or U+007B LEFT CURLY BRACE\n * (`{`) to U+007E TILDE (`~`).\n *\n * See:\n * **\\[RFC5322]**:\n * [Internet Message Format](https://tools.ietf.org/html/rfc5322).\n * P. Resnick.\n * IETF.\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAtext = regexCheck(/[#-'*+\\--9=?A-Z^-~]/)\n\n/**\n * Check whether a character code is an ASCII control character.\n *\n * An **ASCII control** is a character in the inclusive range U+0000 NULL (NUL)\n * to U+001F (US), or U+007F (DEL).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function asciiControl(code) {\n  return (\n    // Special whitespace codes (which have negative values), C0 and Control\n    // character DEL\n    code !== null && (code < 32 || code === 127)\n  )\n}\n\n/**\n * Check whether the character code represents an ASCII digit (`0` through `9`).\n *\n * An **ASCII digit** is a character in the inclusive range U+0030 (`0`) to\n * U+0039 (`9`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiDigit = regexCheck(/\\d/)\n\n/**\n * Check whether the character code represents an ASCII hex digit (`a` through\n * `f`, case insensitive, or `0` through `9`).\n *\n * An **ASCII hex digit** is an ASCII digit (see `asciiDigit`), ASCII upper hex\n * digit, or an ASCII lower hex digit.\n *\n * An **ASCII upper hex digit** is a character in the inclusive range U+0041\n * (`A`) to U+0046 (`F`).\n *\n * An **ASCII lower hex digit** is a character in the inclusive range U+0061\n * (`a`) to U+0066 (`f`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiHexDigit = regexCheck(/[\\dA-Fa-f]/)\n\n/**\n * Check whether the character code represents ASCII punctuation.\n *\n * An **ASCII punctuation** is a character in the inclusive ranges U+0021\n * EXCLAMATION MARK (`!`) to U+002F SLASH (`/`), U+003A COLON (`:`) to U+0040 AT\n * SIGN (`@`), U+005B LEFT SQUARE BRACKET (`[`) to U+0060 GRAVE ACCENT\n * (`` ` ``), or U+007B LEFT CURLY BRACE (`{`) to U+007E TILDE (`~`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiPunctuation = regexCheck(/[!-/:-@[-`{-~]/)\n\n/**\n * Check whether a character code is a markdown line ending.\n *\n * A **markdown line ending** is the virtual characters M-0003 CARRIAGE RETURN\n * LINE FEED (CRLF), M-0004 LINE FEED (LF) and M-0005 CARRIAGE RETURN (CR).\n *\n * In micromark, the actual character U+000A LINE FEED (LF) and U+000D CARRIAGE\n * RETURN (CR) are replaced by these virtual characters depending on whether\n * they occurred together.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEnding(code) {\n  return code !== null && code < -2\n}\n\n/**\n * Check whether a character code is a markdown line ending (see\n * `markdownLineEnding`) or markdown space (see `markdownSpace`).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEndingOrSpace(code) {\n  return code !== null && (code < 0 || code === 32)\n}\n\n/**\n * Check whether a character code is a markdown space.\n *\n * A **markdown space** is the concrete character U+0020 SPACE (SP) and the\n * virtual characters M-0001 VIRTUAL SPACE (VS) and M-0002 HORIZONTAL TAB (HT).\n *\n * In micromark, the actual character U+0009 CHARACTER TABULATION (HT) is\n * replaced by one M-0002 HORIZONTAL TAB (HT) and between 0 and 3 M-0001 VIRTUAL\n * SPACE (VS) characters, depending on the column at which the tab occurred.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownSpace(code) {\n  return code === -2 || code === -1 || code === 32\n}\n\n// Size note: removing ASCII from the regex and using `asciiPunctuation` here\n// In fact adds to the bundle size.\n/**\n * Check whether the character code represents Unicode punctuation.\n *\n * A **Unicode punctuation** is a character in the Unicode `Pc` (Punctuation,\n * Connector), `Pd` (Punctuation, Dash), `Pe` (Punctuation, Close), `Pf`\n * (Punctuation, Final quote), `Pi` (Punctuation, Initial quote), `Po`\n * (Punctuation, Other), or `Ps` (Punctuation, Open) categories, or an ASCII\n * punctuation (see `asciiPunctuation`).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function unicodePunctuation(code) {\n  return asciiPunctuation(code) || unicodePunctuationInternal(code)\n}\n\n/**\n * Check whether the character code represents Unicode whitespace.\n *\n * Note that this does handle micromark specific markdown whitespace characters.\n * See `markdownLineEndingOrSpace` to check that.\n *\n * A **Unicode whitespace** is a character in the Unicode `Zs` (Separator,\n * Space) category, or U+0009 CHARACTER TABULATION (HT), U+000A LINE FEED (LF),\n * U+000C (FF), or U+000D CARRIAGE RETURN (CR) (**\\[UNICODE]**).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const unicodeWhitespace = regexCheck(/\\s/)\n\n/**\n * Create a code check from a regex.\n *\n * @param {RegExp} regex\n * @returns {(code: Code) => boolean}\n */\nfunction regexCheck(regex) {\n  return check\n\n  /**\n   * Check whether a code matches the bound regex.\n   *\n   * @param {Code} code\n   *   Character code.\n   * @returns {boolean}\n   *   Whether the character code matches the bound regex.\n   */\n  function check(code) {\n    return code !== null && code > -1 && regex.test(String.fromCharCode(code))\n  }\n}\n","const characterReferences = {'\"': 'quot', '&': 'amp', '<': 'lt', '>': 'gt'}\n\n/**\n * Encode only the dangerous HTML characters.\n *\n * This ensures that certain characters which have special meaning in HTML are\n * dealt with.\n * Technically, we can skip `>` and `\"` in many cases, but CM includes them.\n *\n * @param {string} value\n *   Value to encode.\n * @returns {string}\n *   Encoded value.\n */\nexport function encode(value) {\n  return value.replace(/[\"&<>]/g, replace)\n\n  /**\n   * @param {string} value\n   * @returns {string}\n   */\n  function replace(value) {\n    // @ts-expect-error Hush, it’s fine.\n    return '&' + characterReferences[value] + ';'\n  }\n}\n","import {asciiAlphanumeric} from 'micromark-util-character'\nimport {encode} from 'micromark-util-encode'\n/**\n * Make a value safe for injection as a URL.\n *\n * This encodes unsafe characters with percent-encoding and skips already\n * encoded sequences (see `normalizeUri`).\n * Further unsafe characters are encoded as character references (see\n * `micromark-util-encode`).\n *\n * A regex of allowed protocols can be given, in which case the URL is\n * sanitized.\n * For example, `/^(https?|ircs?|mailto|xmpp)$/i` can be used for `a[href]`, or\n * `/^https?$/i` for `img[src]` (this is what `github.com` allows).\n * If the URL includes an unknown protocol (one not matched by `protocol`, such\n * as a dangerous example, `javascript:`), the value is ignored.\n *\n * @param {string | null | undefined} url\n *   URI to sanitize.\n * @param {RegExp | null | undefined} [protocol]\n *   Allowed protocols.\n * @returns {string}\n *   Sanitized URI.\n */\nexport function sanitizeUri(url, protocol) {\n  const value = encode(normalizeUri(url || ''))\n  if (!protocol) {\n    return value\n  }\n  const colon = value.indexOf(':')\n  const questionMark = value.indexOf('?')\n  const numberSign = value.indexOf('#')\n  const slash = value.indexOf('/')\n  if (\n    // If there is no protocol, it’s relative.\n    colon < 0 ||\n    // If the first colon is after a `?`, `#`, or `/`, it’s not a protocol.\n    (slash > -1 && colon > slash) ||\n    (questionMark > -1 && colon > questionMark) ||\n    (numberSign > -1 && colon > numberSign) ||\n    // It is a protocol, it should be allowed.\n    protocol.test(value.slice(0, colon))\n  ) {\n    return value\n  }\n  return ''\n}\n\n/**\n * Normalize a URL.\n *\n * Encode unsafe characters with percent-encoding, skipping already encoded\n * sequences.\n *\n * @param {string} value\n *   URI to normalize.\n * @returns {string}\n *   Normalized URI.\n */\nexport function normalizeUri(value) {\n  /** @type {Array<string>} */\n  const result = []\n  let index = -1\n  let start = 0\n  let skip = 0\n  while (++index < value.length) {\n    const code = value.charCodeAt(index)\n    /** @type {string} */\n    let replace = ''\n\n    // A correct percent encoded value.\n    if (\n      code === 37 &&\n      asciiAlphanumeric(value.charCodeAt(index + 1)) &&\n      asciiAlphanumeric(value.charCodeAt(index + 2))\n    ) {\n      skip = 2\n    }\n    // ASCII.\n    else if (code < 128) {\n      if (!/[!#$&-;=?-Z_a-z~]/.test(String.fromCharCode(code))) {\n        replace = String.fromCharCode(code)\n      }\n    }\n    // Astral.\n    else if (code > 55_295 && code < 57_344) {\n      const next = value.charCodeAt(index + 1)\n\n      // A correct surrogate pair.\n      if (code < 56_320 && next > 56_319 && next < 57_344) {\n        replace = String.fromCharCode(code, next)\n        skip = 1\n      }\n      // Lone surrogate.\n      else {\n        replace = '\\uFFFD'\n      }\n    }\n    // Unicode.\n    else {\n      replace = String.fromCharCode(code)\n    }\n    if (replace) {\n      result.push(value.slice(start, index), encodeURIComponent(replace))\n      start = index + skip + 1\n      replace = ''\n    }\n    if (skip) {\n      index += skip\n      skip = 0\n    }\n  }\n  return result.join('') + value.slice(start)\n}\n","/**\n * @typedef {import('mdast').Nodes} Nodes\n *\n * @typedef Options\n *   Configuration (optional).\n * @property {boolean | null | undefined} [includeImageAlt=true]\n *   Whether to use `alt` for `image`s (default: `true`).\n * @property {boolean | null | undefined} [includeHtml=true]\n *   Whether to use `value` of HTML (default: `true`).\n */\n\n/** @type {Options} */\nconst emptyOptions = {}\n\n/**\n * Get the text content of a node or list of nodes.\n *\n * Prefers the node’s plain-text fields, otherwise serializes its children,\n * and if the given value is an array, serialize the nodes in it.\n *\n * @param {unknown} [value]\n *   Thing to serialize, typically `Node`.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {string}\n *   Serialized `value`.\n */\nexport function toString(value, options) {\n  const settings = options || emptyOptions\n  const includeImageAlt =\n    typeof settings.includeImageAlt === 'boolean'\n      ? settings.includeImageAlt\n      : true\n  const includeHtml =\n    typeof settings.includeHtml === 'boolean' ? settings.includeHtml : true\n\n  return one(value, includeImageAlt, includeHtml)\n}\n\n/**\n * One node or several nodes.\n *\n * @param {unknown} value\n *   Thing to serialize.\n * @param {boolean} includeImageAlt\n *   Include image `alt`s.\n * @param {boolean} includeHtml\n *   Include HTML.\n * @returns {string}\n *   Serialized node.\n */\nfunction one(value, includeImageAlt, includeHtml) {\n  if (node(value)) {\n    if ('value' in value) {\n      return value.type === 'html' && !includeHtml ? '' : value.value\n    }\n\n    if (includeImageAlt && 'alt' in value && value.alt) {\n      return value.alt\n    }\n\n    if ('children' in value) {\n      return all(value.children, includeImageAlt, includeHtml)\n    }\n  }\n\n  if (Array.isArray(value)) {\n    return all(value, includeImageAlt, includeHtml)\n  }\n\n  return ''\n}\n\n/**\n * Serialize a list of nodes.\n *\n * @param {Array<unknown>} values\n *   Thing to serialize.\n * @param {boolean} includeImageAlt\n *   Include image `alt`s.\n * @param {boolean} includeHtml\n *   Include HTML.\n * @returns {string}\n *   Serialized nodes.\n */\nfunction all(values, includeImageAlt, includeHtml) {\n  /** @type {Array<string>} */\n  const result = []\n  let index = -1\n\n  while (++index < values.length) {\n    result[index] = one(values[index], includeImageAlt, includeHtml)\n  }\n\n  return result.join('')\n}\n\n/**\n * Check if `value` looks like a node.\n *\n * @param {unknown} value\n *   Thing.\n * @returns {value is Nodes}\n *   Whether `value` is a node.\n */\nfunction node(value) {\n  return Boolean(value && typeof value === 'object')\n}\n","/**\n * Like `Array#splice`, but smarter for giant arrays.\n *\n * `Array#splice` takes all items to be inserted as individual argument which\n * causes a stack overflow in V8 when trying to insert 100k items for instance.\n *\n * Otherwise, this does not return the removed items, and takes `items` as an\n * array instead of rest parameters.\n *\n * @template {unknown} T\n *   Item type.\n * @param {Array<T>} list\n *   List to operate on.\n * @param {number} start\n *   Index to remove/insert at (can be negative).\n * @param {number} remove\n *   Number of items to remove.\n * @param {Array<T>} items\n *   Items to inject into `list`.\n * @returns {undefined}\n *   Nothing.\n */\nexport function splice(list, start, remove, items) {\n  const end = list.length\n  let chunkStart = 0\n  /** @type {Array<unknown>} */\n  let parameters\n\n  // Make start between zero and `end` (included).\n  if (start < 0) {\n    start = -start > end ? 0 : end + start\n  } else {\n    start = start > end ? end : start\n  }\n  remove = remove > 0 ? remove : 0\n\n  // No need to chunk the items if there’s only a couple (10k) items.\n  if (items.length < 10000) {\n    parameters = Array.from(items)\n    parameters.unshift(start, remove)\n    // @ts-expect-error Hush, it’s fine.\n    list.splice(...parameters)\n  } else {\n    // Delete `remove` items starting from `start`\n    if (remove) list.splice(start, remove)\n\n    // Insert the items in chunks to not cause stack overflows.\n    while (chunkStart < items.length) {\n      parameters = items.slice(chunkStart, chunkStart + 10000)\n      parameters.unshift(start, 0)\n      // @ts-expect-error Hush, it’s fine.\n      list.splice(...parameters)\n      chunkStart += 10000\n      start += 10000\n    }\n  }\n}\n\n/**\n * Append `items` (an array) at the end of `list` (another array).\n * When `list` was empty, returns `items` instead.\n *\n * This prevents a potentially expensive operation when `list` is empty,\n * and adds items in batches to prevent V8 from hanging.\n *\n * @template {unknown} T\n *   Item type.\n * @param {Array<T>} list\n *   List to operate on.\n * @param {Array<T>} items\n *   Items to add to `list`.\n * @returns {Array<T>}\n *   Either `list` or `items`.\n */\nexport function push(list, items) {\n  if (list.length > 0) {\n    splice(list, list.length, 0, items)\n    return list\n  }\n  return items\n}\n","/**\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Token} Token\n */\n\nimport {splice} from 'micromark-util-chunked'\n/**\n * Tokenize subcontent.\n *\n * @param {Array<Event>} events\n *   List of events.\n * @returns {boolean}\n *   Whether subtokens were found.\n */ // eslint-disable-next-line complexity\nexport function subtokenize(events) {\n  /** @type {Record<string, number>} */\n  const jumps = {}\n  let index = -1\n  /** @type {Event} */\n  let event\n  /** @type {number | undefined} */\n  let lineIndex\n  /** @type {number} */\n  let otherIndex\n  /** @type {Event} */\n  let otherEvent\n  /** @type {Array<Event>} */\n  let parameters\n  /** @type {Array<Event>} */\n  let subevents\n  /** @type {boolean | undefined} */\n  let more\n  while (++index < events.length) {\n    while (index in jumps) {\n      index = jumps[index]\n    }\n    event = events[index]\n\n    // Add a hook for the GFM tasklist extension, which needs to know if text\n    // is in the first content of a list item.\n    if (\n      index &&\n      event[1].type === 'chunkFlow' &&\n      events[index - 1][1].type === 'listItemPrefix'\n    ) {\n      subevents = event[1]._tokenizer.events\n      otherIndex = 0\n      if (\n        otherIndex < subevents.length &&\n        subevents[otherIndex][1].type === 'lineEndingBlank'\n      ) {\n        otherIndex += 2\n      }\n      if (\n        otherIndex < subevents.length &&\n        subevents[otherIndex][1].type === 'content'\n      ) {\n        while (++otherIndex < subevents.length) {\n          if (subevents[otherIndex][1].type === 'content') {\n            break\n          }\n          if (subevents[otherIndex][1].type === 'chunkText') {\n            subevents[otherIndex][1]._isInFirstContentOfListItem = true\n            otherIndex++\n          }\n        }\n      }\n    }\n\n    // Enter.\n    if (event[0] === 'enter') {\n      if (event[1].contentType) {\n        Object.assign(jumps, subcontent(events, index))\n        index = jumps[index]\n        more = true\n      }\n    }\n    // Exit.\n    else if (event[1]._container) {\n      otherIndex = index\n      lineIndex = undefined\n      while (otherIndex--) {\n        otherEvent = events[otherIndex]\n        if (\n          otherEvent[1].type === 'lineEnding' ||\n          otherEvent[1].type === 'lineEndingBlank'\n        ) {\n          if (otherEvent[0] === 'enter') {\n            if (lineIndex) {\n              events[lineIndex][1].type = 'lineEndingBlank'\n            }\n            otherEvent[1].type = 'lineEnding'\n            lineIndex = otherIndex\n          }\n        } else {\n          break\n        }\n      }\n      if (lineIndex) {\n        // Fix position.\n        event[1].end = Object.assign({}, events[lineIndex][1].start)\n\n        // Switch container exit w/ line endings.\n        parameters = events.slice(lineIndex, index)\n        parameters.unshift(event)\n        splice(events, lineIndex, index - lineIndex + 1, parameters)\n      }\n    }\n  }\n  return !more\n}\n\n/**\n * Tokenize embedded tokens.\n *\n * @param {Array<Event>} events\n * @param {number} eventIndex\n * @returns {Record<string, number>}\n */\nfunction subcontent(events, eventIndex) {\n  const token = events[eventIndex][1]\n  const context = events[eventIndex][2]\n  let startPosition = eventIndex - 1\n  /** @type {Array<number>} */\n  const startPositions = []\n  const tokenizer =\n    token._tokenizer || context.parser[token.contentType](token.start)\n  const childEvents = tokenizer.events\n  /** @type {Array<[number, number]>} */\n  const jumps = []\n  /** @type {Record<string, number>} */\n  const gaps = {}\n  /** @type {Array<Chunk>} */\n  let stream\n  /** @type {Token | undefined} */\n  let previous\n  let index = -1\n  /** @type {Token | undefined} */\n  let current = token\n  let adjust = 0\n  let start = 0\n  const breaks = [start]\n\n  // Loop forward through the linked tokens to pass them in order to the\n  // subtokenizer.\n  while (current) {\n    // Find the position of the event for this token.\n    while (events[++startPosition][1] !== current) {\n      // Empty.\n    }\n    startPositions.push(startPosition)\n    if (!current._tokenizer) {\n      stream = context.sliceStream(current)\n      if (!current.next) {\n        stream.push(null)\n      }\n      if (previous) {\n        tokenizer.defineSkip(current.start)\n      }\n      if (current._isInFirstContentOfListItem) {\n        tokenizer._gfmTasklistFirstContentOfListItem = true\n      }\n      tokenizer.write(stream)\n      if (current._isInFirstContentOfListItem) {\n        tokenizer._gfmTasklistFirstContentOfListItem = undefined\n      }\n    }\n\n    // Unravel the next token.\n    previous = current\n    current = current.next\n  }\n\n  // Now, loop back through all events (and linked tokens), to figure out which\n  // parts belong where.\n  current = token\n  while (++index < childEvents.length) {\n    if (\n      // Find a void token that includes a break.\n      childEvents[index][0] === 'exit' &&\n      childEvents[index - 1][0] === 'enter' &&\n      childEvents[index][1].type === childEvents[index - 1][1].type &&\n      childEvents[index][1].start.line !== childEvents[index][1].end.line\n    ) {\n      start = index + 1\n      breaks.push(start)\n      // Help GC.\n      current._tokenizer = undefined\n      current.previous = undefined\n      current = current.next\n    }\n  }\n\n  // Help GC.\n  tokenizer.events = []\n\n  // If there’s one more token (which is the cases for lines that end in an\n  // EOF), that’s perfect: the last point we found starts it.\n  // If there isn’t then make sure any remaining content is added to it.\n  if (current) {\n    // Help GC.\n    current._tokenizer = undefined\n    current.previous = undefined\n  } else {\n    breaks.pop()\n  }\n\n  // Now splice the events from the subtokenizer into the current events,\n  // moving back to front so that splice indices aren’t affected.\n  index = breaks.length\n  while (index--) {\n    const slice = childEvents.slice(breaks[index], breaks[index + 1])\n    const start = startPositions.pop()\n    jumps.unshift([start, start + slice.length - 1])\n    splice(events, start, 2, slice)\n  }\n  index = -1\n  while (++index < jumps.length) {\n    gaps[adjust + jumps[index][0]] = adjust + jumps[index][1]\n    adjust += jumps[index][1] - jumps[index][0] - 1\n  }\n  return gaps\n}\n","/**\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').Handles} Handles\n * @typedef {import('micromark-util-types').HtmlExtension} HtmlExtension\n * @typedef {import('micromark-util-types').NormalizedExtension} NormalizedExtension\n */\n\nimport {splice} from 'micromark-util-chunked'\n\nconst hasOwnProperty = {}.hasOwnProperty\n\n/**\n * Combine multiple syntax extensions into one.\n *\n * @param {Array<Extension>} extensions\n *   List of syntax extensions.\n * @returns {NormalizedExtension}\n *   A single combined extension.\n */\nexport function combineExtensions(extensions) {\n  /** @type {NormalizedExtension} */\n  const all = {}\n  let index = -1\n\n  while (++index < extensions.length) {\n    syntaxExtension(all, extensions[index])\n  }\n\n  return all\n}\n\n/**\n * Merge `extension` into `all`.\n *\n * @param {NormalizedExtension} all\n *   Extension to merge into.\n * @param {Extension} extension\n *   Extension to merge.\n * @returns {undefined}\n */\nfunction syntaxExtension(all, extension) {\n  /** @type {keyof Extension} */\n  let hook\n\n  for (hook in extension) {\n    const maybe = hasOwnProperty.call(all, hook) ? all[hook] : undefined\n    /** @type {Record<string, unknown>} */\n    const left = maybe || (all[hook] = {})\n    /** @type {Record<string, unknown> | undefined} */\n    const right = extension[hook]\n    /** @type {string} */\n    let code\n\n    if (right) {\n      for (code in right) {\n        if (!hasOwnProperty.call(left, code)) left[code] = []\n        const value = right[code]\n        constructs(\n          // @ts-expect-error Looks like a list.\n          left[code],\n          Array.isArray(value) ? value : value ? [value] : []\n        )\n      }\n    }\n  }\n}\n\n/**\n * Merge `list` into `existing` (both lists of constructs).\n * Mutates `existing`.\n *\n * @param {Array<unknown>} existing\n * @param {Array<unknown>} list\n * @returns {undefined}\n */\nfunction constructs(existing, list) {\n  let index = -1\n  /** @type {Array<unknown>} */\n  const before = []\n\n  while (++index < list.length) {\n    // @ts-expect-error Looks like an object.\n    ;(list[index].add === 'after' ? existing : before).push(list[index])\n  }\n\n  splice(existing, 0, 0, before)\n}\n\n/**\n * Combine multiple HTML extensions into one.\n *\n * @param {Array<HtmlExtension>} htmlExtensions\n *   List of HTML extensions.\n * @returns {HtmlExtension}\n *   A single combined HTML extension.\n */\nexport function combineHtmlExtensions(htmlExtensions) {\n  /** @type {HtmlExtension} */\n  const handlers = {}\n  let index = -1\n\n  while (++index < htmlExtensions.length) {\n    htmlExtension(handlers, htmlExtensions[index])\n  }\n\n  return handlers\n}\n\n/**\n * Merge `extension` into `all`.\n *\n * @param {HtmlExtension} all\n *   Extension to merge into.\n * @param {HtmlExtension} extension\n *   Extension to merge.\n * @returns {undefined}\n */\nfunction htmlExtension(all, extension) {\n  /** @type {keyof HtmlExtension} */\n  let hook\n\n  for (hook in extension) {\n    const maybe = hasOwnProperty.call(all, hook) ? all[hook] : undefined\n    const left = maybe || (all[hook] = {})\n    const right = extension[hook]\n    /** @type {keyof Handles} */\n    let type\n\n    if (right) {\n      for (type in right) {\n        // @ts-expect-error assume document vs regular handler are managed correctly.\n        left[type] = right[type]\n      }\n    }\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenType} TokenType\n */\n\nimport {markdownSpace} from 'micromark-util-character'\n\n// To do: implement `spaceOrTab`, `spaceOrTabMinMax`, `spaceOrTabWithOptions`.\n\n/**\n * Parse spaces and tabs.\n *\n * There is no `nok` parameter:\n *\n * *   spaces in markdown are often optional, in which case this factory can be\n *     used and `ok` will be switched to whether spaces were found or not\n * *   one line ending or space can be detected with `markdownSpace(code)` right\n *     before using `factorySpace`\n *\n * ###### Examples\n *\n * Where `␉` represents a tab (plus how much it expands) and `␠` represents a\n * single space.\n *\n * ```markdown\n * ␉\n * ␠␠␠␠\n * ␉␠\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {TokenType} type\n *   Type (`' \\t'`).\n * @param {number | undefined} [max=Infinity]\n *   Max (exclusive).\n * @returns {State}\n *   Start state.\n */\nexport function factorySpace(effects, ok, type, max) {\n  const limit = max ? max - 1 : Number.POSITIVE_INFINITY\n  let size = 0\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    if (markdownSpace(code)) {\n      effects.enter(type)\n      return prefix(code)\n    }\n    return ok(code)\n  }\n\n  /** @type {State} */\n  function prefix(code) {\n    if (markdownSpace(code) && size++ < limit) {\n      effects.consume(code)\n      return prefix\n    }\n    effects.exit(type)\n    return ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n/** @type {InitialConstruct} */\nexport const content = {\n  tokenize: initializeContent\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Initializer}\n */\nfunction initializeContent(effects) {\n  const contentStart = effects.attempt(\n    this.parser.constructs.contentInitial,\n    afterContentStartConstruct,\n    paragraphInitial\n  )\n  /** @type {Token} */\n  let previous\n  return contentStart\n\n  /** @type {State} */\n  function afterContentStartConstruct(code) {\n    if (code === null) {\n      effects.consume(code)\n      return\n    }\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return factorySpace(effects, contentStart, 'linePrefix')\n  }\n\n  /** @type {State} */\n  function paragraphInitial(code) {\n    effects.enter('paragraph')\n    return lineStart(code)\n  }\n\n  /** @type {State} */\n  function lineStart(code) {\n    const token = effects.enter('chunkText', {\n      contentType: 'text',\n      previous\n    })\n    if (previous) {\n      previous.next = token\n    }\n    previous = token\n    return data(code)\n  }\n\n  /** @type {State} */\n  function data(code) {\n    if (code === null) {\n      effects.exit('chunkText')\n      effects.exit('paragraph')\n      effects.consume(code)\n      return\n    }\n    if (markdownLineEnding(code)) {\n      effects.consume(code)\n      effects.exit('chunkText')\n      return lineStart\n    }\n\n    // Data.\n    effects.consume(code)\n    return data\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').ContainerState} ContainerState\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').Point} Point\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\n/**\n * @typedef {[Construct, ContainerState]} StackItem\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {splice} from 'micromark-util-chunked'\n/** @type {InitialConstruct} */\nexport const document = {\n  tokenize: initializeDocument\n}\n\n/** @type {Construct} */\nconst containerConstruct = {\n  tokenize: tokenizeContainer\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Initializer}\n */\nfunction initializeDocument(effects) {\n  const self = this\n  /** @type {Array<StackItem>} */\n  const stack = []\n  let continued = 0\n  /** @type {TokenizeContext | undefined} */\n  let childFlow\n  /** @type {Token | undefined} */\n  let childToken\n  /** @type {number} */\n  let lineStartOffset\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    // First we iterate through the open blocks, starting with the root\n    // document, and descending through last children down to the last open\n    // block.\n    // Each block imposes a condition that the line must satisfy if the block is\n    // to remain open.\n    // For example, a block quote requires a `>` character.\n    // A paragraph requires a non-blank line.\n    // In this phase we may match all or just some of the open blocks.\n    // But we cannot close unmatched blocks yet, because we may have a lazy\n    // continuation line.\n    if (continued < stack.length) {\n      const item = stack[continued]\n      self.containerState = item[1]\n      return effects.attempt(\n        item[0].continuation,\n        documentContinue,\n        checkNewContainers\n      )(code)\n    }\n\n    // Done.\n    return checkNewContainers(code)\n  }\n\n  /** @type {State} */\n  function documentContinue(code) {\n    continued++\n\n    // Note: this field is called `_closeFlow` but it also closes containers.\n    // Perhaps a good idea to rename it but it’s already used in the wild by\n    // extensions.\n    if (self.containerState._closeFlow) {\n      self.containerState._closeFlow = undefined\n      if (childFlow) {\n        closeFlow()\n      }\n\n      // Note: this algorithm for moving events around is similar to the\n      // algorithm when dealing with lazy lines in `writeToChild`.\n      const indexBeforeExits = self.events.length\n      let indexBeforeFlow = indexBeforeExits\n      /** @type {Point | undefined} */\n      let point\n\n      // Find the flow chunk.\n      while (indexBeforeFlow--) {\n        if (\n          self.events[indexBeforeFlow][0] === 'exit' &&\n          self.events[indexBeforeFlow][1].type === 'chunkFlow'\n        ) {\n          point = self.events[indexBeforeFlow][1].end\n          break\n        }\n      }\n      exitContainers(continued)\n\n      // Fix positions.\n      let index = indexBeforeExits\n      while (index < self.events.length) {\n        self.events[index][1].end = Object.assign({}, point)\n        index++\n      }\n\n      // Inject the exits earlier (they’re still also at the end).\n      splice(\n        self.events,\n        indexBeforeFlow + 1,\n        0,\n        self.events.slice(indexBeforeExits)\n      )\n\n      // Discard the duplicate exits.\n      self.events.length = index\n      return checkNewContainers(code)\n    }\n    return start(code)\n  }\n\n  /** @type {State} */\n  function checkNewContainers(code) {\n    // Next, after consuming the continuation markers for existing blocks, we\n    // look for new block starts (e.g. `>` for a block quote).\n    // If we encounter a new block start, we close any blocks unmatched in\n    // step 1 before creating the new block as a child of the last matched\n    // block.\n    if (continued === stack.length) {\n      // No need to `check` whether there’s a container, of `exitContainers`\n      // would be moot.\n      // We can instead immediately `attempt` to parse one.\n      if (!childFlow) {\n        return documentContinued(code)\n      }\n\n      // If we have concrete content, such as block HTML or fenced code,\n      // we can’t have containers “pierce” into them, so we can immediately\n      // start.\n      if (childFlow.currentConstruct && childFlow.currentConstruct.concrete) {\n        return flowStart(code)\n      }\n\n      // If we do have flow, it could still be a blank line,\n      // but we’d be interrupting it w/ a new container if there’s a current\n      // construct.\n      // To do: next major: remove `_gfmTableDynamicInterruptHack` (no longer\n      // needed in micromark-extension-gfm-table@1.0.6).\n      self.interrupt = Boolean(\n        childFlow.currentConstruct && !childFlow._gfmTableDynamicInterruptHack\n      )\n    }\n\n    // Check if there is a new container.\n    self.containerState = {}\n    return effects.check(\n      containerConstruct,\n      thereIsANewContainer,\n      thereIsNoNewContainer\n    )(code)\n  }\n\n  /** @type {State} */\n  function thereIsANewContainer(code) {\n    if (childFlow) closeFlow()\n    exitContainers(continued)\n    return documentContinued(code)\n  }\n\n  /** @type {State} */\n  function thereIsNoNewContainer(code) {\n    self.parser.lazy[self.now().line] = continued !== stack.length\n    lineStartOffset = self.now().offset\n    return flowStart(code)\n  }\n\n  /** @type {State} */\n  function documentContinued(code) {\n    // Try new containers.\n    self.containerState = {}\n    return effects.attempt(\n      containerConstruct,\n      containerContinue,\n      flowStart\n    )(code)\n  }\n\n  /** @type {State} */\n  function containerContinue(code) {\n    continued++\n    stack.push([self.currentConstruct, self.containerState])\n    // Try another.\n    return documentContinued(code)\n  }\n\n  /** @type {State} */\n  function flowStart(code) {\n    if (code === null) {\n      if (childFlow) closeFlow()\n      exitContainers(0)\n      effects.consume(code)\n      return\n    }\n    childFlow = childFlow || self.parser.flow(self.now())\n    effects.enter('chunkFlow', {\n      contentType: 'flow',\n      previous: childToken,\n      _tokenizer: childFlow\n    })\n    return flowContinue(code)\n  }\n\n  /** @type {State} */\n  function flowContinue(code) {\n    if (code === null) {\n      writeToChild(effects.exit('chunkFlow'), true)\n      exitContainers(0)\n      effects.consume(code)\n      return\n    }\n    if (markdownLineEnding(code)) {\n      effects.consume(code)\n      writeToChild(effects.exit('chunkFlow'))\n      // Get ready for the next line.\n      continued = 0\n      self.interrupt = undefined\n      return start\n    }\n    effects.consume(code)\n    return flowContinue\n  }\n\n  /**\n   * @param {Token} token\n   * @param {boolean | undefined} [eof]\n   * @returns {undefined}\n   */\n  function writeToChild(token, eof) {\n    const stream = self.sliceStream(token)\n    if (eof) stream.push(null)\n    token.previous = childToken\n    if (childToken) childToken.next = token\n    childToken = token\n    childFlow.defineSkip(token.start)\n    childFlow.write(stream)\n\n    // Alright, so we just added a lazy line:\n    //\n    // ```markdown\n    // > a\n    // b.\n    //\n    // Or:\n    //\n    // > ~~~c\n    // d\n    //\n    // Or:\n    //\n    // > | e |\n    // f\n    // ```\n    //\n    // The construct in the second example (fenced code) does not accept lazy\n    // lines, so it marked itself as done at the end of its first line, and\n    // then the content construct parses `d`.\n    // Most constructs in markdown match on the first line: if the first line\n    // forms a construct, a non-lazy line can’t “unmake” it.\n    //\n    // The construct in the third example is potentially a GFM table, and\n    // those are *weird*.\n    // It *could* be a table, from the first line, if the following line\n    // matches a condition.\n    // In this case, that second line is lazy, which “unmakes” the first line\n    // and turns the whole into one content block.\n    //\n    // We’ve now parsed the non-lazy and the lazy line, and can figure out\n    // whether the lazy line started a new flow block.\n    // If it did, we exit the current containers between the two flow blocks.\n    if (self.parser.lazy[token.start.line]) {\n      let index = childFlow.events.length\n      while (index--) {\n        if (\n          // The token starts before the line ending…\n          childFlow.events[index][1].start.offset < lineStartOffset &&\n          // …and either is not ended yet…\n          (!childFlow.events[index][1].end ||\n            // …or ends after it.\n            childFlow.events[index][1].end.offset > lineStartOffset)\n        ) {\n          // Exit: there’s still something open, which means it’s a lazy line\n          // part of something.\n          return\n        }\n      }\n\n      // Note: this algorithm for moving events around is similar to the\n      // algorithm when closing flow in `documentContinue`.\n      const indexBeforeExits = self.events.length\n      let indexBeforeFlow = indexBeforeExits\n      /** @type {boolean | undefined} */\n      let seen\n      /** @type {Point | undefined} */\n      let point\n\n      // Find the previous chunk (the one before the lazy line).\n      while (indexBeforeFlow--) {\n        if (\n          self.events[indexBeforeFlow][0] === 'exit' &&\n          self.events[indexBeforeFlow][1].type === 'chunkFlow'\n        ) {\n          if (seen) {\n            point = self.events[indexBeforeFlow][1].end\n            break\n          }\n          seen = true\n        }\n      }\n      exitContainers(continued)\n\n      // Fix positions.\n      index = indexBeforeExits\n      while (index < self.events.length) {\n        self.events[index][1].end = Object.assign({}, point)\n        index++\n      }\n\n      // Inject the exits earlier (they’re still also at the end).\n      splice(\n        self.events,\n        indexBeforeFlow + 1,\n        0,\n        self.events.slice(indexBeforeExits)\n      )\n\n      // Discard the duplicate exits.\n      self.events.length = index\n    }\n  }\n\n  /**\n   * @param {number} size\n   * @returns {undefined}\n   */\n  function exitContainers(size) {\n    let index = stack.length\n\n    // Exit open containers.\n    while (index-- > size) {\n      const entry = stack[index]\n      self.containerState = entry[1]\n      entry[0].exit.call(self, effects)\n    }\n    stack.length = size\n  }\n  function closeFlow() {\n    childFlow.write([null])\n    childToken = undefined\n    childFlow = undefined\n    self.containerState._closeFlow = undefined\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeContainer(effects, ok, nok) {\n  // Always populated by defaults.\n\n  return factorySpace(\n    effects,\n    effects.attempt(this.parser.constructs.document, ok, nok),\n    'linePrefix',\n    this.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4\n  )\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nexport const blankLine = {\n  tokenize: tokenizeBlankLine,\n  partial: true\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeBlankLine(effects, ok, nok) {\n  return start\n\n  /**\n   * Start of blank line.\n   *\n   * > 👉 **Note**: `␠` represents a space character.\n   *\n   * ```markdown\n   * > | ␠␠␊\n   *     ^\n   * > | ␊\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    return markdownSpace(code)\n      ? factorySpace(effects, after, 'linePrefix')(code)\n      : after(code)\n  }\n\n  /**\n   * At eof/eol, after optional whitespace.\n   *\n   * > 👉 **Note**: `␠` represents a space character.\n   *\n   * ```markdown\n   * > | ␠␠␊\n   *       ^\n   * > | ␊\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return code === null || markdownLineEnding(code) ? ok(code) : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {subtokenize} from 'micromark-util-subtokenize'\n/**\n * No name because it must not be turned off.\n * @type {Construct}\n */\nexport const content = {\n  tokenize: tokenizeContent,\n  resolve: resolveContent\n}\n\n/** @type {Construct} */\nconst continuationConstruct = {\n  tokenize: tokenizeContinuation,\n  partial: true\n}\n\n/**\n * Content is transparent: it’s parsed right now. That way, definitions are also\n * parsed right now: before text in paragraphs (specifically, media) are parsed.\n *\n * @type {Resolver}\n */\nfunction resolveContent(events) {\n  subtokenize(events)\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeContent(effects, ok) {\n  /** @type {Token | undefined} */\n  let previous\n  return chunkStart\n\n  /**\n   * Before a content chunk.\n   *\n   * ```markdown\n   * > | abc\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function chunkStart(code) {\n    effects.enter('content')\n    previous = effects.enter('chunkContent', {\n      contentType: 'content'\n    })\n    return chunkInside(code)\n  }\n\n  /**\n   * In a content chunk.\n   *\n   * ```markdown\n   * > | abc\n   *     ^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function chunkInside(code) {\n    if (code === null) {\n      return contentEnd(code)\n    }\n\n    // To do: in `markdown-rs`, each line is parsed on its own, and everything\n    // is stitched together resolving.\n    if (markdownLineEnding(code)) {\n      return effects.check(\n        continuationConstruct,\n        contentContinue,\n        contentEnd\n      )(code)\n    }\n\n    // Data.\n    effects.consume(code)\n    return chunkInside\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function contentEnd(code) {\n    effects.exit('chunkContent')\n    effects.exit('content')\n    return ok(code)\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function contentContinue(code) {\n    effects.consume(code)\n    effects.exit('chunkContent')\n    previous.next = effects.enter('chunkContent', {\n      contentType: 'content',\n      previous\n    })\n    previous = previous.next\n    return chunkInside\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeContinuation(effects, ok, nok) {\n  const self = this\n  return startLookahead\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function startLookahead(code) {\n    effects.exit('chunkContent')\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return factorySpace(effects, prefixed, 'linePrefix')\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function prefixed(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return nok(code)\n    }\n\n    // Always populated by defaults.\n\n    const tail = self.events[self.events.length - 1]\n    if (\n      !self.parser.constructs.disable.null.includes('codeIndented') &&\n      tail &&\n      tail[1].type === 'linePrefix' &&\n      tail[2].sliceSerialize(tail[1], true).length >= 4\n    ) {\n      return ok(code)\n    }\n    return effects.interrupt(self.parser.constructs.flow, nok, ok)(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\nimport {blankLine, content} from 'micromark-core-commonmark'\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n/** @type {InitialConstruct} */\nexport const flow = {\n  tokenize: initializeFlow\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Initializer}\n */\nfunction initializeFlow(effects) {\n  const self = this\n  const initial = effects.attempt(\n    // Try to parse a blank line.\n    blankLine,\n    atBlankEnding,\n    // Try to parse initial flow (essentially, only code).\n    effects.attempt(\n      this.parser.constructs.flowInitial,\n      afterConstruct,\n      factorySpace(\n        effects,\n        effects.attempt(\n          this.parser.constructs.flow,\n          afterConstruct,\n          effects.attempt(content, afterConstruct)\n        ),\n        'linePrefix'\n      )\n    )\n  )\n  return initial\n\n  /** @type {State} */\n  function atBlankEnding(code) {\n    if (code === null) {\n      effects.consume(code)\n      return\n    }\n    effects.enter('lineEndingBlank')\n    effects.consume(code)\n    effects.exit('lineEndingBlank')\n    self.currentConstruct = undefined\n    return initial\n  }\n\n  /** @type {State} */\n  function afterConstruct(code) {\n    if (code === null) {\n      effects.consume(code)\n      return\n    }\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    self.currentConstruct = undefined\n    return initial\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\nexport const resolver = {\n  resolveAll: createResolver()\n}\nexport const string = initializeFactory('string')\nexport const text = initializeFactory('text')\n\n/**\n * @param {'string' | 'text'} field\n * @returns {InitialConstruct}\n */\nfunction initializeFactory(field) {\n  return {\n    tokenize: initializeText,\n    resolveAll: createResolver(\n      field === 'text' ? resolveAllLineSuffixes : undefined\n    )\n  }\n\n  /**\n   * @this {TokenizeContext}\n   * @type {Initializer}\n   */\n  function initializeText(effects) {\n    const self = this\n    const constructs = this.parser.constructs[field]\n    const text = effects.attempt(constructs, start, notText)\n    return start\n\n    /** @type {State} */\n    function start(code) {\n      return atBreak(code) ? text(code) : notText(code)\n    }\n\n    /** @type {State} */\n    function notText(code) {\n      if (code === null) {\n        effects.consume(code)\n        return\n      }\n      effects.enter('data')\n      effects.consume(code)\n      return data\n    }\n\n    /** @type {State} */\n    function data(code) {\n      if (atBreak(code)) {\n        effects.exit('data')\n        return text(code)\n      }\n\n      // Data.\n      effects.consume(code)\n      return data\n    }\n\n    /**\n     * @param {Code} code\n     * @returns {boolean}\n     */\n    function atBreak(code) {\n      if (code === null) {\n        return true\n      }\n      const list = constructs[code]\n      let index = -1\n      if (list) {\n        // Always populated by defaults.\n\n        while (++index < list.length) {\n          const item = list[index]\n          if (!item.previous || item.previous.call(self, self.previous)) {\n            return true\n          }\n        }\n      }\n      return false\n    }\n  }\n}\n\n/**\n * @param {Resolver | undefined} [extraResolver]\n * @returns {Resolver}\n */\nfunction createResolver(extraResolver) {\n  return resolveAllText\n\n  /** @type {Resolver} */\n  function resolveAllText(events, context) {\n    let index = -1\n    /** @type {number | undefined} */\n    let enter\n\n    // A rather boring computation (to merge adjacent `data` events) which\n    // improves mm performance by 29%.\n    while (++index <= events.length) {\n      if (enter === undefined) {\n        if (events[index] && events[index][1].type === 'data') {\n          enter = index\n          index++\n        }\n      } else if (!events[index] || events[index][1].type !== 'data') {\n        // Don’t do anything if there is one data token.\n        if (index !== enter + 2) {\n          events[enter][1].end = events[index - 1][1].end\n          events.splice(enter + 2, index - enter - 2)\n          index = enter + 2\n        }\n        enter = undefined\n      }\n    }\n    return extraResolver ? extraResolver(events, context) : events\n  }\n}\n\n/**\n * A rather ugly set of instructions which again looks at chunks in the input\n * stream.\n * The reason to do this here is that it is *much* faster to parse in reverse.\n * And that we can’t hook into `null` to split the line suffix before an EOF.\n * To do: figure out if we can make this into a clean utility, or even in core.\n * As it will be useful for GFMs literal autolink extension (and maybe even\n * tables?)\n *\n * @type {Resolver}\n */\nfunction resolveAllLineSuffixes(events, context) {\n  let eventIndex = 0 // Skip first.\n\n  while (++eventIndex <= events.length) {\n    if (\n      (eventIndex === events.length ||\n        events[eventIndex][1].type === 'lineEnding') &&\n      events[eventIndex - 1][1].type === 'data'\n    ) {\n      const data = events[eventIndex - 1][1]\n      const chunks = context.sliceStream(data)\n      let index = chunks.length\n      let bufferIndex = -1\n      let size = 0\n      /** @type {boolean | undefined} */\n      let tabs\n      while (index--) {\n        const chunk = chunks[index]\n        if (typeof chunk === 'string') {\n          bufferIndex = chunk.length\n          while (chunk.charCodeAt(bufferIndex - 1) === 32) {\n            size++\n            bufferIndex--\n          }\n          if (bufferIndex) break\n          bufferIndex = -1\n        }\n        // Number\n        else if (chunk === -2) {\n          tabs = true\n          size++\n        } else if (chunk === -1) {\n          // Empty\n        } else {\n          // Replacement character, exit.\n          index++\n          break\n        }\n      }\n      if (size) {\n        const token = {\n          type:\n            eventIndex === events.length || tabs || size < 2\n              ? 'lineSuffix'\n              : 'hardBreakTrailing',\n          start: {\n            line: data.end.line,\n            column: data.end.column - size,\n            offset: data.end.offset - size,\n            _index: data.start._index + index,\n            _bufferIndex: index\n              ? bufferIndex\n              : data.start._bufferIndex + bufferIndex\n          },\n          end: Object.assign({}, data.end)\n        }\n        data.end = Object.assign({}, token.start)\n        if (data.start.offset === data.end.offset) {\n          Object.assign(data, token)\n        } else {\n          events.splice(\n            eventIndex,\n            0,\n            ['enter', token, context],\n            ['exit', token, context]\n          )\n          eventIndex += 2\n        }\n      }\n      eventIndex++\n    }\n  }\n  return events\n}\n","/**\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\n/**\n * Call all `resolveAll`s.\n *\n * @param {Array<{resolveAll?: Resolver | undefined}>} constructs\n *   List of constructs, optionally with `resolveAll`s.\n * @param {Array<Event>} events\n *   List of events.\n * @param {TokenizeContext} context\n *   Context used by `tokenize`.\n * @returns {Array<Event>}\n *   Changed events.\n */\nexport function resolveAll(constructs, events, context) {\n  /** @type {Array<Resolver>} */\n  const called = []\n  let index = -1\n\n  while (++index < constructs.length) {\n    const resolve = constructs[index].resolveAll\n\n    if (resolve && !called.includes(resolve)) {\n      events = resolve(events, context)\n      called.push(resolve)\n    }\n  }\n\n  return events\n}\n","/**\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').ConstructRecord} ConstructRecord\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').ParseContext} ParseContext\n * @typedef {import('micromark-util-types').Point} Point\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenType} TokenType\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\n/**\n * @callback Restore\n * @returns {undefined}\n *\n * @typedef Info\n * @property {Restore} restore\n * @property {number} from\n *\n * @callback ReturnHandle\n *   Handle a successful run.\n * @param {Construct} construct\n * @param {Info} info\n * @returns {undefined}\n */\n\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {push, splice} from 'micromark-util-chunked'\nimport {resolveAll} from 'micromark-util-resolve-all'\n/**\n * Create a tokenizer.\n * Tokenizers deal with one type of data (e.g., containers, flow, text).\n * The parser is the object dealing with it all.\n * `initialize` works like other constructs, except that only its `tokenize`\n * function is used, in which case it doesn’t receive an `ok` or `nok`.\n * `from` can be given to set the point before the first character, although\n * when further lines are indented, they must be set with `defineSkip`.\n *\n * @param {ParseContext} parser\n * @param {InitialConstruct} initialize\n * @param {Omit<Point, '_bufferIndex' | '_index'> | undefined} [from]\n * @returns {TokenizeContext}\n */\nexport function createTokenizer(parser, initialize, from) {\n  /** @type {Point} */\n  let point = Object.assign(\n    from\n      ? Object.assign({}, from)\n      : {\n          line: 1,\n          column: 1,\n          offset: 0\n        },\n    {\n      _index: 0,\n      _bufferIndex: -1\n    }\n  )\n  /** @type {Record<string, number>} */\n  const columnStart = {}\n  /** @type {Array<Construct>} */\n  const resolveAllConstructs = []\n  /** @type {Array<Chunk>} */\n  let chunks = []\n  /** @type {Array<Token>} */\n  let stack = []\n  /** @type {boolean | undefined} */\n  let consumed = true\n\n  /**\n   * Tools used for tokenizing.\n   *\n   * @type {Effects}\n   */\n  const effects = {\n    consume,\n    enter,\n    exit,\n    attempt: constructFactory(onsuccessfulconstruct),\n    check: constructFactory(onsuccessfulcheck),\n    interrupt: constructFactory(onsuccessfulcheck, {\n      interrupt: true\n    })\n  }\n\n  /**\n   * State and tools for resolving and serializing.\n   *\n   * @type {TokenizeContext}\n   */\n  const context = {\n    previous: null,\n    code: null,\n    containerState: {},\n    events: [],\n    parser,\n    sliceStream,\n    sliceSerialize,\n    now,\n    defineSkip,\n    write\n  }\n\n  /**\n   * The state function.\n   *\n   * @type {State | undefined}\n   */\n  let state = initialize.tokenize.call(context, effects)\n\n  /**\n   * Track which character we expect to be consumed, to catch bugs.\n   *\n   * @type {Code}\n   */\n  let expectedCode\n  if (initialize.resolveAll) {\n    resolveAllConstructs.push(initialize)\n  }\n  return context\n\n  /** @type {TokenizeContext['write']} */\n  function write(slice) {\n    chunks = push(chunks, slice)\n    main()\n\n    // Exit if we’re not done, resolve might change stuff.\n    if (chunks[chunks.length - 1] !== null) {\n      return []\n    }\n    addResult(initialize, 0)\n\n    // Otherwise, resolve, and exit.\n    context.events = resolveAll(resolveAllConstructs, context.events, context)\n    return context.events\n  }\n\n  //\n  // Tools.\n  //\n\n  /** @type {TokenizeContext['sliceSerialize']} */\n  function sliceSerialize(token, expandTabs) {\n    return serializeChunks(sliceStream(token), expandTabs)\n  }\n\n  /** @type {TokenizeContext['sliceStream']} */\n  function sliceStream(token) {\n    return sliceChunks(chunks, token)\n  }\n\n  /** @type {TokenizeContext['now']} */\n  function now() {\n    // This is a hot path, so we clone manually instead of `Object.assign({}, point)`\n    const {line, column, offset, _index, _bufferIndex} = point\n    return {\n      line,\n      column,\n      offset,\n      _index,\n      _bufferIndex\n    }\n  }\n\n  /** @type {TokenizeContext['defineSkip']} */\n  function defineSkip(value) {\n    columnStart[value.line] = value.column\n    accountForPotentialSkip()\n  }\n\n  //\n  // State management.\n  //\n\n  /**\n   * Main loop (note that `_index` and `_bufferIndex` in `point` are modified by\n   * `consume`).\n   * Here is where we walk through the chunks, which either include strings of\n   * several characters, or numerical character codes.\n   * The reason to do this in a loop instead of a call is so the stack can\n   * drain.\n   *\n   * @returns {undefined}\n   */\n  function main() {\n    /** @type {number} */\n    let chunkIndex\n    while (point._index < chunks.length) {\n      const chunk = chunks[point._index]\n\n      // If we’re in a buffer chunk, loop through it.\n      if (typeof chunk === 'string') {\n        chunkIndex = point._index\n        if (point._bufferIndex < 0) {\n          point._bufferIndex = 0\n        }\n        while (\n          point._index === chunkIndex &&\n          point._bufferIndex < chunk.length\n        ) {\n          go(chunk.charCodeAt(point._bufferIndex))\n        }\n      } else {\n        go(chunk)\n      }\n    }\n  }\n\n  /**\n   * Deal with one code.\n   *\n   * @param {Code} code\n   * @returns {undefined}\n   */\n  function go(code) {\n    consumed = undefined\n    expectedCode = code\n    state = state(code)\n  }\n\n  /** @type {Effects['consume']} */\n  function consume(code) {\n    if (markdownLineEnding(code)) {\n      point.line++\n      point.column = 1\n      point.offset += code === -3 ? 2 : 1\n      accountForPotentialSkip()\n    } else if (code !== -1) {\n      point.column++\n      point.offset++\n    }\n\n    // Not in a string chunk.\n    if (point._bufferIndex < 0) {\n      point._index++\n    } else {\n      point._bufferIndex++\n\n      // At end of string chunk.\n      // @ts-expect-error Points w/ non-negative `_bufferIndex` reference\n      // strings.\n      if (point._bufferIndex === chunks[point._index].length) {\n        point._bufferIndex = -1\n        point._index++\n      }\n    }\n\n    // Expose the previous character.\n    context.previous = code\n\n    // Mark as consumed.\n    consumed = true\n  }\n\n  /** @type {Effects['enter']} */\n  function enter(type, fields) {\n    /** @type {Token} */\n    // @ts-expect-error Patch instead of assign required fields to help GC.\n    const token = fields || {}\n    token.type = type\n    token.start = now()\n    context.events.push(['enter', token, context])\n    stack.push(token)\n    return token\n  }\n\n  /** @type {Effects['exit']} */\n  function exit(type) {\n    const token = stack.pop()\n    token.end = now()\n    context.events.push(['exit', token, context])\n    return token\n  }\n\n  /**\n   * Use results.\n   *\n   * @type {ReturnHandle}\n   */\n  function onsuccessfulconstruct(construct, info) {\n    addResult(construct, info.from)\n  }\n\n  /**\n   * Discard results.\n   *\n   * @type {ReturnHandle}\n   */\n  function onsuccessfulcheck(_, info) {\n    info.restore()\n  }\n\n  /**\n   * Factory to attempt/check/interrupt.\n   *\n   * @param {ReturnHandle} onreturn\n   * @param {{interrupt?: boolean | undefined} | undefined} [fields]\n   */\n  function constructFactory(onreturn, fields) {\n    return hook\n\n    /**\n     * Handle either an object mapping codes to constructs, a list of\n     * constructs, or a single construct.\n     *\n     * @param {Array<Construct> | Construct | ConstructRecord} constructs\n     * @param {State} returnState\n     * @param {State | undefined} [bogusState]\n     * @returns {State}\n     */\n    function hook(constructs, returnState, bogusState) {\n      /** @type {Array<Construct>} */\n      let listOfConstructs\n      /** @type {number} */\n      let constructIndex\n      /** @type {Construct} */\n      let currentConstruct\n      /** @type {Info} */\n      let info\n      return Array.isArray(constructs) /* c8 ignore next 1 */\n        ? handleListOfConstructs(constructs)\n        : 'tokenize' in constructs\n        ? // @ts-expect-error Looks like a construct.\n          handleListOfConstructs([constructs])\n        : handleMapOfConstructs(constructs)\n\n      /**\n       * Handle a list of construct.\n       *\n       * @param {ConstructRecord} map\n       * @returns {State}\n       */\n      function handleMapOfConstructs(map) {\n        return start\n\n        /** @type {State} */\n        function start(code) {\n          const def = code !== null && map[code]\n          const all = code !== null && map.null\n          const list = [\n            // To do: add more extension tests.\n            /* c8 ignore next 2 */\n            ...(Array.isArray(def) ? def : def ? [def] : []),\n            ...(Array.isArray(all) ? all : all ? [all] : [])\n          ]\n          return handleListOfConstructs(list)(code)\n        }\n      }\n\n      /**\n       * Handle a list of construct.\n       *\n       * @param {Array<Construct>} list\n       * @returns {State}\n       */\n      function handleListOfConstructs(list) {\n        listOfConstructs = list\n        constructIndex = 0\n        if (list.length === 0) {\n          return bogusState\n        }\n        return handleConstruct(list[constructIndex])\n      }\n\n      /**\n       * Handle a single construct.\n       *\n       * @param {Construct} construct\n       * @returns {State}\n       */\n      function handleConstruct(construct) {\n        return start\n\n        /** @type {State} */\n        function start(code) {\n          // To do: not needed to store if there is no bogus state, probably?\n          // Currently doesn’t work because `inspect` in document does a check\n          // w/o a bogus, which doesn’t make sense. But it does seem to help perf\n          // by not storing.\n          info = store()\n          currentConstruct = construct\n          if (!construct.partial) {\n            context.currentConstruct = construct\n          }\n\n          // Always populated by defaults.\n\n          if (\n            construct.name &&\n            context.parser.constructs.disable.null.includes(construct.name)\n          ) {\n            return nok(code)\n          }\n          return construct.tokenize.call(\n            // If we do have fields, create an object w/ `context` as its\n            // prototype.\n            // This allows a “live binding”, which is needed for `interrupt`.\n            fields ? Object.assign(Object.create(context), fields) : context,\n            effects,\n            ok,\n            nok\n          )(code)\n        }\n      }\n\n      /** @type {State} */\n      function ok(code) {\n        consumed = true\n        onreturn(currentConstruct, info)\n        return returnState\n      }\n\n      /** @type {State} */\n      function nok(code) {\n        consumed = true\n        info.restore()\n        if (++constructIndex < listOfConstructs.length) {\n          return handleConstruct(listOfConstructs[constructIndex])\n        }\n        return bogusState\n      }\n    }\n  }\n\n  /**\n   * @param {Construct} construct\n   * @param {number} from\n   * @returns {undefined}\n   */\n  function addResult(construct, from) {\n    if (construct.resolveAll && !resolveAllConstructs.includes(construct)) {\n      resolveAllConstructs.push(construct)\n    }\n    if (construct.resolve) {\n      splice(\n        context.events,\n        from,\n        context.events.length - from,\n        construct.resolve(context.events.slice(from), context)\n      )\n    }\n    if (construct.resolveTo) {\n      context.events = construct.resolveTo(context.events, context)\n    }\n  }\n\n  /**\n   * Store state.\n   *\n   * @returns {Info}\n   */\n  function store() {\n    const startPoint = now()\n    const startPrevious = context.previous\n    const startCurrentConstruct = context.currentConstruct\n    const startEventsIndex = context.events.length\n    const startStack = Array.from(stack)\n    return {\n      restore,\n      from: startEventsIndex\n    }\n\n    /**\n     * Restore state.\n     *\n     * @returns {undefined}\n     */\n    function restore() {\n      point = startPoint\n      context.previous = startPrevious\n      context.currentConstruct = startCurrentConstruct\n      context.events.length = startEventsIndex\n      stack = startStack\n      accountForPotentialSkip()\n    }\n  }\n\n  /**\n   * Move the current point a bit forward in the line when it’s on a column\n   * skip.\n   *\n   * @returns {undefined}\n   */\n  function accountForPotentialSkip() {\n    if (point.line in columnStart && point.column < 2) {\n      point.column = columnStart[point.line]\n      point.offset += columnStart[point.line] - 1\n    }\n  }\n}\n\n/**\n * Get the chunks from a slice of chunks in the range of a token.\n *\n * @param {Array<Chunk>} chunks\n * @param {Pick<Token, 'end' | 'start'>} token\n * @returns {Array<Chunk>}\n */\nfunction sliceChunks(chunks, token) {\n  const startIndex = token.start._index\n  const startBufferIndex = token.start._bufferIndex\n  const endIndex = token.end._index\n  const endBufferIndex = token.end._bufferIndex\n  /** @type {Array<Chunk>} */\n  let view\n  if (startIndex === endIndex) {\n    // @ts-expect-error `_bufferIndex` is used on string chunks.\n    view = [chunks[startIndex].slice(startBufferIndex, endBufferIndex)]\n  } else {\n    view = chunks.slice(startIndex, endIndex)\n    if (startBufferIndex > -1) {\n      const head = view[0]\n      if (typeof head === 'string') {\n        view[0] = head.slice(startBufferIndex)\n      } else {\n        view.shift()\n      }\n    }\n    if (endBufferIndex > 0) {\n      // @ts-expect-error `_bufferIndex` is used on string chunks.\n      view.push(chunks[endIndex].slice(0, endBufferIndex))\n    }\n  }\n  return view\n}\n\n/**\n * Get the string value of a slice of chunks.\n *\n * @param {Array<Chunk>} chunks\n * @param {boolean | undefined} [expandTabs=false]\n * @returns {string}\n */\nfunction serializeChunks(chunks, expandTabs) {\n  let index = -1\n  /** @type {Array<string>} */\n  const result = []\n  /** @type {boolean | undefined} */\n  let atTab\n  while (++index < chunks.length) {\n    const chunk = chunks[index]\n    /** @type {string} */\n    let value\n    if (typeof chunk === 'string') {\n      value = chunk\n    } else\n      switch (chunk) {\n        case -5: {\n          value = '\\r'\n          break\n        }\n        case -4: {\n          value = '\\n'\n          break\n        }\n        case -3: {\n          value = '\\r' + '\\n'\n          break\n        }\n        case -2: {\n          value = expandTabs ? ' ' : '\\t'\n          break\n        }\n        case -1: {\n          if (!expandTabs && atTab) continue\n          value = ' '\n          break\n        }\n        default: {\n          // Currently only replacement character.\n          value = String.fromCharCode(chunk)\n        }\n      }\n    atTab = chunk === -2\n    result.push(value)\n  }\n  return result.join('')\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nexport const thematicBreak = {\n  name: 'thematicBreak',\n  tokenize: tokenizeThematicBreak\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeThematicBreak(effects, ok, nok) {\n  let size = 0\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n\n  /**\n   * Start of thematic break.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('thematicBreak')\n    // To do: parse indent like `markdown-rs`.\n    return before(code)\n  }\n\n  /**\n   * After optional whitespace, at marker.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    marker = code\n    return atBreak(code)\n  }\n\n  /**\n   * After something, before something else.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === marker) {\n      effects.enter('thematicBreakSequence')\n      return sequence(code)\n    }\n    if (size >= 3 && (code === null || markdownLineEnding(code))) {\n      effects.exit('thematicBreak')\n      return ok(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * In sequence.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequence(code) {\n    if (code === marker) {\n      effects.consume(code)\n      size++\n      return sequence\n    }\n    effects.exit('thematicBreakSequence')\n    return markdownSpace(code)\n      ? factorySpace(effects, atBreak, 'whitespace')(code)\n      : atBreak(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').ContainerState} ContainerState\n * @typedef {import('micromark-util-types').Exiter} Exiter\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {asciiDigit, markdownSpace} from 'micromark-util-character'\nimport {blankLine} from './blank-line.js'\nimport {thematicBreak} from './thematic-break.js'\n\n/** @type {Construct} */\nexport const list = {\n  name: 'list',\n  tokenize: tokenizeListStart,\n  continuation: {\n    tokenize: tokenizeListContinuation\n  },\n  exit: tokenizeListEnd\n}\n\n/** @type {Construct} */\nconst listItemPrefixWhitespaceConstruct = {\n  tokenize: tokenizeListItemPrefixWhitespace,\n  partial: true\n}\n\n/** @type {Construct} */\nconst indentConstruct = {\n  tokenize: tokenizeIndent,\n  partial: true\n}\n\n// To do: `markdown-rs` parses list items on their own and later stitches them\n// together.\n\n/**\n * @type {Tokenizer}\n * @this {TokenizeContext}\n */\nfunction tokenizeListStart(effects, ok, nok) {\n  const self = this\n  const tail = self.events[self.events.length - 1]\n  let initialSize =\n    tail && tail[1].type === 'linePrefix'\n      ? tail[2].sliceSerialize(tail[1], true).length\n      : 0\n  let size = 0\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    const kind =\n      self.containerState.type ||\n      (code === 42 || code === 43 || code === 45\n        ? 'listUnordered'\n        : 'listOrdered')\n    if (\n      kind === 'listUnordered'\n        ? !self.containerState.marker || code === self.containerState.marker\n        : asciiDigit(code)\n    ) {\n      if (!self.containerState.type) {\n        self.containerState.type = kind\n        effects.enter(kind, {\n          _container: true\n        })\n      }\n      if (kind === 'listUnordered') {\n        effects.enter('listItemPrefix')\n        return code === 42 || code === 45\n          ? effects.check(thematicBreak, nok, atMarker)(code)\n          : atMarker(code)\n      }\n      if (!self.interrupt || code === 49) {\n        effects.enter('listItemPrefix')\n        effects.enter('listItemValue')\n        return inside(code)\n      }\n    }\n    return nok(code)\n  }\n\n  /** @type {State} */\n  function inside(code) {\n    if (asciiDigit(code) && ++size < 10) {\n      effects.consume(code)\n      return inside\n    }\n    if (\n      (!self.interrupt || size < 2) &&\n      (self.containerState.marker\n        ? code === self.containerState.marker\n        : code === 41 || code === 46)\n    ) {\n      effects.exit('listItemValue')\n      return atMarker(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * @type {State}\n   **/\n  function atMarker(code) {\n    effects.enter('listItemMarker')\n    effects.consume(code)\n    effects.exit('listItemMarker')\n    self.containerState.marker = self.containerState.marker || code\n    return effects.check(\n      blankLine,\n      // Can’t be empty when interrupting.\n      self.interrupt ? nok : onBlank,\n      effects.attempt(\n        listItemPrefixWhitespaceConstruct,\n        endOfPrefix,\n        otherPrefix\n      )\n    )\n  }\n\n  /** @type {State} */\n  function onBlank(code) {\n    self.containerState.initialBlankLine = true\n    initialSize++\n    return endOfPrefix(code)\n  }\n\n  /** @type {State} */\n  function otherPrefix(code) {\n    if (markdownSpace(code)) {\n      effects.enter('listItemPrefixWhitespace')\n      effects.consume(code)\n      effects.exit('listItemPrefixWhitespace')\n      return endOfPrefix\n    }\n    return nok(code)\n  }\n\n  /** @type {State} */\n  function endOfPrefix(code) {\n    self.containerState.size =\n      initialSize +\n      self.sliceSerialize(effects.exit('listItemPrefix'), true).length\n    return ok(code)\n  }\n}\n\n/**\n * @type {Tokenizer}\n * @this {TokenizeContext}\n */\nfunction tokenizeListContinuation(effects, ok, nok) {\n  const self = this\n  self.containerState._closeFlow = undefined\n  return effects.check(blankLine, onBlank, notBlank)\n\n  /** @type {State} */\n  function onBlank(code) {\n    self.containerState.furtherBlankLines =\n      self.containerState.furtherBlankLines ||\n      self.containerState.initialBlankLine\n\n    // We have a blank line.\n    // Still, try to consume at most the items size.\n    return factorySpace(\n      effects,\n      ok,\n      'listItemIndent',\n      self.containerState.size + 1\n    )(code)\n  }\n\n  /** @type {State} */\n  function notBlank(code) {\n    if (self.containerState.furtherBlankLines || !markdownSpace(code)) {\n      self.containerState.furtherBlankLines = undefined\n      self.containerState.initialBlankLine = undefined\n      return notInCurrentItem(code)\n    }\n    self.containerState.furtherBlankLines = undefined\n    self.containerState.initialBlankLine = undefined\n    return effects.attempt(indentConstruct, ok, notInCurrentItem)(code)\n  }\n\n  /** @type {State} */\n  function notInCurrentItem(code) {\n    // While we do continue, we signal that the flow should be closed.\n    self.containerState._closeFlow = true\n    // As we’re closing flow, we’re no longer interrupting.\n    self.interrupt = undefined\n    // Always populated by defaults.\n\n    return factorySpace(\n      effects,\n      effects.attempt(list, ok, nok),\n      'linePrefix',\n      self.parser.constructs.disable.null.includes('codeIndented')\n        ? undefined\n        : 4\n    )(code)\n  }\n}\n\n/**\n * @type {Tokenizer}\n * @this {TokenizeContext}\n */\nfunction tokenizeIndent(effects, ok, nok) {\n  const self = this\n  return factorySpace(\n    effects,\n    afterPrefix,\n    'listItemIndent',\n    self.containerState.size + 1\n  )\n\n  /** @type {State} */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return tail &&\n      tail[1].type === 'listItemIndent' &&\n      tail[2].sliceSerialize(tail[1], true).length === self.containerState.size\n      ? ok(code)\n      : nok(code)\n  }\n}\n\n/**\n * @type {Exiter}\n * @this {TokenizeContext}\n */\nfunction tokenizeListEnd(effects) {\n  effects.exit(this.containerState.type)\n}\n\n/**\n * @type {Tokenizer}\n * @this {TokenizeContext}\n */\nfunction tokenizeListItemPrefixWhitespace(effects, ok, nok) {\n  const self = this\n\n  // Always populated by defaults.\n\n  return factorySpace(\n    effects,\n    afterPrefix,\n    'listItemPrefixWhitespace',\n    self.parser.constructs.disable.null.includes('codeIndented')\n      ? undefined\n      : 4 + 1\n  )\n\n  /** @type {State} */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return !markdownSpace(code) &&\n      tail &&\n      tail[1].type === 'listItemPrefixWhitespace'\n      ? ok(code)\n      : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Exiter} Exiter\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nexport const blockQuote = {\n  name: 'blockQuote',\n  tokenize: tokenizeBlockQuoteStart,\n  continuation: {\n    tokenize: tokenizeBlockQuoteContinuation\n  },\n  exit\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeBlockQuoteStart(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   * Start of block quote.\n   *\n   * ```markdown\n   * > | > a\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === 62) {\n      const state = self.containerState\n      if (!state.open) {\n        effects.enter('blockQuote', {\n          _container: true\n        })\n        state.open = true\n      }\n      effects.enter('blockQuotePrefix')\n      effects.enter('blockQuoteMarker')\n      effects.consume(code)\n      effects.exit('blockQuoteMarker')\n      return after\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `>`, before optional whitespace.\n   *\n   * ```markdown\n   * > | > a\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    if (markdownSpace(code)) {\n      effects.enter('blockQuotePrefixWhitespace')\n      effects.consume(code)\n      effects.exit('blockQuotePrefixWhitespace')\n      effects.exit('blockQuotePrefix')\n      return ok\n    }\n    effects.exit('blockQuotePrefix')\n    return ok(code)\n  }\n}\n\n/**\n * Start of block quote continuation.\n *\n * ```markdown\n *   | > a\n * > | > b\n *     ^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeBlockQuoteContinuation(effects, ok, nok) {\n  const self = this\n  return contStart\n\n  /**\n   * Start of block quote continuation.\n   *\n   * Also used to parse the first block quote opening.\n   *\n   * ```markdown\n   *   | > a\n   * > | > b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function contStart(code) {\n    if (markdownSpace(code)) {\n      // Always populated by defaults.\n\n      return factorySpace(\n        effects,\n        contBefore,\n        'linePrefix',\n        self.parser.constructs.disable.null.includes('codeIndented')\n          ? undefined\n          : 4\n      )(code)\n    }\n    return contBefore(code)\n  }\n\n  /**\n   * At `>`, after optional whitespace.\n   *\n   * Also used to parse the first block quote opening.\n   *\n   * ```markdown\n   *   | > a\n   * > | > b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function contBefore(code) {\n    return effects.attempt(blockQuote, ok, nok)(code)\n  }\n}\n\n/** @type {Exiter} */\nfunction exit(effects) {\n  effects.exit('blockQuote')\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenType} TokenType\n */\n\nimport {\n  asciiControl,\n  markdownLineEndingOrSpace,\n  markdownLineEnding\n} from 'micromark-util-character'\n/**\n * Parse destinations.\n *\n * ###### Examples\n *\n * ```markdown\n * <a>\n * <a\\>b>\n * <a b>\n * <a)>\n * a\n * a\\)b\n * a(b)c\n * a(b)\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type for whole (`<a>` or `b`).\n * @param {TokenType} literalType\n *   Type when enclosed (`<a>`).\n * @param {TokenType} literalMarkerType\n *   Type for enclosing (`<` and `>`).\n * @param {TokenType} rawType\n *   Type when not enclosed (`b`).\n * @param {TokenType} stringType\n *   Type for the value (`a` or `b`).\n * @param {number | undefined} [max=Infinity]\n *   Depth of nested parens (inclusive).\n * @returns {State}\n *   Start state.\n */ // eslint-disable-next-line max-params\nexport function factoryDestination(\n  effects,\n  ok,\n  nok,\n  type,\n  literalType,\n  literalMarkerType,\n  rawType,\n  stringType,\n  max\n) {\n  const limit = max || Number.POSITIVE_INFINITY\n  let balance = 0\n  return start\n\n  /**\n   * Start of destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *     ^\n   * > | aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === 60) {\n      effects.enter(type)\n      effects.enter(literalType)\n      effects.enter(literalMarkerType)\n      effects.consume(code)\n      effects.exit(literalMarkerType)\n      return enclosedBefore\n    }\n\n    // ASCII control, space, closing paren.\n    if (code === null || code === 32 || code === 41 || asciiControl(code)) {\n      return nok(code)\n    }\n    effects.enter(type)\n    effects.enter(rawType)\n    effects.enter(stringType)\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return raw(code)\n  }\n\n  /**\n   * After `<`, at an enclosed destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function enclosedBefore(code) {\n    if (code === 62) {\n      effects.enter(literalMarkerType)\n      effects.consume(code)\n      effects.exit(literalMarkerType)\n      effects.exit(literalType)\n      effects.exit(type)\n      return ok\n    }\n    effects.enter(stringType)\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return enclosed(code)\n  }\n\n  /**\n   * In enclosed destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function enclosed(code) {\n    if (code === 62) {\n      effects.exit('chunkString')\n      effects.exit(stringType)\n      return enclosedBefore(code)\n    }\n    if (code === null || code === 60 || markdownLineEnding(code)) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return code === 92 ? enclosedEscape : enclosed\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | <a\\*a>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function enclosedEscape(code) {\n    if (code === 60 || code === 62 || code === 92) {\n      effects.consume(code)\n      return enclosed\n    }\n    return enclosed(code)\n  }\n\n  /**\n   * In raw destination.\n   *\n   * ```markdown\n   * > | aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function raw(code) {\n    if (\n      !balance &&\n      (code === null || code === 41 || markdownLineEndingOrSpace(code))\n    ) {\n      effects.exit('chunkString')\n      effects.exit(stringType)\n      effects.exit(rawType)\n      effects.exit(type)\n      return ok(code)\n    }\n    if (balance < limit && code === 40) {\n      effects.consume(code)\n      balance++\n      return raw\n    }\n    if (code === 41) {\n      effects.consume(code)\n      balance--\n      return raw\n    }\n\n    // ASCII control (but *not* `\\0`) and space and `(`.\n    // Note: in `markdown-rs`, `\\0` exists in codes, in `micromark-js` it\n    // doesn’t.\n    if (code === null || code === 32 || code === 40 || asciiControl(code)) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return code === 92 ? rawEscape : raw\n  }\n\n  /**\n   * After `\\`, at special character.\n   *\n   * ```markdown\n   * > | a\\*a\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function rawEscape(code) {\n    if (code === 40 || code === 41 || code === 92) {\n      effects.consume(code)\n      return raw\n    }\n    return raw(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').TokenType} TokenType\n */\n\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/**\n * Parse labels.\n *\n * > 👉 **Note**: labels in markdown are capped at 999 characters in the string.\n *\n * ###### Examples\n *\n * ```markdown\n * [a]\n * [a\n * b]\n * [a\\]b]\n * ```\n *\n * @this {TokenizeContext}\n *   Tokenize context.\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type of the whole label (`[a]`).\n * @param {TokenType} markerType\n *   Type for the markers (`[` and `]`).\n * @param {TokenType} stringType\n *   Type for the identifier (`a`).\n * @returns {State}\n *   Start state.\n */ // eslint-disable-next-line max-params\nexport function factoryLabel(effects, ok, nok, type, markerType, stringType) {\n  const self = this\n  let size = 0\n  /** @type {boolean} */\n  let seen\n  return start\n\n  /**\n   * Start of label.\n   *\n   * ```markdown\n   * > | [a]\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(type)\n    effects.enter(markerType)\n    effects.consume(code)\n    effects.exit(markerType)\n    effects.enter(stringType)\n    return atBreak\n  }\n\n  /**\n   * In label, at something, before something else.\n   *\n   * ```markdown\n   * > | [a]\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (\n      size > 999 ||\n      code === null ||\n      code === 91 ||\n      (code === 93 && !seen) ||\n      // To do: remove in the future once we’ve switched from\n      // `micromark-extension-footnote` to `micromark-extension-gfm-footnote`,\n      // which doesn’t need this.\n      // Hidden footnotes hook.\n      /* c8 ignore next 3 */\n      (code === 94 &&\n        !size &&\n        '_hiddenFootnoteSupport' in self.parser.constructs)\n    ) {\n      return nok(code)\n    }\n    if (code === 93) {\n      effects.exit(stringType)\n      effects.enter(markerType)\n      effects.consume(code)\n      effects.exit(markerType)\n      effects.exit(type)\n      return ok\n    }\n\n    // To do: indent? Link chunks and EOLs together?\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return atBreak\n    }\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return labelInside(code)\n  }\n\n  /**\n   * In label, in text.\n   *\n   * ```markdown\n   * > | [a]\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelInside(code) {\n    if (\n      code === null ||\n      code === 91 ||\n      code === 93 ||\n      markdownLineEnding(code) ||\n      size++ > 999\n    ) {\n      effects.exit('chunkString')\n      return atBreak(code)\n    }\n    effects.consume(code)\n    if (!seen) seen = !markdownSpace(code)\n    return code === 92 ? labelEscape : labelInside\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | [a\\*a]\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEscape(code) {\n    if (code === 91 || code === 92 || code === 93) {\n      effects.consume(code)\n      size++\n      return labelInside\n    }\n    return labelInside(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenType} TokenType\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n/**\n * Parse titles.\n *\n * ###### Examples\n *\n * ```markdown\n * \"a\"\n * 'b'\n * (c)\n * \"a\n * b\"\n * 'a\n *     b'\n * (a\\)b)\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type of the whole title (`\"a\"`, `'b'`, `(c)`).\n * @param {TokenType} markerType\n *   Type for the markers (`\"`, `'`, `(`, and `)`).\n * @param {TokenType} stringType\n *   Type for the value (`a`).\n * @returns {State}\n *   Start state.\n */ // eslint-disable-next-line max-params\nexport function factoryTitle(effects, ok, nok, type, markerType, stringType) {\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n\n  /**\n   * Start of title.\n   *\n   * ```markdown\n   * > | \"a\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === 34 || code === 39 || code === 40) {\n      effects.enter(type)\n      effects.enter(markerType)\n      effects.consume(code)\n      effects.exit(markerType)\n      marker = code === 40 ? 41 : code\n      return begin\n    }\n    return nok(code)\n  }\n\n  /**\n   * After opening marker.\n   *\n   * This is also used at the closing marker.\n   *\n   * ```markdown\n   * > | \"a\"\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function begin(code) {\n    if (code === marker) {\n      effects.enter(markerType)\n      effects.consume(code)\n      effects.exit(markerType)\n      effects.exit(type)\n      return ok\n    }\n    effects.enter(stringType)\n    return atBreak(code)\n  }\n\n  /**\n   * At something, before something else.\n   *\n   * ```markdown\n   * > | \"a\"\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === marker) {\n      effects.exit(stringType)\n      return begin(marker)\n    }\n    if (code === null) {\n      return nok(code)\n    }\n\n    // Note: blank lines can’t exist in content.\n    if (markdownLineEnding(code)) {\n      // To do: use `space_or_tab_eol_with_options`, connect.\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return factorySpace(effects, atBreak, 'linePrefix')\n    }\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return inside(code)\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === marker || code === null || markdownLineEnding(code)) {\n      effects.exit('chunkString')\n      return atBreak(code)\n    }\n    effects.consume(code)\n    return code === 92 ? escape : inside\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | \"a\\*b\"\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function escape(code) {\n    if (code === marker || code === 92) {\n      effects.consume(code)\n      return inside\n    }\n    return inside(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/**\n * Parse spaces and tabs.\n *\n * There is no `nok` parameter:\n *\n * *   line endings or spaces in markdown are often optional, in which case this\n *     factory can be used and `ok` will be switched to whether spaces were found\n *     or not\n * *   one line ending or space can be detected with\n *     `markdownLineEndingOrSpace(code)` right before using `factoryWhitespace`\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @returns {State}\n *   Start state.\n */\nexport function factoryWhitespace(effects, ok) {\n  /** @type {boolean} */\n  let seen\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      seen = true\n      return start\n    }\n    if (markdownSpace(code)) {\n      return factorySpace(\n        effects,\n        start,\n        seen ? 'linePrefix' : 'lineSuffix'\n      )(code)\n    }\n    return ok(code)\n  }\n}\n","/**\n * Normalize an identifier (as found in references, definitions).\n *\n * Collapses markdown whitespace, trim, and then lower- and uppercase.\n *\n * Some characters are considered “uppercase”, such as U+03F4 (`ϴ`), but if their\n * lowercase counterpart (U+03B8 (`θ`)) is uppercased will result in a different\n * uppercase character (U+0398 (`Θ`)).\n * So, to get a canonical form, we perform both lower- and uppercase.\n *\n * Using uppercase last makes sure keys will never interact with default\n * prototypal values (such as `constructor`): nothing in the prototype of\n * `Object` is uppercase.\n *\n * @param {string} value\n *   Identifier to normalize.\n * @returns {string}\n *   Normalized identifier.\n */\nexport function normalizeIdentifier(value) {\n  return (\n    value\n      // Collapse markdown whitespace.\n      .replace(/[\\t\\n\\r ]+/g, ' ')\n      // Trim.\n      .replace(/^ | $/g, '')\n      // Some characters are considered “uppercase”, but if their lowercase\n      // counterpart is uppercased will result in a different uppercase\n      // character.\n      // Hence, to get that form, we perform both lower- and uppercase.\n      // Upper case makes sure keys will not interact with default prototypal\n      // methods: no method is uppercase.\n      .toLowerCase()\n      .toUpperCase()\n  )\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factoryDestination} from 'micromark-factory-destination'\nimport {factoryLabel} from 'micromark-factory-label'\nimport {factorySpace} from 'micromark-factory-space'\nimport {factoryTitle} from 'micromark-factory-title'\nimport {factoryWhitespace} from 'micromark-factory-whitespace'\nimport {\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\n/** @type {Construct} */\nexport const definition = {\n  name: 'definition',\n  tokenize: tokenizeDefinition\n}\n\n/** @type {Construct} */\nconst titleBefore = {\n  tokenize: tokenizeTitleBefore,\n  partial: true\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeDefinition(effects, ok, nok) {\n  const self = this\n  /** @type {string} */\n  let identifier\n  return start\n\n  /**\n   * At start of a definition.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // Do not interrupt paragraphs (but do follow definitions).\n    // To do: do `interrupt` the way `markdown-rs` does.\n    // To do: parse whitespace the way `markdown-rs` does.\n    effects.enter('definition')\n    return before(code)\n  }\n\n  /**\n   * After optional whitespace, at `[`.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    // To do: parse whitespace the way `markdown-rs` does.\n\n    return factoryLabel.call(\n      self,\n      effects,\n      labelAfter,\n      // Note: we don’t need to reset the way `markdown-rs` does.\n      nok,\n      'definitionLabel',\n      'definitionLabelMarker',\n      'definitionLabelString'\n    )(code)\n  }\n\n  /**\n   * After label.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelAfter(code) {\n    identifier = normalizeIdentifier(\n      self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1)\n    )\n    if (code === 58) {\n      effects.enter('definitionMarker')\n      effects.consume(code)\n      effects.exit('definitionMarker')\n      return markerAfter\n    }\n    return nok(code)\n  }\n\n  /**\n   * After marker.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function markerAfter(code) {\n    // Note: whitespace is optional.\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, destinationBefore)(code)\n      : destinationBefore(code)\n  }\n\n  /**\n   * Before destination.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function destinationBefore(code) {\n    return factoryDestination(\n      effects,\n      destinationAfter,\n      // Note: we don’t need to reset the way `markdown-rs` does.\n      nok,\n      'definitionDestination',\n      'definitionDestinationLiteral',\n      'definitionDestinationLiteralMarker',\n      'definitionDestinationRaw',\n      'definitionDestinationString'\n    )(code)\n  }\n\n  /**\n   * After destination.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function destinationAfter(code) {\n    return effects.attempt(titleBefore, after, after)(code)\n  }\n\n  /**\n   * After definition.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return markdownSpace(code)\n      ? factorySpace(effects, afterWhitespace, 'whitespace')(code)\n      : afterWhitespace(code)\n  }\n\n  /**\n   * After definition, after optional whitespace.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterWhitespace(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('definition')\n\n      // Note: we don’t care about uniqueness.\n      // It’s likely that that doesn’t happen very frequently.\n      // It is more likely that it wastes precious time.\n      self.parser.defined.push(identifier)\n\n      // To do: `markdown-rs` interrupt.\n      // // You’d be interrupting.\n      // tokenizer.interrupt = true\n      return ok(code)\n    }\n    return nok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeTitleBefore(effects, ok, nok) {\n  return titleBefore\n\n  /**\n   * After destination, at whitespace.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleBefore(code) {\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, beforeMarker)(code)\n      : nok(code)\n  }\n\n  /**\n   * At title.\n   *\n   * ```markdown\n   *   | [a]: b\n   * > | \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeMarker(code) {\n    return factoryTitle(\n      effects,\n      titleAfter,\n      nok,\n      'definitionTitle',\n      'definitionTitleMarker',\n      'definitionTitleString'\n    )(code)\n  }\n\n  /**\n   * After title.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleAfter(code) {\n    return markdownSpace(code)\n      ? factorySpace(effects, titleAfterOptionalWhitespace, 'whitespace')(code)\n      : titleAfterOptionalWhitespace(code)\n  }\n\n  /**\n   * After title, after optional whitespace.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleAfterOptionalWhitespace(code) {\n    return code === null || markdownLineEnding(code) ? ok(code) : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nexport const codeIndented = {\n  name: 'codeIndented',\n  tokenize: tokenizeCodeIndented\n}\n\n/** @type {Construct} */\nconst furtherStart = {\n  tokenize: tokenizeFurtherStart,\n  partial: true\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCodeIndented(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   * Start of code (indented).\n   *\n   * > **Parsing note**: it is not needed to check if this first line is a\n   * > filled line (that it has a non-whitespace character), because blank lines\n   * > are parsed already, so we never run into that.\n   *\n   * ```markdown\n   * > |     aaa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: manually check if interrupting like `markdown-rs`.\n\n    effects.enter('codeIndented')\n    // To do: use an improved `space_or_tab` function like `markdown-rs`,\n    // so that we can drop the next state.\n    return factorySpace(effects, afterPrefix, 'linePrefix', 4 + 1)(code)\n  }\n\n  /**\n   * At start, after 1 or 4 spaces.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return tail &&\n      tail[1].type === 'linePrefix' &&\n      tail[2].sliceSerialize(tail[1], true).length >= 4\n      ? atBreak(code)\n      : nok(code)\n  }\n\n  /**\n   * At a break.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^  ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === null) {\n      return after(code)\n    }\n    if (markdownLineEnding(code)) {\n      return effects.attempt(furtherStart, atBreak, after)(code)\n    }\n    effects.enter('codeFlowValue')\n    return inside(code)\n  }\n\n  /**\n   * In code content.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('codeFlowValue')\n      return atBreak(code)\n    }\n    effects.consume(code)\n    return inside\n  }\n\n  /** @type {State} */\n  function after(code) {\n    effects.exit('codeIndented')\n    // To do: allow interrupting like `markdown-rs`.\n    // Feel free to interrupt.\n    // tokenizer.interrupt = false\n    return ok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeFurtherStart(effects, ok, nok) {\n  const self = this\n  return furtherStart\n\n  /**\n   * At eol, trying to parse another indent.\n   *\n   * ```markdown\n   * > |     aaa\n   *            ^\n   *   |     bbb\n   * ```\n   *\n   * @type {State}\n   */\n  function furtherStart(code) {\n    // To do: improve `lazy` / `pierce` handling.\n    // If this is a lazy line, it can’t be code.\n    if (self.parser.lazy[self.now().line]) {\n      return nok(code)\n    }\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return furtherStart\n    }\n\n    // To do: the code here in `micromark-js` is a bit different from\n    // `markdown-rs` because there it can attempt spaces.\n    // We can’t yet.\n    //\n    // To do: use an improved `space_or_tab` function like `markdown-rs`,\n    // so that we can drop the next state.\n    return factorySpace(effects, afterPrefix, 'linePrefix', 4 + 1)(code)\n  }\n\n  /**\n   * At start, after 1 or 4 spaces.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return tail &&\n      tail[1].type === 'linePrefix' &&\n      tail[2].sliceSerialize(tail[1], true).length >= 4\n      ? ok(code)\n      : markdownLineEnding(code)\n      ? furtherStart(code)\n      : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\nimport {splice} from 'micromark-util-chunked'\n/** @type {Construct} */\nexport const headingAtx = {\n  name: 'headingAtx',\n  tokenize: tokenizeHeadingAtx,\n  resolve: resolveHeadingAtx\n}\n\n/** @type {Resolver} */\nfunction resolveHeadingAtx(events, context) {\n  let contentEnd = events.length - 2\n  let contentStart = 3\n  /** @type {Token} */\n  let content\n  /** @type {Token} */\n  let text\n\n  // Prefix whitespace, part of the opening.\n  if (events[contentStart][1].type === 'whitespace') {\n    contentStart += 2\n  }\n\n  // Suffix whitespace, part of the closing.\n  if (\n    contentEnd - 2 > contentStart &&\n    events[contentEnd][1].type === 'whitespace'\n  ) {\n    contentEnd -= 2\n  }\n  if (\n    events[contentEnd][1].type === 'atxHeadingSequence' &&\n    (contentStart === contentEnd - 1 ||\n      (contentEnd - 4 > contentStart &&\n        events[contentEnd - 2][1].type === 'whitespace'))\n  ) {\n    contentEnd -= contentStart + 1 === contentEnd ? 2 : 4\n  }\n  if (contentEnd > contentStart) {\n    content = {\n      type: 'atxHeadingText',\n      start: events[contentStart][1].start,\n      end: events[contentEnd][1].end\n    }\n    text = {\n      type: 'chunkText',\n      start: events[contentStart][1].start,\n      end: events[contentEnd][1].end,\n      contentType: 'text'\n    }\n    splice(events, contentStart, contentEnd - contentStart + 1, [\n      ['enter', content, context],\n      ['enter', text, context],\n      ['exit', text, context],\n      ['exit', content, context]\n    ])\n  }\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeHeadingAtx(effects, ok, nok) {\n  let size = 0\n  return start\n\n  /**\n   * Start of a heading (atx).\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse indent like `markdown-rs`.\n    effects.enter('atxHeading')\n    return before(code)\n  }\n\n  /**\n   * After optional whitespace, at `#`.\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter('atxHeadingSequence')\n    return sequenceOpen(code)\n  }\n\n  /**\n   * In opening sequence.\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === 35 && size++ < 6) {\n      effects.consume(code)\n      return sequenceOpen\n    }\n\n    // Always at least one `#`.\n    if (code === null || markdownLineEndingOrSpace(code)) {\n      effects.exit('atxHeadingSequence')\n      return atBreak(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * After something, before something else.\n   *\n   * ```markdown\n   * > | ## aa\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === 35) {\n      effects.enter('atxHeadingSequence')\n      return sequenceFurther(code)\n    }\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('atxHeading')\n      // To do: interrupt like `markdown-rs`.\n      // // Feel free to interrupt.\n      // tokenizer.interrupt = false\n      return ok(code)\n    }\n    if (markdownSpace(code)) {\n      return factorySpace(effects, atBreak, 'whitespace')(code)\n    }\n\n    // To do: generate `data` tokens, add the `text` token later.\n    // Needs edit map, see: `markdown.rs`.\n    effects.enter('atxHeadingText')\n    return data(code)\n  }\n\n  /**\n   * In further sequence (after whitespace).\n   *\n   * Could be normal “visible” hashes in the heading or a final sequence.\n   *\n   * ```markdown\n   * > | ## aa ##\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceFurther(code) {\n    if (code === 35) {\n      effects.consume(code)\n      return sequenceFurther\n    }\n    effects.exit('atxHeadingSequence')\n    return atBreak(code)\n  }\n\n  /**\n   * In text.\n   *\n   * ```markdown\n   * > | ## aa\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function data(code) {\n    if (code === null || code === 35 || markdownLineEndingOrSpace(code)) {\n      effects.exit('atxHeadingText')\n      return atBreak(code)\n    }\n    effects.consume(code)\n    return data\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nexport const setextUnderline = {\n  name: 'setextUnderline',\n  tokenize: tokenizeSetextUnderline,\n  resolveTo: resolveToSetextUnderline\n}\n\n/** @type {Resolver} */\nfunction resolveToSetextUnderline(events, context) {\n  // To do: resolve like `markdown-rs`.\n  let index = events.length\n  /** @type {number | undefined} */\n  let content\n  /** @type {number | undefined} */\n  let text\n  /** @type {number | undefined} */\n  let definition\n\n  // Find the opening of the content.\n  // It’ll always exist: we don’t tokenize if it isn’t there.\n  while (index--) {\n    if (events[index][0] === 'enter') {\n      if (events[index][1].type === 'content') {\n        content = index\n        break\n      }\n      if (events[index][1].type === 'paragraph') {\n        text = index\n      }\n    }\n    // Exit\n    else {\n      if (events[index][1].type === 'content') {\n        // Remove the content end (if needed we’ll add it later)\n        events.splice(index, 1)\n      }\n      if (!definition && events[index][1].type === 'definition') {\n        definition = index\n      }\n    }\n  }\n  const heading = {\n    type: 'setextHeading',\n    start: Object.assign({}, events[text][1].start),\n    end: Object.assign({}, events[events.length - 1][1].end)\n  }\n\n  // Change the paragraph to setext heading text.\n  events[text][1].type = 'setextHeadingText'\n\n  // If we have definitions in the content, we’ll keep on having content,\n  // but we need move it.\n  if (definition) {\n    events.splice(text, 0, ['enter', heading, context])\n    events.splice(definition + 1, 0, ['exit', events[content][1], context])\n    events[content][1].end = Object.assign({}, events[definition][1].end)\n  } else {\n    events[content][1] = heading\n  }\n\n  // Add the heading exit at the end.\n  events.push(['exit', heading, context])\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeSetextUnderline(effects, ok, nok) {\n  const self = this\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n\n  /**\n   * At start of heading (setext) underline.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    let index = self.events.length\n    /** @type {boolean | undefined} */\n    let paragraph\n    // Find an opening.\n    while (index--) {\n      // Skip enter/exit of line ending, line prefix, and content.\n      // We can now either have a definition or a paragraph.\n      if (\n        self.events[index][1].type !== 'lineEnding' &&\n        self.events[index][1].type !== 'linePrefix' &&\n        self.events[index][1].type !== 'content'\n      ) {\n        paragraph = self.events[index][1].type === 'paragraph'\n        break\n      }\n    }\n\n    // To do: handle lazy/pierce like `markdown-rs`.\n    // To do: parse indent like `markdown-rs`.\n    if (!self.parser.lazy[self.now().line] && (self.interrupt || paragraph)) {\n      effects.enter('setextHeadingLine')\n      marker = code\n      return before(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * After optional whitespace, at `-` or `=`.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter('setextHeadingLineSequence')\n    return inside(code)\n  }\n\n  /**\n   * In sequence.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === marker) {\n      effects.consume(code)\n      return inside\n    }\n    effects.exit('setextHeadingLineSequence')\n    return markdownSpace(code)\n      ? factorySpace(effects, after, 'lineSuffix')(code)\n      : after(code)\n  }\n\n  /**\n   * After sequence, after optional whitespace.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('setextHeadingLine')\n      return ok(code)\n    }\n    return nok(code)\n  }\n}\n","/**\n * List of lowercase HTML “block” tag names.\n *\n * The list, when parsing HTML (flow), results in more relaxed rules (condition\n * 6).\n * Because they are known blocks, the HTML-like syntax doesn’t have to be\n * strictly parsed.\n * For tag names not in this list, a more strict algorithm (condition 7) is used\n * to detect whether the HTML-like syntax is seen as HTML (flow) or not.\n *\n * This is copied from:\n * <https://spec.commonmark.org/0.30/#html-blocks>.\n *\n * > 👉 **Note**: `search` was added in `CommonMark@0.31`.\n */\nexport const htmlBlockNames = [\n  'address',\n  'article',\n  'aside',\n  'base',\n  'basefont',\n  'blockquote',\n  'body',\n  'caption',\n  'center',\n  'col',\n  'colgroup',\n  'dd',\n  'details',\n  'dialog',\n  'dir',\n  'div',\n  'dl',\n  'dt',\n  'fieldset',\n  'figcaption',\n  'figure',\n  'footer',\n  'form',\n  'frame',\n  'frameset',\n  'h1',\n  'h2',\n  'h3',\n  'h4',\n  'h5',\n  'h6',\n  'head',\n  'header',\n  'hr',\n  'html',\n  'iframe',\n  'legend',\n  'li',\n  'link',\n  'main',\n  'menu',\n  'menuitem',\n  'nav',\n  'noframes',\n  'ol',\n  'optgroup',\n  'option',\n  'p',\n  'param',\n  'search',\n  'section',\n  'summary',\n  'table',\n  'tbody',\n  'td',\n  'tfoot',\n  'th',\n  'thead',\n  'title',\n  'tr',\n  'track',\n  'ul'\n]\n\n/**\n * List of lowercase HTML “raw” tag names.\n *\n * The list, when parsing HTML (flow), results in HTML that can include lines\n * without exiting, until a closing tag also in this list is found (condition\n * 1).\n *\n * This module is copied from:\n * <https://spec.commonmark.org/0.30/#html-blocks>.\n *\n * > 👉 **Note**: `textarea` was added in `CommonMark@0.30`.\n */\nexport const htmlRawNames = ['pre', 'script', 'style', 'textarea']\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {\n  asciiAlpha,\n  asciiAlphanumeric,\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\nimport {htmlBlockNames, htmlRawNames} from 'micromark-util-html-tag-name'\nimport {blankLine} from './blank-line.js'\n\n/** @type {Construct} */\nexport const htmlFlow = {\n  name: 'htmlFlow',\n  tokenize: tokenizeHtmlFlow,\n  resolveTo: resolveToHtmlFlow,\n  concrete: true\n}\n\n/** @type {Construct} */\nconst blankLineBefore = {\n  tokenize: tokenizeBlankLineBefore,\n  partial: true\n}\nconst nonLazyContinuationStart = {\n  tokenize: tokenizeNonLazyContinuationStart,\n  partial: true\n}\n\n/** @type {Resolver} */\nfunction resolveToHtmlFlow(events) {\n  let index = events.length\n  while (index--) {\n    if (events[index][0] === 'enter' && events[index][1].type === 'htmlFlow') {\n      break\n    }\n  }\n  if (index > 1 && events[index - 2][1].type === 'linePrefix') {\n    // Add the prefix start to the HTML token.\n    events[index][1].start = events[index - 2][1].start\n    // Add the prefix start to the HTML line token.\n    events[index + 1][1].start = events[index - 2][1].start\n    // Remove the line prefix.\n    events.splice(index - 2, 2)\n  }\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeHtmlFlow(effects, ok, nok) {\n  const self = this\n  /** @type {number} */\n  let marker\n  /** @type {boolean} */\n  let closingTag\n  /** @type {string} */\n  let buffer\n  /** @type {number} */\n  let index\n  /** @type {Code} */\n  let markerB\n  return start\n\n  /**\n   * Start of HTML (flow).\n   *\n   * ```markdown\n   * > | <x />\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse indent like `markdown-rs`.\n    return before(code)\n  }\n\n  /**\n   * At `<`, after optional whitespace.\n   *\n   * ```markdown\n   * > | <x />\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter('htmlFlow')\n    effects.enter('htmlFlowData')\n    effects.consume(code)\n    return open\n  }\n\n  /**\n   * After `<`, at tag name or other stuff.\n   *\n   * ```markdown\n   * > | <x />\n   *      ^\n   * > | <!doctype>\n   *      ^\n   * > | <!--xxx-->\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 33) {\n      effects.consume(code)\n      return declarationOpen\n    }\n    if (code === 47) {\n      effects.consume(code)\n      closingTag = true\n      return tagCloseStart\n    }\n    if (code === 63) {\n      effects.consume(code)\n      marker = 3\n      // To do:\n      // tokenizer.concrete = true\n      // To do: use `markdown-rs` style interrupt.\n      // While we’re in an instruction instead of a declaration, we’re on a `?`\n      // right now, so we do need to search for `>`, similar to declarations.\n      return self.interrupt ? ok : continuationDeclarationInside\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      // @ts-expect-error: not null.\n      buffer = String.fromCharCode(code)\n      return tagName\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `<!`, at declaration, comment, or CDATA.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *       ^\n   * > | <!--xxx-->\n   *       ^\n   * > | <![CDATA[>&<]]>\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declarationOpen(code) {\n    if (code === 45) {\n      effects.consume(code)\n      marker = 2\n      return commentOpenInside\n    }\n    if (code === 91) {\n      effects.consume(code)\n      marker = 5\n      index = 0\n      return cdataOpenInside\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      marker = 4\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuationDeclarationInside\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `<!-`, inside a comment, at another `-`.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentOpenInside(code) {\n    if (code === 45) {\n      effects.consume(code)\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuationDeclarationInside\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `<![`, inside CDATA, expecting `CDATA[`.\n   *\n   * ```markdown\n   * > | <![CDATA[>&<]]>\n   *        ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataOpenInside(code) {\n    const value = 'CDATA['\n    if (code === value.charCodeAt(index++)) {\n      effects.consume(code)\n      if (index === value.length) {\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok : continuation\n      }\n      return cdataOpenInside\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `</`, in closing tag, at tag name.\n   *\n   * ```markdown\n   * > | </x>\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseStart(code) {\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      // @ts-expect-error: not null.\n      buffer = String.fromCharCode(code)\n      return tagName\n    }\n    return nok(code)\n  }\n\n  /**\n   * In tag name.\n   *\n   * ```markdown\n   * > | <ab>\n   *      ^^\n   * > | </ab>\n   *       ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagName(code) {\n    if (\n      code === null ||\n      code === 47 ||\n      code === 62 ||\n      markdownLineEndingOrSpace(code)\n    ) {\n      const slash = code === 47\n      const name = buffer.toLowerCase()\n      if (!slash && !closingTag && htmlRawNames.includes(name)) {\n        marker = 1\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok(code) : continuation(code)\n      }\n      if (htmlBlockNames.includes(buffer.toLowerCase())) {\n        marker = 6\n        if (slash) {\n          effects.consume(code)\n          return basicSelfClosing\n        }\n\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok(code) : continuation(code)\n      }\n      marker = 7\n      // Do not support complete HTML when interrupting.\n      return self.interrupt && !self.parser.lazy[self.now().line]\n        ? nok(code)\n        : closingTag\n        ? completeClosingTagAfter(code)\n        : completeAttributeNameBefore(code)\n    }\n\n    // ASCII alphanumerical and `-`.\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code)\n      buffer += String.fromCharCode(code)\n      return tagName\n    }\n    return nok(code)\n  }\n\n  /**\n   * After closing slash of a basic tag name.\n   *\n   * ```markdown\n   * > | <div/>\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function basicSelfClosing(code) {\n    if (code === 62) {\n      effects.consume(code)\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuation\n    }\n    return nok(code)\n  }\n\n  /**\n   * After closing slash of a complete tag name.\n   *\n   * ```markdown\n   * > | <x/>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeClosingTagAfter(code) {\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeClosingTagAfter\n    }\n    return completeEnd(code)\n  }\n\n  /**\n   * At an attribute name.\n   *\n   * At first, this state is used after a complete tag name, after whitespace,\n   * where it expects optional attributes or the end of the tag.\n   * It is also reused after attributes, when expecting more optional\n   * attributes.\n   *\n   * ```markdown\n   * > | <a />\n   *        ^\n   * > | <a :b>\n   *        ^\n   * > | <a _b>\n   *        ^\n   * > | <a b>\n   *        ^\n   * > | <a >\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeNameBefore(code) {\n    if (code === 47) {\n      effects.consume(code)\n      return completeEnd\n    }\n\n    // ASCII alphanumerical and `:` and `_`.\n    if (code === 58 || code === 95 || asciiAlpha(code)) {\n      effects.consume(code)\n      return completeAttributeName\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAttributeNameBefore\n    }\n    return completeEnd(code)\n  }\n\n  /**\n   * In attribute name.\n   *\n   * ```markdown\n   * > | <a :b>\n   *         ^\n   * > | <a _b>\n   *         ^\n   * > | <a b>\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeName(code) {\n    // ASCII alphanumerical and `-`, `.`, `:`, and `_`.\n    if (\n      code === 45 ||\n      code === 46 ||\n      code === 58 ||\n      code === 95 ||\n      asciiAlphanumeric(code)\n    ) {\n      effects.consume(code)\n      return completeAttributeName\n    }\n    return completeAttributeNameAfter(code)\n  }\n\n  /**\n   * After attribute name, at an optional initializer, the end of the tag, or\n   * whitespace.\n   *\n   * ```markdown\n   * > | <a b>\n   *         ^\n   * > | <a b=c>\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeNameAfter(code) {\n    if (code === 61) {\n      effects.consume(code)\n      return completeAttributeValueBefore\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAttributeNameAfter\n    }\n    return completeAttributeNameBefore(code)\n  }\n\n  /**\n   * Before unquoted, double quoted, or single quoted attribute value, allowing\n   * whitespace.\n   *\n   * ```markdown\n   * > | <a b=c>\n   *          ^\n   * > | <a b=\"c\">\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueBefore(code) {\n    if (\n      code === null ||\n      code === 60 ||\n      code === 61 ||\n      code === 62 ||\n      code === 96\n    ) {\n      return nok(code)\n    }\n    if (code === 34 || code === 39) {\n      effects.consume(code)\n      markerB = code\n      return completeAttributeValueQuoted\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAttributeValueBefore\n    }\n    return completeAttributeValueUnquoted(code)\n  }\n\n  /**\n   * In double or single quoted attribute value.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *           ^\n   * > | <a b='c'>\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueQuoted(code) {\n    if (code === markerB) {\n      effects.consume(code)\n      markerB = null\n      return completeAttributeValueQuotedAfter\n    }\n    if (code === null || markdownLineEnding(code)) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return completeAttributeValueQuoted\n  }\n\n  /**\n   * In unquoted attribute value.\n   *\n   * ```markdown\n   * > | <a b=c>\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueUnquoted(code) {\n    if (\n      code === null ||\n      code === 34 ||\n      code === 39 ||\n      code === 47 ||\n      code === 60 ||\n      code === 61 ||\n      code === 62 ||\n      code === 96 ||\n      markdownLineEndingOrSpace(code)\n    ) {\n      return completeAttributeNameAfter(code)\n    }\n    effects.consume(code)\n    return completeAttributeValueUnquoted\n  }\n\n  /**\n   * After double or single quoted attribute value, before whitespace or the\n   * end of the tag.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueQuotedAfter(code) {\n    if (code === 47 || code === 62 || markdownSpace(code)) {\n      return completeAttributeNameBefore(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * In certain circumstances of a complete tag where only an `>` is allowed.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeEnd(code) {\n    if (code === 62) {\n      effects.consume(code)\n      return completeAfter\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `>` in a complete tag.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAfter(code) {\n    if (code === null || markdownLineEnding(code)) {\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return continuation(code)\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAfter\n    }\n    return nok(code)\n  }\n\n  /**\n   * In continuation of any HTML kind.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuation(code) {\n    if (code === 45 && marker === 2) {\n      effects.consume(code)\n      return continuationCommentInside\n    }\n    if (code === 60 && marker === 1) {\n      effects.consume(code)\n      return continuationRawTagOpen\n    }\n    if (code === 62 && marker === 4) {\n      effects.consume(code)\n      return continuationClose\n    }\n    if (code === 63 && marker === 3) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n    if (code === 93 && marker === 5) {\n      effects.consume(code)\n      return continuationCdataInside\n    }\n    if (markdownLineEnding(code) && (marker === 6 || marker === 7)) {\n      effects.exit('htmlFlowData')\n      return effects.check(\n        blankLineBefore,\n        continuationAfter,\n        continuationStart\n      )(code)\n    }\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('htmlFlowData')\n      return continuationStart(code)\n    }\n    effects.consume(code)\n    return continuation\n  }\n\n  /**\n   * In continuation, at eol.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   *   | asd\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationStart(code) {\n    return effects.check(\n      nonLazyContinuationStart,\n      continuationStartNonLazy,\n      continuationAfter\n    )(code)\n  }\n\n  /**\n   * In continuation, at eol, before non-lazy content.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   *   | asd\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationStartNonLazy(code) {\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return continuationBefore\n  }\n\n  /**\n   * In continuation, before non-lazy content.\n   *\n   * ```markdown\n   *   | <x>\n   * > | asd\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return continuationStart(code)\n    }\n    effects.enter('htmlFlowData')\n    return continuation(code)\n  }\n\n  /**\n   * In comment continuation, after one `-`, expecting another.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationCommentInside(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n    return continuation(code)\n  }\n\n  /**\n   * In raw continuation, after `<`, at `/`.\n   *\n   * ```markdown\n   * > | <script>console.log(1)</script>\n   *                            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationRawTagOpen(code) {\n    if (code === 47) {\n      effects.consume(code)\n      buffer = ''\n      return continuationRawEndTag\n    }\n    return continuation(code)\n  }\n\n  /**\n   * In raw continuation, after `</`, in a raw tag name.\n   *\n   * ```markdown\n   * > | <script>console.log(1)</script>\n   *                             ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationRawEndTag(code) {\n    if (code === 62) {\n      const name = buffer.toLowerCase()\n      if (htmlRawNames.includes(name)) {\n        effects.consume(code)\n        return continuationClose\n      }\n      return continuation(code)\n    }\n    if (asciiAlpha(code) && buffer.length < 8) {\n      effects.consume(code)\n      // @ts-expect-error: not null.\n      buffer += String.fromCharCode(code)\n      return continuationRawEndTag\n    }\n    return continuation(code)\n  }\n\n  /**\n   * In cdata continuation, after `]`, expecting `]>`.\n   *\n   * ```markdown\n   * > | <![CDATA[>&<]]>\n   *                  ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationCdataInside(code) {\n    if (code === 93) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n    return continuation(code)\n  }\n\n  /**\n   * In declaration or instruction continuation, at `>`.\n   *\n   * ```markdown\n   * > | <!-->\n   *         ^\n   * > | <?>\n   *       ^\n   * > | <!q>\n   *        ^\n   * > | <!--ab-->\n   *             ^\n   * > | <![CDATA[>&<]]>\n   *                   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationDeclarationInside(code) {\n    if (code === 62) {\n      effects.consume(code)\n      return continuationClose\n    }\n\n    // More dashes.\n    if (code === 45 && marker === 2) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n    return continuation(code)\n  }\n\n  /**\n   * In closed continuation: everything we get until the eol/eof is part of it.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationClose(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('htmlFlowData')\n      return continuationAfter(code)\n    }\n    effects.consume(code)\n    return continuationClose\n  }\n\n  /**\n   * Done.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationAfter(code) {\n    effects.exit('htmlFlow')\n    // // Feel free to interrupt.\n    // tokenizer.interrupt = false\n    // // No longer concrete.\n    // tokenizer.concrete = false\n    return ok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeNonLazyContinuationStart(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   * At eol, before continuation.\n   *\n   * ```markdown\n   * > | * ```js\n   *            ^\n   *   | b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return after\n    }\n    return nok(code)\n  }\n\n  /**\n   * A continuation.\n   *\n   * ```markdown\n   *   | * ```js\n   * > | b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return self.parser.lazy[self.now().line] ? nok(code) : ok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeBlankLineBefore(effects, ok, nok) {\n  return start\n\n  /**\n   * Before eol, expecting blank line.\n   *\n   * ```markdown\n   * > | <div>\n   *          ^\n   *   |\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return effects.attempt(blankLine, ok, nok)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nconst nonLazyContinuation = {\n  tokenize: tokenizeNonLazyContinuation,\n  partial: true\n}\n\n/** @type {Construct} */\nexport const codeFenced = {\n  name: 'codeFenced',\n  tokenize: tokenizeCodeFenced,\n  concrete: true\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCodeFenced(effects, ok, nok) {\n  const self = this\n  /** @type {Construct} */\n  const closeStart = {\n    tokenize: tokenizeCloseStart,\n    partial: true\n  }\n  let initialPrefix = 0\n  let sizeOpen = 0\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n\n  /**\n   * Start of code.\n   *\n   * ```markdown\n   * > | ~~~js\n   *     ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse whitespace like `markdown-rs`.\n    return beforeSequenceOpen(code)\n  }\n\n  /**\n   * In opening fence, after prefix, at sequence.\n   *\n   * ```markdown\n   * > | ~~~js\n   *     ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeSequenceOpen(code) {\n    const tail = self.events[self.events.length - 1]\n    initialPrefix =\n      tail && tail[1].type === 'linePrefix'\n        ? tail[2].sliceSerialize(tail[1], true).length\n        : 0\n    marker = code\n    effects.enter('codeFenced')\n    effects.enter('codeFencedFence')\n    effects.enter('codeFencedFenceSequence')\n    return sequenceOpen(code)\n  }\n\n  /**\n   * In opening fence sequence.\n   *\n   * ```markdown\n   * > | ~~~js\n   *      ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === marker) {\n      sizeOpen++\n      effects.consume(code)\n      return sequenceOpen\n    }\n    if (sizeOpen < 3) {\n      return nok(code)\n    }\n    effects.exit('codeFencedFenceSequence')\n    return markdownSpace(code)\n      ? factorySpace(effects, infoBefore, 'whitespace')(code)\n      : infoBefore(code)\n  }\n\n  /**\n   * In opening fence, after the sequence (and optional whitespace), before info.\n   *\n   * ```markdown\n   * > | ~~~js\n   *        ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function infoBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('codeFencedFence')\n      return self.interrupt\n        ? ok(code)\n        : effects.check(nonLazyContinuation, atNonLazyBreak, after)(code)\n    }\n    effects.enter('codeFencedFenceInfo')\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return info(code)\n  }\n\n  /**\n   * In info.\n   *\n   * ```markdown\n   * > | ~~~js\n   *        ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function info(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('chunkString')\n      effects.exit('codeFencedFenceInfo')\n      return infoBefore(code)\n    }\n    if (markdownSpace(code)) {\n      effects.exit('chunkString')\n      effects.exit('codeFencedFenceInfo')\n      return factorySpace(effects, metaBefore, 'whitespace')(code)\n    }\n    if (code === 96 && code === marker) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return info\n  }\n\n  /**\n   * In opening fence, after info and whitespace, before meta.\n   *\n   * ```markdown\n   * > | ~~~js eval\n   *           ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function metaBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return infoBefore(code)\n    }\n    effects.enter('codeFencedFenceMeta')\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return meta(code)\n  }\n\n  /**\n   * In meta.\n   *\n   * ```markdown\n   * > | ~~~js eval\n   *           ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function meta(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('chunkString')\n      effects.exit('codeFencedFenceMeta')\n      return infoBefore(code)\n    }\n    if (code === 96 && code === marker) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return meta\n  }\n\n  /**\n   * At eol/eof in code, before a non-lazy closing fence or content.\n   *\n   * ```markdown\n   * > | ~~~js\n   *          ^\n   * > | alert(1)\n   *             ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function atNonLazyBreak(code) {\n    return effects.attempt(closeStart, after, contentBefore)(code)\n  }\n\n  /**\n   * Before code content, not a closing fence, at eol.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *             ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentBefore(code) {\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return contentStart\n  }\n\n  /**\n   * Before code content, not a closing fence.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentStart(code) {\n    return initialPrefix > 0 && markdownSpace(code)\n      ? factorySpace(\n          effects,\n          beforeContentChunk,\n          'linePrefix',\n          initialPrefix + 1\n        )(code)\n      : beforeContentChunk(code)\n  }\n\n  /**\n   * Before code content, after optional prefix.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeContentChunk(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return effects.check(nonLazyContinuation, atNonLazyBreak, after)(code)\n    }\n    effects.enter('codeFlowValue')\n    return contentChunk(code)\n  }\n\n  /**\n   * In code content.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^^^^^^^^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentChunk(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('codeFlowValue')\n      return beforeContentChunk(code)\n    }\n    effects.consume(code)\n    return contentChunk\n  }\n\n  /**\n   * After code.\n   *\n   * ```markdown\n   *   | ~~~js\n   *   | alert(1)\n   * > | ~~~\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    effects.exit('codeFenced')\n    return ok(code)\n  }\n\n  /**\n   * @this {TokenizeContext}\n   * @type {Tokenizer}\n   */\n  function tokenizeCloseStart(effects, ok, nok) {\n    let size = 0\n    return startBefore\n\n    /**\n     *\n     *\n     * @type {State}\n     */\n    function startBefore(code) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return start\n    }\n\n    /**\n     * Before closing fence, at optional whitespace.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function start(code) {\n      // Always populated by defaults.\n\n      // To do: `enter` here or in next state?\n      effects.enter('codeFencedFence')\n      return markdownSpace(code)\n        ? factorySpace(\n            effects,\n            beforeSequenceClose,\n            'linePrefix',\n            self.parser.constructs.disable.null.includes('codeIndented')\n              ? undefined\n              : 4\n          )(code)\n        : beforeSequenceClose(code)\n    }\n\n    /**\n     * In closing fence, after optional whitespace, at sequence.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function beforeSequenceClose(code) {\n      if (code === marker) {\n        effects.enter('codeFencedFenceSequence')\n        return sequenceClose(code)\n      }\n      return nok(code)\n    }\n\n    /**\n     * In closing fence sequence.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function sequenceClose(code) {\n      if (code === marker) {\n        size++\n        effects.consume(code)\n        return sequenceClose\n      }\n      if (size >= sizeOpen) {\n        effects.exit('codeFencedFenceSequence')\n        return markdownSpace(code)\n          ? factorySpace(effects, sequenceCloseAfter, 'whitespace')(code)\n          : sequenceCloseAfter(code)\n      }\n      return nok(code)\n    }\n\n    /**\n     * After closing fence sequence, after optional whitespace.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *        ^\n     * ```\n     *\n     * @type {State}\n     */\n    function sequenceCloseAfter(code) {\n      if (code === null || markdownLineEnding(code)) {\n        effects.exit('codeFencedFence')\n        return ok(code)\n      }\n      return nok(code)\n    }\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeNonLazyContinuation(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === null) {\n      return nok(code)\n    }\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return lineStart\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function lineStart(code) {\n    return self.parser.lazy[self.now().line] ? nok(code) : ok(code)\n  }\n}\n","/// <reference lib=\"dom\" />\n\n/* eslint-env browser */\n\nconst element = document.createElement('i')\n\n/**\n * @param {string} value\n * @returns {string|false}\n */\nexport function decodeNamedCharacterReference(value) {\n  const characterReference = '&' + value + ';'\n  element.innerHTML = characterReference\n  const char = element.textContent\n\n  // Some named character references do not require the closing semicolon\n  // (`&not`, for instance), which leads to situations where parsing the assumed\n  // named reference of `&notit;` will result in the string `¬it;`.\n  // When we encounter a trailing semicolon after parsing, and the character\n  // reference to decode was not a semicolon (`&semi;`), we can assume that the\n  // matching was not complete.\n  // @ts-expect-error: TypeScript is wrong that `textContent` on elements can\n  // yield `null`.\n  if (char.charCodeAt(char.length - 1) === 59 /* `;` */ && value !== 'semi') {\n    return false\n  }\n\n  // If the decoded string is equal to the input, the character reference was\n  // not valid.\n  // @ts-expect-error: TypeScript is wrong that `textContent` on elements can\n  // yield `null`.\n  return char === characterReference ? false : char\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {decodeNamedCharacterReference} from 'decode-named-character-reference'\nimport {\n  asciiAlphanumeric,\n  asciiDigit,\n  asciiHexDigit\n} from 'micromark-util-character'\n/** @type {Construct} */\nexport const characterReference = {\n  name: 'characterReference',\n  tokenize: tokenizeCharacterReference\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCharacterReference(effects, ok, nok) {\n  const self = this\n  let size = 0\n  /** @type {number} */\n  let max\n  /** @type {(code: Code) => boolean} */\n  let test\n  return start\n\n  /**\n   * Start of character reference.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *      ^\n   * > | a&#123;b\n   *      ^\n   * > | a&#x9;b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('characterReference')\n    effects.enter('characterReferenceMarker')\n    effects.consume(code)\n    effects.exit('characterReferenceMarker')\n    return open\n  }\n\n  /**\n   * After `&`, at `#` for numeric references or alphanumeric for named\n   * references.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *       ^\n   * > | a&#123;b\n   *       ^\n   * > | a&#x9;b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 35) {\n      effects.enter('characterReferenceMarkerNumeric')\n      effects.consume(code)\n      effects.exit('characterReferenceMarkerNumeric')\n      return numeric\n    }\n    effects.enter('characterReferenceValue')\n    max = 31\n    test = asciiAlphanumeric\n    return value(code)\n  }\n\n  /**\n   * After `#`, at `x` for hexadecimals or digit for decimals.\n   *\n   * ```markdown\n   * > | a&#123;b\n   *        ^\n   * > | a&#x9;b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function numeric(code) {\n    if (code === 88 || code === 120) {\n      effects.enter('characterReferenceMarkerHexadecimal')\n      effects.consume(code)\n      effects.exit('characterReferenceMarkerHexadecimal')\n      effects.enter('characterReferenceValue')\n      max = 6\n      test = asciiHexDigit\n      return value\n    }\n    effects.enter('characterReferenceValue')\n    max = 7\n    test = asciiDigit\n    return value(code)\n  }\n\n  /**\n   * After markers (`&#x`, `&#`, or `&`), in value, before `;`.\n   *\n   * The character reference kind defines what and how many characters are\n   * allowed.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *       ^^^\n   * > | a&#123;b\n   *        ^^^\n   * > | a&#x9;b\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function value(code) {\n    if (code === 59 && size) {\n      const token = effects.exit('characterReferenceValue')\n      if (\n        test === asciiAlphanumeric &&\n        !decodeNamedCharacterReference(self.sliceSerialize(token))\n      ) {\n        return nok(code)\n      }\n\n      // To do: `markdown-rs` uses a different name:\n      // `CharacterReferenceMarkerSemi`.\n      effects.enter('characterReferenceMarker')\n      effects.consume(code)\n      effects.exit('characterReferenceMarker')\n      effects.exit('characterReference')\n      return ok\n    }\n    if (test(code) && size++ < max) {\n      effects.consume(code)\n      return value\n    }\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {asciiPunctuation} from 'micromark-util-character'\n/** @type {Construct} */\nexport const characterEscape = {\n  name: 'characterEscape',\n  tokenize: tokenizeCharacterEscape\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCharacterEscape(effects, ok, nok) {\n  return start\n\n  /**\n   * Start of character escape.\n   *\n   * ```markdown\n   * > | a\\*b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('characterEscape')\n    effects.enter('escapeMarker')\n    effects.consume(code)\n    effects.exit('escapeMarker')\n    return inside\n  }\n\n  /**\n   * After `\\`, at punctuation.\n   *\n   * ```markdown\n   * > | a\\*b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    // ASCII punctuation.\n    if (asciiPunctuation(code)) {\n      effects.enter('characterEscapeValue')\n      effects.consume(code)\n      effects.exit('characterEscapeValue')\n      effects.exit('characterEscape')\n      return ok\n    }\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n/** @type {Construct} */\nexport const lineEnding = {\n  name: 'lineEnding',\n  tokenize: tokenizeLineEnding\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeLineEnding(effects, ok) {\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return factorySpace(effects, ok, 'linePrefix')\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factoryDestination} from 'micromark-factory-destination'\nimport {factoryLabel} from 'micromark-factory-label'\nimport {factoryTitle} from 'micromark-factory-title'\nimport {factoryWhitespace} from 'micromark-factory-whitespace'\nimport {markdownLineEndingOrSpace} from 'micromark-util-character'\nimport {push, splice} from 'micromark-util-chunked'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\nimport {resolveAll} from 'micromark-util-resolve-all'\n/** @type {Construct} */\nexport const labelEnd = {\n  name: 'labelEnd',\n  tokenize: tokenizeLabelEnd,\n  resolveTo: resolveToLabelEnd,\n  resolveAll: resolveAllLabelEnd\n}\n\n/** @type {Construct} */\nconst resourceConstruct = {\n  tokenize: tokenizeResource\n}\n/** @type {Construct} */\nconst referenceFullConstruct = {\n  tokenize: tokenizeReferenceFull\n}\n/** @type {Construct} */\nconst referenceCollapsedConstruct = {\n  tokenize: tokenizeReferenceCollapsed\n}\n\n/** @type {Resolver} */\nfunction resolveAllLabelEnd(events) {\n  let index = -1\n  while (++index < events.length) {\n    const token = events[index][1]\n    if (\n      token.type === 'labelImage' ||\n      token.type === 'labelLink' ||\n      token.type === 'labelEnd'\n    ) {\n      // Remove the marker.\n      events.splice(index + 1, token.type === 'labelImage' ? 4 : 2)\n      token.type = 'data'\n      index++\n    }\n  }\n  return events\n}\n\n/** @type {Resolver} */\nfunction resolveToLabelEnd(events, context) {\n  let index = events.length\n  let offset = 0\n  /** @type {Token} */\n  let token\n  /** @type {number | undefined} */\n  let open\n  /** @type {number | undefined} */\n  let close\n  /** @type {Array<Event>} */\n  let media\n\n  // Find an opening.\n  while (index--) {\n    token = events[index][1]\n    if (open) {\n      // If we see another link, or inactive link label, we’ve been here before.\n      if (\n        token.type === 'link' ||\n        (token.type === 'labelLink' && token._inactive)\n      ) {\n        break\n      }\n\n      // Mark other link openings as inactive, as we can’t have links in\n      // links.\n      if (events[index][0] === 'enter' && token.type === 'labelLink') {\n        token._inactive = true\n      }\n    } else if (close) {\n      if (\n        events[index][0] === 'enter' &&\n        (token.type === 'labelImage' || token.type === 'labelLink') &&\n        !token._balanced\n      ) {\n        open = index\n        if (token.type !== 'labelLink') {\n          offset = 2\n          break\n        }\n      }\n    } else if (token.type === 'labelEnd') {\n      close = index\n    }\n  }\n  const group = {\n    type: events[open][1].type === 'labelLink' ? 'link' : 'image',\n    start: Object.assign({}, events[open][1].start),\n    end: Object.assign({}, events[events.length - 1][1].end)\n  }\n  const label = {\n    type: 'label',\n    start: Object.assign({}, events[open][1].start),\n    end: Object.assign({}, events[close][1].end)\n  }\n  const text = {\n    type: 'labelText',\n    start: Object.assign({}, events[open + offset + 2][1].end),\n    end: Object.assign({}, events[close - 2][1].start)\n  }\n  media = [\n    ['enter', group, context],\n    ['enter', label, context]\n  ]\n\n  // Opening marker.\n  media = push(media, events.slice(open + 1, open + offset + 3))\n\n  // Text open.\n  media = push(media, [['enter', text, context]])\n\n  // Always populated by defaults.\n\n  // Between.\n  media = push(\n    media,\n    resolveAll(\n      context.parser.constructs.insideSpan.null,\n      events.slice(open + offset + 4, close - 3),\n      context\n    )\n  )\n\n  // Text close, marker close, label close.\n  media = push(media, [\n    ['exit', text, context],\n    events[close - 2],\n    events[close - 1],\n    ['exit', label, context]\n  ])\n\n  // Reference, resource, or so.\n  media = push(media, events.slice(close + 1))\n\n  // Media close.\n  media = push(media, [['exit', group, context]])\n  splice(events, open, events.length, media)\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeLabelEnd(effects, ok, nok) {\n  const self = this\n  let index = self.events.length\n  /** @type {Token} */\n  let labelStart\n  /** @type {boolean} */\n  let defined\n\n  // Find an opening.\n  while (index--) {\n    if (\n      (self.events[index][1].type === 'labelImage' ||\n        self.events[index][1].type === 'labelLink') &&\n      !self.events[index][1]._balanced\n    ) {\n      labelStart = self.events[index][1]\n      break\n    }\n  }\n  return start\n\n  /**\n   * Start of label end.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *       ^\n   * > | [a][b] c\n   *       ^\n   * > | [a][] b\n   *       ^\n   * > | [a] b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // If there is not an okay opening.\n    if (!labelStart) {\n      return nok(code)\n    }\n\n    // If the corresponding label (link) start is marked as inactive,\n    // it means we’d be wrapping a link, like this:\n    //\n    // ```markdown\n    // > | a [b [c](d) e](f) g.\n    //                  ^\n    // ```\n    //\n    // We can’t have that, so it’s just balanced brackets.\n    if (labelStart._inactive) {\n      return labelEndNok(code)\n    }\n    defined = self.parser.defined.includes(\n      normalizeIdentifier(\n        self.sliceSerialize({\n          start: labelStart.end,\n          end: self.now()\n        })\n      )\n    )\n    effects.enter('labelEnd')\n    effects.enter('labelMarker')\n    effects.consume(code)\n    effects.exit('labelMarker')\n    effects.exit('labelEnd')\n    return after\n  }\n\n  /**\n   * After `]`.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *       ^\n   * > | [a][b] c\n   *       ^\n   * > | [a][] b\n   *       ^\n   * > | [a] b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // Note: `markdown-rs` also parses GFM footnotes here, which for us is in\n    // an extension.\n\n    // Resource (`[asd](fgh)`)?\n    if (code === 40) {\n      return effects.attempt(\n        resourceConstruct,\n        labelEndOk,\n        defined ? labelEndOk : labelEndNok\n      )(code)\n    }\n\n    // Full (`[asd][fgh]`) or collapsed (`[asd][]`) reference?\n    if (code === 91) {\n      return effects.attempt(\n        referenceFullConstruct,\n        labelEndOk,\n        defined ? referenceNotFull : labelEndNok\n      )(code)\n    }\n\n    // Shortcut (`[asd]`) reference?\n    return defined ? labelEndOk(code) : labelEndNok(code)\n  }\n\n  /**\n   * After `]`, at `[`, but not at a full reference.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] b\n   *        ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceNotFull(code) {\n    return effects.attempt(\n      referenceCollapsedConstruct,\n      labelEndOk,\n      labelEndNok\n    )(code)\n  }\n\n  /**\n   * Done, we found something.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *           ^\n   * > | [a][b] c\n   *           ^\n   * > | [a][] b\n   *          ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEndOk(code) {\n    // Note: `markdown-rs` does a bunch of stuff here.\n    return ok(code)\n  }\n\n  /**\n   * Done, it’s nothing.\n   *\n   * There was an okay opening, but we didn’t match anything.\n   *\n   * ```markdown\n   * > | [a](b c\n   *        ^\n   * > | [a][b c\n   *        ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEndNok(code) {\n    labelStart._balanced = true\n    return nok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeResource(effects, ok, nok) {\n  return resourceStart\n\n  /**\n   * At a resource.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceStart(code) {\n    effects.enter('resource')\n    effects.enter('resourceMarker')\n    effects.consume(code)\n    effects.exit('resourceMarker')\n    return resourceBefore\n  }\n\n  /**\n   * In resource, after `(`, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceBefore(code) {\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, resourceOpen)(code)\n      : resourceOpen(code)\n  }\n\n  /**\n   * In resource, after optional whitespace, at `)` or a destination.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceOpen(code) {\n    if (code === 41) {\n      return resourceEnd(code)\n    }\n    return factoryDestination(\n      effects,\n      resourceDestinationAfter,\n      resourceDestinationMissing,\n      'resourceDestination',\n      'resourceDestinationLiteral',\n      'resourceDestinationLiteralMarker',\n      'resourceDestinationRaw',\n      'resourceDestinationString',\n      32\n    )(code)\n  }\n\n  /**\n   * In resource, after destination, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceDestinationAfter(code) {\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, resourceBetween)(code)\n      : resourceEnd(code)\n  }\n\n  /**\n   * At invalid destination.\n   *\n   * ```markdown\n   * > | [a](<<) b\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceDestinationMissing(code) {\n    return nok(code)\n  }\n\n  /**\n   * In resource, after destination and whitespace, at `(` or title.\n   *\n   * ```markdown\n   * > | [a](b ) c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceBetween(code) {\n    if (code === 34 || code === 39 || code === 40) {\n      return factoryTitle(\n        effects,\n        resourceTitleAfter,\n        nok,\n        'resourceTitle',\n        'resourceTitleMarker',\n        'resourceTitleString'\n      )(code)\n    }\n    return resourceEnd(code)\n  }\n\n  /**\n   * In resource, after title, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b \"c\") d\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceTitleAfter(code) {\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, resourceEnd)(code)\n      : resourceEnd(code)\n  }\n\n  /**\n   * In resource, at `)`.\n   *\n   * ```markdown\n   * > | [a](b) d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceEnd(code) {\n    if (code === 41) {\n      effects.enter('resourceMarker')\n      effects.consume(code)\n      effects.exit('resourceMarker')\n      effects.exit('resource')\n      return ok\n    }\n    return nok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeReferenceFull(effects, ok, nok) {\n  const self = this\n  return referenceFull\n\n  /**\n   * In a reference (full), at the `[`.\n   *\n   * ```markdown\n   * > | [a][b] d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFull(code) {\n    return factoryLabel.call(\n      self,\n      effects,\n      referenceFullAfter,\n      referenceFullMissing,\n      'reference',\n      'referenceMarker',\n      'referenceString'\n    )(code)\n  }\n\n  /**\n   * In a reference (full), after `]`.\n   *\n   * ```markdown\n   * > | [a][b] d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFullAfter(code) {\n    return self.parser.defined.includes(\n      normalizeIdentifier(\n        self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1)\n      )\n    )\n      ? ok(code)\n      : nok(code)\n  }\n\n  /**\n   * In reference (full) that was missing.\n   *\n   * ```markdown\n   * > | [a][b d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFullMissing(code) {\n    return nok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeReferenceCollapsed(effects, ok, nok) {\n  return referenceCollapsedStart\n\n  /**\n   * In reference (collapsed), at `[`.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceCollapsedStart(code) {\n    // We only attempt a collapsed label if there’s a `[`.\n\n    effects.enter('reference')\n    effects.enter('referenceMarker')\n    effects.consume(code)\n    effects.exit('referenceMarker')\n    return referenceCollapsedOpen\n  }\n\n  /**\n   * In reference (collapsed), at `]`.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] d\n   *         ^\n   * ```\n   *\n   *  @type {State}\n   */\n  function referenceCollapsedOpen(code) {\n    if (code === 93) {\n      effects.enter('referenceMarker')\n      effects.consume(code)\n      effects.exit('referenceMarker')\n      effects.exit('reference')\n      return ok\n    }\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {labelEnd} from './label-end.js'\n\n/** @type {Construct} */\nexport const labelStartImage = {\n  name: 'labelStartImage',\n  tokenize: tokenizeLabelStartImage,\n  resolveAll: labelEnd.resolveAll\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeLabelStartImage(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   * Start of label (image) start.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('labelImage')\n    effects.enter('labelImageMarker')\n    effects.consume(code)\n    effects.exit('labelImageMarker')\n    return open\n  }\n\n  /**\n   * After `!`, at `[`.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 91) {\n      effects.enter('labelMarker')\n      effects.consume(code)\n      effects.exit('labelMarker')\n      effects.exit('labelImage')\n      return after\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `![`.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *         ^\n   * ```\n   *\n   * This is needed in because, when GFM footnotes are enabled, images never\n   * form when started with a `^`.\n   * Instead, links form:\n   *\n   * ```markdown\n   * ![^a](b)\n   *\n   * ![^a][b]\n   *\n   * [b]: c\n   * ```\n   *\n   * ```html\n   * <p>!<a href=\\\"b\\\">^a</a></p>\n   * <p>!<a href=\\\"c\\\">^a</a></p>\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // To do: use a new field to do this, this is still needed for\n    // `micromark-extension-gfm-footnote`, but the `label-start-link`\n    // behavior isn’t.\n    // Hidden footnotes hook.\n    /* c8 ignore next 3 */\n    return code === 94 && '_hiddenFootnoteSupport' in self.parser.constructs\n      ? nok(code)\n      : ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n */\n\nimport {\n  markdownLineEndingOrSpace,\n  unicodePunctuation,\n  unicodeWhitespace\n} from 'micromark-util-character'\n/**\n * Classify whether a code represents whitespace, punctuation, or something\n * else.\n *\n * Used for attention (emphasis, strong), whose sequences can open or close\n * based on the class of surrounding characters.\n *\n * > 👉 **Note**: eof (`null`) is seen as whitespace.\n *\n * @param {Code} code\n *   Code.\n * @returns {typeof constants.characterGroupWhitespace | typeof constants.characterGroupPunctuation | undefined}\n *   Group.\n */\nexport function classifyCharacter(code) {\n  if (\n    code === null ||\n    markdownLineEndingOrSpace(code) ||\n    unicodeWhitespace(code)\n  ) {\n    return 1\n  }\n  if (unicodePunctuation(code)) {\n    return 2\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Point} Point\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {push, splice} from 'micromark-util-chunked'\nimport {classifyCharacter} from 'micromark-util-classify-character'\nimport {resolveAll} from 'micromark-util-resolve-all'\n/** @type {Construct} */\nexport const attention = {\n  name: 'attention',\n  tokenize: tokenizeAttention,\n  resolveAll: resolveAllAttention\n}\n\n/**\n * Take all events and resolve attention to emphasis or strong.\n *\n * @type {Resolver}\n */\n// eslint-disable-next-line complexity\nfunction resolveAllAttention(events, context) {\n  let index = -1\n  /** @type {number} */\n  let open\n  /** @type {Token} */\n  let group\n  /** @type {Token} */\n  let text\n  /** @type {Token} */\n  let openingSequence\n  /** @type {Token} */\n  let closingSequence\n  /** @type {number} */\n  let use\n  /** @type {Array<Event>} */\n  let nextEvents\n  /** @type {number} */\n  let offset\n\n  // Walk through all events.\n  //\n  // Note: performance of this is fine on an mb of normal markdown, but it’s\n  // a bottleneck for malicious stuff.\n  while (++index < events.length) {\n    // Find a token that can close.\n    if (\n      events[index][0] === 'enter' &&\n      events[index][1].type === 'attentionSequence' &&\n      events[index][1]._close\n    ) {\n      open = index\n\n      // Now walk back to find an opener.\n      while (open--) {\n        // Find a token that can open the closer.\n        if (\n          events[open][0] === 'exit' &&\n          events[open][1].type === 'attentionSequence' &&\n          events[open][1]._open &&\n          // If the markers are the same:\n          context.sliceSerialize(events[open][1]).charCodeAt(0) ===\n            context.sliceSerialize(events[index][1]).charCodeAt(0)\n        ) {\n          // If the opening can close or the closing can open,\n          // and the close size *is not* a multiple of three,\n          // but the sum of the opening and closing size *is* multiple of three,\n          // then don’t match.\n          if (\n            (events[open][1]._close || events[index][1]._open) &&\n            (events[index][1].end.offset - events[index][1].start.offset) % 3 &&\n            !(\n              (events[open][1].end.offset -\n                events[open][1].start.offset +\n                events[index][1].end.offset -\n                events[index][1].start.offset) %\n              3\n            )\n          ) {\n            continue\n          }\n\n          // Number of markers to use from the sequence.\n          use =\n            events[open][1].end.offset - events[open][1].start.offset > 1 &&\n            events[index][1].end.offset - events[index][1].start.offset > 1\n              ? 2\n              : 1\n          const start = Object.assign({}, events[open][1].end)\n          const end = Object.assign({}, events[index][1].start)\n          movePoint(start, -use)\n          movePoint(end, use)\n          openingSequence = {\n            type: use > 1 ? 'strongSequence' : 'emphasisSequence',\n            start,\n            end: Object.assign({}, events[open][1].end)\n          }\n          closingSequence = {\n            type: use > 1 ? 'strongSequence' : 'emphasisSequence',\n            start: Object.assign({}, events[index][1].start),\n            end\n          }\n          text = {\n            type: use > 1 ? 'strongText' : 'emphasisText',\n            start: Object.assign({}, events[open][1].end),\n            end: Object.assign({}, events[index][1].start)\n          }\n          group = {\n            type: use > 1 ? 'strong' : 'emphasis',\n            start: Object.assign({}, openingSequence.start),\n            end: Object.assign({}, closingSequence.end)\n          }\n          events[open][1].end = Object.assign({}, openingSequence.start)\n          events[index][1].start = Object.assign({}, closingSequence.end)\n          nextEvents = []\n\n          // If there are more markers in the opening, add them before.\n          if (events[open][1].end.offset - events[open][1].start.offset) {\n            nextEvents = push(nextEvents, [\n              ['enter', events[open][1], context],\n              ['exit', events[open][1], context]\n            ])\n          }\n\n          // Opening.\n          nextEvents = push(nextEvents, [\n            ['enter', group, context],\n            ['enter', openingSequence, context],\n            ['exit', openingSequence, context],\n            ['enter', text, context]\n          ])\n\n          // Always populated by defaults.\n\n          // Between.\n          nextEvents = push(\n            nextEvents,\n            resolveAll(\n              context.parser.constructs.insideSpan.null,\n              events.slice(open + 1, index),\n              context\n            )\n          )\n\n          // Closing.\n          nextEvents = push(nextEvents, [\n            ['exit', text, context],\n            ['enter', closingSequence, context],\n            ['exit', closingSequence, context],\n            ['exit', group, context]\n          ])\n\n          // If there are more markers in the closing, add them after.\n          if (events[index][1].end.offset - events[index][1].start.offset) {\n            offset = 2\n            nextEvents = push(nextEvents, [\n              ['enter', events[index][1], context],\n              ['exit', events[index][1], context]\n            ])\n          } else {\n            offset = 0\n          }\n          splice(events, open - 1, index - open + 3, nextEvents)\n          index = open + nextEvents.length - offset - 2\n          break\n        }\n      }\n    }\n  }\n\n  // Remove remaining sequences.\n  index = -1\n  while (++index < events.length) {\n    if (events[index][1].type === 'attentionSequence') {\n      events[index][1].type = 'data'\n    }\n  }\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeAttention(effects, ok) {\n  const attentionMarkers = this.parser.constructs.attentionMarkers.null\n  const previous = this.previous\n  const before = classifyCharacter(previous)\n\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n\n  /**\n   * Before a sequence.\n   *\n   * ```markdown\n   * > | **\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    marker = code\n    effects.enter('attentionSequence')\n    return inside(code)\n  }\n\n  /**\n   * In a sequence.\n   *\n   * ```markdown\n   * > | **\n   *     ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === marker) {\n      effects.consume(code)\n      return inside\n    }\n    const token = effects.exit('attentionSequence')\n\n    // To do: next major: move this to resolver, just like `markdown-rs`.\n    const after = classifyCharacter(code)\n\n    // Always populated by defaults.\n\n    const open =\n      !after || (after === 2 && before) || attentionMarkers.includes(code)\n    const close =\n      !before || (before === 2 && after) || attentionMarkers.includes(previous)\n    token._open = Boolean(marker === 42 ? open : open && (before || !close))\n    token._close = Boolean(marker === 42 ? close : close && (after || !open))\n    return ok(code)\n  }\n}\n\n/**\n * Move a point a bit.\n *\n * Note: `move` only works inside lines! It’s not possible to move past other\n * chunks (replacement characters, tabs, or line endings).\n *\n * @param {Point} point\n * @param {number} offset\n * @returns {undefined}\n */\nfunction movePoint(point, offset) {\n  point.column += offset\n  point.offset += offset\n  point._bufferIndex += offset\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {\n  asciiAlpha,\n  asciiAlphanumeric,\n  asciiAtext,\n  asciiControl\n} from 'micromark-util-character'\n/** @type {Construct} */\nexport const autolink = {\n  name: 'autolink',\n  tokenize: tokenizeAutolink\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeAutolink(effects, ok, nok) {\n  let size = 0\n  return start\n\n  /**\n   * Start of an autolink.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *      ^\n   * > | a<user@example.com>b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('autolink')\n    effects.enter('autolinkMarker')\n    effects.consume(code)\n    effects.exit('autolinkMarker')\n    effects.enter('autolinkProtocol')\n    return open\n  }\n\n  /**\n   * After `<`, at protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *       ^\n   * > | a<user@example.com>b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return schemeOrEmailAtext\n    }\n    return emailAtext(code)\n  }\n\n  /**\n   * At second byte of protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *        ^\n   * > | a<user@example.com>b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function schemeOrEmailAtext(code) {\n    // ASCII alphanumeric and `+`, `-`, and `.`.\n    if (code === 43 || code === 45 || code === 46 || asciiAlphanumeric(code)) {\n      // Count the previous alphabetical from `open` too.\n      size = 1\n      return schemeInsideOrEmailAtext(code)\n    }\n    return emailAtext(code)\n  }\n\n  /**\n   * In ambiguous protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *        ^\n   * > | a<user@example.com>b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function schemeInsideOrEmailAtext(code) {\n    if (code === 58) {\n      effects.consume(code)\n      size = 0\n      return urlInside\n    }\n\n    // ASCII alphanumeric and `+`, `-`, and `.`.\n    if (\n      (code === 43 || code === 45 || code === 46 || asciiAlphanumeric(code)) &&\n      size++ < 32\n    ) {\n      effects.consume(code)\n      return schemeInsideOrEmailAtext\n    }\n    size = 0\n    return emailAtext(code)\n  }\n\n  /**\n   * After protocol, in URL.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function urlInside(code) {\n    if (code === 62) {\n      effects.exit('autolinkProtocol')\n      effects.enter('autolinkMarker')\n      effects.consume(code)\n      effects.exit('autolinkMarker')\n      effects.exit('autolink')\n      return ok\n    }\n\n    // ASCII control, space, or `<`.\n    if (code === null || code === 32 || code === 60 || asciiControl(code)) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return urlInside\n  }\n\n  /**\n   * In email atext.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailAtext(code) {\n    if (code === 64) {\n      effects.consume(code)\n      return emailAtSignOrDot\n    }\n    if (asciiAtext(code)) {\n      effects.consume(code)\n      return emailAtext\n    }\n    return nok(code)\n  }\n\n  /**\n   * In label, after at-sign or dot.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *                 ^       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailAtSignOrDot(code) {\n    return asciiAlphanumeric(code) ? emailLabel(code) : nok(code)\n  }\n\n  /**\n   * In label, where `.` and `>` are allowed.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *                   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailLabel(code) {\n    if (code === 46) {\n      effects.consume(code)\n      size = 0\n      return emailAtSignOrDot\n    }\n    if (code === 62) {\n      // Exit, then change the token type.\n      effects.exit('autolinkProtocol').type = 'autolinkEmail'\n      effects.enter('autolinkMarker')\n      effects.consume(code)\n      effects.exit('autolinkMarker')\n      effects.exit('autolink')\n      return ok\n    }\n    return emailValue(code)\n  }\n\n  /**\n   * In label, where `.` and `>` are *not* allowed.\n   *\n   * Though, this is also used in `emailLabel` to parse other values.\n   *\n   * ```markdown\n   * > | a<user.name@ex-ample.com>b\n   *                    ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailValue(code) {\n    // ASCII alphanumeric or `-`.\n    if ((code === 45 || asciiAlphanumeric(code)) && size++ < 63) {\n      const next = code === 45 ? emailValue : emailLabel\n      effects.consume(code)\n      return next\n    }\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {\n  asciiAlpha,\n  asciiAlphanumeric,\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\n/** @type {Construct} */\nexport const htmlText = {\n  name: 'htmlText',\n  tokenize: tokenizeHtmlText\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeHtmlText(effects, ok, nok) {\n  const self = this\n  /** @type {NonNullable<Code> | undefined} */\n  let marker\n  /** @type {number} */\n  let index\n  /** @type {State} */\n  let returnState\n  return start\n\n  /**\n   * Start of HTML (text).\n   *\n   * ```markdown\n   * > | a <b> c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('htmlText')\n    effects.enter('htmlTextData')\n    effects.consume(code)\n    return open\n  }\n\n  /**\n   * After `<`, at tag name or other stuff.\n   *\n   * ```markdown\n   * > | a <b> c\n   *        ^\n   * > | a <!doctype> c\n   *        ^\n   * > | a <!--b--> c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 33) {\n      effects.consume(code)\n      return declarationOpen\n    }\n    if (code === 47) {\n      effects.consume(code)\n      return tagCloseStart\n    }\n    if (code === 63) {\n      effects.consume(code)\n      return instruction\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return tagOpen\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `<!`, at declaration, comment, or CDATA.\n   *\n   * ```markdown\n   * > | a <!doctype> c\n   *         ^\n   * > | a <!--b--> c\n   *         ^\n   * > | a <![CDATA[>&<]]> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declarationOpen(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return commentOpenInside\n    }\n    if (code === 91) {\n      effects.consume(code)\n      index = 0\n      return cdataOpenInside\n    }\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return declaration\n    }\n    return nok(code)\n  }\n\n  /**\n   * In a comment, after `<!-`, at another `-`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentOpenInside(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return commentEnd\n    }\n    return nok(code)\n  }\n\n  /**\n   * In comment.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function comment(code) {\n    if (code === null) {\n      return nok(code)\n    }\n    if (code === 45) {\n      effects.consume(code)\n      return commentClose\n    }\n    if (markdownLineEnding(code)) {\n      returnState = comment\n      return lineEndingBefore(code)\n    }\n    effects.consume(code)\n    return comment\n  }\n\n  /**\n   * In comment, after `-`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentClose(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return commentEnd\n    }\n    return comment(code)\n  }\n\n  /**\n   * In comment, after `--`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentEnd(code) {\n    return code === 62\n      ? end(code)\n      : code === 45\n      ? commentClose(code)\n      : comment(code)\n  }\n\n  /**\n   * After `<![`, in CDATA, expecting `CDATA[`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *          ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataOpenInside(code) {\n    const value = 'CDATA['\n    if (code === value.charCodeAt(index++)) {\n      effects.consume(code)\n      return index === value.length ? cdata : cdataOpenInside\n    }\n    return nok(code)\n  }\n\n  /**\n   * In CDATA.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                ^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdata(code) {\n    if (code === null) {\n      return nok(code)\n    }\n    if (code === 93) {\n      effects.consume(code)\n      return cdataClose\n    }\n    if (markdownLineEnding(code)) {\n      returnState = cdata\n      return lineEndingBefore(code)\n    }\n    effects.consume(code)\n    return cdata\n  }\n\n  /**\n   * In CDATA, after `]`, at another `]`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                    ^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataClose(code) {\n    if (code === 93) {\n      effects.consume(code)\n      return cdataEnd\n    }\n    return cdata(code)\n  }\n\n  /**\n   * In CDATA, after `]]`, at `>`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataEnd(code) {\n    if (code === 62) {\n      return end(code)\n    }\n    if (code === 93) {\n      effects.consume(code)\n      return cdataEnd\n    }\n    return cdata(code)\n  }\n\n  /**\n   * In declaration.\n   *\n   * ```markdown\n   * > | a <!b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declaration(code) {\n    if (code === null || code === 62) {\n      return end(code)\n    }\n    if (markdownLineEnding(code)) {\n      returnState = declaration\n      return lineEndingBefore(code)\n    }\n    effects.consume(code)\n    return declaration\n  }\n\n  /**\n   * In instruction.\n   *\n   * ```markdown\n   * > | a <?b?> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function instruction(code) {\n    if (code === null) {\n      return nok(code)\n    }\n    if (code === 63) {\n      effects.consume(code)\n      return instructionClose\n    }\n    if (markdownLineEnding(code)) {\n      returnState = instruction\n      return lineEndingBefore(code)\n    }\n    effects.consume(code)\n    return instruction\n  }\n\n  /**\n   * In instruction, after `?`, at `>`.\n   *\n   * ```markdown\n   * > | a <?b?> c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function instructionClose(code) {\n    return code === 62 ? end(code) : instruction(code)\n  }\n\n  /**\n   * After `</`, in closing tag, at tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseStart(code) {\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return tagClose\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `</x`, in a tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagClose(code) {\n    // ASCII alphanumerical and `-`.\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code)\n      return tagClose\n    }\n    return tagCloseBetween(code)\n  }\n\n  /**\n   * In closing tag, after tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseBetween(code) {\n    if (markdownLineEnding(code)) {\n      returnState = tagCloseBetween\n      return lineEndingBefore(code)\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagCloseBetween\n    }\n    return end(code)\n  }\n\n  /**\n   * After `<x`, in opening tag name.\n   *\n   * ```markdown\n   * > | a <b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpen(code) {\n    // ASCII alphanumerical and `-`.\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code)\n      return tagOpen\n    }\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * In opening tag, after tag name.\n   *\n   * ```markdown\n   * > | a <b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenBetween(code) {\n    if (code === 47) {\n      effects.consume(code)\n      return end\n    }\n\n    // ASCII alphabetical and `:` and `_`.\n    if (code === 58 || code === 95 || asciiAlpha(code)) {\n      effects.consume(code)\n      return tagOpenAttributeName\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenBetween\n      return lineEndingBefore(code)\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagOpenBetween\n    }\n    return end(code)\n  }\n\n  /**\n   * In attribute name.\n   *\n   * ```markdown\n   * > | a <b c> d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeName(code) {\n    // ASCII alphabetical and `-`, `.`, `:`, and `_`.\n    if (\n      code === 45 ||\n      code === 46 ||\n      code === 58 ||\n      code === 95 ||\n      asciiAlphanumeric(code)\n    ) {\n      effects.consume(code)\n      return tagOpenAttributeName\n    }\n    return tagOpenAttributeNameAfter(code)\n  }\n\n  /**\n   * After attribute name, before initializer, the end of the tag, or\n   * whitespace.\n   *\n   * ```markdown\n   * > | a <b c> d\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeNameAfter(code) {\n    if (code === 61) {\n      effects.consume(code)\n      return tagOpenAttributeValueBefore\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeNameAfter\n      return lineEndingBefore(code)\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagOpenAttributeNameAfter\n    }\n    return tagOpenBetween(code)\n  }\n\n  /**\n   * Before unquoted, double quoted, or single quoted attribute value, allowing\n   * whitespace.\n   *\n   * ```markdown\n   * > | a <b c=d> e\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueBefore(code) {\n    if (\n      code === null ||\n      code === 60 ||\n      code === 61 ||\n      code === 62 ||\n      code === 96\n    ) {\n      return nok(code)\n    }\n    if (code === 34 || code === 39) {\n      effects.consume(code)\n      marker = code\n      return tagOpenAttributeValueQuoted\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeValueBefore\n      return lineEndingBefore(code)\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagOpenAttributeValueBefore\n    }\n    effects.consume(code)\n    return tagOpenAttributeValueUnquoted\n  }\n\n  /**\n   * In double or single quoted attribute value.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueQuoted(code) {\n    if (code === marker) {\n      effects.consume(code)\n      marker = undefined\n      return tagOpenAttributeValueQuotedAfter\n    }\n    if (code === null) {\n      return nok(code)\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeValueQuoted\n      return lineEndingBefore(code)\n    }\n    effects.consume(code)\n    return tagOpenAttributeValueQuoted\n  }\n\n  /**\n   * In unquoted attribute value.\n   *\n   * ```markdown\n   * > | a <b c=d> e\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueUnquoted(code) {\n    if (\n      code === null ||\n      code === 34 ||\n      code === 39 ||\n      code === 60 ||\n      code === 61 ||\n      code === 96\n    ) {\n      return nok(code)\n    }\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code)\n    }\n    effects.consume(code)\n    return tagOpenAttributeValueUnquoted\n  }\n\n  /**\n   * After double or single quoted attribute value, before whitespace or the end\n   * of the tag.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueQuotedAfter(code) {\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * In certain circumstances of a tag where only an `>` is allowed.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function end(code) {\n    if (code === 62) {\n      effects.consume(code)\n      effects.exit('htmlTextData')\n      effects.exit('htmlText')\n      return ok\n    }\n    return nok(code)\n  }\n\n  /**\n   * At eol.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   * > | a <!--a\n   *            ^\n   *   | b-->\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingBefore(code) {\n    effects.exit('htmlTextData')\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return lineEndingAfter\n  }\n\n  /**\n   * After eol, at optional whitespace.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   *   | a <!--a\n   * > | b-->\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingAfter(code) {\n    // Always populated by defaults.\n\n    return markdownSpace(code)\n      ? factorySpace(\n          effects,\n          lineEndingAfterPrefix,\n          'linePrefix',\n          self.parser.constructs.disable.null.includes('codeIndented')\n            ? undefined\n            : 4\n        )(code)\n      : lineEndingAfterPrefix(code)\n  }\n\n  /**\n   * After eol, after optional whitespace.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   *   | a <!--a\n   * > | b-->\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingAfterPrefix(code) {\n    effects.enter('htmlTextData')\n    return returnState(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {labelEnd} from './label-end.js'\n\n/** @type {Construct} */\nexport const labelStartLink = {\n  name: 'labelStartLink',\n  tokenize: tokenizeLabelStartLink,\n  resolveAll: labelEnd.resolveAll\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeLabelStartLink(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   * Start of label (link) start.\n   *\n   * ```markdown\n   * > | a [b] c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('labelLink')\n    effects.enter('labelMarker')\n    effects.consume(code)\n    effects.exit('labelMarker')\n    effects.exit('labelLink')\n    return after\n  }\n\n  /** @type {State} */\n  function after(code) {\n    // To do: this isn’t needed in `micromark-extension-gfm-footnote`,\n    // remove.\n    // Hidden footnotes hook.\n    /* c8 ignore next 3 */\n    return code === 94 && '_hiddenFootnoteSupport' in self.parser.constructs\n      ? nok(code)\n      : ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {markdownLineEnding} from 'micromark-util-character'\n/** @type {Construct} */\nexport const hardBreakEscape = {\n  name: 'hardBreakEscape',\n  tokenize: tokenizeHardBreakEscape\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeHardBreakEscape(effects, ok, nok) {\n  return start\n\n  /**\n   * Start of a hard break (escape).\n   *\n   * ```markdown\n   * > | a\\\n   *      ^\n   *   | b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('hardBreakEscape')\n    effects.consume(code)\n    return after\n  }\n\n  /**\n   * After `\\`, at eol.\n   *\n   * ```markdown\n   * > | a\\\n   *       ^\n   *   | b\n   * ```\n   *\n   *  @type {State}\n   */\n  function after(code) {\n    if (markdownLineEnding(code)) {\n      effects.exit('hardBreakEscape')\n      return ok(code)\n    }\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Previous} Previous\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {markdownLineEnding} from 'micromark-util-character'\n/** @type {Construct} */\nexport const codeText = {\n  name: 'codeText',\n  tokenize: tokenizeCodeText,\n  resolve: resolveCodeText,\n  previous\n}\n\n// To do: next major: don’t resolve, like `markdown-rs`.\n/** @type {Resolver} */\nfunction resolveCodeText(events) {\n  let tailExitIndex = events.length - 4\n  let headEnterIndex = 3\n  /** @type {number} */\n  let index\n  /** @type {number | undefined} */\n  let enter\n\n  // If we start and end with an EOL or a space.\n  if (\n    (events[headEnterIndex][1].type === 'lineEnding' ||\n      events[headEnterIndex][1].type === 'space') &&\n    (events[tailExitIndex][1].type === 'lineEnding' ||\n      events[tailExitIndex][1].type === 'space')\n  ) {\n    index = headEnterIndex\n\n    // And we have data.\n    while (++index < tailExitIndex) {\n      if (events[index][1].type === 'codeTextData') {\n        // Then we have padding.\n        events[headEnterIndex][1].type = 'codeTextPadding'\n        events[tailExitIndex][1].type = 'codeTextPadding'\n        headEnterIndex += 2\n        tailExitIndex -= 2\n        break\n      }\n    }\n  }\n\n  // Merge adjacent spaces and data.\n  index = headEnterIndex - 1\n  tailExitIndex++\n  while (++index <= tailExitIndex) {\n    if (enter === undefined) {\n      if (index !== tailExitIndex && events[index][1].type !== 'lineEnding') {\n        enter = index\n      }\n    } else if (\n      index === tailExitIndex ||\n      events[index][1].type === 'lineEnding'\n    ) {\n      events[enter][1].type = 'codeTextData'\n      if (index !== enter + 2) {\n        events[enter][1].end = events[index - 1][1].end\n        events.splice(enter + 2, index - enter - 2)\n        tailExitIndex -= index - enter - 2\n        index = enter + 2\n      }\n      enter = undefined\n    }\n  }\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Previous}\n */\nfunction previous(code) {\n  // If there is a previous code, there will always be a tail.\n  return (\n    code !== 96 ||\n    this.events[this.events.length - 1][1].type === 'characterEscape'\n  )\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCodeText(effects, ok, nok) {\n  const self = this\n  let sizeOpen = 0\n  /** @type {number} */\n  let size\n  /** @type {Token} */\n  let token\n  return start\n\n  /**\n   * Start of code (text).\n   *\n   * ```markdown\n   * > | `a`\n   *     ^\n   * > | \\`a`\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('codeText')\n    effects.enter('codeTextSequence')\n    return sequenceOpen(code)\n  }\n\n  /**\n   * In opening sequence.\n   *\n   * ```markdown\n   * > | `a`\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === 96) {\n      effects.consume(code)\n      sizeOpen++\n      return sequenceOpen\n    }\n    effects.exit('codeTextSequence')\n    return between(code)\n  }\n\n  /**\n   * Between something and something else.\n   *\n   * ```markdown\n   * > | `a`\n   *      ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function between(code) {\n    // EOF.\n    if (code === null) {\n      return nok(code)\n    }\n\n    // To do: next major: don’t do spaces in resolve, but when compiling,\n    // like `markdown-rs`.\n    // Tabs don’t work, and virtual spaces don’t make sense.\n    if (code === 32) {\n      effects.enter('space')\n      effects.consume(code)\n      effects.exit('space')\n      return between\n    }\n\n    // Closing fence? Could also be data.\n    if (code === 96) {\n      token = effects.enter('codeTextSequence')\n      size = 0\n      return sequenceClose(code)\n    }\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return between\n    }\n\n    // Data.\n    effects.enter('codeTextData')\n    return data(code)\n  }\n\n  /**\n   * In data.\n   *\n   * ```markdown\n   * > | `a`\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function data(code) {\n    if (\n      code === null ||\n      code === 32 ||\n      code === 96 ||\n      markdownLineEnding(code)\n    ) {\n      effects.exit('codeTextData')\n      return between(code)\n    }\n    effects.consume(code)\n    return data\n  }\n\n  /**\n   * In closing sequence.\n   *\n   * ```markdown\n   * > | `a`\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceClose(code) {\n    // More.\n    if (code === 96) {\n      effects.consume(code)\n      size++\n      return sequenceClose\n    }\n\n    // Done!\n    if (size === sizeOpen) {\n      effects.exit('codeTextSequence')\n      effects.exit('codeText')\n      return ok(code)\n    }\n\n    // More or less accents: mark as data.\n    token.type = 'codeTextData'\n    return data(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Extension} Extension\n */\n\nimport {\n  attention,\n  autolink,\n  blockQuote,\n  characterEscape,\n  characterReference,\n  codeFenced,\n  codeIndented,\n  codeText,\n  definition,\n  hardBreakEscape,\n  headingAtx,\n  htmlFlow,\n  htmlText,\n  labelEnd,\n  labelStartImage,\n  labelStartLink,\n  lineEnding,\n  list,\n  setextUnderline,\n  thematicBreak\n} from 'micromark-core-commonmark'\nimport {resolver as resolveText} from './initialize/text.js'\n\n/** @satisfies {Extension['document']} */\nexport const document = {\n  [42]: list,\n  [43]: list,\n  [45]: list,\n  [48]: list,\n  [49]: list,\n  [50]: list,\n  [51]: list,\n  [52]: list,\n  [53]: list,\n  [54]: list,\n  [55]: list,\n  [56]: list,\n  [57]: list,\n  [62]: blockQuote\n}\n\n/** @satisfies {Extension['contentInitial']} */\nexport const contentInitial = {\n  [91]: definition\n}\n\n/** @satisfies {Extension['flowInitial']} */\nexport const flowInitial = {\n  [-2]: codeIndented,\n  [-1]: codeIndented,\n  [32]: codeIndented\n}\n\n/** @satisfies {Extension['flow']} */\nexport const flow = {\n  [35]: headingAtx,\n  [42]: thematicBreak,\n  [45]: [setextUnderline, thematicBreak],\n  [60]: htmlFlow,\n  [61]: setextUnderline,\n  [95]: thematicBreak,\n  [96]: codeFenced,\n  [126]: codeFenced\n}\n\n/** @satisfies {Extension['string']} */\nexport const string = {\n  [38]: characterReference,\n  [92]: characterEscape\n}\n\n/** @satisfies {Extension['text']} */\nexport const text = {\n  [-5]: lineEnding,\n  [-4]: lineEnding,\n  [-3]: lineEnding,\n  [33]: labelStartImage,\n  [38]: characterReference,\n  [42]: attention,\n  [60]: [autolink, htmlText],\n  [91]: labelStartLink,\n  [92]: [hardBreakEscape, characterEscape],\n  [93]: labelEnd,\n  [95]: attention,\n  [96]: codeText\n}\n\n/** @satisfies {Extension['insideSpan']} */\nexport const insideSpan = {\n  null: [attention, resolveText]\n}\n\n/** @satisfies {Extension['attentionMarkers']} */\nexport const attentionMarkers = {\n  null: [42, 95]\n}\n\n/** @satisfies {Extension['disable']} */\nexport const disable = {\n  null: []\n}\n","/**\n * @typedef {import('micromark-util-types').Create} Create\n * @typedef {import('micromark-util-types').FullNormalizedExtension} FullNormalizedExtension\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').ParseContext} ParseContext\n * @typedef {import('micromark-util-types').ParseOptions} ParseOptions\n */\n\nimport {combineExtensions} from 'micromark-util-combine-extensions'\nimport {content} from './initialize/content.js'\nimport {document} from './initialize/document.js'\nimport {flow} from './initialize/flow.js'\nimport {string, text} from './initialize/text.js'\nimport {createTokenizer} from './create-tokenizer.js'\nimport * as defaultConstructs from './constructs.js'\n\n/**\n * @param {ParseOptions | null | undefined} [options]\n * @returns {ParseContext}\n */\nexport function parse(options) {\n  const settings = options || {}\n  const constructs =\n    /** @type {FullNormalizedExtension} */\n    combineExtensions([defaultConstructs, ...(settings.extensions || [])])\n\n  /** @type {ParseContext} */\n  const parser = {\n    defined: [],\n    lazy: {},\n    constructs,\n    content: create(content),\n    document: create(document),\n    flow: create(flow),\n    string: create(string),\n    text: create(text)\n  }\n  return parser\n\n  /**\n   * @param {InitialConstruct} initial\n   */\n  function create(initial) {\n    return creator\n    /** @type {Create} */\n    function creator(from) {\n      return createTokenizer(parser, initial, from)\n    }\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Encoding} Encoding\n * @typedef {import('micromark-util-types').Value} Value\n */\n\n/**\n * @callback Preprocessor\n * @param {Value} value\n * @param {Encoding | null | undefined} [encoding]\n * @param {boolean | null | undefined} [end=false]\n * @returns {Array<Chunk>}\n */\n\nconst search = /[\\0\\t\\n\\r]/g\n\n/**\n * @returns {Preprocessor}\n */\nexport function preprocess() {\n  let column = 1\n  let buffer = ''\n  /** @type {boolean | undefined} */\n  let start = true\n  /** @type {boolean | undefined} */\n  let atCarriageReturn\n  return preprocessor\n\n  /** @type {Preprocessor} */\n  // eslint-disable-next-line complexity\n  function preprocessor(value, encoding, end) {\n    /** @type {Array<Chunk>} */\n    const chunks = []\n    /** @type {RegExpMatchArray | null} */\n    let match\n    /** @type {number} */\n    let next\n    /** @type {number} */\n    let startPosition\n    /** @type {number} */\n    let endPosition\n    /** @type {Code} */\n    let code\n    value =\n      buffer +\n      (typeof value === 'string'\n        ? value.toString()\n        : new TextDecoder(encoding || undefined).decode(value))\n    startPosition = 0\n    buffer = ''\n    if (start) {\n      // To do: `markdown-rs` actually parses BOMs (byte order mark).\n      if (value.charCodeAt(0) === 65279) {\n        startPosition++\n      }\n      start = undefined\n    }\n    while (startPosition < value.length) {\n      search.lastIndex = startPosition\n      match = search.exec(value)\n      endPosition =\n        match && match.index !== undefined ? match.index : value.length\n      code = value.charCodeAt(endPosition)\n      if (!match) {\n        buffer = value.slice(startPosition)\n        break\n      }\n      if (code === 10 && startPosition === endPosition && atCarriageReturn) {\n        chunks.push(-3)\n        atCarriageReturn = undefined\n      } else {\n        if (atCarriageReturn) {\n          chunks.push(-5)\n          atCarriageReturn = undefined\n        }\n        if (startPosition < endPosition) {\n          chunks.push(value.slice(startPosition, endPosition))\n          column += endPosition - startPosition\n        }\n        switch (code) {\n          case 0: {\n            chunks.push(65533)\n            column++\n            break\n          }\n          case 9: {\n            next = Math.ceil(column / 4) * 4\n            chunks.push(-2)\n            while (column++ < next) chunks.push(-1)\n            break\n          }\n          case 10: {\n            chunks.push(-4)\n            column = 1\n            break\n          }\n          default: {\n            atCarriageReturn = true\n            column = 1\n          }\n        }\n      }\n      startPosition = endPosition + 1\n    }\n    if (end) {\n      if (atCarriageReturn) chunks.push(-5)\n      if (buffer) chunks.push(buffer)\n      chunks.push(null)\n    }\n    return chunks\n  }\n}\n","/**\n * Turn the number (in string form as either hexa- or plain decimal) coming from\n * a numeric character reference into a character.\n *\n * Sort of like `String.fromCodePoint(Number.parseInt(value, base))`, but makes\n * non-characters and control characters safe.\n *\n * @param {string} value\n *   Value to decode.\n * @param {number} base\n *   Numeric base.\n * @returns {string}\n *   Character.\n */\nexport function decodeNumericCharacterReference(value, base) {\n  const code = Number.parseInt(value, base);\n  if (\n  // C0 except for HT, LF, FF, CR, space.\n  code < 9 || code === 11 || code > 13 && code < 32 ||\n  // Control character (DEL) of C0, and C1 controls.\n  code > 126 && code < 160 ||\n  // Lone high surrogates and low surrogates.\n  code > 55_295 && code < 57_344 ||\n  // Noncharacters.\n  code > 64_975 && code < 65_008 || /* eslint-disable no-bitwise */\n  (code & 65_535) === 65_535 || (code & 65_535) === 65_534 || /* eslint-enable no-bitwise */\n  // Out of range\n  code > 1_114_111) {\n    return \"\\uFFFD\";\n  }\n  return String.fromCodePoint(code);\n}","import {decodeNamedCharacterReference} from 'decode-named-character-reference'\nimport {decodeNumericCharacterReference} from 'micromark-util-decode-numeric-character-reference'\nconst characterEscapeOrReference =\n  /\\\\([!-/:-@[-`{-~])|&(#(?:\\d{1,7}|x[\\da-f]{1,6})|[\\da-z]{1,31});/gi\n\n/**\n * Decode markdown strings (which occur in places such as fenced code info\n * strings, destinations, labels, and titles).\n *\n * The “string” content type allows character escapes and -references.\n * This decodes those.\n *\n * @param {string} value\n *   Value to decode.\n * @returns {string}\n *   Decoded value.\n */\nexport function decodeString(value) {\n  return value.replace(characterEscapeOrReference, decode)\n}\n\n/**\n * @param {string} $0\n * @param {string} $1\n * @param {string} $2\n * @returns {string}\n */\nfunction decode($0, $1, $2) {\n  if ($1) {\n    // Escape.\n    return $1\n  }\n\n  // Reference.\n  const head = $2.charCodeAt(0)\n  if (head === 35) {\n    const head = $2.charCodeAt(1)\n    const hex = head === 120 || head === 88\n    return decodeNumericCharacterReference($2.slice(hex ? 2 : 1), hex ? 16 : 10)\n  }\n  return decodeNamedCharacterReference($2) || $0\n}\n","/**\n * @typedef {import('mdast').Break} Break\n * @typedef {import('mdast').Blockquote} Blockquote\n * @typedef {import('mdast').Code} Code\n * @typedef {import('mdast').Definition} Definition\n * @typedef {import('mdast').Emphasis} Emphasis\n * @typedef {import('mdast').Heading} Heading\n * @typedef {import('mdast').Html} Html\n * @typedef {import('mdast').Image} Image\n * @typedef {import('mdast').InlineCode} InlineCode\n * @typedef {import('mdast').Link} Link\n * @typedef {import('mdast').List} List\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').Nodes} Nodes\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('mdast').Parent} Parent\n * @typedef {import('mdast').PhrasingContent} PhrasingContent\n * @typedef {import('mdast').ReferenceType} ReferenceType\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast').Strong} Strong\n * @typedef {import('mdast').Text} Text\n * @typedef {import('mdast').ThematicBreak} ThematicBreak\n *\n * @typedef {import('micromark-util-types').Encoding} Encoding\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').ParseOptions} ParseOptions\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Value} Value\n *\n * @typedef {import('unist').Point} Point\n *\n * @typedef {import('../index.js').CompileData} CompileData\n */\n\n/**\n * @typedef {Omit<Parent, 'children' | 'type'> & {type: 'fragment', children: Array<PhrasingContent>}} Fragment\n */\n\n/**\n * @callback Transform\n *   Extra transform, to change the AST afterwards.\n * @param {Root} tree\n *   Tree to transform.\n * @returns {Root | null | undefined | void}\n *   New tree or nothing (in which case the current tree is used).\n *\n * @callback Handle\n *   Handle a token.\n * @param {CompileContext} this\n *   Context.\n * @param {Token} token\n *   Current token.\n * @returns {undefined | void}\n *   Nothing.\n *\n * @typedef {Record<string, Handle>} Handles\n *   Token types mapping to handles\n *\n * @callback OnEnterError\n *   Handle the case where the `right` token is open, but it is closed (by the\n *   `left` token) or because we reached the end of the document.\n * @param {Omit<CompileContext, 'sliceSerialize'>} this\n *   Context.\n * @param {Token | undefined} left\n *   Left token.\n * @param {Token} right\n *   Right token.\n * @returns {undefined}\n *   Nothing.\n *\n * @callback OnExitError\n *   Handle the case where the `right` token is open but it is closed by\n *   exiting the `left` token.\n * @param {Omit<CompileContext, 'sliceSerialize'>} this\n *   Context.\n * @param {Token} left\n *   Left token.\n * @param {Token} right\n *   Right token.\n * @returns {undefined}\n *   Nothing.\n *\n * @typedef {[Token, OnEnterError | undefined]} TokenTuple\n *   Open token on the stack, with an optional error handler for when\n *   that token isn’t closed properly.\n */\n\n/**\n * @typedef Config\n *   Configuration.\n *\n *   We have our defaults, but extensions will add more.\n * @property {Array<string>} canContainEols\n *   Token types where line endings are used.\n * @property {Handles} enter\n *   Opening handles.\n * @property {Handles} exit\n *   Closing handles.\n * @property {Array<Transform>} transforms\n *   Tree transforms.\n *\n * @typedef {Partial<Config>} Extension\n *   Change how markdown tokens from micromark are turned into mdast.\n *\n * @typedef CompileContext\n *   mdast compiler context.\n * @property {Array<Fragment | Nodes>} stack\n *   Stack of nodes.\n * @property {Array<TokenTuple>} tokenStack\n *   Stack of tokens.\n * @property {(this: CompileContext) => undefined} buffer\n *   Capture some of the output data.\n * @property {(this: CompileContext) => string} resume\n *   Stop capturing and access the output data.\n * @property {(this: CompileContext, node: Nodes, token: Token, onError?: OnEnterError) => undefined} enter\n *   Enter a node.\n * @property {(this: CompileContext, token: Token, onError?: OnExitError) => undefined} exit\n *   Exit a node.\n * @property {TokenizeContext['sliceSerialize']} sliceSerialize\n *   Get the string value of a token.\n * @property {Config} config\n *   Configuration.\n * @property {CompileData} data\n *   Info passed around; key/value store.\n *\n * @typedef FromMarkdownOptions\n *   Configuration for how to build mdast.\n * @property {Array<Extension | Array<Extension>> | null | undefined} [mdastExtensions]\n *   Extensions for this utility to change how tokens are turned into a tree.\n *\n * @typedef {ParseOptions & FromMarkdownOptions} Options\n *   Configuration.\n */\n\nimport {toString} from 'mdast-util-to-string'\nimport {parse, postprocess, preprocess} from 'micromark'\nimport {decodeNumericCharacterReference} from 'micromark-util-decode-numeric-character-reference'\nimport {decodeString} from 'micromark-util-decode-string'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\nimport {decodeNamedCharacterReference} from 'decode-named-character-reference'\nimport {stringifyPosition} from 'unist-util-stringify-position'\nconst own = {}.hasOwnProperty\n\n/**\n * Turn markdown into a syntax tree.\n *\n * @overload\n * @param {Value} value\n * @param {Encoding | null | undefined} [encoding]\n * @param {Options | null | undefined} [options]\n * @returns {Root}\n *\n * @overload\n * @param {Value} value\n * @param {Options | null | undefined} [options]\n * @returns {Root}\n *\n * @param {Value} value\n *   Markdown to parse.\n * @param {Encoding | Options | null | undefined} [encoding]\n *   Character encoding for when `value` is `Buffer`.\n * @param {Options | null | undefined} [options]\n *   Configuration.\n * @returns {Root}\n *   mdast tree.\n */\nexport function fromMarkdown(value, encoding, options) {\n  if (typeof encoding !== 'string') {\n    options = encoding\n    encoding = undefined\n  }\n  return compiler(options)(\n    postprocess(\n      parse(options).document().write(preprocess()(value, encoding, true))\n    )\n  )\n}\n\n/**\n * Note this compiler only understand complete buffering, not streaming.\n *\n * @param {Options | null | undefined} [options]\n */\nfunction compiler(options) {\n  /** @type {Config} */\n  const config = {\n    transforms: [],\n    canContainEols: ['emphasis', 'fragment', 'heading', 'paragraph', 'strong'],\n    enter: {\n      autolink: opener(link),\n      autolinkProtocol: onenterdata,\n      autolinkEmail: onenterdata,\n      atxHeading: opener(heading),\n      blockQuote: opener(blockQuote),\n      characterEscape: onenterdata,\n      characterReference: onenterdata,\n      codeFenced: opener(codeFlow),\n      codeFencedFenceInfo: buffer,\n      codeFencedFenceMeta: buffer,\n      codeIndented: opener(codeFlow, buffer),\n      codeText: opener(codeText, buffer),\n      codeTextData: onenterdata,\n      data: onenterdata,\n      codeFlowValue: onenterdata,\n      definition: opener(definition),\n      definitionDestinationString: buffer,\n      definitionLabelString: buffer,\n      definitionTitleString: buffer,\n      emphasis: opener(emphasis),\n      hardBreakEscape: opener(hardBreak),\n      hardBreakTrailing: opener(hardBreak),\n      htmlFlow: opener(html, buffer),\n      htmlFlowData: onenterdata,\n      htmlText: opener(html, buffer),\n      htmlTextData: onenterdata,\n      image: opener(image),\n      label: buffer,\n      link: opener(link),\n      listItem: opener(listItem),\n      listItemValue: onenterlistitemvalue,\n      listOrdered: opener(list, onenterlistordered),\n      listUnordered: opener(list),\n      paragraph: opener(paragraph),\n      reference: onenterreference,\n      referenceString: buffer,\n      resourceDestinationString: buffer,\n      resourceTitleString: buffer,\n      setextHeading: opener(heading),\n      strong: opener(strong),\n      thematicBreak: opener(thematicBreak)\n    },\n    exit: {\n      atxHeading: closer(),\n      atxHeadingSequence: onexitatxheadingsequence,\n      autolink: closer(),\n      autolinkEmail: onexitautolinkemail,\n      autolinkProtocol: onexitautolinkprotocol,\n      blockQuote: closer(),\n      characterEscapeValue: onexitdata,\n      characterReferenceMarkerHexadecimal: onexitcharacterreferencemarker,\n      characterReferenceMarkerNumeric: onexitcharacterreferencemarker,\n      characterReferenceValue: onexitcharacterreferencevalue,\n      codeFenced: closer(onexitcodefenced),\n      codeFencedFence: onexitcodefencedfence,\n      codeFencedFenceInfo: onexitcodefencedfenceinfo,\n      codeFencedFenceMeta: onexitcodefencedfencemeta,\n      codeFlowValue: onexitdata,\n      codeIndented: closer(onexitcodeindented),\n      codeText: closer(onexitcodetext),\n      codeTextData: onexitdata,\n      data: onexitdata,\n      definition: closer(),\n      definitionDestinationString: onexitdefinitiondestinationstring,\n      definitionLabelString: onexitdefinitionlabelstring,\n      definitionTitleString: onexitdefinitiontitlestring,\n      emphasis: closer(),\n      hardBreakEscape: closer(onexithardbreak),\n      hardBreakTrailing: closer(onexithardbreak),\n      htmlFlow: closer(onexithtmlflow),\n      htmlFlowData: onexitdata,\n      htmlText: closer(onexithtmltext),\n      htmlTextData: onexitdata,\n      image: closer(onexitimage),\n      label: onexitlabel,\n      labelText: onexitlabeltext,\n      lineEnding: onexitlineending,\n      link: closer(onexitlink),\n      listItem: closer(),\n      listOrdered: closer(),\n      listUnordered: closer(),\n      paragraph: closer(),\n      referenceString: onexitreferencestring,\n      resourceDestinationString: onexitresourcedestinationstring,\n      resourceTitleString: onexitresourcetitlestring,\n      resource: onexitresource,\n      setextHeading: closer(onexitsetextheading),\n      setextHeadingLineSequence: onexitsetextheadinglinesequence,\n      setextHeadingText: onexitsetextheadingtext,\n      strong: closer(),\n      thematicBreak: closer()\n    }\n  }\n  configure(config, (options || {}).mdastExtensions || [])\n\n  /** @type {CompileData} */\n  const data = {}\n  return compile\n\n  /**\n   * Turn micromark events into an mdast tree.\n   *\n   * @param {Array<Event>} events\n   *   Events.\n   * @returns {Root}\n   *   mdast tree.\n   */\n  function compile(events) {\n    /** @type {Root} */\n    let tree = {\n      type: 'root',\n      children: []\n    }\n    /** @type {Omit<CompileContext, 'sliceSerialize'>} */\n    const context = {\n      stack: [tree],\n      tokenStack: [],\n      config,\n      enter,\n      exit,\n      buffer,\n      resume,\n      data\n    }\n    /** @type {Array<number>} */\n    const listStack = []\n    let index = -1\n    while (++index < events.length) {\n      // We preprocess lists to add `listItem` tokens, and to infer whether\n      // items the list itself are spread out.\n      if (\n        events[index][1].type === 'listOrdered' ||\n        events[index][1].type === 'listUnordered'\n      ) {\n        if (events[index][0] === 'enter') {\n          listStack.push(index)\n        } else {\n          const tail = listStack.pop()\n          index = prepareList(events, tail, index)\n        }\n      }\n    }\n    index = -1\n    while (++index < events.length) {\n      const handler = config[events[index][0]]\n      if (own.call(handler, events[index][1].type)) {\n        handler[events[index][1].type].call(\n          Object.assign(\n            {\n              sliceSerialize: events[index][2].sliceSerialize\n            },\n            context\n          ),\n          events[index][1]\n        )\n      }\n    }\n\n    // Handle tokens still being open.\n    if (context.tokenStack.length > 0) {\n      const tail = context.tokenStack[context.tokenStack.length - 1]\n      const handler = tail[1] || defaultOnError\n      handler.call(context, undefined, tail[0])\n    }\n\n    // Figure out `root` position.\n    tree.position = {\n      start: point(\n        events.length > 0\n          ? events[0][1].start\n          : {\n              line: 1,\n              column: 1,\n              offset: 0\n            }\n      ),\n      end: point(\n        events.length > 0\n          ? events[events.length - 2][1].end\n          : {\n              line: 1,\n              column: 1,\n              offset: 0\n            }\n      )\n    }\n\n    // Call transforms.\n    index = -1\n    while (++index < config.transforms.length) {\n      tree = config.transforms[index](tree) || tree\n    }\n    return tree\n  }\n\n  /**\n   * @param {Array<Event>} events\n   * @param {number} start\n   * @param {number} length\n   * @returns {number}\n   */\n  function prepareList(events, start, length) {\n    let index = start - 1\n    let containerBalance = -1\n    let listSpread = false\n    /** @type {Token | undefined} */\n    let listItem\n    /** @type {number | undefined} */\n    let lineIndex\n    /** @type {number | undefined} */\n    let firstBlankLineIndex\n    /** @type {boolean | undefined} */\n    let atMarker\n    while (++index <= length) {\n      const event = events[index]\n      switch (event[1].type) {\n        case 'listUnordered':\n        case 'listOrdered':\n        case 'blockQuote': {\n          if (event[0] === 'enter') {\n            containerBalance++\n          } else {\n            containerBalance--\n          }\n          atMarker = undefined\n          break\n        }\n        case 'lineEndingBlank': {\n          if (event[0] === 'enter') {\n            if (\n              listItem &&\n              !atMarker &&\n              !containerBalance &&\n              !firstBlankLineIndex\n            ) {\n              firstBlankLineIndex = index\n            }\n            atMarker = undefined\n          }\n          break\n        }\n        case 'linePrefix':\n        case 'listItemValue':\n        case 'listItemMarker':\n        case 'listItemPrefix':\n        case 'listItemPrefixWhitespace': {\n          // Empty.\n\n          break\n        }\n        default: {\n          atMarker = undefined\n        }\n      }\n      if (\n        (!containerBalance &&\n          event[0] === 'enter' &&\n          event[1].type === 'listItemPrefix') ||\n        (containerBalance === -1 &&\n          event[0] === 'exit' &&\n          (event[1].type === 'listUnordered' ||\n            event[1].type === 'listOrdered'))\n      ) {\n        if (listItem) {\n          let tailIndex = index\n          lineIndex = undefined\n          while (tailIndex--) {\n            const tailEvent = events[tailIndex]\n            if (\n              tailEvent[1].type === 'lineEnding' ||\n              tailEvent[1].type === 'lineEndingBlank'\n            ) {\n              if (tailEvent[0] === 'exit') continue\n              if (lineIndex) {\n                events[lineIndex][1].type = 'lineEndingBlank'\n                listSpread = true\n              }\n              tailEvent[1].type = 'lineEnding'\n              lineIndex = tailIndex\n            } else if (\n              tailEvent[1].type === 'linePrefix' ||\n              tailEvent[1].type === 'blockQuotePrefix' ||\n              tailEvent[1].type === 'blockQuotePrefixWhitespace' ||\n              tailEvent[1].type === 'blockQuoteMarker' ||\n              tailEvent[1].type === 'listItemIndent'\n            ) {\n              // Empty\n            } else {\n              break\n            }\n          }\n          if (\n            firstBlankLineIndex &&\n            (!lineIndex || firstBlankLineIndex < lineIndex)\n          ) {\n            listItem._spread = true\n          }\n\n          // Fix position.\n          listItem.end = Object.assign(\n            {},\n            lineIndex ? events[lineIndex][1].start : event[1].end\n          )\n          events.splice(lineIndex || index, 0, ['exit', listItem, event[2]])\n          index++\n          length++\n        }\n\n        // Create a new list item.\n        if (event[1].type === 'listItemPrefix') {\n          /** @type {Token} */\n          const item = {\n            type: 'listItem',\n            _spread: false,\n            start: Object.assign({}, event[1].start),\n            // @ts-expect-error: we’ll add `end` in a second.\n            end: undefined\n          }\n          listItem = item\n          events.splice(index, 0, ['enter', item, event[2]])\n          index++\n          length++\n          firstBlankLineIndex = undefined\n          atMarker = true\n        }\n      }\n    }\n    events[start][1]._spread = listSpread\n    return length\n  }\n\n  /**\n   * Create an opener handle.\n   *\n   * @param {(token: Token) => Nodes} create\n   *   Create a node.\n   * @param {Handle | undefined} [and]\n   *   Optional function to also run.\n   * @returns {Handle}\n   *   Handle.\n   */\n  function opener(create, and) {\n    return open\n\n    /**\n     * @this {CompileContext}\n     * @param {Token} token\n     * @returns {undefined}\n     */\n    function open(token) {\n      enter.call(this, create(token), token)\n      if (and) and.call(this, token)\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @returns {undefined}\n   */\n  function buffer() {\n    this.stack.push({\n      type: 'fragment',\n      children: []\n    })\n  }\n\n  /**\n   * @this {CompileContext}\n   *   Context.\n   * @param {Nodes} node\n   *   Node to enter.\n   * @param {Token} token\n   *   Corresponding token.\n   * @param {OnEnterError | undefined} [errorHandler]\n   *   Handle the case where this token is open, but it is closed by something else.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  function enter(node, token, errorHandler) {\n    const parent = this.stack[this.stack.length - 1]\n    /** @type {Array<Nodes>} */\n    const siblings = parent.children\n    siblings.push(node)\n    this.stack.push(node)\n    this.tokenStack.push([token, errorHandler])\n    node.position = {\n      start: point(token.start),\n      // @ts-expect-error: `end` will be patched later.\n      end: undefined\n    }\n  }\n\n  /**\n   * Create a closer handle.\n   *\n   * @param {Handle | undefined} [and]\n   *   Optional function to also run.\n   * @returns {Handle}\n   *   Handle.\n   */\n  function closer(and) {\n    return close\n\n    /**\n     * @this {CompileContext}\n     * @param {Token} token\n     * @returns {undefined}\n     */\n    function close(token) {\n      if (and) and.call(this, token)\n      exit.call(this, token)\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   *   Context.\n   * @param {Token} token\n   *   Corresponding token.\n   * @param {OnExitError | undefined} [onExitError]\n   *   Handle the case where another token is open.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  function exit(token, onExitError) {\n    const node = this.stack.pop()\n    const open = this.tokenStack.pop()\n    if (!open) {\n      throw new Error(\n        'Cannot close `' +\n          token.type +\n          '` (' +\n          stringifyPosition({\n            start: token.start,\n            end: token.end\n          }) +\n          '): it’s not open'\n      )\n    } else if (open[0].type !== token.type) {\n      if (onExitError) {\n        onExitError.call(this, token, open[0])\n      } else {\n        const handler = open[1] || defaultOnError\n        handler.call(this, token, open[0])\n      }\n    }\n    node.position.end = point(token.end)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @returns {string}\n   */\n  function resume() {\n    return toString(this.stack.pop())\n  }\n\n  //\n  // Handlers.\n  //\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onenterlistordered() {\n    this.data.expectingFirstListItemValue = true\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onenterlistitemvalue(token) {\n    if (this.data.expectingFirstListItemValue) {\n      const ancestor = this.stack[this.stack.length - 2]\n      ancestor.start = Number.parseInt(this.sliceSerialize(token), 10)\n      this.data.expectingFirstListItemValue = undefined\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfenceinfo() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.lang = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfencemeta() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.meta = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfence() {\n    // Exit if this is the closing fence.\n    if (this.data.flowCodeInside) return\n    this.buffer()\n    this.data.flowCodeInside = true\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefenced() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data.replace(/^(\\r?\\n|\\r)|(\\r?\\n|\\r)$/g, '')\n    this.data.flowCodeInside = undefined\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodeindented() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data.replace(/(\\r?\\n|\\r)$/g, '')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitionlabelstring(token) {\n    const label = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.label = label\n    node.identifier = normalizeIdentifier(\n      this.sliceSerialize(token)\n    ).toLowerCase()\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitiontitlestring() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.title = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitiondestinationstring() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.url = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitatxheadingsequence(token) {\n    const node = this.stack[this.stack.length - 1]\n    if (!node.depth) {\n      const depth = this.sliceSerialize(token).length\n      node.depth = depth\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheadingtext() {\n    this.data.setextHeadingSlurpLineEnding = true\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheadinglinesequence(token) {\n    const node = this.stack[this.stack.length - 1]\n    node.depth = this.sliceSerialize(token).codePointAt(0) === 61 ? 1 : 2\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheading() {\n    this.data.setextHeadingSlurpLineEnding = undefined\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onenterdata(token) {\n    const node = this.stack[this.stack.length - 1]\n    /** @type {Array<Nodes>} */\n    const siblings = node.children\n    let tail = siblings[siblings.length - 1]\n    if (!tail || tail.type !== 'text') {\n      // Add a new text node.\n      tail = text()\n      tail.position = {\n        start: point(token.start),\n        // @ts-expect-error: we’ll add `end` later.\n        end: undefined\n      }\n      siblings.push(tail)\n    }\n    this.stack.push(tail)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitdata(token) {\n    const tail = this.stack.pop()\n    tail.value += this.sliceSerialize(token)\n    tail.position.end = point(token.end)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlineending(token) {\n    const context = this.stack[this.stack.length - 1]\n    // If we’re at a hard break, include the line ending in there.\n    if (this.data.atHardBreak) {\n      const tail = context.children[context.children.length - 1]\n      tail.position.end = point(token.end)\n      this.data.atHardBreak = undefined\n      return\n    }\n    if (\n      !this.data.setextHeadingSlurpLineEnding &&\n      config.canContainEols.includes(context.type)\n    ) {\n      onenterdata.call(this, token)\n      onexitdata.call(this, token)\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithardbreak() {\n    this.data.atHardBreak = true\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithtmlflow() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithtmltext() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitcodetext() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlink() {\n    const node = this.stack[this.stack.length - 1]\n    // Note: there are also `identifier` and `label` fields on this link node!\n    // These are used / cleaned here.\n    // To do: clean.\n    if (this.data.inReference) {\n      /** @type {ReferenceType} */\n      const referenceType = this.data.referenceType || 'shortcut'\n      node.type += 'Reference'\n      // @ts-expect-error: mutate.\n      node.referenceType = referenceType\n      // @ts-expect-error: mutate.\n      delete node.url\n      delete node.title\n    } else {\n      // @ts-expect-error: mutate.\n      delete node.identifier\n      // @ts-expect-error: mutate.\n      delete node.label\n    }\n    this.data.referenceType = undefined\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitimage() {\n    const node = this.stack[this.stack.length - 1]\n    // Note: there are also `identifier` and `label` fields on this link node!\n    // These are used / cleaned here.\n    // To do: clean.\n    if (this.data.inReference) {\n      /** @type {ReferenceType} */\n      const referenceType = this.data.referenceType || 'shortcut'\n      node.type += 'Reference'\n      // @ts-expect-error: mutate.\n      node.referenceType = referenceType\n      // @ts-expect-error: mutate.\n      delete node.url\n      delete node.title\n    } else {\n      // @ts-expect-error: mutate.\n      delete node.identifier\n      // @ts-expect-error: mutate.\n      delete node.label\n    }\n    this.data.referenceType = undefined\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlabeltext(token) {\n    const string = this.sliceSerialize(token)\n    const ancestor = this.stack[this.stack.length - 2]\n    // @ts-expect-error: stash this on the node, as it might become a reference\n    // later.\n    ancestor.label = decodeString(string)\n    // @ts-expect-error: same as above.\n    ancestor.identifier = normalizeIdentifier(string).toLowerCase()\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlabel() {\n    const fragment = this.stack[this.stack.length - 1]\n    const value = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    // Assume a reference.\n    this.data.inReference = true\n    if (node.type === 'link') {\n      /** @type {Array<PhrasingContent>} */\n      const children = fragment.children\n      node.children = children\n    } else {\n      node.alt = value\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresourcedestinationstring() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.url = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresourcetitlestring() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.title = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresource() {\n    this.data.inReference = undefined\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onenterreference() {\n    this.data.referenceType = 'collapsed'\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitreferencestring(token) {\n    const label = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    // @ts-expect-error: stash this on the node, as it might become a reference\n    // later.\n    node.label = label\n    // @ts-expect-error: same as above.\n    node.identifier = normalizeIdentifier(\n      this.sliceSerialize(token)\n    ).toLowerCase()\n    this.data.referenceType = 'full'\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitcharacterreferencemarker(token) {\n    this.data.characterReferenceType = token.type\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcharacterreferencevalue(token) {\n    const data = this.sliceSerialize(token)\n    const type = this.data.characterReferenceType\n    /** @type {string} */\n    let value\n    if (type) {\n      value = decodeNumericCharacterReference(\n        data,\n        type === 'characterReferenceMarkerNumeric' ? 10 : 16\n      )\n      this.data.characterReferenceType = undefined\n    } else {\n      const result = decodeNamedCharacterReference(data)\n      value = result\n    }\n    const tail = this.stack.pop()\n    tail.value += value\n    tail.position.end = point(token.end)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitautolinkprotocol(token) {\n    onexitdata.call(this, token)\n    const node = this.stack[this.stack.length - 1]\n    node.url = this.sliceSerialize(token)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitautolinkemail(token) {\n    onexitdata.call(this, token)\n    const node = this.stack[this.stack.length - 1]\n    node.url = 'mailto:' + this.sliceSerialize(token)\n  }\n\n  //\n  // Creaters.\n  //\n\n  /** @returns {Blockquote} */\n  function blockQuote() {\n    return {\n      type: 'blockquote',\n      children: []\n    }\n  }\n\n  /** @returns {Code} */\n  function codeFlow() {\n    return {\n      type: 'code',\n      lang: null,\n      meta: null,\n      value: ''\n    }\n  }\n\n  /** @returns {InlineCode} */\n  function codeText() {\n    return {\n      type: 'inlineCode',\n      value: ''\n    }\n  }\n\n  /** @returns {Definition} */\n  function definition() {\n    return {\n      type: 'definition',\n      identifier: '',\n      label: null,\n      title: null,\n      url: ''\n    }\n  }\n\n  /** @returns {Emphasis} */\n  function emphasis() {\n    return {\n      type: 'emphasis',\n      children: []\n    }\n  }\n\n  /** @returns {Heading} */\n  function heading() {\n    return {\n      type: 'heading',\n      // @ts-expect-error `depth` will be set later.\n      depth: 0,\n      children: []\n    }\n  }\n\n  /** @returns {Break} */\n  function hardBreak() {\n    return {\n      type: 'break'\n    }\n  }\n\n  /** @returns {Html} */\n  function html() {\n    return {\n      type: 'html',\n      value: ''\n    }\n  }\n\n  /** @returns {Image} */\n  function image() {\n    return {\n      type: 'image',\n      title: null,\n      url: '',\n      alt: null\n    }\n  }\n\n  /** @returns {Link} */\n  function link() {\n    return {\n      type: 'link',\n      title: null,\n      url: '',\n      children: []\n    }\n  }\n\n  /**\n   * @param {Token} token\n   * @returns {List}\n   */\n  function list(token) {\n    return {\n      type: 'list',\n      ordered: token.type === 'listOrdered',\n      start: null,\n      spread: token._spread,\n      children: []\n    }\n  }\n\n  /**\n   * @param {Token} token\n   * @returns {ListItem}\n   */\n  function listItem(token) {\n    return {\n      type: 'listItem',\n      spread: token._spread,\n      checked: null,\n      children: []\n    }\n  }\n\n  /** @returns {Paragraph} */\n  function paragraph() {\n    return {\n      type: 'paragraph',\n      children: []\n    }\n  }\n\n  /** @returns {Strong} */\n  function strong() {\n    return {\n      type: 'strong',\n      children: []\n    }\n  }\n\n  /** @returns {Text} */\n  function text() {\n    return {\n      type: 'text',\n      value: ''\n    }\n  }\n\n  /** @returns {ThematicBreak} */\n  function thematicBreak() {\n    return {\n      type: 'thematicBreak'\n    }\n  }\n}\n\n/**\n * Copy a point-like value.\n *\n * @param {Point} d\n *   Point-like value.\n * @returns {Point}\n *   unist point.\n */\nfunction point(d) {\n  return {\n    line: d.line,\n    column: d.column,\n    offset: d.offset\n  }\n}\n\n/**\n * @param {Config} combined\n * @param {Array<Array<Extension> | Extension>} extensions\n * @returns {undefined}\n */\nfunction configure(combined, extensions) {\n  let index = -1\n  while (++index < extensions.length) {\n    const value = extensions[index]\n    if (Array.isArray(value)) {\n      configure(combined, value)\n    } else {\n      extension(combined, value)\n    }\n  }\n}\n\n/**\n * @param {Config} combined\n * @param {Extension} extension\n * @returns {undefined}\n */\nfunction extension(combined, extension) {\n  /** @type {keyof Extension} */\n  let key\n  for (key in extension) {\n    if (own.call(extension, key)) {\n      switch (key) {\n        case 'canContainEols': {\n          const right = extension[key]\n          if (right) {\n            combined[key].push(...right)\n          }\n          break\n        }\n        case 'transforms': {\n          const right = extension[key]\n          if (right) {\n            combined[key].push(...right)\n          }\n          break\n        }\n        case 'enter':\n        case 'exit': {\n          const right = extension[key]\n          if (right) {\n            Object.assign(combined[key], right)\n          }\n          break\n        }\n        // No default\n      }\n    }\n  }\n}\n\n/** @type {OnEnterError} */\nfunction defaultOnError(left, right) {\n  if (left) {\n    throw new Error(\n      'Cannot close `' +\n        left.type +\n        '` (' +\n        stringifyPosition({\n          start: left.start,\n          end: left.end\n        }) +\n        '): a different token (`' +\n        right.type +\n        '`, ' +\n        stringifyPosition({\n          start: right.start,\n          end: right.end\n        }) +\n        ') is open'\n    )\n  } else {\n    throw new Error(\n      'Cannot close document, a token (`' +\n        right.type +\n        '`, ' +\n        stringifyPosition({\n          start: right.start,\n          end: right.end\n        }) +\n        ') is still open'\n    )\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Event} Event\n */\n\nimport {subtokenize} from 'micromark-util-subtokenize'\n\n/**\n * @param {Array<Event>} events\n * @returns {Array<Event>}\n */\nexport function postprocess(events) {\n  while (!subtokenize(events)) {\n    // Empty\n  }\n  return events\n}\n","/**\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast-util-from-markdown').Options} FromMarkdownOptions\n * @typedef {import('unified').Parser<Root>} Parser\n * @typedef {import('unified').Processor<Root>} Processor\n */\n\n/**\n * @typedef {Omit<FromMarkdownOptions, 'extensions' | 'mdastExtensions'>} Options\n */\n\nimport {fromMarkdown} from 'mdast-util-from-markdown'\n\n/**\n * Aadd support for parsing from markdown.\n *\n * @param {Readonly<Options> | null | undefined} [options]\n *   Configuration (optional).\n * @returns {undefined}\n *   Nothing.\n */\nexport default function remarkParse(options) {\n  /** @type {Processor} */\n  // @ts-expect-error: TS in JSDoc generates wrong types if `this` is typed regularly.\n  const self = this\n\n  self.parser = parser\n\n  /**\n   * @type {Parser}\n   */\n  function parser(doc) {\n    return fromMarkdown(doc, {\n      ...self.data('settings'),\n      ...options,\n      // Note: these options are not in the readme.\n      // The goal is for them to be set by plugins on `data` instead of being\n      // passed by users.\n      extensions: self.data('micromarkExtensions') || [],\n      mdastExtensions: self.data('fromMarkdownExtensions') || []\n    })\n  }\n}\n","export const VOID       = -1;\nexport const PRIMITIVE  = 0;\nexport const ARRAY      = 1;\nexport const OBJECT     = 2;\nexport const DATE       = 3;\nexport const REGEXP     = 4;\nexport const MAP        = 5;\nexport const SET        = 6;\nexport const ERROR      = 7;\nexport const BIGINT     = 8;\n// export const SYMBOL = 9;\n","import {\n  VOID, PRIMITIVE,\n  ARRAY, OBJECT,\n  DATE, REGEXP, MAP, SET,\n  ERROR, BIGINT\n} from './types.js';\n\nconst env = typeof self === 'object' ? self : globalThis;\n\nconst deserializer = ($, _) => {\n  const as = (out, index) => {\n    $.set(index, out);\n    return out;\n  };\n\n  const unpair = index => {\n    if ($.has(index))\n      return $.get(index);\n\n    const [type, value] = _[index];\n    switch (type) {\n      case PRIMITIVE:\n      case VOID:\n        return as(value, index);\n      case ARRAY: {\n        const arr = as([], index);\n        for (const index of value)\n          arr.push(unpair(index));\n        return arr;\n      }\n      case OBJECT: {\n        const object = as({}, index);\n        for (const [key, index] of value)\n          object[unpair(key)] = unpair(index);\n        return object;\n      }\n      case DATE:\n        return as(new Date(value), index);\n      case REGEXP: {\n        const {source, flags} = value;\n        return as(new RegExp(source, flags), index);\n      }\n      case MAP: {\n        const map = as(new Map, index);\n        for (const [key, index] of value)\n          map.set(unpair(key), unpair(index));\n        return map;\n      }\n      case SET: {\n        const set = as(new Set, index);\n        for (const index of value)\n          set.add(unpair(index));\n        return set;\n      }\n      case ERROR: {\n        const {name, message} = value;\n        return as(new env[name](message), index);\n      }\n      case BIGINT:\n        return as(BigInt(value), index);\n      case 'BigInt':\n        return as(Object(BigInt(value)), index);\n    }\n    return as(new env[type](value), index);\n  };\n\n  return unpair;\n};\n\n/**\n * @typedef {Array<string,any>} Record a type representation\n */\n\n/**\n * Returns a deserialized value from a serialized array of Records.\n * @param {Record[]} serialized a previously serialized value.\n * @returns {any}\n */\nexport const deserialize = serialized => deserializer(new Map, serialized)(0);\n","import {\n  VOID, PRIMITIVE,\n  ARRAY, OBJECT,\n  DATE, REGEXP, MAP, SET,\n  ERROR, BIGINT\n} from './types.js';\n\nconst EMPTY = '';\n\nconst {toString} = {};\nconst {keys} = Object;\n\nconst typeOf = value => {\n  const type = typeof value;\n  if (type !== 'object' || !value)\n    return [PRIMITIVE, type];\n\n  const asString = toString.call(value).slice(8, -1);\n  switch (asString) {\n    case 'Array':\n      return [ARRAY, EMPTY];\n    case 'Object':\n      return [OBJECT, EMPTY];\n    case 'Date':\n      return [DATE, EMPTY];\n    case 'RegExp':\n      return [REGEXP, EMPTY];\n    case 'Map':\n      return [MAP, EMPTY];\n    case 'Set':\n      return [SET, EMPTY];\n  }\n\n  if (asString.includes('Array'))\n    return [ARRAY, asString];\n\n  if (asString.includes('Error'))\n    return [ERROR, asString];\n\n  return [OBJECT, asString];\n};\n\nconst shouldSkip = ([TYPE, type]) => (\n  TYPE === PRIMITIVE &&\n  (type === 'function' || type === 'symbol')\n);\n\nconst serializer = (strict, json, $, _) => {\n\n  const as = (out, value) => {\n    const index = _.push(out) - 1;\n    $.set(value, index);\n    return index;\n  };\n\n  const pair = value => {\n    if ($.has(value))\n      return $.get(value);\n\n    let [TYPE, type] = typeOf(value);\n    switch (TYPE) {\n      case PRIMITIVE: {\n        let entry = value;\n        switch (type) {\n          case 'bigint':\n            TYPE = BIGINT;\n            entry = value.toString();\n            break;\n          case 'function':\n          case 'symbol':\n            if (strict)\n              throw new TypeError('unable to serialize ' + type);\n            entry = null;\n            break;\n          case 'undefined':\n            return as([VOID], value);\n        }\n        return as([TYPE, entry], value);\n      }\n      case ARRAY: {\n        if (type)\n          return as([type, [...value]], value);\n  \n        const arr = [];\n        const index = as([TYPE, arr], value);\n        for (const entry of value)\n          arr.push(pair(entry));\n        return index;\n      }\n      case OBJECT: {\n        if (type) {\n          switch (type) {\n            case 'BigInt':\n              return as([type, value.toString()], value);\n            case 'Boolean':\n            case 'Number':\n            case 'String':\n              return as([type, value.valueOf()], value);\n          }\n        }\n\n        if (json && ('toJSON' in value))\n          return pair(value.toJSON());\n\n        const entries = [];\n        const index = as([TYPE, entries], value);\n        for (const key of keys(value)) {\n          if (strict || !shouldSkip(typeOf(value[key])))\n            entries.push([pair(key), pair(value[key])]);\n        }\n        return index;\n      }\n      case DATE:\n        return as([TYPE, value.toISOString()], value);\n      case REGEXP: {\n        const {source, flags} = value;\n        return as([TYPE, {source, flags}], value);\n      }\n      case MAP: {\n        const entries = [];\n        const index = as([TYPE, entries], value);\n        for (const [key, entry] of value) {\n          if (strict || !(shouldSkip(typeOf(key)) || shouldSkip(typeOf(entry))))\n            entries.push([pair(key), pair(entry)]);\n        }\n        return index;\n      }\n      case SET: {\n        const entries = [];\n        const index = as([TYPE, entries], value);\n        for (const entry of value) {\n          if (strict || !shouldSkip(typeOf(entry)))\n            entries.push(pair(entry));\n        }\n        return index;\n      }\n    }\n\n    const {message} = value;\n    return as([TYPE, {name: type, message}], value);\n  };\n\n  return pair;\n};\n\n/**\n * @typedef {Array<string,any>} Record a type representation\n */\n\n/**\n * Returns an array of serialized Records.\n * @param {any} value a serializable value.\n * @param {{json?: boolean, lossy?: boolean}?} options an object with a `lossy` or `json` property that,\n *  if `true`, will not throw errors on incompatible types, and behave more\n *  like JSON stringify would behave. Symbol and Function will be discarded.\n * @returns {Record[]}\n */\n export const serialize = (value, {json, lossy} = {}) => {\n  const _ = [];\n  return serializer(!(json || lossy), !!json, new Map, _)(value), _;\n};\n","import {deserialize} from './deserialize.js';\nimport {serialize} from './serialize.js';\n\n/**\n * @typedef {Array<string,any>} Record a type representation\n */\n\n/**\n * Returns an array of serialized Records.\n * @param {any} any a serializable value.\n * @param {{transfer?: any[], json?: boolean, lossy?: boolean}?} options an object with\n * a transfer option (ignored when polyfilled) and/or non standard fields that\n * fallback to the polyfill if present.\n * @returns {Record[]}\n */\nexport default typeof structuredClone === \"function\" ?\n  /* c8 ignore start */\n  (any, options) => (\n    options && ('json' in options || 'lossy' in options) ?\n      deserialize(serialize(any, options)) : structuredClone(any)\n  ) :\n  (any, options) => deserialize(serialize(any, options));\n  /* c8 ignore stop */\n\nexport {deserialize, serialize};\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n *\n * @typedef {import('./state.js').State} State\n */\n\n/**\n * @callback FootnoteBackContentTemplate\n *   Generate content for the backreference dynamically.\n *\n *   For the following markdown:\n *\n *   ```markdown\n *   Alpha[^micromark], bravo[^micromark], and charlie[^remark].\n *\n *   [^remark]: things about remark\n *   [^micromark]: things about micromark\n *   ```\n *\n *   This function will be called with:\n *\n *   *  `0` and `0` for the backreference from `things about micromark` to\n *      `alpha`, as it is the first used definition, and the first call to it\n *   *  `0` and `1` for the backreference from `things about micromark` to\n *      `bravo`, as it is the first used definition, and the second call to it\n *   *  `1` and `0` for the backreference from `things about remark` to\n *      `charlie`, as it is the second used definition\n * @param {number} referenceIndex\n *   Index of the definition in the order that they are first referenced,\n *   0-indexed.\n * @param {number} rereferenceIndex\n *   Index of calls to the same definition, 0-indexed.\n * @returns {Array<ElementContent> | ElementContent | string}\n *   Content for the backreference when linking back from definitions to their\n *   reference.\n *\n * @callback FootnoteBackLabelTemplate\n *   Generate a back label dynamically.\n *\n *   For the following markdown:\n *\n *   ```markdown\n *   Alpha[^micromark], bravo[^micromark], and charlie[^remark].\n *\n *   [^remark]: things about remark\n *   [^micromark]: things about micromark\n *   ```\n *\n *   This function will be called with:\n *\n *   *  `0` and `0` for the backreference from `things about micromark` to\n *      `alpha`, as it is the first used definition, and the first call to it\n *   *  `0` and `1` for the backreference from `things about micromark` to\n *      `bravo`, as it is the first used definition, and the second call to it\n *   *  `1` and `0` for the backreference from `things about remark` to\n *      `charlie`, as it is the second used definition\n * @param {number} referenceIndex\n *   Index of the definition in the order that they are first referenced,\n *   0-indexed.\n * @param {number} rereferenceIndex\n *   Index of calls to the same definition, 0-indexed.\n * @returns {string}\n *   Back label to use when linking back from definitions to their reference.\n */\n\nimport structuredClone from '@ungap/structured-clone'\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Generate the default content that GitHub uses on backreferences.\n *\n * @param {number} _\n *   Index of the definition in the order that they are first referenced,\n *   0-indexed.\n * @param {number} rereferenceIndex\n *   Index of calls to the same definition, 0-indexed.\n * @returns {Array<ElementContent>}\n *   Content.\n */\nexport function defaultFootnoteBackContent(_, rereferenceIndex) {\n  /** @type {Array<ElementContent>} */\n  const result = [{type: 'text', value: '↩'}]\n\n  if (rereferenceIndex > 1) {\n    result.push({\n      type: 'element',\n      tagName: 'sup',\n      properties: {},\n      children: [{type: 'text', value: String(rereferenceIndex)}]\n    })\n  }\n\n  return result\n}\n\n/**\n * Generate the default label that GitHub uses on backreferences.\n *\n * @param {number} referenceIndex\n *   Index of the definition in the order that they are first referenced,\n *   0-indexed.\n * @param {number} rereferenceIndex\n *   Index of calls to the same definition, 0-indexed.\n * @returns {string}\n *   Label.\n */\nexport function defaultFootnoteBackLabel(referenceIndex, rereferenceIndex) {\n  return (\n    'Back to reference ' +\n    (referenceIndex + 1) +\n    (rereferenceIndex > 1 ? '-' + rereferenceIndex : '')\n  )\n}\n\n/**\n * Generate a hast footer for called footnote definitions.\n *\n * @param {State} state\n *   Info passed around.\n * @returns {Element | undefined}\n *   `section` element or `undefined`.\n */\n// eslint-disable-next-line complexity\nexport function footer(state) {\n  const clobberPrefix =\n    typeof state.options.clobberPrefix === 'string'\n      ? state.options.clobberPrefix\n      : 'user-content-'\n  const footnoteBackContent =\n    state.options.footnoteBackContent || defaultFootnoteBackContent\n  const footnoteBackLabel =\n    state.options.footnoteBackLabel || defaultFootnoteBackLabel\n  const footnoteLabel = state.options.footnoteLabel || 'Footnotes'\n  const footnoteLabelTagName = state.options.footnoteLabelTagName || 'h2'\n  const footnoteLabelProperties = state.options.footnoteLabelProperties || {\n    className: ['sr-only']\n  }\n  /** @type {Array<ElementContent>} */\n  const listItems = []\n  let referenceIndex = -1\n\n  while (++referenceIndex < state.footnoteOrder.length) {\n    const def = state.footnoteById.get(state.footnoteOrder[referenceIndex])\n\n    if (!def) {\n      continue\n    }\n\n    const content = state.all(def)\n    const id = String(def.identifier).toUpperCase()\n    const safeId = normalizeUri(id.toLowerCase())\n    let rereferenceIndex = 0\n    /** @type {Array<ElementContent>} */\n    const backReferences = []\n    const counts = state.footnoteCounts.get(id)\n\n    // eslint-disable-next-line no-unmodified-loop-condition\n    while (counts !== undefined && ++rereferenceIndex <= counts) {\n      if (backReferences.length > 0) {\n        backReferences.push({type: 'text', value: ' '})\n      }\n\n      let children =\n        typeof footnoteBackContent === 'string'\n          ? footnoteBackContent\n          : footnoteBackContent(referenceIndex, rereferenceIndex)\n\n      if (typeof children === 'string') {\n        children = {type: 'text', value: children}\n      }\n\n      backReferences.push({\n        type: 'element',\n        tagName: 'a',\n        properties: {\n          href:\n            '#' +\n            clobberPrefix +\n            'fnref-' +\n            safeId +\n            (rereferenceIndex > 1 ? '-' + rereferenceIndex : ''),\n          dataFootnoteBackref: '',\n          ariaLabel:\n            typeof footnoteBackLabel === 'string'\n              ? footnoteBackLabel\n              : footnoteBackLabel(referenceIndex, rereferenceIndex),\n          className: ['data-footnote-backref']\n        },\n        children: Array.isArray(children) ? children : [children]\n      })\n    }\n\n    const tail = content[content.length - 1]\n\n    if (tail && tail.type === 'element' && tail.tagName === 'p') {\n      const tailTail = tail.children[tail.children.length - 1]\n      if (tailTail && tailTail.type === 'text') {\n        tailTail.value += ' '\n      } else {\n        tail.children.push({type: 'text', value: ' '})\n      }\n\n      tail.children.push(...backReferences)\n    } else {\n      content.push(...backReferences)\n    }\n\n    /** @type {Element} */\n    const listItem = {\n      type: 'element',\n      tagName: 'li',\n      properties: {id: clobberPrefix + 'fn-' + safeId},\n      children: state.wrap(content, true)\n    }\n\n    state.patch(def, listItem)\n\n    listItems.push(listItem)\n  }\n\n  if (listItems.length === 0) {\n    return\n  }\n\n  return {\n    type: 'element',\n    tagName: 'section',\n    properties: {dataFootnotes: true, className: ['footnotes']},\n    children: [\n      {\n        type: 'element',\n        tagName: footnoteLabelTagName,\n        properties: {\n          ...structuredClone(footnoteLabelProperties),\n          id: 'footnote-label'\n        },\n        children: [{type: 'text', value: footnoteLabel}]\n      },\n      {type: 'text', value: '\\n'},\n      {\n        type: 'element',\n        tagName: 'ol',\n        properties: {},\n        children: state.wrap(listItems, true)\n      },\n      {type: 'text', value: '\\n'}\n    ]\n  }\n}\n","import objectWithoutPropertiesLoose from \"./objectWithoutPropertiesLoose.js\";\nexport default function _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n  return target;\n}","export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n */\n\n/**\n * @template Fn\n * @template Fallback\n * @typedef {Fn extends (value: any) => value is infer Thing ? Thing : Fallback} Predicate\n */\n\n/**\n * @callback Check\n *   Check that an arbitrary value is a node.\n * @param {unknown} this\n *   The given context.\n * @param {unknown} [node]\n *   Anything (typically a node).\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean}\n *   Whether this is a node and passes a test.\n *\n * @typedef {Record<string, unknown> | Node} Props\n *   Object to check for equivalence.\n *\n *   Note: `Node` is included as it is common but is not indexable.\n *\n * @typedef {Array<Props | TestFunction | string> | Props | TestFunction | string | null | undefined} Test\n *   Check for an arbitrary node.\n *\n * @callback TestFunction\n *   Check if a node passes a test.\n * @param {unknown} this\n *   The given context.\n * @param {Node} node\n *   A node.\n * @param {number | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean | undefined | void}\n *   Whether this node passes the test.\n *\n *   Note: `void` is included until TS sees no return as `undefined`.\n */\n\n/**\n * Check if `node` is a `Node` and whether it passes the given test.\n *\n * @param {unknown} node\n *   Thing to check, typically `Node`.\n * @param {Test} test\n *   A check for a specific node.\n * @param {number | null | undefined} index\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} parent\n *   The node’s parent.\n * @param {unknown} context\n *   Context object (`this`) to pass to `test` functions.\n * @returns {boolean}\n *   Whether `node` is a node and passes a test.\n */\nexport const is =\n  // Note: overloads in JSDoc can’t yet use different `@template`s.\n  /**\n   * @type {(\n   *   (<Condition extends string>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & {type: Condition}) &\n   *   (<Condition extends Props>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Condition) &\n   *   (<Condition extends TestFunction>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Predicate<Condition, Node>) &\n   *   ((node?: null | undefined) => false) &\n   *   ((node: unknown, test?: null | undefined, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node) &\n   *   ((node: unknown, test?: Test, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => boolean)\n   * )}\n   */\n  (\n    /**\n     * @param {unknown} [node]\n     * @param {Test} [test]\n     * @param {number | null | undefined} [index]\n     * @param {Parent | null | undefined} [parent]\n     * @param {unknown} [context]\n     * @returns {boolean}\n     */\n    // eslint-disable-next-line max-params\n    function (node, test, index, parent, context) {\n      const check = convert(test)\n\n      if (\n        index !== undefined &&\n        index !== null &&\n        (typeof index !== 'number' ||\n          index < 0 ||\n          index === Number.POSITIVE_INFINITY)\n      ) {\n        throw new Error('Expected positive finite index')\n      }\n\n      if (\n        parent !== undefined &&\n        parent !== null &&\n        (!is(parent) || !parent.children)\n      ) {\n        throw new Error('Expected parent node')\n      }\n\n      if (\n        (parent === undefined || parent === null) !==\n        (index === undefined || index === null)\n      ) {\n        throw new Error('Expected both parent and index')\n      }\n\n      return looksLikeANode(node)\n        ? check.call(context, node, index, parent)\n        : false\n    }\n  )\n\n/**\n * Generate an assertion from a test.\n *\n * Useful if you’re going to test many nodes, for example when creating a\n * utility where something else passes a compatible test.\n *\n * The created function is a bit faster because it expects valid input only:\n * a `node`, `index`, and `parent`.\n *\n * @param {Test} test\n *   *   when nullish, checks if `node` is a `Node`.\n *   *   when `string`, works like passing `(node) => node.type === test`.\n *   *   when `function` checks if function passed the node is true.\n *   *   when `object`, checks that all keys in test are in node, and that they have (strictly) equal values.\n *   *   when `array`, checks if any one of the subtests pass.\n * @returns {Check}\n *   An assertion.\n */\nexport const convert =\n  // Note: overloads in JSDoc can’t yet use different `@template`s.\n  /**\n   * @type {(\n   *   (<Condition extends string>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & {type: Condition}) &\n   *   (<Condition extends Props>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Condition) &\n   *   (<Condition extends TestFunction>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Predicate<Condition, Node>) &\n   *   ((test?: null | undefined) => (node?: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node) &\n   *   ((test?: Test) => Check)\n   * )}\n   */\n  (\n    /**\n     * @param {Test} [test]\n     * @returns {Check}\n     */\n    function (test) {\n      if (test === null || test === undefined) {\n        return ok\n      }\n\n      if (typeof test === 'function') {\n        return castFactory(test)\n      }\n\n      if (typeof test === 'object') {\n        return Array.isArray(test) ? anyFactory(test) : propsFactory(test)\n      }\n\n      if (typeof test === 'string') {\n        return typeFactory(test)\n      }\n\n      throw new Error('Expected function, string, or object as test')\n    }\n  )\n\n/**\n * @param {Array<Props | TestFunction | string>} tests\n * @returns {Check}\n */\nfunction anyFactory(tests) {\n  /** @type {Array<Check>} */\n  const checks = []\n  let index = -1\n\n  while (++index < tests.length) {\n    checks[index] = convert(tests[index])\n  }\n\n  return castFactory(any)\n\n  /**\n   * @this {unknown}\n   * @type {TestFunction}\n   */\n  function any(...parameters) {\n    let index = -1\n\n    while (++index < checks.length) {\n      if (checks[index].apply(this, parameters)) return true\n    }\n\n    return false\n  }\n}\n\n/**\n * Turn an object into a test for a node with a certain fields.\n *\n * @param {Props} check\n * @returns {Check}\n */\nfunction propsFactory(check) {\n  const checkAsRecord = /** @type {Record<string, unknown>} */ (check)\n\n  return castFactory(all)\n\n  /**\n   * @param {Node} node\n   * @returns {boolean}\n   */\n  function all(node) {\n    const nodeAsRecord = /** @type {Record<string, unknown>} */ (\n      /** @type {unknown} */ (node)\n    )\n\n    /** @type {string} */\n    let key\n\n    for (key in check) {\n      if (nodeAsRecord[key] !== checkAsRecord[key]) return false\n    }\n\n    return true\n  }\n}\n\n/**\n * Turn a string into a test for a node with a certain type.\n *\n * @param {string} check\n * @returns {Check}\n */\nfunction typeFactory(check) {\n  return castFactory(type)\n\n  /**\n   * @param {Node} node\n   */\n  function type(node) {\n    return node && node.type === check\n  }\n}\n\n/**\n * Turn a custom test into a test for a node that passes that test.\n *\n * @param {TestFunction} testFunction\n * @returns {Check}\n */\nfunction castFactory(testFunction) {\n  return check\n\n  /**\n   * @this {unknown}\n   * @type {Check}\n   */\n  function check(value, index, parent) {\n    return Boolean(\n      looksLikeANode(value) &&\n        testFunction.call(\n          this,\n          value,\n          typeof index === 'number' ? index : undefined,\n          parent || undefined\n        )\n    )\n  }\n}\n\nfunction ok() {\n  return true\n}\n\n/**\n * @param {unknown} value\n * @returns {value is Node}\n */\nfunction looksLikeANode(value) {\n  return value !== null && typeof value === 'object' && 'type' in value\n}\n","/**\n * @typedef {import('unist').Node} UnistNode\n * @typedef {import('unist').Parent} UnistParent\n */\n\n/**\n * @typedef {Exclude<import('unist-util-is').Test, undefined> | undefined} Test\n *   Test from `unist-util-is`.\n *\n *   Note: we have remove and add `undefined`, because otherwise when generating\n *   automatic `.d.ts` files, TS tries to flatten paths from a local perspective,\n *   which doesn’t work when publishing on npm.\n */\n\n/**\n * @typedef {(\n *   Fn extends (value: any) => value is infer Thing\n *   ? Thing\n *   : Fallback\n * )} Predicate\n *   Get the value of a type guard `Fn`.\n * @template Fn\n *   Value; typically function that is a type guard (such as `(x): x is Y`).\n * @template Fallback\n *   Value to yield if `Fn` is not a type guard.\n */\n\n/**\n * @typedef {(\n *   Check extends null | undefined // No test.\n *   ? Value\n *   : Value extends {type: Check} // String (type) test.\n *   ? Value\n *   : Value extends Check // Partial test.\n *   ? Value\n *   : Check extends Function // Function test.\n *   ? Predicate<Check, Value> extends Value\n *     ? Predicate<Check, Value>\n *     : never\n *   : never // Some other test?\n * )} MatchesOne\n *   Check whether a node matches a primitive check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test, but not arrays.\n */\n\n/**\n * @typedef {(\n *   Check extends Array<any>\n *   ? MatchesOne<Value, Check[keyof Check]>\n *   : MatchesOne<Value, Check>\n * )} Matches\n *   Check whether a node matches a check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test.\n */\n\n/**\n * @typedef {0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10} Uint\n *   Number; capped reasonably.\n */\n\n/**\n * @typedef {I extends 0 ? 1 : I extends 1 ? 2 : I extends 2 ? 3 : I extends 3 ? 4 : I extends 4 ? 5 : I extends 5 ? 6 : I extends 6 ? 7 : I extends 7 ? 8 : I extends 8 ? 9 : 10} Increment\n *   Increment a number in the type system.\n * @template {Uint} [I=0]\n *   Index.\n */\n\n/**\n * @typedef {(\n *   Node extends UnistParent\n *   ? Node extends {children: Array<infer Children>}\n *     ? Child extends Children ? Node : never\n *     : never\n *   : never\n * )} InternalParent\n *   Collect nodes that can be parents of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {InternalParent<InclusiveDescendant<Tree>, Child>} Parent\n *   Collect nodes in `Tree` that can be parents of `Child`.\n * @template {UnistNode} Tree\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {(\n *   Depth extends Max\n *   ? never\n *   :\n *     | InternalParent<Node, Child>\n *     | InternalAncestor<Node, InternalParent<Node, Child>, Max, Increment<Depth>>\n * )} InternalAncestor\n *   Collect nodes in `Tree` that can be ancestors of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @typedef {InternalAncestor<InclusiveDescendant<Tree>, Child>} Ancestor\n *   Collect nodes in `Tree` that can be ancestors of `Child`.\n * @template {UnistNode} Tree\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {(\n *   Tree extends UnistParent\n *     ? Depth extends Max\n *       ? Tree\n *       : Tree | InclusiveDescendant<Tree['children'][number], Max, Increment<Depth>>\n *     : Tree\n * )} InclusiveDescendant\n *   Collect all (inclusive) descendants of `Tree`.\n *\n *   > 👉 **Note**: for performance reasons, this seems to be the fastest way to\n *   > recurse without actually running into an infinite loop, which the\n *   > previous version did.\n *   >\n *   > Practically, a max of `2` is typically enough assuming a `Root` is\n *   > passed, but it doesn’t improve performance.\n *   > It gets higher with `List > ListItem > Table > TableRow > TableCell`.\n *   > Using up to `10` doesn’t hurt or help either.\n * @template {UnistNode} Tree\n *   Tree type.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @typedef {'skip' | boolean} Action\n *   Union of the action types.\n *\n * @typedef {number} Index\n *   Move to the sibling at `index` next (after node itself is completely\n *   traversed).\n *\n *   Useful if mutating the tree, such as removing the node the visitor is\n *   currently on, or any of its previous siblings.\n *   Results less than 0 or greater than or equal to `children.length` stop\n *   traversing the parent.\n *\n * @typedef {[(Action | null | undefined | void)?, (Index | null | undefined)?]} ActionTuple\n *   List with one or two values, the first an action, the second an index.\n *\n * @typedef {Action | ActionTuple | Index | null | undefined | void} VisitorResult\n *   Any value that can be returned from a visitor.\n */\n\n/**\n * @callback Visitor\n *   Handle a node (matching `test`, if given).\n *\n *   Visitors are free to transform `node`.\n *   They can also transform the parent of node (the last of `ancestors`).\n *\n *   Replacing `node` itself, if `SKIP` is not returned, still causes its\n *   descendants to be walked (which is a bug).\n *\n *   When adding or removing previous siblings of `node` (or next siblings, in\n *   case of reverse), the `Visitor` should return a new `Index` to specify the\n *   sibling to traverse after `node` is traversed.\n *   Adding or removing next siblings of `node` (or previous siblings, in case\n *   of reverse) is handled as expected without needing to return a new `Index`.\n *\n *   Removing the children property of an ancestor still results in them being\n *   traversed.\n * @param {Visited} node\n *   Found node.\n * @param {Array<VisitedParents>} ancestors\n *   Ancestors of `node`.\n * @returns {VisitorResult}\n *   What to do next.\n *\n *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.\n *   An `Action` is treated as a tuple of `[Action]`.\n *\n *   Passing a tuple back only makes sense if the `Action` is `SKIP`.\n *   When the `Action` is `EXIT`, that action can be returned.\n *   When the `Action` is `CONTINUE`, `Index` can be returned.\n * @template {UnistNode} [Visited=UnistNode]\n *   Visited node type.\n * @template {UnistParent} [VisitedParents=UnistParent]\n *   Ancestor type.\n */\n\n/**\n * @typedef {Visitor<Matches<InclusiveDescendant<Tree>, Check>, Ancestor<Tree, Matches<InclusiveDescendant<Tree>, Check>>>} BuildVisitor\n *   Build a typed `Visitor` function from a tree and a test.\n *\n *   It will infer which values are passed as `node` and which as `parents`.\n * @template {UnistNode} [Tree=UnistNode]\n *   Tree type.\n * @template {Test} [Check=Test]\n *   Test type.\n */\n\nimport {convert} from 'unist-util-is'\nimport {color} from 'unist-util-visit-parents/do-not-use-color'\n\n/** @type {Readonly<ActionTuple>} */\nconst empty = []\n\n/**\n * Continue traversing as normal.\n */\nexport const CONTINUE = true\n\n/**\n * Stop traversing immediately.\n */\nexport const EXIT = false\n\n/**\n * Do not traverse this node’s children.\n */\nexport const SKIP = 'skip'\n\n/**\n * Visit nodes, with ancestral information.\n *\n * This algorithm performs *depth-first* *tree traversal* in *preorder*\n * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).\n *\n * You can choose for which nodes `visitor` is called by passing a `test`.\n * For complex tests, you should test yourself in `visitor`, as it will be\n * faster and will have improved type information.\n *\n * Walking the tree is an intensive task.\n * Make use of the return values of the visitor when possible.\n * Instead of walking a tree multiple times, walk it once, use `unist-util-is`\n * to check if a node matches, and then perform different operations.\n *\n * You can change the tree.\n * See `Visitor` for more info.\n *\n * @overload\n * @param {Tree} tree\n * @param {Check} check\n * @param {BuildVisitor<Tree, Check>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @overload\n * @param {Tree} tree\n * @param {BuildVisitor<Tree>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @param {UnistNode} tree\n *   Tree to traverse.\n * @param {Visitor | Test} test\n *   `unist-util-is`-compatible test\n * @param {Visitor | boolean | null | undefined} [visitor]\n *   Handle each node.\n * @param {boolean | null | undefined} [reverse]\n *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).\n * @returns {undefined}\n *   Nothing.\n *\n * @template {UnistNode} Tree\n *   Node type.\n * @template {Test} Check\n *   `unist-util-is`-compatible test.\n */\nexport function visitParents(tree, test, visitor, reverse) {\n  /** @type {Test} */\n  let check\n\n  if (typeof test === 'function' && typeof visitor !== 'function') {\n    reverse = visitor\n    // @ts-expect-error no visitor given, so `visitor` is test.\n    visitor = test\n  } else {\n    // @ts-expect-error visitor given, so `test` isn’t a visitor.\n    check = test\n  }\n\n  const is = convert(check)\n  const step = reverse ? -1 : 1\n\n  factory(tree, undefined, [])()\n\n  /**\n   * @param {UnistNode} node\n   * @param {number | undefined} index\n   * @param {Array<UnistParent>} parents\n   */\n  function factory(node, index, parents) {\n    const value = /** @type {Record<string, unknown>} */ (\n      node && typeof node === 'object' ? node : {}\n    )\n\n    if (typeof value.type === 'string') {\n      const name =\n        // `hast`\n        typeof value.tagName === 'string'\n          ? value.tagName\n          : // `xast`\n          typeof value.name === 'string'\n          ? value.name\n          : undefined\n\n      Object.defineProperty(visit, 'name', {\n        value:\n          'node (' + color(node.type + (name ? '<' + name + '>' : '')) + ')'\n      })\n    }\n\n    return visit\n\n    function visit() {\n      /** @type {Readonly<ActionTuple>} */\n      let result = empty\n      /** @type {Readonly<ActionTuple>} */\n      let subresult\n      /** @type {number} */\n      let offset\n      /** @type {Array<UnistParent>} */\n      let grandparents\n\n      if (!test || is(node, index, parents[parents.length - 1] || undefined)) {\n        // @ts-expect-error: `visitor` is now a visitor.\n        result = toResult(visitor(node, parents))\n\n        if (result[0] === EXIT) {\n          return result\n        }\n      }\n\n      if ('children' in node && node.children) {\n        const nodeAsParent = /** @type {UnistParent} */ (node)\n\n        if (nodeAsParent.children && result[0] !== SKIP) {\n          offset = (reverse ? nodeAsParent.children.length : -1) + step\n          grandparents = parents.concat(nodeAsParent)\n\n          while (offset > -1 && offset < nodeAsParent.children.length) {\n            const child = nodeAsParent.children[offset]\n\n            subresult = factory(child, offset, grandparents)()\n\n            if (subresult[0] === EXIT) {\n              return subresult\n            }\n\n            offset =\n              typeof subresult[1] === 'number' ? subresult[1] : offset + step\n          }\n        }\n      }\n\n      return result\n    }\n  }\n}\n\n/**\n * Turn a return value into a clean result.\n *\n * @param {VisitorResult} value\n *   Valid return values from visitors.\n * @returns {Readonly<ActionTuple>}\n *   Clean result.\n */\nfunction toResult(value) {\n  if (Array.isArray(value)) {\n    return value\n  }\n\n  if (typeof value === 'number') {\n    return [CONTINUE, value]\n  }\n\n  return value === null || value === undefined ? empty : [value]\n}\n","/**\n * @typedef {import('unist').Node} UnistNode\n * @typedef {import('unist').Parent} UnistParent\n * @typedef {import('unist-util-visit-parents').VisitorResult} VisitorResult\n */\n\n/**\n * @typedef {Exclude<import('unist-util-is').Test, undefined> | undefined} Test\n *   Test from `unist-util-is`.\n *\n *   Note: we have remove and add `undefined`, because otherwise when generating\n *   automatic `.d.ts` files, TS tries to flatten paths from a local perspective,\n *   which doesn’t work when publishing on npm.\n */\n\n// To do: use types from `unist-util-visit-parents` when it’s released.\n\n/**\n * @typedef {(\n *   Fn extends (value: any) => value is infer Thing\n *   ? Thing\n *   : Fallback\n * )} Predicate\n *   Get the value of a type guard `Fn`.\n * @template Fn\n *   Value; typically function that is a type guard (such as `(x): x is Y`).\n * @template Fallback\n *   Value to yield if `Fn` is not a type guard.\n */\n\n/**\n * @typedef {(\n *   Check extends null | undefined // No test.\n *   ? Value\n *   : Value extends {type: Check} // String (type) test.\n *   ? Value\n *   : Value extends Check // Partial test.\n *   ? Value\n *   : Check extends Function // Function test.\n *   ? Predicate<Check, Value> extends Value\n *     ? Predicate<Check, Value>\n *     : never\n *   : never // Some other test?\n * )} MatchesOne\n *   Check whether a node matches a primitive check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test, but not arrays.\n */\n\n/**\n * @typedef {(\n *   Check extends Array<any>\n *   ? MatchesOne<Value, Check[keyof Check]>\n *   : MatchesOne<Value, Check>\n * )} Matches\n *   Check whether a node matches a check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test.\n */\n\n/**\n * @typedef {0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10} Uint\n *   Number; capped reasonably.\n */\n\n/**\n * @typedef {I extends 0 ? 1 : I extends 1 ? 2 : I extends 2 ? 3 : I extends 3 ? 4 : I extends 4 ? 5 : I extends 5 ? 6 : I extends 6 ? 7 : I extends 7 ? 8 : I extends 8 ? 9 : 10} Increment\n *   Increment a number in the type system.\n * @template {Uint} [I=0]\n *   Index.\n */\n\n/**\n * @typedef {(\n *   Node extends UnistParent\n *   ? Node extends {children: Array<infer Children>}\n *     ? Child extends Children ? Node : never\n *     : never\n *   : never\n * )} InternalParent\n *   Collect nodes that can be parents of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {InternalParent<InclusiveDescendant<Tree>, Child>} Parent\n *   Collect nodes in `Tree` that can be parents of `Child`.\n * @template {UnistNode} Tree\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {(\n *   Depth extends Max\n *   ? never\n *   :\n *     | InternalParent<Node, Child>\n *     | InternalAncestor<Node, InternalParent<Node, Child>, Max, Increment<Depth>>\n * )} InternalAncestor\n *   Collect nodes in `Tree` that can be ancestors of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @typedef {(\n *   Tree extends UnistParent\n *     ? Depth extends Max\n *       ? Tree\n *       : Tree | InclusiveDescendant<Tree['children'][number], Max, Increment<Depth>>\n *     : Tree\n * )} InclusiveDescendant\n *   Collect all (inclusive) descendants of `Tree`.\n *\n *   > 👉 **Note**: for performance reasons, this seems to be the fastest way to\n *   > recurse without actually running into an infinite loop, which the\n *   > previous version did.\n *   >\n *   > Practically, a max of `2` is typically enough assuming a `Root` is\n *   > passed, but it doesn’t improve performance.\n *   > It gets higher with `List > ListItem > Table > TableRow > TableCell`.\n *   > Using up to `10` doesn’t hurt or help either.\n * @template {UnistNode} Tree\n *   Tree type.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @callback Visitor\n *   Handle a node (matching `test`, if given).\n *\n *   Visitors are free to transform `node`.\n *   They can also transform `parent`.\n *\n *   Replacing `node` itself, if `SKIP` is not returned, still causes its\n *   descendants to be walked (which is a bug).\n *\n *   When adding or removing previous siblings of `node` (or next siblings, in\n *   case of reverse), the `Visitor` should return a new `Index` to specify the\n *   sibling to traverse after `node` is traversed.\n *   Adding or removing next siblings of `node` (or previous siblings, in case\n *   of reverse) is handled as expected without needing to return a new `Index`.\n *\n *   Removing the children property of `parent` still results in them being\n *   traversed.\n * @param {Visited} node\n *   Found node.\n * @param {Visited extends UnistNode ? number | undefined : never} index\n *   Index of `node` in `parent`.\n * @param {Ancestor extends UnistParent ? Ancestor | undefined : never} parent\n *   Parent of `node`.\n * @returns {VisitorResult}\n *   What to do next.\n *\n *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.\n *   An `Action` is treated as a tuple of `[Action]`.\n *\n *   Passing a tuple back only makes sense if the `Action` is `SKIP`.\n *   When the `Action` is `EXIT`, that action can be returned.\n *   When the `Action` is `CONTINUE`, `Index` can be returned.\n * @template {UnistNode} [Visited=UnistNode]\n *   Visited node type.\n * @template {UnistParent} [Ancestor=UnistParent]\n *   Ancestor type.\n */\n\n/**\n * @typedef {Visitor<Visited, Parent<Ancestor, Visited>>} BuildVisitorFromMatch\n *   Build a typed `Visitor` function from a node and all possible parents.\n *\n *   It will infer which values are passed as `node` and which as `parent`.\n * @template {UnistNode} Visited\n *   Node type.\n * @template {UnistParent} Ancestor\n *   Parent type.\n */\n\n/**\n * @typedef {(\n *   BuildVisitorFromMatch<\n *     Matches<Descendant, Check>,\n *     Extract<Descendant, UnistParent>\n *   >\n * )} BuildVisitorFromDescendants\n *   Build a typed `Visitor` function from a list of descendants and a test.\n *\n *   It will infer which values are passed as `node` and which as `parent`.\n * @template {UnistNode} Descendant\n *   Node type.\n * @template {Test} Check\n *   Test type.\n */\n\n/**\n * @typedef {(\n *   BuildVisitorFromDescendants<\n *     InclusiveDescendant<Tree>,\n *     Check\n *   >\n * )} BuildVisitor\n *   Build a typed `Visitor` function from a tree and a test.\n *\n *   It will infer which values are passed as `node` and which as `parent`.\n * @template {UnistNode} [Tree=UnistNode]\n *   Node type.\n * @template {Test} [Check=Test]\n *   Test type.\n */\n\nimport {visitParents} from 'unist-util-visit-parents'\n\nexport {CONTINUE, EXIT, SKIP} from 'unist-util-visit-parents'\n\n/**\n * Visit nodes.\n *\n * This algorithm performs *depth-first* *tree traversal* in *preorder*\n * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).\n *\n * You can choose for which nodes `visitor` is called by passing a `test`.\n * For complex tests, you should test yourself in `visitor`, as it will be\n * faster and will have improved type information.\n *\n * Walking the tree is an intensive task.\n * Make use of the return values of the visitor when possible.\n * Instead of walking a tree multiple times, walk it once, use `unist-util-is`\n * to check if a node matches, and then perform different operations.\n *\n * You can change the tree.\n * See `Visitor` for more info.\n *\n * @overload\n * @param {Tree} tree\n * @param {Check} check\n * @param {BuildVisitor<Tree, Check>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @overload\n * @param {Tree} tree\n * @param {BuildVisitor<Tree>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @param {UnistNode} tree\n *   Tree to traverse.\n * @param {Visitor | Test} testOrVisitor\n *   `unist-util-is`-compatible test (optional, omit to pass a visitor).\n * @param {Visitor | boolean | null | undefined} [visitorOrReverse]\n *   Handle each node (when test is omitted, pass `reverse`).\n * @param {boolean | null | undefined} [maybeReverse=false]\n *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).\n * @returns {undefined}\n *   Nothing.\n *\n * @template {UnistNode} Tree\n *   Node type.\n * @template {Test} Check\n *   `unist-util-is`-compatible test.\n */\nexport function visit(tree, testOrVisitor, visitorOrReverse, maybeReverse) {\n  /** @type {boolean | null | undefined} */\n  let reverse\n  /** @type {Test} */\n  let test\n  /** @type {Visitor} */\n  let visitor\n\n  if (\n    typeof testOrVisitor === 'function' &&\n    typeof visitorOrReverse !== 'function'\n  ) {\n    test = undefined\n    visitor = testOrVisitor\n    reverse = visitorOrReverse\n  } else {\n    // @ts-expect-error: assume the overload with test was given.\n    test = testOrVisitor\n    // @ts-expect-error: assume the overload with test was given.\n    visitor = visitorOrReverse\n    reverse = maybeReverse\n  }\n\n  visitParents(tree, test, overload, reverse)\n\n  /**\n   * @param {UnistNode} node\n   * @param {Array<UnistParent>} parents\n   */\n  function overload(node, parents) {\n    const parent = parents[parents.length - 1]\n    const index = parent ? parent.children.indexOf(node) : undefined\n    return visitor(node, index, parent)\n  }\n}\n","/**\n * @typedef {import('hast').ElementContent} ElementContent\n *\n * @typedef {import('mdast').Nodes} Nodes\n * @typedef {import('mdast').Reference} Reference\n *\n * @typedef {import('./state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Return the content of a reference without definition as plain text.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Extract<Nodes, Reference>} node\n *   Reference node (image, link).\n * @returns {Array<ElementContent>}\n *   hast content.\n */\nexport function revert(state, node) {\n  const subtype = node.referenceType\n  let suffix = ']'\n\n  if (subtype === 'collapsed') {\n    suffix += '[]'\n  } else if (subtype === 'full') {\n    suffix += '[' + (node.label || node.identifier) + ']'\n  }\n\n  if (node.type === 'imageReference') {\n    return [{type: 'text', value: '![' + node.alt + suffix}]\n  }\n\n  const contents = state.all(node)\n  const head = contents[0]\n\n  if (head && head.type === 'text') {\n    head.value = '[' + head.value\n  } else {\n    contents.unshift({type: 'text', value: '['})\n  }\n\n  const tail = contents[contents.length - 1]\n\n  if (tail && tail.type === 'text') {\n    tail.value += suffix\n  } else {\n    contents.push({type: 'text', value: suffix})\n  }\n\n  return contents\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `listItem` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {ListItem} node\n *   mdast node.\n * @param {Parents | undefined} parent\n *   Parent of `node`.\n * @returns {Element}\n *   hast node.\n */\nexport function listItem(state, node, parent) {\n  const results = state.all(node)\n  const loose = parent ? listLoose(parent) : listItemLoose(node)\n  /** @type {Properties} */\n  const properties = {}\n  /** @type {Array<ElementContent>} */\n  const children = []\n\n  if (typeof node.checked === 'boolean') {\n    const head = results[0]\n    /** @type {Element} */\n    let paragraph\n\n    if (head && head.type === 'element' && head.tagName === 'p') {\n      paragraph = head\n    } else {\n      paragraph = {type: 'element', tagName: 'p', properties: {}, children: []}\n      results.unshift(paragraph)\n    }\n\n    if (paragraph.children.length > 0) {\n      paragraph.children.unshift({type: 'text', value: ' '})\n    }\n\n    paragraph.children.unshift({\n      type: 'element',\n      tagName: 'input',\n      properties: {type: 'checkbox', checked: node.checked, disabled: true},\n      children: []\n    })\n\n    // According to github-markdown-css, this class hides bullet.\n    // See: <https://github.com/sindresorhus/github-markdown-css>.\n    properties.className = ['task-list-item']\n  }\n\n  let index = -1\n\n  while (++index < results.length) {\n    const child = results[index]\n\n    // Add eols before nodes, except if this is a loose, first paragraph.\n    if (\n      loose ||\n      index !== 0 ||\n      child.type !== 'element' ||\n      child.tagName !== 'p'\n    ) {\n      children.push({type: 'text', value: '\\n'})\n    }\n\n    if (child.type === 'element' && child.tagName === 'p' && !loose) {\n      children.push(...child.children)\n    } else {\n      children.push(child)\n    }\n  }\n\n  const tail = results[results.length - 1]\n\n  // Add a final eol.\n  if (tail && (loose || tail.type !== 'element' || tail.tagName !== 'p')) {\n    children.push({type: 'text', value: '\\n'})\n  }\n\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'li', properties, children}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n\n/**\n * @param {Parents} node\n * @return {Boolean}\n */\nfunction listLoose(node) {\n  let loose = false\n  if (node.type === 'list') {\n    loose = node.spread || false\n    const children = node.children\n    let index = -1\n\n    while (!loose && ++index < children.length) {\n      loose = listItemLoose(children[index])\n    }\n  }\n\n  return loose\n}\n\n/**\n * @param {ListItem} node\n * @return {Boolean}\n */\nfunction listItemLoose(node) {\n  const spread = node.spread\n\n  return spread === null || spread === undefined\n    ? node.children.length > 1\n    : spread\n}\n","const tab = 9 /* `\\t` */\nconst space = 32 /* ` ` */\n\n/**\n * Remove initial and final spaces and tabs at the line breaks in `value`.\n * Does not trim initial and final spaces and tabs of the value itself.\n *\n * @param {string} value\n *   Value to trim.\n * @returns {string}\n *   Trimmed value.\n */\nexport function trimLines(value) {\n  const source = String(value)\n  const search = /\\r?\\n|\\r/g\n  let match = search.exec(source)\n  let last = 0\n  /** @type {Array<string>} */\n  const lines = []\n\n  while (match) {\n    lines.push(\n      trimLine(source.slice(last, match.index), last > 0, true),\n      match[0]\n    )\n\n    last = match.index + match[0].length\n    match = search.exec(source)\n  }\n\n  lines.push(trimLine(source.slice(last), last > 0, false))\n\n  return lines.join('')\n}\n\n/**\n * @param {string} value\n *   Line to trim.\n * @param {boolean} start\n *   Whether to trim the start of the line.\n * @param {boolean} end\n *   Whether to trim the end of the line.\n * @returns {string}\n *   Trimmed line.\n */\nfunction trimLine(value, start, end) {\n  let startIndex = 0\n  let endIndex = value.length\n\n  if (start) {\n    let code = value.codePointAt(startIndex)\n\n    while (code === tab || code === space) {\n      startIndex++\n      code = value.codePointAt(startIndex)\n    }\n  }\n\n  if (end) {\n    let code = value.codePointAt(endIndex - 1)\n\n    while (code === tab || code === space) {\n      endIndex--\n      code = value.codePointAt(endIndex - 1)\n    }\n  }\n\n  return endIndex > startIndex ? value.slice(startIndex, endIndex) : ''\n}\n","import {blockquote} from './blockquote.js'\nimport {hardBreak} from './break.js'\nimport {code} from './code.js'\nimport {strikethrough} from './delete.js'\nimport {emphasis} from './emphasis.js'\nimport {footnoteReference} from './footnote-reference.js'\nimport {heading} from './heading.js'\nimport {html} from './html.js'\nimport {imageReference} from './image-reference.js'\nimport {image} from './image.js'\nimport {inlineCode} from './inline-code.js'\nimport {linkReference} from './link-reference.js'\nimport {link} from './link.js'\nimport {listItem} from './list-item.js'\nimport {list} from './list.js'\nimport {paragraph} from './paragraph.js'\nimport {root} from './root.js'\nimport {strong} from './strong.js'\nimport {table} from './table.js'\nimport {tableRow} from './table-row.js'\nimport {tableCell} from './table-cell.js'\nimport {text} from './text.js'\nimport {thematicBreak} from './thematic-break.js'\n\n/**\n * Default handlers for nodes.\n *\n * @satisfies {import('../state.js').Handlers}\n */\nexport const handlers = {\n  blockquote,\n  break: hardBreak,\n  code,\n  delete: strikethrough,\n  emphasis,\n  footnoteReference,\n  heading,\n  html,\n  imageReference,\n  image,\n  inlineCode,\n  linkReference,\n  link,\n  listItem,\n  list,\n  paragraph,\n  // @ts-expect-error: root is different, but hard to type.\n  root,\n  strong,\n  table,\n  tableCell,\n  tableRow,\n  text,\n  thematicBreak,\n  toml: ignore,\n  yaml: ignore,\n  definition: ignore,\n  footnoteDefinition: ignore\n}\n\n// Return nothing for nodes that are ignored.\nfunction ignore() {\n  return undefined\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Blockquote} Blockquote\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `blockquote` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Blockquote} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function blockquote(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'blockquote',\n    properties: {},\n    children: state.wrap(state.all(node), true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Text} Text\n * @typedef {import('mdast').Break} Break\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `break` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Break} node\n *   mdast node.\n * @returns {Array<Element | Text>}\n *   hast element content.\n */\nexport function hardBreak(state, node) {\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'br', properties: {}, children: []}\n  state.patch(node, result)\n  return [state.applyData(node, result), {type: 'text', value: '\\n'}]\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Code} Code\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `code` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Code} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function code(state, node) {\n  const value = node.value ? node.value + '\\n' : ''\n  /** @type {Properties} */\n  const properties = {}\n\n  if (node.lang) {\n    properties.className = ['language-' + node.lang]\n  }\n\n  // Create `<code>`.\n  /** @type {Element} */\n  let result = {\n    type: 'element',\n    tagName: 'code',\n    properties,\n    children: [{type: 'text', value}]\n  }\n\n  if (node.meta) {\n    result.data = {meta: node.meta}\n  }\n\n  state.patch(node, result)\n  result = state.applyData(node, result)\n\n  // Create `<pre>`.\n  result = {type: 'element', tagName: 'pre', properties: {}, children: [result]}\n  state.patch(node, result)\n  return result\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Delete} Delete\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `delete` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Delete} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function strikethrough(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'del',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Emphasis} Emphasis\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `emphasis` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Emphasis} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function emphasis(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'em',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').FootnoteReference} FootnoteReference\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Turn an mdast `footnoteReference` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {FootnoteReference} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function footnoteReference(state, node) {\n  const clobberPrefix =\n    typeof state.options.clobberPrefix === 'string'\n      ? state.options.clobberPrefix\n      : 'user-content-'\n  const id = String(node.identifier).toUpperCase()\n  const safeId = normalizeUri(id.toLowerCase())\n  const index = state.footnoteOrder.indexOf(id)\n  /** @type {number} */\n  let counter\n\n  let reuseCounter = state.footnoteCounts.get(id)\n\n  if (reuseCounter === undefined) {\n    reuseCounter = 0\n    state.footnoteOrder.push(id)\n    counter = state.footnoteOrder.length\n  } else {\n    counter = index + 1\n  }\n\n  reuseCounter += 1\n  state.footnoteCounts.set(id, reuseCounter)\n\n  /** @type {Element} */\n  const link = {\n    type: 'element',\n    tagName: 'a',\n    properties: {\n      href: '#' + clobberPrefix + 'fn-' + safeId,\n      id:\n        clobberPrefix +\n        'fnref-' +\n        safeId +\n        (reuseCounter > 1 ? '-' + reuseCounter : ''),\n      dataFootnoteRef: true,\n      ariaDescribedBy: ['footnote-label']\n    },\n    children: [{type: 'text', value: String(counter)}]\n  }\n  state.patch(node, link)\n\n  /** @type {Element} */\n  const sup = {\n    type: 'element',\n    tagName: 'sup',\n    properties: {},\n    children: [link]\n  }\n  state.patch(node, sup)\n  return state.applyData(node, sup)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Heading} Heading\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `heading` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Heading} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function heading(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'h' + node.depth,\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Html} Html\n * @typedef {import('../state.js').State} State\n * @typedef {import('../../index.js').Raw} Raw\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `html` node into hast (`raw` node in dangerous mode, otherwise\n * nothing).\n *\n * @param {State} state\n *   Info passed around.\n * @param {Html} node\n *   mdast node.\n * @returns {Element | Raw | undefined}\n *   hast node.\n */\nexport function html(state, node) {\n  if (state.options.allowDangerousHtml) {\n    /** @type {Raw} */\n    const result = {type: 'raw', value: node.value}\n    state.patch(node, result)\n    return state.applyData(node, result)\n  }\n\n  return undefined\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').ImageReference} ImageReference\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\nimport {revert} from '../revert.js'\n\n/**\n * Turn an mdast `imageReference` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {ImageReference} node\n *   mdast node.\n * @returns {Array<ElementContent> | ElementContent}\n *   hast node.\n */\nexport function imageReference(state, node) {\n  const id = String(node.identifier).toUpperCase()\n  const def = state.definitionById.get(id)\n\n  if (!def) {\n    return revert(state, node)\n  }\n\n  /** @type {Properties} */\n  const properties = {src: normalizeUri(def.url || ''), alt: node.alt}\n\n  if (def.title !== null && def.title !== undefined) {\n    properties.title = def.title\n  }\n\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'img', properties, children: []}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Image} Image\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Turn an mdast `image` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Image} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function image(state, node) {\n  /** @type {Properties} */\n  const properties = {src: normalizeUri(node.url)}\n\n  if (node.alt !== null && node.alt !== undefined) {\n    properties.alt = node.alt\n  }\n\n  if (node.title !== null && node.title !== undefined) {\n    properties.title = node.title\n  }\n\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'img', properties, children: []}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Text} Text\n * @typedef {import('mdast').InlineCode} InlineCode\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `inlineCode` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {InlineCode} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function inlineCode(state, node) {\n  /** @type {Text} */\n  const text = {type: 'text', value: node.value.replace(/\\r?\\n|\\r/g, ' ')}\n  state.patch(node, text)\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'code',\n    properties: {},\n    children: [text]\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').LinkReference} LinkReference\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\nimport {revert} from '../revert.js'\n\n/**\n * Turn an mdast `linkReference` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {LinkReference} node\n *   mdast node.\n * @returns {Array<ElementContent> | ElementContent}\n *   hast node.\n */\nexport function linkReference(state, node) {\n  const id = String(node.identifier).toUpperCase()\n  const def = state.definitionById.get(id)\n\n  if (!def) {\n    return revert(state, node)\n  }\n\n  /** @type {Properties} */\n  const properties = {href: normalizeUri(def.url || '')}\n\n  if (def.title !== null && def.title !== undefined) {\n    properties.title = def.title\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'a',\n    properties,\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Link} Link\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Turn an mdast `link` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Link} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function link(state, node) {\n  /** @type {Properties} */\n  const properties = {href: normalizeUri(node.url)}\n\n  if (node.title !== null && node.title !== undefined) {\n    properties.title = node.title\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'a',\n    properties,\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').List} List\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `list` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {List} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function list(state, node) {\n  /** @type {Properties} */\n  const properties = {}\n  const results = state.all(node)\n  let index = -1\n\n  if (typeof node.start === 'number' && node.start !== 1) {\n    properties.start = node.start\n  }\n\n  // Like GitHub, add a class for custom styling.\n  while (++index < results.length) {\n    const child = results[index]\n\n    if (\n      child.type === 'element' &&\n      child.tagName === 'li' &&\n      child.properties &&\n      Array.isArray(child.properties.className) &&\n      child.properties.className.includes('task-list-item')\n    ) {\n      properties.className = ['contains-task-list']\n      break\n    }\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: node.ordered ? 'ol' : 'ul',\n    properties,\n    children: state.wrap(results, true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `paragraph` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Paragraph} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function paragraph(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'p',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Parents} HastParents\n * @typedef {import('hast').Root} HastRoot\n * @typedef {import('mdast').Root} MdastRoot\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `root` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastRoot} node\n *   mdast node.\n * @returns {HastParents}\n *   hast node.\n */\nexport function root(state, node) {\n  /** @type {HastRoot} */\n  const result = {type: 'root', children: state.wrap(state.all(node))}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Strong} Strong\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `strong` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Strong} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function strong(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'strong',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Table} Table\n * @typedef {import('../state.js').State} State\n */\n\nimport {pointEnd, pointStart} from 'unist-util-position'\n\n/**\n * Turn an mdast `table` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Table} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function table(state, node) {\n  const rows = state.all(node)\n  const firstRow = rows.shift()\n  /** @type {Array<Element>} */\n  const tableContent = []\n\n  if (firstRow) {\n    /** @type {Element} */\n    const head = {\n      type: 'element',\n      tagName: 'thead',\n      properties: {},\n      children: state.wrap([firstRow], true)\n    }\n    state.patch(node.children[0], head)\n    tableContent.push(head)\n  }\n\n  if (rows.length > 0) {\n    /** @type {Element} */\n    const body = {\n      type: 'element',\n      tagName: 'tbody',\n      properties: {},\n      children: state.wrap(rows, true)\n    }\n\n    const start = pointStart(node.children[1])\n    const end = pointEnd(node.children[node.children.length - 1])\n    if (start && end) body.position = {start, end}\n    tableContent.push(body)\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'table',\n    properties: {},\n    children: state.wrap(tableContent, true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').TableCell} TableCell\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `tableCell` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {TableCell} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function tableCell(state, node) {\n  // Note: this function is normally not called: see `table-row` for how rows\n  // and their cells are compiled.\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'td', // Assume body cell.\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('mdast').TableRow} TableRow\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `tableRow` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {TableRow} node\n *   mdast node.\n * @param {Parents | undefined} parent\n *   Parent of `node`.\n * @returns {Element}\n *   hast node.\n */\nexport function tableRow(state, node, parent) {\n  const siblings = parent ? parent.children : undefined\n  // Generate a body row when without parent.\n  const rowIndex = siblings ? siblings.indexOf(node) : 1\n  const tagName = rowIndex === 0 ? 'th' : 'td'\n  // To do: option to use `style`?\n  const align = parent && parent.type === 'table' ? parent.align : undefined\n  const length = align ? align.length : node.children.length\n  let cellIndex = -1\n  /** @type {Array<ElementContent>} */\n  const cells = []\n\n  while (++cellIndex < length) {\n    // Note: can also be undefined.\n    const cell = node.children[cellIndex]\n    /** @type {Properties} */\n    const properties = {}\n    const alignValue = align ? align[cellIndex] : undefined\n\n    if (alignValue) {\n      properties.align = alignValue\n    }\n\n    /** @type {Element} */\n    let result = {type: 'element', tagName, properties, children: []}\n\n    if (cell) {\n      result.children = state.all(cell)\n      state.patch(cell, result)\n      result = state.applyData(cell, result)\n    }\n\n    cells.push(result)\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'tr',\n    properties: {},\n    children: state.wrap(cells, true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} HastElement\n * @typedef {import('hast').Text} HastText\n * @typedef {import('mdast').Text} MdastText\n * @typedef {import('../state.js').State} State\n */\n\nimport {trimLines} from 'trim-lines'\n\n/**\n * Turn an mdast `text` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastText} node\n *   mdast node.\n * @returns {HastElement | HastText}\n *   hast node.\n */\nexport function text(state, node) {\n  /** @type {HastText} */\n  const result = {type: 'text', value: trimLines(String(node.value))}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').ThematicBreak} ThematicBreak\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `thematicBreak` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {ThematicBreak} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function thematicBreak(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'hr',\n    properties: {},\n    children: []\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} HastElement\n * @typedef {import('hast').ElementContent} HastElementContent\n * @typedef {import('hast').Nodes} HastNodes\n * @typedef {import('hast').Properties} HastProperties\n * @typedef {import('hast').RootContent} HastRootContent\n * @typedef {import('hast').Text} HastText\n *\n * @typedef {import('mdast').Definition} MdastDefinition\n * @typedef {import('mdast').FootnoteDefinition} MdastFootnoteDefinition\n * @typedef {import('mdast').Nodes} MdastNodes\n * @typedef {import('mdast').Parents} MdastParents\n *\n * @typedef {import('./footer.js').FootnoteBackContentTemplate} FootnoteBackContentTemplate\n * @typedef {import('./footer.js').FootnoteBackLabelTemplate} FootnoteBackLabelTemplate\n */\n\n/**\n * @callback Handler\n *   Handle a node.\n * @param {State} state\n *   Info passed around.\n * @param {any} node\n *   mdast node to handle.\n * @param {MdastParents | undefined} parent\n *   Parent of `node`.\n * @returns {Array<HastElementContent> | HastElementContent | undefined}\n *   hast node.\n *\n * @typedef {Partial<Record<MdastNodes['type'], Handler>>} Handlers\n *   Handle nodes.\n *\n * @typedef Options\n *   Configuration (optional).\n * @property {boolean | null | undefined} [allowDangerousHtml=false]\n *   Whether to persist raw HTML in markdown in the hast tree (default:\n *   `false`).\n * @property {string | null | undefined} [clobberPrefix='user-content-']\n *   Prefix to use before the `id` property on footnotes to prevent them from\n *   *clobbering* (default: `'user-content-'`).\n *\n *   Pass `''` for trusted markdown and when you are careful with\n *   polyfilling.\n *   You could pass a different prefix.\n *\n *   DOM clobbering is this:\n *\n *   ```html\n *   <p id=\"x\"></p>\n *   <script>alert(x) // `x` now refers to the `p#x` DOM element</script>\n *   ```\n *\n *   The above example shows that elements are made available by browsers, by\n *   their ID, on the `window` object.\n *   This is a security risk because you might be expecting some other variable\n *   at that place.\n *   It can also break polyfills.\n *   Using a prefix solves these problems.\n * @property {FootnoteBackContentTemplate | string | null | undefined} [footnoteBackContent]\n *   Content of the backreference back to references (default: `defaultFootnoteBackContent`).\n *\n *   The default value is:\n *\n *   ```js\n *   function defaultFootnoteBackContent(_, rereferenceIndex) {\n *     const result = [{type: 'text', value: '↩'}]\n *\n *     if (rereferenceIndex > 1) {\n *       result.push({\n *         type: 'element',\n *         tagName: 'sup',\n *         properties: {},\n *         children: [{type: 'text', value: String(rereferenceIndex)}]\n *       })\n *     }\n *\n *     return result\n *   }\n *   ```\n *\n *   This content is used in the `a` element of each backreference (the `↩`\n *   links).\n * @property {FootnoteBackLabelTemplate | string | null | undefined} [footnoteBackLabel]\n *   Label to describe the backreference back to references (default:\n *   `defaultFootnoteBackLabel`).\n *\n *   The default value is:\n *\n *   ```js\n *   function defaultFootnoteBackLabel(referenceIndex, rereferenceIndex) {\n *    return (\n *      'Back to reference ' +\n *      (referenceIndex + 1) +\n *      (rereferenceIndex > 1 ? '-' + rereferenceIndex : '')\n *    )\n *   }\n *   ```\n *\n *   Change it when the markdown is not in English.\n *\n *   This label is used in the `ariaLabel` property on each backreference\n *   (the `↩` links).\n *   It affects users of assistive technology.\n * @property {string | null | undefined} [footnoteLabel='Footnotes']\n *   Textual label to use for the footnotes section (default: `'Footnotes'`).\n *\n *   Change it when the markdown is not in English.\n *\n *   This label is typically hidden visually (assuming a `sr-only` CSS class\n *   is defined that does that) and so affects screen readers only.\n *   If you do have such a class, but want to show this section to everyone,\n *   pass different properties with the `footnoteLabelProperties` option.\n * @property {HastProperties | null | undefined} [footnoteLabelProperties={className: ['sr-only']}]\n *   Properties to use on the footnote label (default: `{className:\n *   ['sr-only']}`).\n *\n *   Change it to show the label and add other properties.\n *\n *   This label is typically hidden visually (assuming an `sr-only` CSS class\n *   is defined that does that) and so affects screen readers only.\n *   If you do have such a class, but want to show this section to everyone,\n *   pass an empty string.\n *   You can also add different properties.\n *\n *   > 👉 **Note**: `id: 'footnote-label'` is always added, because footnote\n *   > calls use it with `aria-describedby` to provide an accessible label.\n * @property {string | null | undefined} [footnoteLabelTagName='h2']\n *   HTML tag name to use for the footnote label element (default: `'h2'`).\n *\n *   Change it to match your document structure.\n *\n *   This label is typically hidden visually (assuming a `sr-only` CSS class\n *   is defined that does that) and so affects screen readers only.\n *   If you do have such a class, but want to show this section to everyone,\n *   pass different properties with the `footnoteLabelProperties` option.\n * @property {Handlers | null | undefined} [handlers]\n *   Extra handlers for nodes (optional).\n * @property {Array<MdastNodes['type']> | null | undefined} [passThrough]\n *   List of custom mdast node types to pass through (keep) in hast (note that\n *   the node itself is passed, but eventual children are transformed)\n *   (optional).\n * @property {Handler | null | undefined} [unknownHandler]\n *   Handler for all unknown nodes (optional).\n *\n * @typedef State\n *   Info passed around.\n * @property {(node: MdastNodes) => Array<HastElementContent>} all\n *   Transform the children of an mdast parent to hast.\n * @property {<Type extends HastNodes>(from: MdastNodes, to: Type) => HastElement | Type} applyData\n *   Honor the `data` of `from`, and generate an element instead of `node`.\n * @property {Map<string, MdastDefinition>} definitionById\n *   Definitions by their identifier.\n * @property {Map<string, MdastFootnoteDefinition>} footnoteById\n *   Footnote definitions by their identifier.\n * @property {Map<string, number>} footnoteCounts\n *   Counts for how often the same footnote was called.\n * @property {Array<string>} footnoteOrder\n *   Identifiers of order when footnote calls first appear in tree order.\n * @property {Handlers} handlers\n *   Applied handlers.\n * @property {(node: MdastNodes, parent: MdastParents | undefined) => Array<HastElementContent> | HastElementContent | undefined} one\n *   Transform an mdast node to hast.\n * @property {Options} options\n *   Configuration.\n * @property {(from: MdastNodes, node: HastNodes) => undefined} patch\n *   Copy a node’s positional info.\n * @property {<Type extends HastRootContent>(nodes: Array<Type>, loose?: boolean | undefined) => Array<HastText | Type>} wrap\n *   Wrap `nodes` with line endings between each node, adds initial/final line endings when `loose`.\n */\n\nimport structuredClone from '@ungap/structured-clone'\nimport {visit} from 'unist-util-visit'\nimport {position} from 'unist-util-position'\nimport {handlers as defaultHandlers} from './handlers/index.js'\n\nconst own = {}.hasOwnProperty\n\n/** @type {Options} */\nconst emptyOptions = {}\n\n/**\n * Create `state` from an mdast tree.\n *\n * @param {MdastNodes} tree\n *   mdast node to transform.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {State}\n *   `state` function.\n */\nexport function createState(tree, options) {\n  const settings = options || emptyOptions\n  /** @type {Map<string, MdastDefinition>} */\n  const definitionById = new Map()\n  /** @type {Map<string, MdastFootnoteDefinition>} */\n  const footnoteById = new Map()\n  /** @type {Map<string, number>} */\n  const footnoteCounts = new Map()\n  /** @type {Handlers} */\n  // @ts-expect-error: the root handler returns a root.\n  // Hard to type.\n  const handlers = {...defaultHandlers, ...settings.handlers}\n\n  /** @type {State} */\n  const state = {\n    all,\n    applyData,\n    definitionById,\n    footnoteById,\n    footnoteCounts,\n    footnoteOrder: [],\n    handlers,\n    one,\n    options: settings,\n    patch,\n    wrap\n  }\n\n  visit(tree, function (node) {\n    if (node.type === 'definition' || node.type === 'footnoteDefinition') {\n      const map = node.type === 'definition' ? definitionById : footnoteById\n      const id = String(node.identifier).toUpperCase()\n\n      // Mimick CM behavior of link definitions.\n      // See: <https://github.com/syntax-tree/mdast-util-definitions/blob/9032189/lib/index.js#L20-L21>.\n      if (!map.has(id)) {\n        // @ts-expect-error: node type matches map.\n        map.set(id, node)\n      }\n    }\n  })\n\n  return state\n\n  /**\n   * Transform an mdast node into a hast node.\n   *\n   * @param {MdastNodes} node\n   *   mdast node.\n   * @param {MdastParents | undefined} [parent]\n   *   Parent of `node`.\n   * @returns {Array<HastElementContent> | HastElementContent | undefined}\n   *   Resulting hast node.\n   */\n  function one(node, parent) {\n    const type = node.type\n    const handle = state.handlers[type]\n\n    if (own.call(state.handlers, type) && handle) {\n      return handle(state, node, parent)\n    }\n\n    if (state.options.passThrough && state.options.passThrough.includes(type)) {\n      if ('children' in node) {\n        const {children, ...shallow} = node\n        const result = structuredClone(shallow)\n        // @ts-expect-error: TS doesn’t understand…\n        result.children = state.all(node)\n        // @ts-expect-error: TS doesn’t understand…\n        return result\n      }\n\n      // @ts-expect-error: it’s custom.\n      return structuredClone(node)\n    }\n\n    const unknown = state.options.unknownHandler || defaultUnknownHandler\n\n    return unknown(state, node, parent)\n  }\n\n  /**\n   * Transform the children of an mdast node into hast nodes.\n   *\n   * @param {MdastNodes} parent\n   *   mdast node to compile\n   * @returns {Array<HastElementContent>}\n   *   Resulting hast nodes.\n   */\n  function all(parent) {\n    /** @type {Array<HastElementContent>} */\n    const values = []\n\n    if ('children' in parent) {\n      const nodes = parent.children\n      let index = -1\n      while (++index < nodes.length) {\n        const result = state.one(nodes[index], parent)\n\n        // To do: see if we van clean this? Can we merge texts?\n        if (result) {\n          if (index && nodes[index - 1].type === 'break') {\n            if (!Array.isArray(result) && result.type === 'text') {\n              result.value = trimMarkdownSpaceStart(result.value)\n            }\n\n            if (!Array.isArray(result) && result.type === 'element') {\n              const head = result.children[0]\n\n              if (head && head.type === 'text') {\n                head.value = trimMarkdownSpaceStart(head.value)\n              }\n            }\n          }\n\n          if (Array.isArray(result)) {\n            values.push(...result)\n          } else {\n            values.push(result)\n          }\n        }\n      }\n    }\n\n    return values\n  }\n}\n\n/**\n * Copy a node’s positional info.\n *\n * @param {MdastNodes} from\n *   mdast node to copy from.\n * @param {HastNodes} to\n *   hast node to copy into.\n * @returns {undefined}\n *   Nothing.\n */\nfunction patch(from, to) {\n  if (from.position) to.position = position(from)\n}\n\n/**\n * Honor the `data` of `from` and maybe generate an element instead of `to`.\n *\n * @template {HastNodes} Type\n *   Node type.\n * @param {MdastNodes} from\n *   mdast node to use data from.\n * @param {Type} to\n *   hast node to change.\n * @returns {HastElement | Type}\n *   Nothing.\n */\nfunction applyData(from, to) {\n  /** @type {HastElement | Type} */\n  let result = to\n\n  // Handle `data.hName`, `data.hProperties, `data.hChildren`.\n  if (from && from.data) {\n    const hName = from.data.hName\n    const hChildren = from.data.hChildren\n    const hProperties = from.data.hProperties\n\n    if (typeof hName === 'string') {\n      // Transforming the node resulted in an element with a different name\n      // than wanted:\n      if (result.type === 'element') {\n        result.tagName = hName\n      }\n      // Transforming the node resulted in a non-element, which happens for\n      // raw, text, and root nodes (unless custom handlers are passed).\n      // The intent of `hName` is to create an element, but likely also to keep\n      // the content around (otherwise: pass `hChildren`).\n      else {\n        /** @type {Array<HastElementContent>} */\n        // @ts-expect-error: assume no doctypes in `root`.\n        const children = 'children' in result ? result.children : [result]\n        result = {type: 'element', tagName: hName, properties: {}, children}\n      }\n    }\n\n    if (result.type === 'element' && hProperties) {\n      Object.assign(result.properties, structuredClone(hProperties))\n    }\n\n    if (\n      'children' in result &&\n      result.children &&\n      hChildren !== null &&\n      hChildren !== undefined\n    ) {\n      result.children = hChildren\n    }\n  }\n\n  return result\n}\n\n/**\n * Transform an unknown node.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastNodes} node\n *   Unknown mdast node.\n * @returns {HastElement | HastText}\n *   Resulting hast node.\n */\nfunction defaultUnknownHandler(state, node) {\n  const data = node.data || {}\n  /** @type {HastElement | HastText} */\n  const result =\n    'value' in node &&\n    !(own.call(data, 'hProperties') || own.call(data, 'hChildren'))\n      ? {type: 'text', value: node.value}\n      : {\n          type: 'element',\n          tagName: 'div',\n          properties: {},\n          children: state.all(node)\n        }\n\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n\n/**\n * Wrap `nodes` with line endings between each node.\n *\n * @template {HastRootContent} Type\n *   Node type.\n * @param {Array<Type>} nodes\n *   List of nodes to wrap.\n * @param {boolean | undefined} [loose=false]\n *   Whether to add line endings at start and end (default: `false`).\n * @returns {Array<HastText | Type>}\n *   Wrapped nodes.\n */\nexport function wrap(nodes, loose) {\n  /** @type {Array<HastText | Type>} */\n  const result = []\n  let index = -1\n\n  if (loose) {\n    result.push({type: 'text', value: '\\n'})\n  }\n\n  while (++index < nodes.length) {\n    if (index) result.push({type: 'text', value: '\\n'})\n    result.push(nodes[index])\n  }\n\n  if (loose && nodes.length > 0) {\n    result.push({type: 'text', value: '\\n'})\n  }\n\n  return result\n}\n\n/**\n * Trim spaces and tabs at the start of `value`.\n *\n * @param {string} value\n *   Value to trim.\n * @returns {string}\n *   Result.\n */\nfunction trimMarkdownSpaceStart(value) {\n  let index = 0\n  let code = value.charCodeAt(index)\n\n  while (code === 9 || code === 32) {\n    index++\n    code = value.charCodeAt(index)\n  }\n\n  return value.slice(index)\n}\n","/**\n * @typedef {import('hast').Nodes} HastNodes\n * @typedef {import('mdast').Nodes} MdastNodes\n * @typedef {import('./state.js').Options} Options\n */\n\nimport {ok as assert} from 'devlop'\nimport {footer} from './footer.js'\nimport {createState} from './state.js'\n\n/**\n * Transform mdast to hast.\n *\n * ##### Notes\n *\n * ###### HTML\n *\n * Raw HTML is available in mdast as `html` nodes and can be embedded in hast\n * as semistandard `raw` nodes.\n * Most utilities ignore `raw` nodes but two notable ones don’t:\n *\n * *   `hast-util-to-html` also has an option `allowDangerousHtml` which will\n *     output the raw HTML.\n *     This is typically discouraged as noted by the option name but is useful\n *     if you completely trust authors\n * *   `hast-util-raw` can handle the raw embedded HTML strings by parsing them\n *     into standard hast nodes (`element`, `text`, etc).\n *     This is a heavy task as it needs a full HTML parser, but it is the only\n *     way to support untrusted content\n *\n * ###### Footnotes\n *\n * Many options supported here relate to footnotes.\n * Footnotes are not specified by CommonMark, which we follow by default.\n * They are supported by GitHub, so footnotes can be enabled in markdown with\n * `mdast-util-gfm`.\n *\n * The options `footnoteBackLabel` and `footnoteLabel` define natural language\n * that explains footnotes, which is hidden for sighted users but shown to\n * assistive technology.\n * When your page is not in English, you must define translated values.\n *\n * Back references use ARIA attributes, but the section label itself uses a\n * heading that is hidden with an `sr-only` class.\n * To show it to sighted users, define different attributes in\n * `footnoteLabelProperties`.\n *\n * ###### Clobbering\n *\n * Footnotes introduces a problem, as it links footnote calls to footnote\n * definitions on the page through `id` attributes generated from user content,\n * which results in DOM clobbering.\n *\n * DOM clobbering is this:\n *\n * ```html\n * <p id=x></p>\n * <script>alert(x) // `x` now refers to the DOM `p#x` element</script>\n * ```\n *\n * Elements by their ID are made available by browsers on the `window` object,\n * which is a security risk.\n * Using a prefix solves this problem.\n *\n * More information on how to handle clobbering and the prefix is explained in\n * Example: headings (DOM clobbering) in `rehype-sanitize`.\n *\n * ###### Unknown nodes\n *\n * Unknown nodes are nodes with a type that isn’t in `handlers` or `passThrough`.\n * The default behavior for unknown nodes is:\n *\n * *   when the node has a `value` (and doesn’t have `data.hName`,\n *     `data.hProperties`, or `data.hChildren`, see later), create a hast `text`\n *     node\n * *   otherwise, create a `<div>` element (which could be changed with\n *     `data.hName`), with its children mapped from mdast to hast as well\n *\n * This behavior can be changed by passing an `unknownHandler`.\n *\n * @param {MdastNodes} tree\n *   mdast tree.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {HastNodes}\n *   hast tree.\n */\nexport function toHast(tree, options) {\n  const state = createState(tree, options)\n  const node = state.one(tree, undefined)\n  const foot = footer(state)\n  /** @type {HastNodes} */\n  const result = Array.isArray(node)\n    ? {type: 'root', children: node}\n    : node || {type: 'root', children: []}\n\n  if (foot) {\n    // If there’s a footer, there were definitions, meaning block\n    // content.\n    // So `result` is a parent node.\n    assert('children' in result)\n    result.children.push({type: 'text', value: '\\n'}, foot)\n  }\n\n  return result\n}\n","// Include `data` fields in mdast and `raw` nodes in hast.\n/// <reference types=\"mdast-util-to-hast\" />\n\n/**\n * @typedef {import('hast').Root} HastRoot\n * @typedef {import('mdast').Root} MdastRoot\n * @typedef {import('mdast-util-to-hast').Options} Options\n * @typedef {import('unified').Processor} Processor\n * @typedef {import('vfile').VFile} VFile\n */\n\n/**\n * @callback TransformBridge\n *   Bridge-mode.\n *\n *   Runs the destination with the new hast tree.\n *   Discards result.\n * @param {MdastRoot} tree\n *   Tree.\n * @param {VFile} file\n *   File.\n * @returns {Promise<undefined>}\n *   Nothing.\n *\n * @callback TransformMutate\n *  Mutate-mode.\n *\n *  Further transformers run on the hast tree.\n * @param {MdastRoot} tree\n *   Tree.\n * @param {VFile} file\n *   File.\n * @returns {HastRoot}\n *   Tree (hast).\n */\n\nimport {toHast} from 'mdast-util-to-hast'\n\n/**\n * Turn markdown into HTML.\n *\n * ##### Notes\n *\n * ###### Signature\n *\n * *   if a processor is given, runs the (rehype) plugins used on it with a\n *     hast tree, then discards the result (*bridge mode*)\n * *   otherwise, returns a hast tree, the plugins used after `remarkRehype`\n *     are rehype plugins (*mutate mode*)\n *\n * > 👉 **Note**: It’s highly unlikely that you want to pass a `processor`.\n *\n * ###### HTML\n *\n * Raw HTML is available in mdast as `html` nodes and can be embedded in hast\n * as semistandard `raw` nodes.\n * Most plugins ignore `raw` nodes but two notable ones don’t:\n *\n * *   `rehype-stringify` also has an option `allowDangerousHtml` which will\n *     output the raw HTML.\n *     This is typically discouraged as noted by the option name but is useful if\n *     you completely trust authors\n * *   `rehype-raw` can handle the raw embedded HTML strings by parsing them\n *     into standard hast nodes (`element`, `text`, etc).\n *     This is a heavy task as it needs a full HTML parser, but it is the only way\n *     to support untrusted content\n *\n * ###### Footnotes\n *\n * Many options supported here relate to footnotes.\n * Footnotes are not specified by CommonMark, which we follow by default.\n * They are supported by GitHub, so footnotes can be enabled in markdown with\n * `remark-gfm`.\n *\n * The options `footnoteBackLabel` and `footnoteLabel` define natural language\n * that explains footnotes, which is hidden for sighted users but shown to\n * assistive technology.\n * When your page is not in English, you must define translated values.\n *\n * Back references use ARIA attributes, but the section label itself uses a\n * heading that is hidden with an `sr-only` class.\n * To show it to sighted users, define different attributes in\n * `footnoteLabelProperties`.\n *\n * ###### Clobbering\n *\n * Footnotes introduces a problem, as it links footnote calls to footnote\n * definitions on the page through `id` attributes generated from user content,\n * which results in DOM clobbering.\n *\n * DOM clobbering is this:\n *\n * ```html\n * <p id=x></p>\n * <script>alert(x) // `x` now refers to the DOM `p#x` element</script>\n * ```\n *\n * Elements by their ID are made available by browsers on the `window` object,\n * which is a security risk.\n * Using a prefix solves this problem.\n *\n * More information on how to handle clobbering and the prefix is explained in\n * *Example: headings (DOM clobbering)* in `rehype-sanitize`.\n *\n * ###### Unknown nodes\n *\n * Unknown nodes are nodes with a type that isn’t in `handlers` or `passThrough`.\n * The default behavior for unknown nodes is:\n *\n * *   when the node has a `value` (and doesn’t have `data.hName`,\n *     `data.hProperties`, or `data.hChildren`, see later), create a hast `text`\n *     node\n * *   otherwise, create a `<div>` element (which could be changed with\n *     `data.hName`), with its children mapped from mdast to hast as well\n *\n * This behavior can be changed by passing an `unknownHandler`.\n *\n * @overload\n * @param {Processor} processor\n * @param {Readonly<Options> | null | undefined} [options]\n * @returns {TransformBridge}\n *\n * @overload\n * @param {Readonly<Options> | null | undefined} [options]\n * @returns {TransformMutate}\n *\n * @param {Readonly<Options> | Processor | null | undefined} [destination]\n *   Processor or configuration (optional).\n * @param {Readonly<Options> | null | undefined} [options]\n *   When a processor was given, configuration (optional).\n * @returns {TransformBridge | TransformMutate}\n *   Transform.\n */\nexport default function remarkRehype(destination, options) {\n  if (destination && 'run' in destination) {\n    /**\n     * @type {TransformBridge}\n     */\n    return async function (tree, file) {\n      // Cast because root in -> root out.\n      const hastTree = /** @type {HastRoot} */ (toHast(tree, options))\n      await destination.run(hastTree, file)\n    }\n  }\n\n  /**\n   * @type {TransformMutate}\n   */\n  return function (tree) {\n    // Cast because root in -> root out.\n    return /** @type {HastRoot} */ (toHast(tree, options || destination))\n  }\n}\n","import arrayWithHoles from \"./arrayWithHoles.js\";\nimport iterableToArray from \"./iterableToArray.js\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nimport nonIterableRest from \"./nonIterableRest.js\";\nexport default function _toArray(arr) {\n  return arrayWithHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableRest();\n}","/**\n * Throw a given error.\n *\n * @param {Error|null|undefined} [error]\n *   Maybe error.\n * @returns {asserts error is null|undefined}\n */\nexport function bail(error) {\n  if (error) {\n    throw error\n  }\n}\n","export default function isPlainObject(value) {\n\tif (typeof value !== 'object' || value === null) {\n\t\treturn false;\n\t}\n\n\tconst prototype = Object.getPrototypeOf(value);\n\treturn (prototype === null || prototype === Object.prototype || Object.getPrototypeOf(prototype) === null) && !(Symbol.toStringTag in value) && !(Symbol.iterator in value);\n}\n","/**\n * @typedef {(error?: Error|null|undefined, ...output: Array<any>) => void} Callback\n * @typedef {(...input: Array<any>) => any} Middleware\n *\n * @typedef {(...input: Array<any>) => void} Run\n *   Call all middleware.\n * @typedef {(fn: Middleware) => Pipeline} Use\n *   Add `fn` (middleware) to the list.\n * @typedef {{run: Run, use: Use}} Pipeline\n *   Middleware.\n */\n\n/**\n * Create new middleware.\n *\n * @returns {Pipeline}\n */\nexport function trough() {\n  /** @type {Array<Middleware>} */\n  const fns = []\n  /** @type {Pipeline} */\n  const pipeline = {run, use}\n\n  return pipeline\n\n  /** @type {Run} */\n  function run(...values) {\n    let middlewareIndex = -1\n    /** @type {Callback} */\n    const callback = values.pop()\n\n    if (typeof callback !== 'function') {\n      throw new TypeError('Expected function as last argument, not ' + callback)\n    }\n\n    next(null, ...values)\n\n    /**\n     * Run the next `fn`, or we’re done.\n     *\n     * @param {Error|null|undefined} error\n     * @param {Array<any>} output\n     */\n    function next(error, ...output) {\n      const fn = fns[++middlewareIndex]\n      let index = -1\n\n      if (error) {\n        callback(error)\n        return\n      }\n\n      // Copy non-nullish input into values.\n      while (++index < values.length) {\n        if (output[index] === null || output[index] === undefined) {\n          output[index] = values[index]\n        }\n      }\n\n      // Save the newly created `output` for the next call.\n      values = output\n\n      // Next or done.\n      if (fn) {\n        wrap(fn, next)(...output)\n      } else {\n        callback(null, ...output)\n      }\n    }\n  }\n\n  /** @type {Use} */\n  function use(middelware) {\n    if (typeof middelware !== 'function') {\n      throw new TypeError(\n        'Expected `middelware` to be a function, not ' + middelware\n      )\n    }\n\n    fns.push(middelware)\n    return pipeline\n  }\n}\n\n/**\n * Wrap `middleware`.\n * Can be sync or async; return a promise, receive a callback, or return new\n * values and errors.\n *\n * @param {Middleware} middleware\n * @param {Callback} callback\n */\nexport function wrap(middleware, callback) {\n  /** @type {boolean} */\n  let called\n\n  return wrapped\n\n  /**\n   * Call `middleware`.\n   * @this {any}\n   * @param {Array<any>} parameters\n   * @returns {void}\n   */\n  function wrapped(...parameters) {\n    const fnExpectsCallback = middleware.length > parameters.length\n    /** @type {any} */\n    let result\n\n    if (fnExpectsCallback) {\n      parameters.push(done)\n    }\n\n    try {\n      result = middleware.apply(this, parameters)\n    } catch (error) {\n      const exception = /** @type {Error} */ (error)\n\n      // Well, this is quite the pickle.\n      // `middleware` received a callback and called it synchronously, but that\n      // threw an error.\n      // The only thing left to do is to throw the thing instead.\n      if (fnExpectsCallback && called) {\n        throw exception\n      }\n\n      return done(exception)\n    }\n\n    if (!fnExpectsCallback) {\n      if (result instanceof Promise) {\n        result.then(then, done)\n      } else if (result instanceof Error) {\n        done(result)\n      } else {\n        then(result)\n      }\n    }\n  }\n\n  /**\n   * Call `callback`, only once.\n   * @type {Callback}\n   */\n  function done(error, ...output) {\n    if (!called) {\n      called = true\n      callback(error, ...output)\n    }\n  }\n\n  /**\n   * Call `done` with one value.\n   *\n   * @param {any} [value]\n   */\n  function then(value) {\n    done(null, value)\n  }\n}\n","// A derivative work based on:\n// <https://github.com/browserify/path-browserify>.\n// Which is licensed:\n//\n// MIT License\n//\n// Copyright (c) 2013 James Halliday\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy of\n// this software and associated documentation files (the \"Software\"), to deal in\n// the Software without restriction, including without limitation the rights to\n// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\n// the Software, and to permit persons to whom the Software is furnished to do so,\n// subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\n// FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\n// COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\n// IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n// CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n// A derivative work based on:\n//\n// Parts of that are extracted from Node’s internal `path` module:\n// <https://github.com/nodejs/node/blob/master/lib/path.js>.\n// Which is licensed:\n//\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nexport const path = {basename, dirname, extname, join, sep: '/'}\n\n/* eslint-disable max-depth, complexity */\n\n/**\n * Get the basename from a path.\n *\n * @param {string} path\n *   File path.\n * @param {string | null | undefined} [ext]\n *   Extension to strip.\n * @returns {string}\n *   Stem or basename.\n */\nfunction basename(path, ext) {\n  if (ext !== undefined && typeof ext !== 'string') {\n    throw new TypeError('\"ext\" argument must be a string')\n  }\n\n  assertPath(path)\n  let start = 0\n  let end = -1\n  let index = path.length\n  /** @type {boolean | undefined} */\n  let seenNonSlash\n\n  if (ext === undefined || ext.length === 0 || ext.length > path.length) {\n    while (index--) {\n      if (path.codePointAt(index) === 47 /* `/` */) {\n        // If we reached a path separator that was not part of a set of path\n        // separators at the end of the string, stop now.\n        if (seenNonSlash) {\n          start = index + 1\n          break\n        }\n      } else if (end < 0) {\n        // We saw the first non-path separator, mark this as the end of our\n        // path component.\n        seenNonSlash = true\n        end = index + 1\n      }\n    }\n\n    return end < 0 ? '' : path.slice(start, end)\n  }\n\n  if (ext === path) {\n    return ''\n  }\n\n  let firstNonSlashEnd = -1\n  let extIndex = ext.length - 1\n\n  while (index--) {\n    if (path.codePointAt(index) === 47 /* `/` */) {\n      // If we reached a path separator that was not part of a set of path\n      // separators at the end of the string, stop now.\n      if (seenNonSlash) {\n        start = index + 1\n        break\n      }\n    } else {\n      if (firstNonSlashEnd < 0) {\n        // We saw the first non-path separator, remember this index in case\n        // we need it if the extension ends up not matching.\n        seenNonSlash = true\n        firstNonSlashEnd = index + 1\n      }\n\n      if (extIndex > -1) {\n        // Try to match the explicit extension.\n        if (path.codePointAt(index) === ext.codePointAt(extIndex--)) {\n          if (extIndex < 0) {\n            // We matched the extension, so mark this as the end of our path\n            // component\n            end = index\n          }\n        } else {\n          // Extension does not match, so our result is the entire path\n          // component\n          extIndex = -1\n          end = firstNonSlashEnd\n        }\n      }\n    }\n  }\n\n  if (start === end) {\n    end = firstNonSlashEnd\n  } else if (end < 0) {\n    end = path.length\n  }\n\n  return path.slice(start, end)\n}\n\n/**\n * Get the dirname from a path.\n *\n * @param {string} path\n *   File path.\n * @returns {string}\n *   File path.\n */\nfunction dirname(path) {\n  assertPath(path)\n\n  if (path.length === 0) {\n    return '.'\n  }\n\n  let end = -1\n  let index = path.length\n  /** @type {boolean | undefined} */\n  let unmatchedSlash\n\n  // Prefix `--` is important to not run on `0`.\n  while (--index) {\n    if (path.codePointAt(index) === 47 /* `/` */) {\n      if (unmatchedSlash) {\n        end = index\n        break\n      }\n    } else if (!unmatchedSlash) {\n      // We saw the first non-path separator\n      unmatchedSlash = true\n    }\n  }\n\n  return end < 0\n    ? path.codePointAt(0) === 47 /* `/` */\n      ? '/'\n      : '.'\n    : end === 1 && path.codePointAt(0) === 47 /* `/` */\n    ? '//'\n    : path.slice(0, end)\n}\n\n/**\n * Get an extname from a path.\n *\n * @param {string} path\n *   File path.\n * @returns {string}\n *   Extname.\n */\nfunction extname(path) {\n  assertPath(path)\n\n  let index = path.length\n\n  let end = -1\n  let startPart = 0\n  let startDot = -1\n  // Track the state of characters (if any) we see before our first dot and\n  // after any path separator we find.\n  let preDotState = 0\n  /** @type {boolean | undefined} */\n  let unmatchedSlash\n\n  while (index--) {\n    const code = path.codePointAt(index)\n\n    if (code === 47 /* `/` */) {\n      // If we reached a path separator that was not part of a set of path\n      // separators at the end of the string, stop now.\n      if (unmatchedSlash) {\n        startPart = index + 1\n        break\n      }\n\n      continue\n    }\n\n    if (end < 0) {\n      // We saw the first non-path separator, mark this as the end of our\n      // extension.\n      unmatchedSlash = true\n      end = index + 1\n    }\n\n    if (code === 46 /* `.` */) {\n      // If this is our first dot, mark it as the start of our extension.\n      if (startDot < 0) {\n        startDot = index\n      } else if (preDotState !== 1) {\n        preDotState = 1\n      }\n    } else if (startDot > -1) {\n      // We saw a non-dot and non-path separator before our dot, so we should\n      // have a good chance at having a non-empty extension.\n      preDotState = -1\n    }\n  }\n\n  if (\n    startDot < 0 ||\n    end < 0 ||\n    // We saw a non-dot character immediately before the dot.\n    preDotState === 0 ||\n    // The (right-most) trimmed path component is exactly `..`.\n    (preDotState === 1 && startDot === end - 1 && startDot === startPart + 1)\n  ) {\n    return ''\n  }\n\n  return path.slice(startDot, end)\n}\n\n/**\n * Join segments from a path.\n *\n * @param {Array<string>} segments\n *   Path segments.\n * @returns {string}\n *   File path.\n */\nfunction join(...segments) {\n  let index = -1\n  /** @type {string | undefined} */\n  let joined\n\n  while (++index < segments.length) {\n    assertPath(segments[index])\n\n    if (segments[index]) {\n      joined =\n        joined === undefined ? segments[index] : joined + '/' + segments[index]\n    }\n  }\n\n  return joined === undefined ? '.' : normalize(joined)\n}\n\n/**\n * Normalize a basic file path.\n *\n * @param {string} path\n *   File path.\n * @returns {string}\n *   File path.\n */\n// Note: `normalize` is not exposed as `path.normalize`, so some code is\n// manually removed from it.\nfunction normalize(path) {\n  assertPath(path)\n\n  const absolute = path.codePointAt(0) === 47 /* `/` */\n\n  // Normalize the path according to POSIX rules.\n  let value = normalizeString(path, !absolute)\n\n  if (value.length === 0 && !absolute) {\n    value = '.'\n  }\n\n  if (value.length > 0 && path.codePointAt(path.length - 1) === 47 /* / */) {\n    value += '/'\n  }\n\n  return absolute ? '/' + value : value\n}\n\n/**\n * Resolve `.` and `..` elements in a path with directory names.\n *\n * @param {string} path\n *   File path.\n * @param {boolean} allowAboveRoot\n *   Whether `..` can move above root.\n * @returns {string}\n *   File path.\n */\nfunction normalizeString(path, allowAboveRoot) {\n  let result = ''\n  let lastSegmentLength = 0\n  let lastSlash = -1\n  let dots = 0\n  let index = -1\n  /** @type {number | undefined} */\n  let code\n  /** @type {number} */\n  let lastSlashIndex\n\n  while (++index <= path.length) {\n    if (index < path.length) {\n      code = path.codePointAt(index)\n    } else if (code === 47 /* `/` */) {\n      break\n    } else {\n      code = 47 /* `/` */\n    }\n\n    if (code === 47 /* `/` */) {\n      if (lastSlash === index - 1 || dots === 1) {\n        // Empty.\n      } else if (lastSlash !== index - 1 && dots === 2) {\n        if (\n          result.length < 2 ||\n          lastSegmentLength !== 2 ||\n          result.codePointAt(result.length - 1) !== 46 /* `.` */ ||\n          result.codePointAt(result.length - 2) !== 46 /* `.` */\n        ) {\n          if (result.length > 2) {\n            lastSlashIndex = result.lastIndexOf('/')\n\n            if (lastSlashIndex !== result.length - 1) {\n              if (lastSlashIndex < 0) {\n                result = ''\n                lastSegmentLength = 0\n              } else {\n                result = result.slice(0, lastSlashIndex)\n                lastSegmentLength = result.length - 1 - result.lastIndexOf('/')\n              }\n\n              lastSlash = index\n              dots = 0\n              continue\n            }\n          } else if (result.length > 0) {\n            result = ''\n            lastSegmentLength = 0\n            lastSlash = index\n            dots = 0\n            continue\n          }\n        }\n\n        if (allowAboveRoot) {\n          result = result.length > 0 ? result + '/..' : '..'\n          lastSegmentLength = 2\n        }\n      } else {\n        if (result.length > 0) {\n          result += '/' + path.slice(lastSlash + 1, index)\n        } else {\n          result = path.slice(lastSlash + 1, index)\n        }\n\n        lastSegmentLength = index - lastSlash - 1\n      }\n\n      lastSlash = index\n      dots = 0\n    } else if (code === 46 /* `.` */ && dots > -1) {\n      dots++\n    } else {\n      dots = -1\n    }\n  }\n\n  return result\n}\n\n/**\n * Make sure `path` is a string.\n *\n * @param {string} path\n *   File path.\n * @returns {asserts path is string}\n *   Nothing.\n */\nfunction assertPath(path) {\n  if (typeof path !== 'string') {\n    throw new TypeError(\n      'Path must be a string. Received ' + JSON.stringify(path)\n    )\n  }\n}\n\n/* eslint-enable max-depth, complexity */\n","// Somewhat based on:\n// <https://github.com/defunctzombie/node-process/blob/master/browser.js>.\n// But I don’t think one tiny line of code can be copyrighted. 😅\nexport const proc = {cwd}\n\nfunction cwd() {\n  return '/'\n}\n","/**\n * Checks if a value has the shape of a WHATWG URL object.\n *\n * Using a symbol or instanceof would not be able to recognize URL objects\n * coming from other implementations (e.g. in Electron), so instead we are\n * checking some well known properties for a lack of a better test.\n *\n * We use `href` and `protocol` as they are the only properties that are\n * easy to retrieve and calculate due to the lazy nature of the getters.\n *\n * We check for auth attribute to distinguish legacy url instance with\n * WHATWG URL instance.\n *\n * @param {unknown} fileUrlOrPath\n *   File path or URL.\n * @returns {fileUrlOrPath is URL}\n *   Whether it’s a URL.\n */\n// From: <https://github.com/nodejs/node/blob/6a3403c/lib/internal/url.js#L720>\nexport function isUrl(fileUrlOrPath) {\n  return Boolean(\n    fileUrlOrPath !== null &&\n      typeof fileUrlOrPath === 'object' &&\n      'href' in fileUrlOrPath &&\n      fileUrlOrPath.href &&\n      'protocol' in fileUrlOrPath &&\n      fileUrlOrPath.protocol &&\n      // @ts-expect-error: indexing is fine.\n      fileUrlOrPath.auth === undefined\n  )\n}\n","import {isUrl} from './minurl.shared.js'\n\nexport {isUrl} from './minurl.shared.js'\n\n// See: <https://github.com/nodejs/node/blob/6a3403c/lib/internal/url.js>\n\n/**\n * @param {URL | string} path\n *   File URL.\n * @returns {string}\n *   File URL.\n */\nexport function urlToPath(path) {\n  if (typeof path === 'string') {\n    path = new URL(path)\n  } else if (!isUrl(path)) {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError(\n      'The \"path\" argument must be of type string or an instance of URL. Received `' +\n        path +\n        '`'\n    )\n    error.code = 'ERR_INVALID_ARG_TYPE'\n    throw error\n  }\n\n  if (path.protocol !== 'file:') {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError('The URL must be of scheme file')\n    error.code = 'ERR_INVALID_URL_SCHEME'\n    throw error\n  }\n\n  return getPathFromURLPosix(path)\n}\n\n/**\n * Get a path from a POSIX URL.\n *\n * @param {URL} url\n *   URL.\n * @returns {string}\n *   File path.\n */\nfunction getPathFromURLPosix(url) {\n  if (url.hostname !== '') {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError(\n      'File URL host must be \"localhost\" or empty on darwin'\n    )\n    error.code = 'ERR_INVALID_FILE_URL_HOST'\n    throw error\n  }\n\n  const pathname = url.pathname\n  let index = -1\n\n  while (++index < pathname.length) {\n    if (\n      pathname.codePointAt(index) === 37 /* `%` */ &&\n      pathname.codePointAt(index + 1) === 50 /* `2` */\n    ) {\n      const third = pathname.codePointAt(index + 2)\n      if (third === 70 /* `F` */ || third === 102 /* `f` */) {\n        /** @type {NodeJS.ErrnoException} */\n        const error = new TypeError(\n          'File URL path must not include encoded / characters'\n        )\n        error.code = 'ERR_INVALID_FILE_URL_PATH'\n        throw error\n      }\n    }\n  }\n\n  return decodeURIComponent(pathname)\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Point} Point\n * @typedef {import('unist').Position} Position\n * @typedef {import('vfile-message').Options} MessageOptions\n * @typedef {import('../index.js').Data} Data\n * @typedef {import('../index.js').Value} Value\n */\n\n/**\n * @typedef {object & {type: string, position?: Position | undefined}} NodeLike\n *\n * @typedef {Options | URL | VFile | Value} Compatible\n *   Things that can be passed to the constructor.\n *\n * @typedef VFileCoreOptions\n *   Set multiple values.\n * @property {string | null | undefined} [basename]\n *   Set `basename` (name).\n * @property {string | null | undefined} [cwd]\n *   Set `cwd` (working directory).\n * @property {Data | null | undefined} [data]\n *   Set `data` (associated info).\n * @property {string | null | undefined} [dirname]\n *   Set `dirname` (path w/o basename).\n * @property {string | null | undefined} [extname]\n *   Set `extname` (extension with dot).\n * @property {Array<string> | null | undefined} [history]\n *   Set `history` (paths the file moved between).\n * @property {URL | string | null | undefined} [path]\n *   Set `path` (current path).\n * @property {string | null | undefined} [stem]\n *   Set `stem` (name without extension).\n * @property {Value | null | undefined} [value]\n *   Set `value` (the contents of the file).\n *\n * @typedef Map\n *   Raw source map.\n *\n *   See:\n *   <https://github.com/mozilla/source-map/blob/60adcb0/source-map.d.ts#L15-L23>.\n * @property {number} version\n *   Which version of the source map spec this map is following.\n * @property {Array<string>} sources\n *   An array of URLs to the original source files.\n * @property {Array<string>} names\n *   An array of identifiers which can be referenced by individual mappings.\n * @property {string | undefined} [sourceRoot]\n *   The URL root from which all sources are relative.\n * @property {Array<string> | undefined} [sourcesContent]\n *   An array of contents of the original source files.\n * @property {string} mappings\n *   A string of base64 VLQs which contain the actual mappings.\n * @property {string} file\n *   The generated file this source map is associated with.\n *\n * @typedef {Record<string, unknown> & VFileCoreOptions} Options\n *   Configuration.\n *\n *   A bunch of keys that will be shallow copied over to the new file.\n *\n * @typedef {Record<string, unknown>} ReporterSettings\n *   Configuration for reporters.\n */\n\n/**\n * @template [Settings=ReporterSettings]\n *   Options type.\n * @callback Reporter\n *   Type for a reporter.\n * @param {Array<VFile>} files\n *   Files to report.\n * @param {Settings} options\n *   Configuration.\n * @returns {string}\n *   Report.\n */\n\nimport {VFileMessage} from 'vfile-message'\nimport {path} from 'vfile/do-not-use-conditional-minpath'\nimport {proc} from 'vfile/do-not-use-conditional-minproc'\nimport {urlToPath, isUrl} from 'vfile/do-not-use-conditional-minurl'\n\n/**\n * Order of setting (least specific to most), we need this because otherwise\n * `{stem: 'a', path: '~/b.js'}` would throw, as a path is needed before a\n * stem can be set.\n */\nconst order = /** @type {const} */ ([\n  'history',\n  'path',\n  'basename',\n  'stem',\n  'extname',\n  'dirname'\n])\n\nexport class VFile {\n  /**\n   * Create a new virtual file.\n   *\n   * `options` is treated as:\n   *\n   * *   `string` or `Uint8Array` — `{value: options}`\n   * *   `URL` — `{path: options}`\n   * *   `VFile` — shallow copies its data over to the new file\n   * *   `object` — all fields are shallow copied over to the new file\n   *\n   * Path related fields are set in the following order (least specific to\n   * most specific): `history`, `path`, `basename`, `stem`, `extname`,\n   * `dirname`.\n   *\n   * You cannot set `dirname` or `extname` without setting either `history`,\n   * `path`, `basename`, or `stem` too.\n   *\n   * @param {Compatible | null | undefined} [value]\n   *   File value.\n   * @returns\n   *   New instance.\n   */\n  constructor(value) {\n    /** @type {Options | VFile} */\n    let options\n\n    if (!value) {\n      options = {}\n    } else if (isUrl(value)) {\n      options = {path: value}\n    } else if (typeof value === 'string' || isUint8Array(value)) {\n      options = {value}\n    } else {\n      options = value\n    }\n\n    /* eslint-disable no-unused-expressions */\n\n    /**\n     * Base of `path` (default: `process.cwd()` or `'/'` in browsers).\n     *\n     * @type {string}\n     */\n    this.cwd = proc.cwd()\n\n    /**\n     * Place to store custom info (default: `{}`).\n     *\n     * It’s OK to store custom data directly on the file but moving it to\n     * `data` is recommended.\n     *\n     * @type {Data}\n     */\n    this.data = {}\n\n    /**\n     * List of file paths the file moved between.\n     *\n     * The first is the original path and the last is the current path.\n     *\n     * @type {Array<string>}\n     */\n    this.history = []\n\n    /**\n     * List of messages associated with the file.\n     *\n     * @type {Array<VFileMessage>}\n     */\n    this.messages = []\n\n    /**\n     * Raw value.\n     *\n     * @type {Value}\n     */\n    this.value\n\n    // The below are non-standard, they are “well-known”.\n    // As in, used in several tools.\n    /**\n     * Source map.\n     *\n     * This type is equivalent to the `RawSourceMap` type from the `source-map`\n     * module.\n     *\n     * @type {Map | null | undefined}\n     */\n    this.map\n\n    /**\n     * Custom, non-string, compiled, representation.\n     *\n     * This is used by unified to store non-string results.\n     * One example is when turning markdown into React nodes.\n     *\n     * @type {unknown}\n     */\n    this.result\n\n    /**\n     * Whether a file was saved to disk.\n     *\n     * This is used by vfile reporters.\n     *\n     * @type {boolean}\n     */\n    this.stored\n    /* eslint-enable no-unused-expressions */\n\n    // Set path related properties in the correct order.\n    let index = -1\n\n    while (++index < order.length) {\n      const prop = order[index]\n\n      // Note: we specifically use `in` instead of `hasOwnProperty` to accept\n      // `vfile`s too.\n      if (\n        prop in options &&\n        options[prop] !== undefined &&\n        options[prop] !== null\n      ) {\n        // @ts-expect-error: TS doesn’t understand basic reality.\n        this[prop] = prop === 'history' ? [...options[prop]] : options[prop]\n      }\n    }\n\n    /** @type {string} */\n    let prop\n\n    // Set non-path related properties.\n    for (prop in options) {\n      // @ts-expect-error: fine to set other things.\n      if (!order.includes(prop)) {\n        // @ts-expect-error: fine to set other things.\n        this[prop] = options[prop]\n      }\n    }\n  }\n\n  /**\n   * Get the basename (including extname) (example: `'index.min.js'`).\n   *\n   * @returns {string | undefined}\n   *   Basename.\n   */\n  get basename() {\n    return typeof this.path === 'string' ? path.basename(this.path) : undefined\n  }\n\n  /**\n   * Set basename (including extname) (`'index.min.js'`).\n   *\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n   * on windows).\n   * Cannot be nullified (use `file.path = file.dirname` instead).\n   *\n   * @param {string} basename\n   *   Basename.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  set basename(basename) {\n    assertNonEmpty(basename, 'basename')\n    assertPart(basename, 'basename')\n    this.path = path.join(this.dirname || '', basename)\n  }\n\n  /**\n   * Get the parent path (example: `'~'`).\n   *\n   * @returns {string | undefined}\n   *   Dirname.\n   */\n  get dirname() {\n    return typeof this.path === 'string' ? path.dirname(this.path) : undefined\n  }\n\n  /**\n   * Set the parent path (example: `'~'`).\n   *\n   * Cannot be set if there’s no `path` yet.\n   *\n   * @param {string | undefined} dirname\n   *   Dirname.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  set dirname(dirname) {\n    assertPath(this.basename, 'dirname')\n    this.path = path.join(dirname || '', this.basename)\n  }\n\n  /**\n   * Get the extname (including dot) (example: `'.js'`).\n   *\n   * @returns {string | undefined}\n   *   Extname.\n   */\n  get extname() {\n    return typeof this.path === 'string' ? path.extname(this.path) : undefined\n  }\n\n  /**\n   * Set the extname (including dot) (example: `'.js'`).\n   *\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n   * on windows).\n   * Cannot be set if there’s no `path` yet.\n   *\n   * @param {string | undefined} extname\n   *   Extname.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  set extname(extname) {\n    assertPart(extname, 'extname')\n    assertPath(this.dirname, 'extname')\n\n    if (extname) {\n      if (extname.codePointAt(0) !== 46 /* `.` */) {\n        throw new Error('`extname` must start with `.`')\n      }\n\n      if (extname.includes('.', 1)) {\n        throw new Error('`extname` cannot contain multiple dots')\n      }\n    }\n\n    this.path = path.join(this.dirname, this.stem + (extname || ''))\n  }\n\n  /**\n   * Get the full path (example: `'~/index.min.js'`).\n   *\n   * @returns {string}\n   *   Path.\n   */\n  get path() {\n    return this.history[this.history.length - 1]\n  }\n\n  /**\n   * Set the full path (example: `'~/index.min.js'`).\n   *\n   * Cannot be nullified.\n   * You can set a file URL (a `URL` object with a `file:` protocol) which will\n   * be turned into a path with `url.fileURLToPath`.\n   *\n   * @param {URL | string} path\n   *   Path.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  set path(path) {\n    if (isUrl(path)) {\n      path = urlToPath(path)\n    }\n\n    assertNonEmpty(path, 'path')\n\n    if (this.path !== path) {\n      this.history.push(path)\n    }\n  }\n\n  /**\n   * Get the stem (basename w/o extname) (example: `'index.min'`).\n   *\n   * @returns {string | undefined}\n   *   Stem.\n   */\n  get stem() {\n    return typeof this.path === 'string'\n      ? path.basename(this.path, this.extname)\n      : undefined\n  }\n\n  /**\n   * Set the stem (basename w/o extname) (example: `'index.min'`).\n   *\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n   * on windows).\n   * Cannot be nullified (use `file.path = file.dirname` instead).\n   *\n   * @param {string} stem\n   *   Stem.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  set stem(stem) {\n    assertNonEmpty(stem, 'stem')\n    assertPart(stem, 'stem')\n    this.path = path.join(this.dirname || '', stem + (this.extname || ''))\n  }\n\n  // Normal prototypal methods.\n  /**\n   * Create a fatal message for `reason` associated with the file.\n   *\n   * The `fatal` field of the message is set to `true` (error; file not usable)\n   * and the `file` field is set to the current file path.\n   * The message is added to the `messages` field on `file`.\n   *\n   * > 🪦 **Note**: also has obsolete signatures.\n   *\n   * @overload\n   * @param {string} reason\n   * @param {MessageOptions | null | undefined} [options]\n   * @returns {never}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @param {Error | VFileMessage | string} causeOrReason\n   *   Reason for message, should use markdown.\n   * @param {Node | NodeLike | MessageOptions | Point | Position | string | null | undefined} [optionsOrParentOrPlace]\n   *   Configuration (optional).\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns {never}\n   *   Never.\n   * @throws {VFileMessage}\n   *   Message.\n   */\n  fail(causeOrReason, optionsOrParentOrPlace, origin) {\n    // @ts-expect-error: the overloads are fine.\n    const message = this.message(causeOrReason, optionsOrParentOrPlace, origin)\n\n    message.fatal = true\n\n    throw message\n  }\n\n  /**\n   * Create an info message for `reason` associated with the file.\n   *\n   * The `fatal` field of the message is set to `undefined` (info; change\n   * likely not needed) and the `file` field is set to the current file path.\n   * The message is added to the `messages` field on `file`.\n   *\n   * > 🪦 **Note**: also has obsolete signatures.\n   *\n   * @overload\n   * @param {string} reason\n   * @param {MessageOptions | null | undefined} [options]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @param {Error | VFileMessage | string} causeOrReason\n   *   Reason for message, should use markdown.\n   * @param {Node | NodeLike | MessageOptions | Point | Position | string | null | undefined} [optionsOrParentOrPlace]\n   *   Configuration (optional).\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns {VFileMessage}\n   *   Message.\n   */\n  info(causeOrReason, optionsOrParentOrPlace, origin) {\n    // @ts-expect-error: the overloads are fine.\n    const message = this.message(causeOrReason, optionsOrParentOrPlace, origin)\n\n    message.fatal = undefined\n\n    return message\n  }\n\n  /**\n   * Create a message for `reason` associated with the file.\n   *\n   * The `fatal` field of the message is set to `false` (warning; change may be\n   * needed) and the `file` field is set to the current file path.\n   * The message is added to the `messages` field on `file`.\n   *\n   * > 🪦 **Note**: also has obsolete signatures.\n   *\n   * @overload\n   * @param {string} reason\n   * @param {MessageOptions | null | undefined} [options]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @param {Error | VFileMessage | string} causeOrReason\n   *   Reason for message, should use markdown.\n   * @param {Node | NodeLike | MessageOptions | Point | Position | string | null | undefined} [optionsOrParentOrPlace]\n   *   Configuration (optional).\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns {VFileMessage}\n   *   Message.\n   */\n  message(causeOrReason, optionsOrParentOrPlace, origin) {\n    const message = new VFileMessage(\n      // @ts-expect-error: the overloads are fine.\n      causeOrReason,\n      optionsOrParentOrPlace,\n      origin\n    )\n\n    if (this.path) {\n      message.name = this.path + ':' + message.name\n      message.file = this.path\n    }\n\n    message.fatal = false\n\n    this.messages.push(message)\n\n    return message\n  }\n\n  /**\n   * Serialize the file.\n   *\n   * > **Note**: which encodings are supported depends on the engine.\n   * > For info on Node.js, see:\n   * > <https://nodejs.org/api/util.html#whatwg-supported-encodings>.\n   *\n   * @param {string | null | undefined} [encoding='utf8']\n   *   Character encoding to understand `value` as when it’s a `Uint8Array`\n   *   (default: `'utf-8'`).\n   * @returns {string}\n   *   Serialized file.\n   */\n  toString(encoding) {\n    if (this.value === undefined) {\n      return ''\n    }\n\n    if (typeof this.value === 'string') {\n      return this.value\n    }\n\n    const decoder = new TextDecoder(encoding || undefined)\n    return decoder.decode(this.value)\n  }\n}\n\n/**\n * Assert that `part` is not a path (as in, does not contain `path.sep`).\n *\n * @param {string | null | undefined} part\n *   File path part.\n * @param {string} name\n *   Part name.\n * @returns {undefined}\n *   Nothing.\n */\nfunction assertPart(part, name) {\n  if (part && part.includes(path.sep)) {\n    throw new Error(\n      '`' + name + '` cannot be a path: did not expect `' + path.sep + '`'\n    )\n  }\n}\n\n/**\n * Assert that `part` is not empty.\n *\n * @param {string | undefined} part\n *   Thing.\n * @param {string} name\n *   Part name.\n * @returns {asserts part is string}\n *   Nothing.\n */\nfunction assertNonEmpty(part, name) {\n  if (!part) {\n    throw new Error('`' + name + '` cannot be empty')\n  }\n}\n\n/**\n * Assert `path` exists.\n *\n * @param {string | undefined} path\n *   Path.\n * @param {string} name\n *   Dependency name.\n * @returns {asserts path is string}\n *   Nothing.\n */\nfunction assertPath(path, name) {\n  if (!path) {\n    throw new Error('Setting `' + name + '` requires `path` to be set too')\n  }\n}\n\n/**\n * Assert `value` is an `Uint8Array`.\n *\n * @param {unknown} value\n *   thing.\n * @returns {value is Uint8Array}\n *   Whether `value` is an `Uint8Array`.\n */\nfunction isUint8Array(value) {\n  return Boolean(\n    value &&\n      typeof value === 'object' &&\n      'byteLength' in value &&\n      'byteOffset' in value\n  )\n}\n","export const CallableInstance =\n  /**\n   * @type {new <Parameters extends Array<unknown>, Result>(property: string | symbol) => (...parameters: Parameters) => Result}\n   */\n  (\n    /** @type {unknown} */\n    (\n      /**\n       * @this {Function}\n       * @param {string | symbol} property\n       * @returns {(...parameters: Array<unknown>) => unknown}\n       */\n      function (property) {\n        const self = this\n        const constr = self.constructor\n        const proto = /** @type {Record<string | symbol, Function>} */ (\n          // Prototypes do exist.\n          // type-coverage:ignore-next-line\n          constr.prototype\n        )\n        const func = proto[property]\n        /** @type {(...parameters: Array<unknown>) => unknown} */\n        const apply = function () {\n          return func.apply(apply, arguments)\n        }\n\n        Object.setPrototypeOf(apply, proto)\n\n        const names = Object.getOwnPropertyNames(func)\n\n        for (const p of names) {\n          const descriptor = Object.getOwnPropertyDescriptor(func, p)\n          if (descriptor) Object.defineProperty(apply, p, descriptor)\n        }\n\n        return apply\n      }\n    )\n  )\n","/**\n * @typedef {import('trough').Pipeline} Pipeline\n *\n * @typedef {import('unist').Node} Node\n *\n * @typedef {import('vfile').Compatible} Compatible\n * @typedef {import('vfile').Value} Value\n *\n * @typedef {import('../index.js').CompileResultMap} CompileResultMap\n * @typedef {import('../index.js').Data} Data\n * @typedef {import('../index.js').Settings} Settings\n */\n\n/**\n * @typedef {CompileResultMap[keyof CompileResultMap]} CompileResults\n *   Acceptable results from compilers.\n *\n *   To register custom results, add them to\n *   {@link CompileResultMap `CompileResultMap`}.\n */\n\n/**\n * @template {Node} [Tree=Node]\n *   The node that the compiler receives (default: `Node`).\n * @template {CompileResults} [Result=CompileResults]\n *   The thing that the compiler yields (default: `CompileResults`).\n * @callback Compiler\n *   A **compiler** handles the compiling of a syntax tree to something else\n *   (in most cases, text) (TypeScript type).\n *\n *   It is used in the stringify phase and called with a {@link Node `Node`}\n *   and {@link VFile `VFile`} representation of the document to compile.\n *   It should return the textual representation of the given tree (typically\n *   `string`).\n *\n *   > 👉 **Note**: unified typically compiles by serializing: most compilers\n *   > return `string` (or `Uint8Array`).\n *   > Some compilers, such as the one configured with\n *   > [`rehype-react`][rehype-react], return other values (in this case, a\n *   > React tree).\n *   > If you’re using a compiler that doesn’t serialize, expect different\n *   > result values.\n *   >\n *   > To register custom results in TypeScript, add them to\n *   > {@link CompileResultMap `CompileResultMap`}.\n *\n *   [rehype-react]: https://github.com/rehypejs/rehype-react\n * @param {Tree} tree\n *   Tree to compile.\n * @param {VFile} file\n *   File associated with `tree`.\n * @returns {Result}\n *   New content: compiled text (`string` or `Uint8Array`, for `file.value`) or\n *   something else (for `file.result`).\n */\n\n/**\n * @template {Node} [Tree=Node]\n *   The node that the parser yields (default: `Node`)\n * @callback Parser\n *   A **parser** handles the parsing of text to a syntax tree.\n *\n *   It is used in the parse phase and is called with a `string` and\n *   {@link VFile `VFile`} of the document to parse.\n *   It must return the syntax tree representation of the given file\n *   ({@link Node `Node`}).\n * @param {string} document\n *   Document to parse.\n * @param {VFile} file\n *   File associated with `document`.\n * @returns {Tree}\n *   Node representing the given file.\n */\n\n/**\n * @typedef {(\n *   Plugin<Array<any>, any, any> |\n *   PluginTuple<Array<any>, any, any> |\n *   Preset\n * )} Pluggable\n *   Union of the different ways to add plugins and settings.\n */\n\n/**\n * @typedef {Array<Pluggable>} PluggableList\n *   List of plugins and presets.\n */\n\n// Note: we can’t use `callback` yet as it messes up `this`:\n//  <https://github.com/microsoft/TypeScript/issues/55197>.\n/**\n * @template {Array<unknown>} [PluginParameters=[]]\n *   Arguments passed to the plugin (default: `[]`, the empty tuple).\n * @template {Node | string | undefined} [Input=Node]\n *   Value that is expected as input (default: `Node`).\n *\n *   *   If the plugin returns a {@link Transformer `Transformer`}, this\n *       should be the node it expects.\n *   *   If the plugin sets a {@link Parser `Parser`}, this should be\n *       `string`.\n *   *   If the plugin sets a {@link Compiler `Compiler`}, this should be the\n *       node it expects.\n * @template [Output=Input]\n *   Value that is yielded as output (default: `Input`).\n *\n *   *   If the plugin returns a {@link Transformer `Transformer`}, this\n *       should be the node that that yields.\n *   *   If the plugin sets a {@link Parser `Parser`}, this should be the\n *       node that it yields.\n *   *   If the plugin sets a {@link Compiler `Compiler`}, this should be\n *       result it yields.\n * @typedef {(\n *   (this: Processor, ...parameters: PluginParameters) =>\n *     Input extends string ? // Parser.\n *        Output extends Node | undefined ? undefined | void : never :\n *     Output extends CompileResults ? // Compiler.\n *        Input extends Node | undefined ? undefined | void : never :\n *     Transformer<\n *       Input extends Node ? Input : Node,\n *       Output extends Node ? Output : Node\n *     > | undefined | void\n * )} Plugin\n *   Single plugin.\n *\n *   Plugins configure the processors they are applied on in the following\n *   ways:\n *\n *   *   they change the processor, such as the parser, the compiler, or by\n *       configuring data\n *   *   they specify how to handle trees and files\n *\n *   In practice, they are functions that can receive options and configure the\n *   processor (`this`).\n *\n *   > 👉 **Note**: plugins are called when the processor is *frozen*, not when\n *   > they are applied.\n */\n\n/**\n * Tuple of a plugin and its configuration.\n *\n * The first item is a plugin, the rest are its parameters.\n *\n * @template {Array<unknown>} [TupleParameters=[]]\n *   Arguments passed to the plugin (default: `[]`, the empty tuple).\n * @template {Node | string | undefined} [Input=undefined]\n *   Value that is expected as input (optional).\n *\n *   *   If the plugin returns a {@link Transformer `Transformer`}, this\n *       should be the node it expects.\n *   *   If the plugin sets a {@link Parser `Parser`}, this should be\n *       `string`.\n *   *   If the plugin sets a {@link Compiler `Compiler`}, this should be the\n *       node it expects.\n * @template [Output=undefined] (optional).\n *   Value that is yielded as output.\n *\n *   *   If the plugin returns a {@link Transformer `Transformer`}, this\n *       should be the node that that yields.\n *   *   If the plugin sets a {@link Parser `Parser`}, this should be the\n *       node that it yields.\n *   *   If the plugin sets a {@link Compiler `Compiler`}, this should be\n *       result it yields.\n * @typedef {(\n *   [\n *     plugin: Plugin<TupleParameters, Input, Output>,\n *     ...parameters: TupleParameters\n *   ]\n * )} PluginTuple\n */\n\n/**\n * @typedef Preset\n *   Sharable configuration.\n *\n *   They can contain plugins and settings.\n * @property {PluggableList | undefined} [plugins]\n *   List of plugins and presets (optional).\n * @property {Settings | undefined} [settings]\n *   Shared settings for parsers and compilers (optional).\n */\n\n/**\n * @template {VFile} [File=VFile]\n *   The file that the callback receives (default: `VFile`).\n * @callback ProcessCallback\n *   Callback called when the process is done.\n *\n *   Called with either an error or a result.\n * @param {Error | undefined} [error]\n *   Fatal error (optional).\n * @param {File | undefined} [file]\n *   Processed file (optional).\n * @returns {undefined}\n *   Nothing.\n */\n\n/**\n * @template {Node} [Tree=Node]\n *   The tree that the callback receives (default: `Node`).\n * @callback RunCallback\n *   Callback called when transformers are done.\n *\n *   Called with either an error or results.\n * @param {Error | undefined} [error]\n *   Fatal error (optional).\n * @param {Tree | undefined} [tree]\n *   Transformed tree (optional).\n * @param {VFile | undefined} [file]\n *   File (optional).\n * @returns {undefined}\n *   Nothing.\n */\n\n/**\n * @template {Node} [Output=Node]\n *   Node type that the transformer yields (default: `Node`).\n * @callback TransformCallback\n *   Callback passed to transforms.\n *\n *   If the signature of a `transformer` accepts a third argument, the\n *   transformer may perform asynchronous operations, and must call it.\n * @param {Error | undefined} [error]\n *   Fatal error to stop the process (optional).\n * @param {Output | undefined} [tree]\n *   New, changed, tree (optional).\n * @param {VFile | undefined} [file]\n *   New, changed, file (optional).\n * @returns {undefined}\n *   Nothing.\n */\n\n/**\n * @template {Node} [Input=Node]\n *   Node type that the transformer expects (default: `Node`).\n * @template {Node} [Output=Input]\n *   Node type that the transformer yields (default: `Input`).\n * @callback Transformer\n *   Transformers handle syntax trees and files.\n *\n *   They are functions that are called each time a syntax tree and file are\n *   passed through the run phase.\n *   When an error occurs in them (either because it’s thrown, returned,\n *   rejected, or passed to `next`), the process stops.\n *\n *   The run phase is handled by [`trough`][trough], see its documentation for\n *   the exact semantics of these functions.\n *\n *   > 👉 **Note**: you should likely ignore `next`: don’t accept it.\n *   > it supports callback-style async work.\n *   > But promises are likely easier to reason about.\n *\n *   [trough]: https://github.com/wooorm/trough#function-fninput-next\n * @param {Input} tree\n *   Tree to handle.\n * @param {VFile} file\n *   File to handle.\n * @param {TransformCallback<Output>} next\n *   Callback.\n * @returns {(\n *   Promise<Output | undefined | void> |\n *   Promise<never> | // For some reason this is needed separately.\n *   Output |\n *   Error |\n *   undefined |\n *   void\n * )}\n *   If you accept `next`, nothing.\n *   Otherwise:\n *\n *   *   `Error` — fatal error to stop the process\n *   *   `Promise<undefined>` or `undefined` — the next transformer keeps using\n *       same tree\n *   *   `Promise<Node>` or `Node` — new, changed, tree\n */\n\n/**\n * @template {Node | undefined} ParseTree\n *   Output of `parse`.\n * @template {Node | undefined} HeadTree\n *   Input for `run`.\n * @template {Node | undefined} TailTree\n *   Output for `run`.\n * @template {Node | undefined} CompileTree\n *   Input of `stringify`.\n * @template {CompileResults | undefined} CompileResult\n *   Output of `stringify`.\n * @template {Node | string | undefined} Input\n *   Input of plugin.\n * @template Output\n *   Output of plugin (optional).\n * @typedef {(\n *   Input extends string\n *     ? Output extends Node | undefined\n *       ? // Parser.\n *         Processor<\n *           Output extends undefined ? ParseTree : Output,\n *           HeadTree,\n *           TailTree,\n *           CompileTree,\n *           CompileResult\n *         >\n *       : // Unknown.\n *         Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>\n *     : Output extends CompileResults\n *     ? Input extends Node | undefined\n *       ? // Compiler.\n *         Processor<\n *           ParseTree,\n *           HeadTree,\n *           TailTree,\n *           Input extends undefined ? CompileTree : Input,\n *           Output extends undefined ? CompileResult : Output\n *         >\n *       : // Unknown.\n *         Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>\n *     : Input extends Node | undefined\n *     ? Output extends Node | undefined\n *       ? // Transform.\n *         Processor<\n *           ParseTree,\n *           HeadTree extends undefined ? Input : HeadTree,\n *           Output extends undefined ? TailTree : Output,\n *           CompileTree,\n *           CompileResult\n *         >\n *       : // Unknown.\n *         Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>\n *     : // Unknown.\n *       Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>\n * )} UsePlugin\n *   Create a processor based on the input/output of a {@link Plugin plugin}.\n */\n\n/**\n * @template {CompileResults | undefined} Result\n *   Node type that the transformer yields.\n * @typedef {(\n *   Result extends Value | undefined ?\n *     VFile :\n *     VFile & {result: Result}\n *   )} VFileWithOutput\n *   Type to generate a {@link VFile `VFile`} corresponding to a compiler result.\n *\n *   If a result that is not acceptable on a `VFile` is used, that will\n *   be stored on the `result` field of {@link VFile `VFile`}.\n */\n\nimport {bail} from 'bail'\nimport extend from 'extend'\nimport {ok as assert} from 'devlop'\nimport isPlainObj from 'is-plain-obj'\nimport {trough} from 'trough'\nimport {VFile} from 'vfile'\nimport {CallableInstance} from './callable-instance.js'\n\n// To do: next major: drop `Compiler`, `Parser`: prefer lowercase.\n\n// To do: we could start yielding `never` in TS when a parser is missing and\n// `parse` is called.\n// Currently, we allow directly setting `processor.parser`, which is untyped.\n\nconst own = {}.hasOwnProperty\n\n/**\n * @template {Node | undefined} [ParseTree=undefined]\n *   Output of `parse` (optional).\n * @template {Node | undefined} [HeadTree=undefined]\n *   Input for `run` (optional).\n * @template {Node | undefined} [TailTree=undefined]\n *   Output for `run` (optional).\n * @template {Node | undefined} [CompileTree=undefined]\n *   Input of `stringify` (optional).\n * @template {CompileResults | undefined} [CompileResult=undefined]\n *   Output of `stringify` (optional).\n * @extends {CallableInstance<[], Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>>}\n */\nexport class Processor extends CallableInstance {\n  /**\n   * Create a processor.\n   */\n  constructor() {\n    // If `Processor()` is called (w/o new), `copy` is called instead.\n    super('copy')\n\n    /**\n     * Compiler to use (deprecated).\n     *\n     * @deprecated\n     *   Use `compiler` instead.\n     * @type {(\n     *   Compiler<\n     *     CompileTree extends undefined ? Node : CompileTree,\n     *     CompileResult extends undefined ? CompileResults : CompileResult\n     *   > |\n     *   undefined\n     * )}\n     */\n    this.Compiler = undefined\n\n    /**\n     * Parser to use (deprecated).\n     *\n     * @deprecated\n     *   Use `parser` instead.\n     * @type {(\n     *   Parser<ParseTree extends undefined ? Node : ParseTree> |\n     *   undefined\n     * )}\n     */\n    this.Parser = undefined\n\n    // Note: the following fields are considered private.\n    // However, they are needed for tests, and TSC generates an untyped\n    // `private freezeIndex` field for, which trips `type-coverage` up.\n    // Instead, we use `@deprecated` to visualize that they shouldn’t be used.\n    /**\n     * Internal list of configured plugins.\n     *\n     * @deprecated\n     *   This is a private internal property and should not be used.\n     * @type {Array<PluginTuple<Array<unknown>>>}\n     */\n    this.attachers = []\n\n    /**\n     * Compiler to use.\n     *\n     * @type {(\n     *   Compiler<\n     *     CompileTree extends undefined ? Node : CompileTree,\n     *     CompileResult extends undefined ? CompileResults : CompileResult\n     *   > |\n     *   undefined\n     * )}\n     */\n    this.compiler = undefined\n\n    /**\n     * Internal state to track where we are while freezing.\n     *\n     * @deprecated\n     *   This is a private internal property and should not be used.\n     * @type {number}\n     */\n    this.freezeIndex = -1\n\n    /**\n     * Internal state to track whether we’re frozen.\n     *\n     * @deprecated\n     *   This is a private internal property and should not be used.\n     * @type {boolean | undefined}\n     */\n    this.frozen = undefined\n\n    /**\n     * Internal state.\n     *\n     * @deprecated\n     *   This is a private internal property and should not be used.\n     * @type {Data}\n     */\n    this.namespace = {}\n\n    /**\n     * Parser to use.\n     *\n     * @type {(\n     *   Parser<ParseTree extends undefined ? Node : ParseTree> |\n     *   undefined\n     * )}\n     */\n    this.parser = undefined\n\n    /**\n     * Internal list of configured transformers.\n     *\n     * @deprecated\n     *   This is a private internal property and should not be used.\n     * @type {Pipeline}\n     */\n    this.transformers = trough()\n  }\n\n  /**\n   * Copy a processor.\n   *\n   * @deprecated\n   *   This is a private internal method and should not be used.\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *   New *unfrozen* processor ({@link Processor `Processor`}) that is\n   *   configured to work the same as its ancestor.\n   *   When the descendant processor is configured in the future it does not\n   *   affect the ancestral processor.\n   */\n  copy() {\n    // Cast as the type parameters will be the same after attaching.\n    const destination =\n      /** @type {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>} */ (\n        new Processor()\n      )\n    let index = -1\n\n    while (++index < this.attachers.length) {\n      const attacher = this.attachers[index]\n      destination.use(...attacher)\n    }\n\n    destination.data(extend(true, {}, this.namespace))\n\n    return destination\n  }\n\n  /**\n   * Configure the processor with info available to all plugins.\n   * Information is stored in an object.\n   *\n   * Typically, options can be given to a specific plugin, but sometimes it\n   * makes sense to have information shared with several plugins.\n   * For example, a list of HTML elements that are self-closing, which is\n   * needed during all phases.\n   *\n   * > 👉 **Note**: setting information cannot occur on *frozen* processors.\n   * > Call the processor first to create a new unfrozen processor.\n   *\n   * > 👉 **Note**: to register custom data in TypeScript, augment the\n   * > {@link Data `Data`} interface.\n   *\n   * @example\n   *   This example show how to get and set info:\n   *\n   *   ```js\n   *   import {unified} from 'unified'\n   *\n   *   const processor = unified().data('alpha', 'bravo')\n   *\n   *   processor.data('alpha') // => 'bravo'\n   *\n   *   processor.data() // => {alpha: 'bravo'}\n   *\n   *   processor.data({charlie: 'delta'})\n   *\n   *   processor.data() // => {charlie: 'delta'}\n   *   ```\n   *\n   * @template {keyof Data} Key\n   *\n   * @overload\n   * @returns {Data}\n   *\n   * @overload\n   * @param {Data} dataset\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *\n   * @overload\n   * @param {Key} key\n   * @returns {Data[Key]}\n   *\n   * @overload\n   * @param {Key} key\n   * @param {Data[Key]} value\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *\n   * @param {Data | Key} [key]\n   *   Key to get or set, or entire dataset to set, or nothing to get the\n   *   entire dataset (optional).\n   * @param {Data[Key]} [value]\n   *   Value to set (optional).\n   * @returns {unknown}\n   *   The current processor when setting, the value at `key` when getting, or\n   *   the entire dataset when getting without key.\n   */\n  data(key, value) {\n    if (typeof key === 'string') {\n      // Set `key`.\n      if (arguments.length === 2) {\n        assertUnfrozen('data', this.frozen)\n        this.namespace[key] = value\n        return this\n      }\n\n      // Get `key`.\n      return (own.call(this.namespace, key) && this.namespace[key]) || undefined\n    }\n\n    // Set space.\n    if (key) {\n      assertUnfrozen('data', this.frozen)\n      this.namespace = key\n      return this\n    }\n\n    // Get space.\n    return this.namespace\n  }\n\n  /**\n   * Freeze a processor.\n   *\n   * Frozen processors are meant to be extended and not to be configured\n   * directly.\n   *\n   * When a processor is frozen it cannot be unfrozen.\n   * New processors working the same way can be created by calling the\n   * processor.\n   *\n   * It’s possible to freeze processors explicitly by calling `.freeze()`.\n   * Processors freeze automatically when `.parse()`, `.run()`, `.runSync()`,\n   * `.stringify()`, `.process()`, or `.processSync()` are called.\n   *\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *   The current processor.\n   */\n  freeze() {\n    if (this.frozen) {\n      return this\n    }\n\n    // Cast so that we can type plugins easier.\n    // Plugins are supposed to be usable on different processors, not just on\n    // this exact processor.\n    const self = /** @type {Processor} */ (/** @type {unknown} */ (this))\n\n    while (++this.freezeIndex < this.attachers.length) {\n      const [attacher, ...options] = this.attachers[this.freezeIndex]\n\n      if (options[0] === false) {\n        continue\n      }\n\n      if (options[0] === true) {\n        options[0] = undefined\n      }\n\n      const transformer = attacher.call(self, ...options)\n\n      if (typeof transformer === 'function') {\n        this.transformers.use(transformer)\n      }\n    }\n\n    this.frozen = true\n    this.freezeIndex = Number.POSITIVE_INFINITY\n\n    return this\n  }\n\n  /**\n   * Parse text to a syntax tree.\n   *\n   * > 👉 **Note**: `parse` freezes the processor if not already *frozen*.\n   *\n   * > 👉 **Note**: `parse` performs the parse phase, not the run phase or other\n   * > phases.\n   *\n   * @param {Compatible | undefined} [file]\n   *   file to parse (optional); typically `string` or `VFile`; any value\n   *   accepted as `x` in `new VFile(x)`.\n   * @returns {ParseTree extends undefined ? Node : ParseTree}\n   *   Syntax tree representing `file`.\n   */\n  parse(file) {\n    this.freeze()\n    const realFile = vfile(file)\n    const parser = this.parser || this.Parser\n    assertParser('parse', parser)\n    return parser(String(realFile), realFile)\n  }\n\n  /**\n   * Process the given file as configured on the processor.\n   *\n   * > 👉 **Note**: `process` freezes the processor if not already *frozen*.\n   *\n   * > 👉 **Note**: `process` performs the parse, run, and stringify phases.\n   *\n   * @overload\n   * @param {Compatible | undefined} file\n   * @param {ProcessCallback<VFileWithOutput<CompileResult>>} done\n   * @returns {undefined}\n   *\n   * @overload\n   * @param {Compatible | undefined} [file]\n   * @returns {Promise<VFileWithOutput<CompileResult>>}\n   *\n   * @param {Compatible | undefined} [file]\n   *   File (optional); typically `string` or `VFile`]; any value accepted as\n   *   `x` in `new VFile(x)`.\n   * @param {ProcessCallback<VFileWithOutput<CompileResult>> | undefined} [done]\n   *   Callback (optional).\n   * @returns {Promise<VFile> | undefined}\n   *   Nothing if `done` is given.\n   *   Otherwise a promise, rejected with a fatal error or resolved with the\n   *   processed file.\n   *\n   *   The parsed, transformed, and compiled value is available at\n   *   `file.value` (see note).\n   *\n   *   > 👉 **Note**: unified typically compiles by serializing: most\n   *   > compilers return `string` (or `Uint8Array`).\n   *   > Some compilers, such as the one configured with\n   *   > [`rehype-react`][rehype-react], return other values (in this case, a\n   *   > React tree).\n   *   > If you’re using a compiler that doesn’t serialize, expect different\n   *   > result values.\n   *   >\n   *   > To register custom results in TypeScript, add them to\n   *   > {@link CompileResultMap `CompileResultMap`}.\n   *\n   *   [rehype-react]: https://github.com/rehypejs/rehype-react\n   */\n  process(file, done) {\n    const self = this\n\n    this.freeze()\n    assertParser('process', this.parser || this.Parser)\n    assertCompiler('process', this.compiler || this.Compiler)\n\n    return done ? executor(undefined, done) : new Promise(executor)\n\n    // Note: `void`s needed for TS.\n    /**\n     * @param {((file: VFileWithOutput<CompileResult>) => undefined | void) | undefined} resolve\n     * @param {(error: Error | undefined) => undefined | void} reject\n     * @returns {undefined}\n     */\n    function executor(resolve, reject) {\n      const realFile = vfile(file)\n      // Assume `ParseTree` (the result of the parser) matches `HeadTree` (the\n      // input of the first transform).\n      const parseTree =\n        /** @type {HeadTree extends undefined ? Node : HeadTree} */ (\n          /** @type {unknown} */ (self.parse(realFile))\n        )\n\n      self.run(parseTree, realFile, function (error, tree, file) {\n        if (error || !tree || !file) {\n          return realDone(error)\n        }\n\n        // Assume `TailTree` (the output of the last transform) matches\n        // `CompileTree` (the input of the compiler).\n        const compileTree =\n          /** @type {CompileTree extends undefined ? Node : CompileTree} */ (\n            /** @type {unknown} */ (tree)\n          )\n\n        const compileResult = self.stringify(compileTree, file)\n\n        if (looksLikeAValue(compileResult)) {\n          file.value = compileResult\n        } else {\n          file.result = compileResult\n        }\n\n        realDone(error, /** @type {VFileWithOutput<CompileResult>} */ (file))\n      })\n\n      /**\n       * @param {Error | undefined} error\n       * @param {VFileWithOutput<CompileResult> | undefined} [file]\n       * @returns {undefined}\n       */\n      function realDone(error, file) {\n        if (error || !file) {\n          reject(error)\n        } else if (resolve) {\n          resolve(file)\n        } else {\n          assert(done, '`done` is defined if `resolve` is not')\n          done(undefined, file)\n        }\n      }\n    }\n  }\n\n  /**\n   * Process the given file as configured on the processor.\n   *\n   * An error is thrown if asynchronous transforms are configured.\n   *\n   * > 👉 **Note**: `processSync` freezes the processor if not already *frozen*.\n   *\n   * > 👉 **Note**: `processSync` performs the parse, run, and stringify phases.\n   *\n   * @param {Compatible | undefined} [file]\n   *   File (optional); typically `string` or `VFile`; any value accepted as\n   *   `x` in `new VFile(x)`.\n   * @returns {VFileWithOutput<CompileResult>}\n   *   The processed file.\n   *\n   *   The parsed, transformed, and compiled value is available at\n   *   `file.value` (see note).\n   *\n   *   > 👉 **Note**: unified typically compiles by serializing: most\n   *   > compilers return `string` (or `Uint8Array`).\n   *   > Some compilers, such as the one configured with\n   *   > [`rehype-react`][rehype-react], return other values (in this case, a\n   *   > React tree).\n   *   > If you’re using a compiler that doesn’t serialize, expect different\n   *   > result values.\n   *   >\n   *   > To register custom results in TypeScript, add them to\n   *   > {@link CompileResultMap `CompileResultMap`}.\n   *\n   *   [rehype-react]: https://github.com/rehypejs/rehype-react\n   */\n  processSync(file) {\n    /** @type {boolean} */\n    let complete = false\n    /** @type {VFileWithOutput<CompileResult> | undefined} */\n    let result\n\n    this.freeze()\n    assertParser('processSync', this.parser || this.Parser)\n    assertCompiler('processSync', this.compiler || this.Compiler)\n\n    this.process(file, realDone)\n    assertDone('processSync', 'process', complete)\n    assert(result, 'we either bailed on an error or have a tree')\n\n    return result\n\n    /**\n     * @type {ProcessCallback<VFileWithOutput<CompileResult>>}\n     */\n    function realDone(error, file) {\n      complete = true\n      bail(error)\n      result = file\n    }\n  }\n\n  /**\n   * Run *transformers* on a syntax tree.\n   *\n   * > 👉 **Note**: `run` freezes the processor if not already *frozen*.\n   *\n   * > 👉 **Note**: `run` performs the run phase, not other phases.\n   *\n   * @overload\n   * @param {HeadTree extends undefined ? Node : HeadTree} tree\n   * @param {RunCallback<TailTree extends undefined ? Node : TailTree>} done\n   * @returns {undefined}\n   *\n   * @overload\n   * @param {HeadTree extends undefined ? Node : HeadTree} tree\n   * @param {Compatible | undefined} file\n   * @param {RunCallback<TailTree extends undefined ? Node : TailTree>} done\n   * @returns {undefined}\n   *\n   * @overload\n   * @param {HeadTree extends undefined ? Node : HeadTree} tree\n   * @param {Compatible | undefined} [file]\n   * @returns {Promise<TailTree extends undefined ? Node : TailTree>}\n   *\n   * @param {HeadTree extends undefined ? Node : HeadTree} tree\n   *   Tree to transform and inspect.\n   * @param {(\n   *   RunCallback<TailTree extends undefined ? Node : TailTree> |\n   *   Compatible\n   * )} [file]\n   *   File associated with `node` (optional); any value accepted as `x` in\n   *   `new VFile(x)`.\n   * @param {RunCallback<TailTree extends undefined ? Node : TailTree>} [done]\n   *   Callback (optional).\n   * @returns {Promise<TailTree extends undefined ? Node : TailTree> | undefined}\n   *   Nothing if `done` is given.\n   *   Otherwise, a promise rejected with a fatal error or resolved with the\n   *   transformed tree.\n   */\n  run(tree, file, done) {\n    assertNode(tree)\n    this.freeze()\n\n    const transformers = this.transformers\n\n    if (!done && typeof file === 'function') {\n      done = file\n      file = undefined\n    }\n\n    return done ? executor(undefined, done) : new Promise(executor)\n\n    // Note: `void`s needed for TS.\n    /**\n     * @param {(\n     *   ((tree: TailTree extends undefined ? Node : TailTree) => undefined | void) |\n     *   undefined\n     * )} resolve\n     * @param {(error: Error) => undefined | void} reject\n     * @returns {undefined}\n     */\n    function executor(resolve, reject) {\n      assert(\n        typeof file !== 'function',\n        '`file` can’t be a `done` anymore, we checked'\n      )\n      const realFile = vfile(file)\n      transformers.run(tree, realFile, realDone)\n\n      /**\n       * @param {Error | undefined} error\n       * @param {Node} outputTree\n       * @param {VFile} file\n       * @returns {undefined}\n       */\n      function realDone(error, outputTree, file) {\n        const resultingTree =\n          /** @type {TailTree extends undefined ? Node : TailTree} */ (\n            outputTree || tree\n          )\n\n        if (error) {\n          reject(error)\n        } else if (resolve) {\n          resolve(resultingTree)\n        } else {\n          assert(done, '`done` is defined if `resolve` is not')\n          done(undefined, resultingTree, file)\n        }\n      }\n    }\n  }\n\n  /**\n   * Run *transformers* on a syntax tree.\n   *\n   * An error is thrown if asynchronous transforms are configured.\n   *\n   * > 👉 **Note**: `runSync` freezes the processor if not already *frozen*.\n   *\n   * > 👉 **Note**: `runSync` performs the run phase, not other phases.\n   *\n   * @param {HeadTree extends undefined ? Node : HeadTree} tree\n   *   Tree to transform and inspect.\n   * @param {Compatible | undefined} [file]\n   *   File associated with `node` (optional); any value accepted as `x` in\n   *   `new VFile(x)`.\n   * @returns {TailTree extends undefined ? Node : TailTree}\n   *   Transformed tree.\n   */\n  runSync(tree, file) {\n    /** @type {boolean} */\n    let complete = false\n    /** @type {(TailTree extends undefined ? Node : TailTree) | undefined} */\n    let result\n\n    this.run(tree, file, realDone)\n\n    assertDone('runSync', 'run', complete)\n    assert(result, 'we either bailed on an error or have a tree')\n    return result\n\n    /**\n     * @type {RunCallback<TailTree extends undefined ? Node : TailTree>}\n     */\n    function realDone(error, tree) {\n      bail(error)\n      result = tree\n      complete = true\n    }\n  }\n\n  /**\n   * Compile a syntax tree.\n   *\n   * > 👉 **Note**: `stringify` freezes the processor if not already *frozen*.\n   *\n   * > 👉 **Note**: `stringify` performs the stringify phase, not the run phase\n   * > or other phases.\n   *\n   * @param {CompileTree extends undefined ? Node : CompileTree} tree\n   *   Tree to compile.\n   * @param {Compatible | undefined} [file]\n   *   File associated with `node` (optional); any value accepted as `x` in\n   *   `new VFile(x)`.\n   * @returns {CompileResult extends undefined ? Value : CompileResult}\n   *   Textual representation of the tree (see note).\n   *\n   *   > 👉 **Note**: unified typically compiles by serializing: most compilers\n   *   > return `string` (or `Uint8Array`).\n   *   > Some compilers, such as the one configured with\n   *   > [`rehype-react`][rehype-react], return other values (in this case, a\n   *   > React tree).\n   *   > If you’re using a compiler that doesn’t serialize, expect different\n   *   > result values.\n   *   >\n   *   > To register custom results in TypeScript, add them to\n   *   > {@link CompileResultMap `CompileResultMap`}.\n   *\n   *   [rehype-react]: https://github.com/rehypejs/rehype-react\n   */\n  stringify(tree, file) {\n    this.freeze()\n    const realFile = vfile(file)\n    const compiler = this.compiler || this.Compiler\n    assertCompiler('stringify', compiler)\n    assertNode(tree)\n\n    return compiler(tree, realFile)\n  }\n\n  /**\n   * Configure the processor to use a plugin, a list of usable values, or a\n   * preset.\n   *\n   * If the processor is already using a plugin, the previous plugin\n   * configuration is changed based on the options that are passed in.\n   * In other words, the plugin is not added a second time.\n   *\n   * > 👉 **Note**: `use` cannot be called on *frozen* processors.\n   * > Call the processor first to create a new unfrozen processor.\n   *\n   * @example\n   *   There are many ways to pass plugins to `.use()`.\n   *   This example gives an overview:\n   *\n   *   ```js\n   *   import {unified} from 'unified'\n   *\n   *   unified()\n   *     // Plugin with options:\n   *     .use(pluginA, {x: true, y: true})\n   *     // Passing the same plugin again merges configuration (to `{x: true, y: false, z: true}`):\n   *     .use(pluginA, {y: false, z: true})\n   *     // Plugins:\n   *     .use([pluginB, pluginC])\n   *     // Two plugins, the second with options:\n   *     .use([pluginD, [pluginE, {}]])\n   *     // Preset with plugins and settings:\n   *     .use({plugins: [pluginF, [pluginG, {}]], settings: {position: false}})\n   *     // Settings only:\n   *     .use({settings: {position: false}})\n   *   ```\n   *\n   * @template {Array<unknown>} [Parameters=[]]\n   * @template {Node | string | undefined} [Input=undefined]\n   * @template [Output=Input]\n   *\n   * @overload\n   * @param {Preset | null | undefined} [preset]\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *\n   * @overload\n   * @param {PluggableList} list\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *\n   * @overload\n   * @param {Plugin<Parameters, Input, Output>} plugin\n   * @param {...(Parameters | [boolean])} parameters\n   * @returns {UsePlugin<ParseTree, HeadTree, TailTree, CompileTree, CompileResult, Input, Output>}\n   *\n   * @param {PluggableList | Plugin | Preset | null | undefined} value\n   *   Usable value.\n   * @param {...unknown} parameters\n   *   Parameters, when a plugin is given as a usable value.\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *   Current processor.\n   */\n  use(value, ...parameters) {\n    const attachers = this.attachers\n    const namespace = this.namespace\n\n    assertUnfrozen('use', this.frozen)\n\n    if (value === null || value === undefined) {\n      // Empty.\n    } else if (typeof value === 'function') {\n      addPlugin(value, parameters)\n    } else if (typeof value === 'object') {\n      if (Array.isArray(value)) {\n        addList(value)\n      } else {\n        addPreset(value)\n      }\n    } else {\n      throw new TypeError('Expected usable value, not `' + value + '`')\n    }\n\n    return this\n\n    /**\n     * @param {Pluggable} value\n     * @returns {undefined}\n     */\n    function add(value) {\n      if (typeof value === 'function') {\n        addPlugin(value, [])\n      } else if (typeof value === 'object') {\n        if (Array.isArray(value)) {\n          const [plugin, ...parameters] =\n            /** @type {PluginTuple<Array<unknown>>} */ (value)\n          addPlugin(plugin, parameters)\n        } else {\n          addPreset(value)\n        }\n      } else {\n        throw new TypeError('Expected usable value, not `' + value + '`')\n      }\n    }\n\n    /**\n     * @param {Preset} result\n     * @returns {undefined}\n     */\n    function addPreset(result) {\n      if (!('plugins' in result) && !('settings' in result)) {\n        throw new Error(\n          'Expected usable value but received an empty preset, which is probably a mistake: presets typically come with `plugins` and sometimes with `settings`, but this has neither'\n        )\n      }\n\n      addList(result.plugins)\n\n      if (result.settings) {\n        namespace.settings = extend(true, namespace.settings, result.settings)\n      }\n    }\n\n    /**\n     * @param {PluggableList | null | undefined} plugins\n     * @returns {undefined}\n     */\n    function addList(plugins) {\n      let index = -1\n\n      if (plugins === null || plugins === undefined) {\n        // Empty.\n      } else if (Array.isArray(plugins)) {\n        while (++index < plugins.length) {\n          const thing = plugins[index]\n          add(thing)\n        }\n      } else {\n        throw new TypeError('Expected a list of plugins, not `' + plugins + '`')\n      }\n    }\n\n    /**\n     * @param {Plugin} plugin\n     * @param {Array<unknown>} parameters\n     * @returns {undefined}\n     */\n    function addPlugin(plugin, parameters) {\n      let index = -1\n      let entryIndex = -1\n\n      while (++index < attachers.length) {\n        if (attachers[index][0] === plugin) {\n          entryIndex = index\n          break\n        }\n      }\n\n      if (entryIndex === -1) {\n        attachers.push([plugin, ...parameters])\n      }\n      // Only set if there was at least a `primary` value, otherwise we’d change\n      // `arguments.length`.\n      else if (parameters.length > 0) {\n        let [primary, ...rest] = parameters\n        const currentPrimary = attachers[entryIndex][1]\n        if (isPlainObj(currentPrimary) && isPlainObj(primary)) {\n          primary = extend(true, currentPrimary, primary)\n        }\n\n        attachers[entryIndex] = [plugin, primary, ...rest]\n      }\n    }\n  }\n}\n\n// Note: this returns a *callable* instance.\n// That’s why it’s documented as a function.\n/**\n * Create a new processor.\n *\n * @example\n *   This example shows how a new processor can be created (from `remark`) and linked\n *   to **stdin**(4) and **stdout**(4).\n *\n *   ```js\n *   import process from 'node:process'\n *   import concatStream from 'concat-stream'\n *   import {remark} from 'remark'\n *\n *   process.stdin.pipe(\n *     concatStream(function (buf) {\n *       process.stdout.write(String(remark().processSync(buf)))\n *     })\n *   )\n *   ```\n *\n * @returns\n *   New *unfrozen* processor (`processor`).\n *\n *   This processor is configured to work the same as its ancestor.\n *   When the descendant processor is configured in the future it does not\n *   affect the ancestral processor.\n */\nexport const unified = new Processor().freeze()\n\n/**\n * Assert a parser is available.\n *\n * @param {string} name\n * @param {unknown} value\n * @returns {asserts value is Parser}\n */\nfunction assertParser(name, value) {\n  if (typeof value !== 'function') {\n    throw new TypeError('Cannot `' + name + '` without `parser`')\n  }\n}\n\n/**\n * Assert a compiler is available.\n *\n * @param {string} name\n * @param {unknown} value\n * @returns {asserts value is Compiler}\n */\nfunction assertCompiler(name, value) {\n  if (typeof value !== 'function') {\n    throw new TypeError('Cannot `' + name + '` without `compiler`')\n  }\n}\n\n/**\n * Assert the processor is not frozen.\n *\n * @param {string} name\n * @param {unknown} frozen\n * @returns {asserts frozen is false}\n */\nfunction assertUnfrozen(name, frozen) {\n  if (frozen) {\n    throw new Error(\n      'Cannot call `' +\n        name +\n        '` on a frozen processor.\\nCreate a new processor first, by calling it: use `processor()` instead of `processor`.'\n    )\n  }\n}\n\n/**\n * Assert `node` is a unist node.\n *\n * @param {unknown} node\n * @returns {asserts node is Node}\n */\nfunction assertNode(node) {\n  // `isPlainObj` unfortunately uses `any` instead of `unknown`.\n  // type-coverage:ignore-next-line\n  if (!isPlainObj(node) || typeof node.type !== 'string') {\n    throw new TypeError('Expected node, got `' + node + '`')\n    // Fine.\n  }\n}\n\n/**\n * Assert that `complete` is `true`.\n *\n * @param {string} name\n * @param {string} asyncName\n * @param {unknown} complete\n * @returns {asserts complete is true}\n */\nfunction assertDone(name, asyncName, complete) {\n  if (!complete) {\n    throw new Error(\n      '`' + name + '` finished async. Use `' + asyncName + '` instead'\n    )\n  }\n}\n\n/**\n * @param {Compatible | undefined} [value]\n * @returns {VFile}\n */\nfunction vfile(value) {\n  return looksLikeAVFile(value) ? value : new VFile(value)\n}\n\n/**\n * @param {Compatible | undefined} [value]\n * @returns {value is VFile}\n */\nfunction looksLikeAVFile(value) {\n  return Boolean(\n    value &&\n      typeof value === 'object' &&\n      'message' in value &&\n      'messages' in value\n  )\n}\n\n/**\n * @param {unknown} [value]\n * @returns {value is Value}\n */\nfunction looksLikeAValue(value) {\n  return typeof value === 'string' || isUint8Array(value)\n}\n\n/**\n * Assert `value` is an `Uint8Array`.\n *\n * @param {unknown} value\n *   thing.\n * @returns {value is Uint8Array}\n *   Whether `value` is an `Uint8Array`.\n */\nfunction isUint8Array(value) {\n  return Boolean(\n    value &&\n      typeof value === 'object' &&\n      'byteLength' in value &&\n      'byteOffset' in value\n  )\n}\n","// Register `Raw` in tree:\n/// <reference types=\"mdast-util-to-hast\" />\n\n/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Nodes} Nodes\n * @typedef {import('hast').Parents} Parents\n * @typedef {import('hast').Root} Root\n * @typedef {import('hast-util-to-jsx-runtime').Components} JsxRuntimeComponents\n * @typedef {import('remark-rehype').Options} RemarkRehypeOptions\n * @typedef {import('unist-util-visit').BuildVisitor<Root>} Visitor\n * @typedef {import('unified').PluggableList} PluggableList\n */\n\n/**\n * @callback AllowElement\n *   Filter elements.\n * @param {Readonly<Element>} element\n *   Element to check.\n * @param {number} index\n *   Index of `element` in `parent`.\n * @param {Readonly<Parents> | undefined} parent\n *   Parent of `element`.\n * @returns {boolean | null | undefined}\n *   Whether to allow `element` (default: `false`).\n *\n * @typedef {Partial<JsxRuntimeComponents>} Components\n *   Map tag names to components.\n *\n * @typedef Deprecation\n *   Deprecation.\n * @property {string} from\n *   Old field.\n * @property {string} id\n *   ID in readme.\n * @property {keyof Options} [to]\n *   New field.\n *\n * @typedef Options\n *   Configuration.\n * @property {AllowElement | null | undefined} [allowElement]\n *   Filter elements (optional);\n *   `allowedElements` / `disallowedElements` is used first.\n * @property {ReadonlyArray<string> | null | undefined} [allowedElements]\n *   Tag names to allow (default: all tag names);\n *   cannot combine w/ `disallowedElements`.\n * @property {string | null | undefined} [children]\n *   Markdown.\n * @property {string | null | undefined} [className]\n *   Wrap in a `div` with this class name.\n * @property {Components | null | undefined} [components]\n *   Map tag names to components.\n * @property {ReadonlyArray<string> | null | undefined} [disallowedElements]\n *   Tag names to disallow (default: `[]`);\n *   cannot combine w/ `allowedElements`.\n * @property {PluggableList | null | undefined} [rehypePlugins]\n *   List of rehype plugins to use.\n * @property {PluggableList | null | undefined} [remarkPlugins]\n *   List of remark plugins to use.\n * @property {Readonly<RemarkRehypeOptions> | null | undefined} [remarkRehypeOptions]\n *   Options to pass through to `remark-rehype`.\n * @property {boolean | null | undefined} [skipHtml=false]\n *   Ignore HTML in markdown completely (default: `false`).\n * @property {boolean | null | undefined} [unwrapDisallowed=false]\n *   Extract (unwrap) what’s in disallowed elements (default: `false`);\n *   normally when say `strong` is not allowed, it and it’s children are dropped,\n *   with `unwrapDisallowed` the element itself is replaced by its children.\n * @property {UrlTransform | null | undefined} [urlTransform]\n *   Change URLs (default: `defaultUrlTransform`)\n *\n * @callback UrlTransform\n *   Transform all URLs.\n * @param {string} url\n *   URL.\n * @param {string} key\n *   Property name (example: `'href'`).\n * @param {Readonly<Element>} node\n *   Node.\n * @returns {string | null | undefined}\n *   Transformed URL (optional).\n */\n\nimport {unreachable} from 'devlop'\nimport {toJsxRuntime} from 'hast-util-to-jsx-runtime'\nimport {urlAttributes} from 'html-url-attributes'\nimport {sanitizeUri} from 'micromark-util-sanitize-uri'\n// @ts-expect-error: untyped.\nimport {Fragment, jsx, jsxs} from 'react/jsx-runtime'\nimport remarkParse from 'remark-parse'\nimport remarkRehype from 'remark-rehype'\nimport {unified} from 'unified'\nimport {visit} from 'unist-util-visit'\nimport {VFile} from 'vfile'\n\nconst own = {}.hasOwnProperty\nconst changelog =\n  'https://github.com/remarkjs/react-markdown/blob/main/changelog.md'\n\n/** @type {PluggableList} */\nconst emptyPlugins = []\n/** @type {Readonly<RemarkRehypeOptions>} */\nconst emptyRemarkRehypeOptions = {allowDangerousHtml: true}\nconst safeProtocol = /^(https?|ircs?|mailto|xmpp)$/i\n\n// Mutable because we `delete` any time it’s used and a message is sent.\n/** @type {ReadonlyArray<Readonly<Deprecation>>} */\nconst deprecations = [\n  {from: 'astPlugins', id: 'remove-buggy-html-in-markdown-parser'},\n  {from: 'allowDangerousHtml', id: 'remove-buggy-html-in-markdown-parser'},\n  {\n    from: 'allowNode',\n    id: 'replace-allownode-allowedtypes-and-disallowedtypes',\n    to: 'allowElement'\n  },\n  {\n    from: 'allowedTypes',\n    id: 'replace-allownode-allowedtypes-and-disallowedtypes',\n    to: 'allowedElements'\n  },\n  {\n    from: 'disallowedTypes',\n    id: 'replace-allownode-allowedtypes-and-disallowedtypes',\n    to: 'disallowedElements'\n  },\n  {from: 'escapeHtml', id: 'remove-buggy-html-in-markdown-parser'},\n  {from: 'includeElementIndex', id: '#remove-includeelementindex'},\n  {\n    from: 'includeNodeIndex',\n    id: 'change-includenodeindex-to-includeelementindex'\n  },\n  {from: 'linkTarget', id: 'remove-linktarget'},\n  {from: 'plugins', id: 'change-plugins-to-remarkplugins', to: 'remarkPlugins'},\n  {from: 'rawSourcePos', id: '#remove-rawsourcepos'},\n  {from: 'renderers', id: 'change-renderers-to-components', to: 'components'},\n  {from: 'source', id: 'change-source-to-children', to: 'children'},\n  {from: 'sourcePos', id: '#remove-sourcepos'},\n  {from: 'transformImageUri', id: '#add-urltransform', to: 'urlTransform'},\n  {from: 'transformLinkUri', id: '#add-urltransform', to: 'urlTransform'}\n]\n\n/**\n * Component to render markdown.\n *\n * @param {Readonly<Options>} options\n *   Props.\n * @returns {JSX.Element}\n *   React element.\n */\nexport function Markdown(options) {\n  const allowedElements = options.allowedElements\n  const allowElement = options.allowElement\n  const children = options.children || ''\n  const className = options.className\n  const components = options.components\n  const disallowedElements = options.disallowedElements\n  const rehypePlugins = options.rehypePlugins || emptyPlugins\n  const remarkPlugins = options.remarkPlugins || emptyPlugins\n  const remarkRehypeOptions = options.remarkRehypeOptions\n    ? {...options.remarkRehypeOptions, ...emptyRemarkRehypeOptions}\n    : emptyRemarkRehypeOptions\n  const skipHtml = options.skipHtml\n  const unwrapDisallowed = options.unwrapDisallowed\n  const urlTransform = options.urlTransform || defaultUrlTransform\n\n  const processor = unified()\n    .use(remarkParse)\n    .use(remarkPlugins)\n    .use(remarkRehype, remarkRehypeOptions)\n    .use(rehypePlugins)\n\n  const file = new VFile()\n\n  if (typeof children === 'string') {\n    file.value = children\n  } else {\n    unreachable(\n      'Unexpected value `' +\n        children +\n        '` for `children` prop, expected `string`'\n    )\n  }\n\n  if (allowedElements && disallowedElements) {\n    unreachable(\n      'Unexpected combined `allowedElements` and `disallowedElements`, expected one or the other'\n    )\n  }\n\n  for (const deprecation of deprecations) {\n    if (Object.hasOwn(options, deprecation.from)) {\n      unreachable(\n        'Unexpected `' +\n          deprecation.from +\n          '` prop, ' +\n          (deprecation.to\n            ? 'use `' + deprecation.to + '` instead'\n            : 'remove it') +\n          ' (see <' +\n          changelog +\n          '#' +\n          deprecation.id +\n          '> for more info)'\n      )\n    }\n  }\n\n  const mdastTree = processor.parse(file)\n  /** @type {Nodes} */\n  let hastTree = processor.runSync(mdastTree, file)\n\n  // Wrap in `div` if there’s a class name.\n  if (className) {\n    hastTree = {\n      type: 'element',\n      tagName: 'div',\n      properties: {className},\n      // Assume no doctypes.\n      children: /** @type {Array<ElementContent>} */ (\n        hastTree.type === 'root' ? hastTree.children : [hastTree]\n      )\n    }\n  }\n\n  visit(hastTree, transform)\n\n  return toJsxRuntime(hastTree, {\n    Fragment,\n    components,\n    ignoreInvalidStyle: true,\n    jsx,\n    jsxs,\n    passKeys: true,\n    passNode: true\n  })\n\n  /** @type {Visitor} */\n  function transform(node, index, parent) {\n    if (node.type === 'raw' && parent && typeof index === 'number') {\n      if (skipHtml) {\n        parent.children.splice(index, 1)\n      } else {\n        parent.children[index] = {type: 'text', value: node.value}\n      }\n\n      return index\n    }\n\n    if (node.type === 'element') {\n      /** @type {string} */\n      let key\n\n      for (key in urlAttributes) {\n        if (own.call(urlAttributes, key) && own.call(node.properties, key)) {\n          const value = node.properties[key]\n          const test = urlAttributes[key]\n          if (test === null || test.includes(node.tagName)) {\n            node.properties[key] = urlTransform(String(value || ''), key, node)\n          }\n        }\n      }\n    }\n\n    if (node.type === 'element') {\n      let remove = allowedElements\n        ? !allowedElements.includes(node.tagName)\n        : disallowedElements\n        ? disallowedElements.includes(node.tagName)\n        : false\n\n      if (!remove && allowElement && typeof index === 'number') {\n        remove = !allowElement(node, index, parent)\n      }\n\n      if (remove && parent && typeof index === 'number') {\n        if (unwrapDisallowed && node.children) {\n          parent.children.splice(index, 1, ...node.children)\n        } else {\n          parent.children.splice(index, 1)\n        }\n\n        return index\n      }\n    }\n  }\n}\n\n/**\n * Make a URL safe.\n *\n * @satisfies {UrlTransform}\n * @param {string} value\n *   URL.\n * @returns {string}\n *   Safe URL.\n */\nexport function defaultUrlTransform(value) {\n  return sanitizeUri(value, safeProtocol)\n}\n","import Markdown from \"react-markdown\";\n\nexport const ConsoleWindow = ({\n  helpMessage,\n  setShowHelp,\n  helpIndex,\n  setHelpIndex,\n  embedded,\n}) => {\n  return <div className=\"absolute w-full h-full\">\n    <div className=\"relative w-full h-full max-w-[30rem] z-[99999] flex-col justify-between\"\n      style={{\n        border: '1px white solid',\n        backgroundColor: embedded ? '#181818' : 'rgba(50,50,50,0.1)',\n      }}\n    >\n      <div className=\"overflow-y-scroll pl-[0.75rem] pr-[3rem] py-[0.5rem] pb-[3rem]\"\n        style={{\n          height: 'calc(100% - 2rem)'\n        }}\n      >\n        <p className=\"mb-[0.25rem]\">{helpMessage.name}</p>\n        {helpMessage.description && (\n          <Markdown>{helpMessage.description}</Markdown>\n        )}\n        {helpMessage.img && (\n          <div className=\"bg-[#eee] p-[0.5rem] rounded-[0.25rem] relative max-w-[15rem]\">\n            <img className=\"w-auto m-auto\" src={helpMessage.img}\n              style={{\n                height: helpMessage.imgHeight ? helpMessage.imgHeight : '6rem'\n              }}\n            ></img>\n            <div className=\"w-full h-[7rem] m-auto absolute top-0 left-0 z-[999]\"\n              style={{\n                mixBlendMode: 'difference'\n              }}\n            >\n            </div>\n          </div>\n        )}\n        {helpMessage.source && (\n          <a target=\"_blank\" href={helpMessage.source}>\n            <p className=\"underline text-[0.8rem]\">learn more</p>\n          </a>\n        )}\n      </div>\n      <div className=\"absolute bottom-0 w-full\"\n        style={{\n          borderTop: '1px white solid',\n        }}\n        >\n        <div className=\"flex justify-between\">\n          <div className=\"flex items-center\">\n            <button\n              className=\"uppercase py-[0.35rem] px-[0.5rem] text-[0.8rem]\"\n            >\n              Previous\n            </button>\n            <button\n              className=\"uppercase py-[0.35rem] px-[0.5rem] text-[0.8rem]\"\n            >\n              Next\n            </button>\n          </div>\n          <button\n            className=\"uppercase py-[0.35rem] px-[0.5rem] text-[0.8rem]\"\n            onClick={() => {\n              setShowHelp(false);\n            }}\n          >\n            close\n          </button>\n        </div>\n      </div>\n    </div>\n  </div>\n}","export const loadedSequences = [\n  { name: \"Initial\", sequence: \"ACTCACCCTGAAGTTCTCAGGATCCACGTGCAGCTTGTCACAGTGCAGCTCACTCAGTGT\" },\n  { name: \"M13/pUC R\t\", sequence: \"AGCGGATAACAATTTCACACAGG\" },\n  { name: \"MBP-F\", sequence: \"GATGAAGCCCTGAAAGACGCGCAG\" },\n  { name: \"pBAD R\", sequence: \"GATTTAATCTGTATCAGG\" },\n  { name: \"Amp-R \", sequence: \"ATAATACCGCGCCACATAGC\" },\n  { name: \"pBR322ori-F \", sequence: \"GGGAAACGCCTGGTATCTTT\" },\n  { name: \"L4440 \", sequence: \"AGCGAGTCAGTGAGCGAG\" },\n  { name: \"pRS-marker \", sequence: \"CGGCATCAGAGCAGATTGTA\" },\n  { name: \"pGEX 3\", sequence: \"CCGGGAGCTGCATGTGTCAGAGG\" },\n  { name: \"LacI-R\", sequence: \"GGCATACTCTGCGACATCGT\" },\n  { name: \"AmpR\", sequence: \"atgagtattcaacatttccgtgtcgcccttattcccttttttgcggcattttgccttcctgtttttgctcacccagaaacgctggtgaaagtaaaagatgctgaagatcagttgggtgcacgagtgggttacatcgaactggatctcaacagcggtaagatccttgagagttttcgccccgaagaacgttttccaatgatgagcacttttaaagttctgctatgtggcgcggtattatcccgtgttgacgccgggcaagagcaactcggtcgccgcatacactattctcagaatgacttggttgagtactcaccagtcacagaaaagcatcttacggatggcatgacagtaagagaattatgcagtgctgccataaccatgagtgataacactgcggccaacttacttctgacaacgatcggaggaccgaaggagctaaccgcttttttgcacaacatgggggatcatgtaactcgccttgatcgttgggaaccggagctgaatgaagccataccaaacgacgagcgtgacaccacgatgcctacagcaatggcaacaacgttgcgcaaactattaactggcgaactacttactctagcttcccggcaacaattaatagactggatggaggcggataaagttgcaggaccacttctgcgctcggcccttccggctggctggtttattgctgataaatctggagccggtgagcgtgggtctcgcggtatcattgcagcactggggccagatggtaagccctcccgtatcgtagttatctacacgacggggagtcaggcaactatggatgaacgaaatagacagatcgctgagataggtgcctcactgattaagcattggtaa\" },\n];\n\nexport const savedSequences = [\n  {\n    name: \"SARS-CoV-2\",\n    description: \"Corona virus DNA sequence snippet.\",\n    length: 29908,\n    viewing: 200,\n    sequence: 'attaaaggtttataccttcccaggtaacaaaccaaccaactttcgatctcttgtagatctgttctctaaacgaactttaaaatctgtgtggctgtcactcggctgcatgcttagtgcactcacgcagtataattaataactaattactgtcgttgacaggacacgagtaactcgtctatcttctgcaggctgcttacggtttcgtccgtgttgcagccgatcatcagcacatctaggtttcgtccgggtgtgaccgaaaggtaagatggagagccttgt'\n  },\n  {\n    name: \"Penicillin\",\n    description: \"Sequence for penicillin fungus.\",\n    length: 32300000,\n    viewing: 300,\n    sequence: 'gatgttcacatctgatttggctactaacaatctagttgtaatggcctacattacaggtggtgttgttcagttgacttcgcagtggctaactaacatctttggcactgtttatgaaaaactcaaacccgtccttgattggcttgaagagaagtttaaggaaggtgtagagtttcttagagacggttgggaaattgttaaatttatctcaacctgtgcttgtgaaattgtcggtggacaaattgtcacctgtgcaaaggaaattaaggagagtgttcagacattctttaagcttgtaaataa'\n  },\n  {\n    name: \"Blue Eyes Genes\",\n    description: \"Genomic data to determine eye color in homo sapiens.\",\n    length: 60000000,\n    viewing: 252,\n    sequence: 'aatgacaaccttcttgaaatactccaaaaagagaaagtcaacatcaatattgttggtgactttaaacttaatgaagagatcgccattattttggcatctttttctgcttccacaagtgcttttgtggaaactgtgaaaggtttggattataaagcattcaaacaaattgttgaatcctgtggtaattttaaagttacaaaaggaaaagctaaaaaaggtgcctggaatattggtgaacagaaatcaatactg'\n  },\n  {\n    name: \"Brown Eyes Genes\",\n    description: \"Genomic data to determine eye color in homo sapiens.\",\n    length: 60000000,\n    viewing: 252,\n    sequence: 'catctgatttggctactaacaatctagttgtaatggcctacattacaggtggtgttgttcagttgacttcgcagtggctaactaacatctttggcactgtttatgaaaaactcaaacccgtccttgattggcttgaagagaagtttaaggaaggtgtagagtttcttagagacggttgggaaattgttaaatttatctcaacctgtgcttgtgaaattgtcggtggacaaattgtcacctgtgcaaaggaaa'\n  },\n  {\n    name: \"Mushroom\",\n    description: \"A common forest mushroom DNA,\",\n    length: 120000,\n    viewing: 200,\n    sequence: 'gtcaccaaatgaatgcaaccaaatgtgcctttcaactctcatgaagtgtgatcattgtggtgaaacttcatggcagacgggcgattttgttaaagccacttgcgaattttgtggcactgagaatttgactaaagaaggtgccactacttgtggttacttaccccaaaatgctgttgttaaaatttattgtccagcatgtc'\n  },\n]\n\nexport const textSequences = [\n  {\n    value: 'hello world',\n  },\n  {\n    value: 'Cerebellum',\n  },\n  {\n    value: 'precipitating',\n  },\n  {\n    value: 'Geneticist',\n  },\n  {\n    value: 'mitochondria',\n  },\n  {\n    value: 'kalimbas',\n  },\n  {\n    value: 'leucine',\n  },\n  {\n    value: 'Tardigrade',\n  },\n  {\n    value: 'Hereditary',\n  },\n  {\n    value: 'Endosymbiosis',\n  },\n  {\n    value: 'Genetic',\n  },\n]","import ReactSlider from 'react-slider'\n\nexport const SequenceBoundsSlider = ({\n  sequenceBounds,\n  setSequenceBounds,\n  sequence,\n  selectedSequence,\n  sequenceRef,\n  boundsRef,\n  setShowHelp,\n  setHelpMessage,\n}) => {\n  return <div>\n    <div className=\"relative text-[#888] w-full m-auto\">\n      <div className=\"absolute flex left-[1rem] top-[-1rem]\">\n        <p className=\"text-[0.8rem]\">\n          START{\" \"}\n          <span className=\"text-[#fff] text-[0.8rem]\">\n            {sequenceBounds[0]}\n            {\"  -\"}\n          </span>\n        </p>\n        <p className=\"text-[0.8rem]\">\n          <span className=\"text-[#fff] text-[0.8rem]\">\n            &nbsp;\n            {`${sequenceBounds[1]}`}\n          </span>{\" \"}\n          END\n        </p>\n      </div>\n      <div className=\"absolute flex right-[1rem] top-[-1rem]\">\n        <p className=\"text-[0.8rem]\">\n          LENGTH{\" \"}\n          <span className=\"text-[#fff] text-[0.8rem]\">\n            {sequenceBounds[1] - sequenceBounds[0]}/{sequence.length}\n          </span>\n        </p>\n      </div>\n      <div className=\"absolute flex justify-center right-[1rem] left-[1rem] top-[-1rem]\">\n        <p className=\"text-[0.8rem] cursor-pointer sequence-button\"\n          onClick={()=> {\n            const helpMessage = {\n              name: 'Current DNA sequence: ' + selectedSequence.name,\n              description: selectedSequence.description,\n            }\n            \n            setShowHelp(true)\n            setHelpMessage(helpMessage)\n          }}\n        >\n          Sequence: {selectedSequence ? `${selectedSequence.name}` : ''}\n        </p>\n      </div>\n      <div className=\"mt-[1.2rem]\">\n        <ReactSlider\n          className=\"bounds-slider\"\n          thumbClassName=\"bounds-thumb\"\n          trackClassName=\"bounds-track\"\n          defaultValue={sequenceBounds}\n          value={boundsRef.current}\n          minDistance={\n            sequenceRef.current.length > 6\n              ? 6\n              : sequenceRef.current.length\n          }\n          min={0}\n          max={\n            sequenceRef.current.length > 1\n              ? sequenceRef.current.length\n              : 1\n          }\n          pearling\n          onChange={(value, index) => {\n            setSequenceBounds(value);\n          }}\n        />\n      </div>\n    </div>\n  </div>\n}","export const ConsoleSelectButtons = ({\n  setMenu,\n  menu,\n  setShowHelp,\n  showControls,\n}) => {\n  return <div className=\"flex relative\">\n    <div\n      className=\"flex w-[16.5rem] h-[2.7rem]\"\n      style={{\n        display: showControls ? \"flex\" : \"none\",\n      }}\n    >\n      <button\n        className=\"uppercase text-[#aaa] grow text-center\"\n        onClick={() => {\n          setMenu(1);\n          setShowHelp(false);\n        }}\n        style={{\n          color: menu === 1 ? '#fff' : '#aaa',\n          border: '1px white solid',\n          backgroundColor:\n            menu === 1 ? \"#292929\" : \"rgba(0,0,0,0)\",\n        }}\n      >\n        Sounds\n      </button>\n      <button\n        className=\"uppercase text-[#aaa] grow text-center\"\n        onClick={() => {\n          setMenu(2);\n          setShowHelp(false);\n        }}\n        style={{\n          color: menu === 2 ? '#fff' : '#aaa',\n          border: '1px white solid',\n          backgroundColor:\n            menu === 2 ? \"#292929\" : \"rgba(0,0,0,0)\",\n        }}\n      >\n        Presets\n      </button>\n      <button\n        className=\"uppercase text-[#aaa] grow text-center\"\n        onClick={() => {\n          setMenu(0);\n          setShowHelp(false);\n        }}\n        style={{\n          color: menu === 0 ? '#fff' : '#aaa',\n          border: '1px white solid',\n          backgroundColor:\n            menu === 0 ? \"#292929\" : \"rgba(0,0,0,0)\",\n        }}\n      >\n        Log\n      </button>\n    </div>\n  </div>\n}","// TODOs:\n/*\n\n- enter button on input\n- ifx popup menu things to be more prominant and background bug\n- bug when switching from dna sequence to phrase when phrase is already populated\n- design for the menu\n- add about page \n- fix height of the fullscreen version\n- add rhythm controls to the main section  \n\n*/\n\nimport React, { useState, useEffect, useMemo, useRef } from \"react\";\n\nimport FPSStats from \"react-fps-stats\";\n\nimport { WebAudioFontPlayer } from \"./soundfonts/WebAudioFont\"; // exportable version of https://surikov.github.io/webaudiofont/\nimport { enableWebMidi, WebMidi, getDevice } from \"./webmidi\";\n\nimport \"./reverb.js\";\n\nimport { p1, p2, p3, p4, p5 } from \"./defaults\";\nimport { parseAllSequence, interpretSequence } from \"./helpers\";\nimport { mapN, toMidi } from \"./utils\";\nimport { queryPattern } from \"./pattern\";\nimport { updateEuclid } from \"./playhead\";\n\nimport { presetMappings } from \"./soundfonts\";\n\nimport { PlayheadsView } from \"./components/playheadsView\";\nimport { SequenceInput } from \"./components/sequenceInput\";\nimport { VisualizerSequence } from \"./components/visualizerSequence\";\nimport { VisualizerPlayheads } from \"./components/visualizerPlayheads\";\nimport { VisualizerBlobs } from \"./components/visualizerBlobs\";\nimport { VisualizerMappings } from \"./components/visualizerMappings\";\nimport { InstrumentMenu } from \"./components/instrumentMenu\";\nimport { SequencerSettings } from \"./components/sequencerSettings\";\nimport { PresetMenu } from \"./components/presetMenu\";\nimport { ConsoleWindow } from \"./components/consoleWindow\";\n\nimport { noteMappings } from \"./mappings\";\nimport {\n  loadedSequences,\n  savedSequences,\n  textSequences,\n} from \"./loadedSequences\";\n\nimport { helpMessages } from \"./information\";\n\nimport \"./App.css\";\nimport { SequenceBoundsSlider } from \"./components/sequenceBoundsSlider\";\nimport { RemixButton } from \"./components/remixButton\";\nimport { ConsoleSelectButtons } from \"./components/consoleSelectButtons\";\n\nfunction App() {\n  const [menu, setMenu] = useState(0);\n  const [selectedPlayhead, setSelectedPlayhead] = useState(0);\n  const [modal, setModal] = useState(true);\n  const [initialMenu, setInitialMenu] = useState(false);\n\n  const [userModeSelect, setUserModeSelect] = useState(0);\n\n  // modes\n  // 0 = phrase\n  // 1 = melodies\n  // 2 = entire sequence\n\n  const [showIntroduction, setShowIntroduction] = useState(true);\n  const [introductionIndex, setIntroductionIndex] = useState(0);\n\n  const [showControls, setShowControls] = useState(false);\n  const [showControlsTransition, setShowControlsTransition] = useState(false);\n\n  const transitionRef = useRef(0);\n  useEffect(() => {\n    transitionRef.current = showControlsTransition;\n  }, showControlsTransition);\n\n  const [showSequenceAbove, setShowSequenceAbove] = useState(false);\n\n  const [showHelp, setShowHelp] = useState(false);\n  const [helpIndex, setHelpIndex] = useState(0);\n  const [helpMessage, setHelpMessage] = useState({\n    name: \"\",\n    description: \"\",\n    img: \"\",\n    source: \"\",\n  });\n\n  const [showEntireSequence, setShowEntireSequence] = useState(false);\n  const [selectedSequence, setSelectedSequence] = useState(savedSequences[0]);\n\n  const [bpm, setBpm] = useState(200);\n  const [playheadCount, setPlayheadCount] = useState(5);\n  const [masterSteps, setMasterSteps] = useState(8);\n  const [noteOffset, setNoteOffset] = useState(0);\n  const noteOffsetRef = useRef(0);\n\n  const [sequenceIndex, setSequenceIndex] = useState(0);\n  const [userInputSequence, setUserInputSequence] = useState(\n    savedSequences[sequenceIndex].sequence\n  );\n  const [userSequence, setUserSequence] = useState(\"hello world\");\n  const [zoom, setZoom] = useState(0.6);\n  const [showOnlyActive, setShowOnlyActive] = useState(false);\n  const [playing, setPlaying] = useState(false);\n\n  const [cps, setCps] = useState(60 / bpm);\n\n  const [nodes, setNodes] = useState([]);\n  const [sequence, setSequence] = useState([]);\n  const [counter, setCounter] = useState(0);\n  const [audioContext, setAudioContext] = useState();\n\n  const [showFPS, setShowFPS] = useState(false);\n  const [showViz, setShowViz] = useState(true);\n\n  const sequenceRef = useRef(sequence);\n  const [sequenceBounds, setSequenceBounds] = useState([\n    0,\n    savedSequences[sequenceIndex].sequence.length,\n  ]);\n\n  const boundsRef = useRef(sequenceBounds);\n\n  const [activeSequence, setActiveSequence] = useState(sequence);\n  const [activeNodes, setActiveNodes] = useState(nodes);\n\n  const calculatedHeight =\n    window.innerHeight -\n    (window.innerWidth < 1300\n      ? (showControls ? 16 : 8) * 20\n      : (showControls ? 20 : 10) * 20);\n  // const calculatedHeight =\n  //   window.innerHeight - (window.innerWidth < 1300 ? 16 * 20 : 20 * 20);\n  const width = window.innerWidth < 1300 ? 1000 : 1200;\n  const height = calculatedHeight < 350 ? 350 : calculatedHeight;\n\n  useEffect(() => {\n    noteOffsetRef.current = noteOffset;\n  }, [noteOffset]);\n\n  const bpmRef = useRef(bpm);\n\n  useEffect(() => {\n    bpmRef.current = bpm;\n  }, [bpm]);\n\n  const updateTempo = (tempo) => {\n    setBpm(tempo);\n    setCps(60 / tempo);\n  };\n\n  const renderCount = useRef(0);\n  useEffect(() => {\n    renderCount.current = renderCount.current + 1;\n  });\n\n  const [players, setPlayers] = useState();\n\n  const initializePlayers = (audioContext) => {\n    let audioPlayers = [];\n    playheads.forEach((p, index) => {\n      const player = new WebAudioFontPlayer();\n      const preset = presetMappings.find((x) => x.name === p.preset);\n      console.log(preset, p.preset);\n      if (!preset) {\n        console.error(\"incorrect preset mapping\");\n      }\n      player.adjustPreset(audioContext, preset.file);\n      audioPlayers.push(player);\n    });\n    setPlayers(audioPlayers);\n  };\n\n  // updates audio players\n  const updatePlayer = (index, preset) => {\n    const audioContext = getAudioContext();\n    const currentPreset = presetMappings.find((x) => x.name === preset);\n    const newPlayer = new WebAudioFontPlayer();\n    newPlayer.adjustPreset(audioContext, currentPreset.file);\n    updatePlayers(index, newPlayer);\n  };\n\n  const playSoundFont = (index, presetName, midi, start, duration, volume) => {\n    const audioContext = getAudioContext();\n    // console.log(\"playing\", presetName, midi, duration, volume);\n    const preset = presetMappings.find((x) => x.name === presetName);\n    if (preset) {\n      players[index].queueWaveTable(\n        audioContext,\n        audioContext.destination,\n        preset.file,\n        audioContext.currentTime + 0.01,\n        midi,\n        duration / 1000,\n        volume\n      );\n    }\n  };\n\n  const getNote = (index) => {\n    // make this prettier at some point\n    if (activeNodes.length && activeNodes[index] !== undefined) {\n      const acid = activeNodes[index].aminoacid;\n      if (acid !== \"-1\") {\n        return toMidi(noteMappings[acid]);\n      }\n      return -1;\n    }\n  };\n\n  const captureKeyboardEvent = (event) => {\n    const active = document.activeElement;\n    if (active.id === \"user-input-dna\" || active.id === \"user-input-name\")\n      return;\n    if (event.keyCode === 32) {\n      event.preventDefault();\n      getAudioContext();\n      setPlaying(!playing);\n    }\n    if (event.keyCode >= 49 && event.keyCode < 54) {\n      const index = event.keyCode - 49;\n      updatePlayhead(index, {\n        ...playheads[index],\n        playing: !playheads[index].playing,\n      });\n    }\n    if (event.keyCode === 13) {\n      console.log(\"enter button! TODO\");\n    }\n  };\n\n  const [windowSize, setWindowSize] = useState({\n    width: undefined,\n    height: undefined,\n  });\n\n  useEffect(() => {\n    function handleResize() {\n      setWindowSize({\n        width: window.innerWidth,\n        height: window.innerHeight,\n      });\n    }\n    window.addEventListener(\"resize\", handleResize);\n    handleResize();\n    return () => window.removeEventListener(\"resize\", handleResize);\n  }, []);\n\n  useEffect(() => {\n    new Promise((resolve) => {\n      document.addEventListener(\"click\", async function listener() {\n        await getAudioContext();\n        resolve();\n        document.removeEventListener(\"click\", listener);\n      });\n    });\n\n    new Promise((resolve) => {\n      document.addEventListener(\"ontouchstart\", async function listener() {\n        await getAudioContext();\n        resolve();\n        document.removeEventListener(\"ontouchstart\", listener);\n      });\n    });\n\n    window.addEventListener(\"resize\", (event) => {\n      setClearClick(clearClick + 1);\n    });\n\n    enableWebMidi();\n  }, []);\n\n  function effectSend(input, effect, wet, ac) {\n    const send = gainNode(wet, ac);\n    input.connect(send);\n    send.connect(effect);\n    return send;\n  }\n\n  function gainNode(value, ac) {\n    const node = ac.createGain();\n    node.gain.value = value;\n    return node;\n  }\n\n  const getAudioContext = () => {\n    if (!audioContext) {\n      const newAudioContext = new AudioContext();\n      // const reverb = newAudioContext.createReverb(2);\n      // reverb.connect(newAudioContext.destination);\n      setAudioContext(newAudioContext);\n      initializePlayers(newAudioContext);\n      return newAudioContext;\n    }\n    return audioContext;\n  };\n\n  const [ticker, setTicker] = useState(0);\n\n  const [count1, setCount1] = useState(0);\n  const [count2, setCount2] = useState(0);\n  const [count3, setCount3] = useState(0);\n  const [count4, setCount4] = useState(0);\n  const [count5, setCount5] = useState(0);\n\n  const [noteActive1, setNoteActive1] = useState(false);\n  const [noteActive2, setNoteActive2] = useState(false);\n  const [noteActive3, setNoteActive3] = useState(false);\n  const [noteActive4, setNoteActive4] = useState(false);\n  const [noteActive5, setNoteActive5] = useState(false);\n\n  const countRef1 = useRef(0);\n  const countRef2 = useRef(0);\n  const countRef3 = useRef(0);\n  const countRef4 = useRef(0);\n  const countRef5 = useRef(0);\n\n  const noteActiveRef1 = useRef(0);\n  const noteActiveRef2 = useRef(0);\n  const noteActiveRef3 = useRef(0);\n  const noteActiveRef4 = useRef(0);\n  const noteActiveRef5 = useRef(0);\n\n  const counters = [count1, count2, count3, count4, count5];\n  const countRefs = [countRef1, countRef2, countRef3, countRef4, countRef5];\n\n  const [clearClick, setClearClick] = useState(0);\n\n  const activeNoteRefs = [\n    noteActiveRef1,\n    noteActiveRef2,\n    noteActiveRef3,\n    noteActiveRef4,\n    noteActiveRef5,\n  ];\n\n  const setCounters = [setCount1, setCount2, setCount3, setCount4, setCount5];\n  const setActiveNotes = [\n    setNoteActive1,\n    setNoteActive2,\n    setNoteActive3,\n    setNoteActive4,\n    setNoteActive5,\n  ];\n\n  // playhead pos refs\n  useEffect(() => {\n    countRef1.current = count1;\n  }, [count1]);\n  useEffect(() => {\n    countRef2.current = count2;\n  }, [count2]);\n  useEffect(() => {\n    countRef3.current = count3;\n  }, [count3]);\n  useEffect(() => {\n    countRef4.current = count4;\n  }, [count4]);\n  useEffect(() => {\n    countRef5.current = count5;\n  }, [count5]);\n\n  // note active refs\n  useEffect(() => {\n    noteActiveRef1.current = noteActive1;\n  }, [noteActive1]);\n  useEffect(() => {\n    noteActiveRef2.current = noteActive2;\n  }, [noteActive2]);\n  useEffect(() => {\n    noteActiveRef3.current = noteActive3;\n  }, [noteActive3]);\n  useEffect(() => {\n    noteActiveRef4.current = noteActive4;\n  }, [noteActive4]);\n  useEffect(() => {\n    noteActiveRef5.current = noteActive5;\n  }, [noteActive5]);\n\n  const initPlayheads = (ps) => {\n    let initialized = [];\n    for (let i = 0; i < ps.length; i++) {\n      initialized.push(updateEuclid({ ...ps[i] }));\n    }\n    return initialized;\n  };\n\n  const [playheads, setPlayheads] = useState(\n    initPlayheads([p1, p2, p3, p4, p5])\n  );\n  const playheadsRef = useRef(null);\n\n  useEffect(() => {\n    playheadsRef.current = playheads;\n  }, [playheads]);\n\n  const updatePlayhead = (i, p) => {\n    setPlayheads([\n      ...playheads.slice(0, i),\n      {\n        ...p,\n      },\n      ...playheads.slice(i + 1),\n    ]);\n  };\n\n  const updatePlayers = (i, p) => {\n    setPlayers([...players.slice(0, i), p, ...players.slice(i + 1)]);\n  };\n\n  const resetCounters = () => {\n    for (let i = 0; i < playheads.length; i++) {\n      setCounters[i](0);\n    }\n  };\n\n  // main loop to update counters\n  let clicksPerCycle = 1;\n  let clicks = 0;\n\n  useEffect(() => {\n    let interval = null;\n    let device = null;\n    const lookahead = counter + 1;\n    if (playing && nodes.length) {\n      interval = setInterval(() => {\n        clicks++;\n        const timeWindow = cps * 1000; // convert fraction to time}\n        if (clicks === clicksPerCycle) {\n          setCounter(counter + 1);\n          clicks = 0;\n          for (let j = 0; j < masterSteps; j++) {\n            setTimeout(() => {\n              setTicker(counter * masterSteps + j);\n            }, timeWindow * (j / masterSteps));\n          }\n          for (let i = 0; i < playheadCount; i++) {\n            const active = playheads[i];\n            const activeRef = playheadsRef.current;\n            const haps = queryPattern(\n              active.pattern,\n              active.interval,\n              counter,\n              lookahead\n            );\n\n            // midi\n            if (active.midiEnabled && active.midiOutputDevice.index !== -1) {\n              if (WebMidi) {\n                device = getDevice(\n                  active.midiOutputDevice.name,\n                  WebMidi.outputs\n                );\n              }\n            }\n\n            haps.forEach((hap) => {\n              setTimeout(() => {\n                if (activeRef[i].playing) {\n                  const pos = countRefs[i].current; // make sure to use ref\n                  const base = getNote((pos + 1) % activeNodes.length);\n                  const note = base + active.offset;\n                  setCounters[i]((pos + 1) % activeNodes.length);\n                  if (parseInt(base) !== -1) {\n                    if (\n                      device !== null &&\n                      active.midiEnabled &&\n                      active.midiOutputDevice !== -1\n                    ) {\n                      // play to midi channel of each playhead\n                      device.playNote(note + noteOffsetRef.current, i + 1, {\n                        duration: active.legato * timeWindow,\n                        attack: 0.8,\n                      });\n                    } else {\n                      playSoundFont(\n                        i,\n                        active.preset,\n                        note + noteOffsetRef.current,\n                        (timeWindow * (hap - counter)) / 1000,\n                        active.legato * timeWindow,\n                        active.velocity\n                      );\n                    }\n                    setActiveNotes[i](true);\n                    setTimeout(() => {\n                      setActiveNotes[i](false);\n                    }, active.legato * timeWindow);\n                  }\n                }\n              }, timeWindow * (hap - counter));\n            });\n          }\n        }\n      }, (cps * 1000) / clicksPerCycle); // clicks);\n    } else if (!playing && counter !== 0) {\n      clearInterval(interval);\n    }\n    return () => clearInterval(interval);\n  }, [playing, counter]);\n\n  const stop = () => {\n    setCounter(-1);\n    resetCounters();\n    setPlaying(false);\n  };\n\n  const play = () => {\n    setPlaying(true);\n  };\n\n  const pause = () => {\n    setPlaying(false);\n  };\n\n  useMemo(() => {\n    // const { nodes, sequence } = parseSequence(userInputSequence);\n    const { nodes, sequence } = parseAllSequence(userInputSequence);\n    setNodes(nodes);\n    setSequence(sequence);\n    renderCount.current = 0;\n    sequenceRef.current = sequence;\n    setActiveNodes(nodes);\n    setActiveSequence(sequence);\n    setSequenceBounds([0, sequence.length]);\n    boundsRef.current = [0, sequence.length];\n    // resetCounters();\n  }, [userInputSequence]);\n\n  useMemo(() => {\n    const seq = interpretSequence(userSequence);\n    setUserInputSequence(seq);\n    if (userSequence.length === 0) {\n      pause();\n    }\n  }, [userSequence]);\n\n  useEffect(() => {\n    boundsRef.current = sequenceBounds;\n  }, [sequenceBounds]);\n\n  useMemo(() => {\n    setActiveNodes(nodes);\n    setActiveSequence(sequence);\n  }, [sequence]);\n\n  useMemo(() => {\n    const length = sequenceBounds[1] - sequenceBounds[0];\n    const snippet = sequence.slice(sequenceBounds[0], sequenceBounds[1]);\n    const nodeSnippet = nodes.slice(\n      Math.ceil(sequenceBounds[0] / 3),\n      Math.floor(sequenceBounds[1] / 3)\n    );\n    setActiveSequence(snippet);\n    setActiveNodes(nodeSnippet);\n    if (showEntireSequence) {\n      const newZoom = mapN(sequence.length, 18, 300, 0.95, 0.6);\n      setZoom(newZoom < 0.4 ? 0.4 : newZoom);\n    } else {\n      const newZoom = mapN(sequence.length, 18, 300, 0.95, 0.6);\n      setZoom(newZoom < 0.4 ? 0.4 : newZoom);\n    }\n  }, [sequenceBounds, showOnlyActive]);\n\n  const getState = () => {\n    let ps = [];\n    for (let i = 0; i < playheads.length; i++) {\n      ps.push({\n        playing: playheads[i].playing,\n        events: playheads[i].events,\n        rotation: playheads[i].rotation,\n        offset: playheads[i].offset,\n        legato: playheads[i].legato,\n        preset: playheads[i].preset,\n        interval: playheads[i].interval,\n      });\n    }\n    return JSON.stringify(\n      {\n        name: \"\",\n        author: \"\",\n        bpm,\n        steps: masterSteps,\n        keyOffset: noteOffset,\n        userSequence,\n        playheads: ps,\n      },\n      null,\n      2\n    );\n  };\n\n  return (\n    <div\n      onKeyDown={captureKeyboardEvent}\n      tabIndex={-1}\n      className=\"App outline-none text-left max-w-full\"\n      style={{ height: \"100vh\", minHeight: \"700px\" }}\n      onClick={() => {\n        setClearClick(clearClick + 1);\n      }}\n    >\n      {showFPS && <FPSStats />}\n      {!audioContext && (\n        <div\n          onClick={getAudioContext}\n          className=\"visible md:invisible fixed w-full h-full bg-[rgba(0,0,0,0.5)] top-0 bottom-0 z-[99] flex items-center\"\n        >\n          <div className=\"text-[#fff] text-center w-[100%]\">\n            <p>Touch to enable sound</p>\n          </div>\n        </div>\n      )}\n      {modal && (\n        <div\n          onClick={() => {\n            getAudioContext();\n          }}\n          className=\"visible fixed w-full h-full bg-[rgba(0,0,0,0.6)] top-0 bottom-0 z-[9999] flex items-center\"\n        >\n          <div className=\"enter relative text-[#fff] text-center h-[28rem] w-[25rem] bg-[#222] px-[1rem] py-[2rem] mx-auto\"\n            style={{ border: '1px white solid' }}\n          >\n            <h3 className=\"text-[1.4rem]\">DNA Music Maker</h3>\n            <p className=\"\">Translate DNA into music</p>\n            <div className=\"flex mt-[1rem] h-[2.4rem] w-[12em] m-auto\">\n              <button\n                className=\"w-[50%]\"\n                style={{\n                  backgroundColor: userModeSelect === 0\n                    ? \"#555\"\n                    : \"rgba(50,50,50,0.4)\",\n                  textDecoration: userModeSelect !== 0 ? \"initial\" : \"underline\",\n                }}\n                onClick={() => {\n                  const seq = interpretSequence(userSequence);\n                  setUserInputSequence(seq);\n                  setUserModeSelect(0)\n                }}\n              >\n                phrase\n              </button>\n              <button\n                className=\"w-[50%]\"\n                style={{\n                  backgroundColor: userModeSelect !== 0\n                    ? \"#555\"\n                    : \"rgba(50,50,50,0.4)\",\n                  textDecoration: userModeSelect === 0 ? \"initial\" : \"underline\",\n                }}\n                onClick={() => {\n                  setUserModeSelect(1)\n                }}\n              >\n                sequences\n              </button>\n            </div>\n            <div>\n              {userModeSelect !== 0 ? (\n                <div>\n                  <p className=\"mt-[1.5rem] text-[0.9rem]\">\n                    Select a DNA sequence to get started!\n                  </p>\n                  <div className=\"flex flex-col items-center justify-center\">\n                    <div className=\"h-[8.5rem] w-[10.75rem] bg-[#222] w-full rounded-[0.25rem]\">\n                      <div className=\"flex flex-wrap w-[15rem] mx-auto pt-[1rem] h-[10rem] overflow-y-scroll rounded-[0.25rem]\">\n                        {savedSequences.map((sequence, index) => {\n                          return (\n                            <div className=\"bg-[#181818]\">\n                              <button\n                                key={index}\n                                className=\"text-left w-[15rem] px-[0.25rem]\"\n                                style={{\n                                  backgroundColor:\n                                    selectedSequence.name === sequence.name\n                                      ? \"#333\"\n                                      : \"rgba(0,0,0,0)\",\n                                }}\n                                onClick={() => {\n                                  setSelectedSequence(sequence);\n                                }}\n                              >\n                                <p className=\"whitespace-nowrap overflow-hidden text-[1rem]\">\n                                  {sequence.name}\n                                </p>\n                              </button>\n                            </div>\n                          );\n                        })}\n                      </div>\n                    </div>\n                    <button\n                      className=\"mt-[2rem] absolute bottom-[2rem] py-[0.25rem] px-[2rem] bg-[#333] hover:bg-[#444] rounded-[0.25rem] mt-1\"\n                      onClick={() => {\n                        setModal(false);\n                        play();\n                        setUserInputSequence(selectedSequence.sequence);\n                        setShowEntireSequence(true);\n                      }}\n                    >\n                      Get started\n                    </button>\n                  </div>\n                </div>\n              ) : (\n                <div>\n                  <p className=\"mt-[1.5rem] text-[0.9rem]\">\n                    Type your name or phrase to get started!\n                  </p>\n                  <div className=\"flex flex-col items-center\">\n                    <div className=\"flex relative\">\n                      <SequenceInput\n                        userSequence={userSequence}\n                        setUserSequence={setUserSequence}\n                      />\n                      <div className=\"absolute left-[-2.5rem] top-[1rem]\">\n                        <RemixButton\n                          onclick={() => {\n                            setUserSequence(\n                              textSequences[\n                                Math.floor(Math.random() * textSequences.length)\n                              ].value\n                            );\n                          }}\n                        />\n                      </div>\n                    </div>\n                    <button\n                      className=\"mt-3 absolute bottom-[2rem] py-[0.25rem] px-[2rem] bg-[#333] hover:bg-[#444] rounded-[0.25rem] mt-1\"\n                      style={{\n                        cursor: userSequence.length > 0 ? \"pointer\" : \"initial\",\n                        opacity: userSequence.length > 0 ? 1 : 0.5,\n                      }}\n                      onClick={() => {\n                        if (userSequence.length > 0) {\n                          setModal(false);\n                          play();\n                          setInitialMenu(false);\n                          setShowEntireSequence(false);\n                        }\n                      }}\n                    >\n                      Get started\n                    </button>\n                  </div>\n                </div>\n              )}\n            </div>\n          </div>\n        </div>\n      )}\n      <div className=\"absolute w-[100%] z-[1]\">\n        <div style={{ borderBottom: \"1px solid #fff\" }}>\n          <div className=\"mx-auto py-[1rem] w-[60rem]\">\n            <div className=\"z-[1] text-[#fff] flex justify-between\">\n              <div>\n                <h3>DNA Music Maker</h3>\n              </div>\n              <div className=\"flex\">\n                <button onClick={() => {\n                  setShowIntroduction(!showIntroduction)\n                }} className=\"mr-[1rem]\">\n                  <h3>{!showIntroduction ? 'learn' : 'hide'}</h3>\n                </button>\n                <button\n                  onClick={() => {\n                    setModal(true);\n                    pause();\n                    console.log(getState());\n                  }}\n                >\n                  <h3>menu</h3>\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n        <div className=\"mx-auto w-[60rem]\">\n          {showIntroduction && helpMessages.introduction.map((intro, index) => {\n            return (\n              <button\n                onClick={() => {\n                  setHelpMessage(intro);\n                  setMenu(0);\n                  setShowHelp(true);\n                }}\n                key={index}\n                className={`py-[0.5rem] px-[0.5rem] text-[0.8rem] intro-title ${introductionIndex === index && \"active\"\n                  }`}\n              >\n                {index + 1}: {intro.name}\n              </button>\n            );\n          })}\n        </div>\n        <div className=\"mx-auto w-[60rem] h-[13rem]\">\n          {\n            showHelp && !showControls &&\n            <ConsoleWindow\n              helpMessage={helpMessage}\n              setShowHelp={setShowHelp}\n              helpIndex={helpIndex}\n              setHelpIndex={setHelpIndex}\n              embedded={false}\n            />\n          }\n        </div>\n      </div>\n      <div>\n        <div\n          className=\"relative mx-auto transition-translate\"\n          style={{\n            width: width,\n            height: height,\n            transitionDuration: \"200ms\",\n          }}\n        >\n          <svg\n            version=\"1.1\"\n            xmlns=\"http://www.w3.org/2000/svg\"\n            className=\"svg blobs\"\n          ></svg>\n          {showViz && (\n            <VisualizerBlobs\n              playing={playing}\n              counter={renderCount.current}\n              activeNotes={activeNoteRefs}\n              bounds={sequenceBounds}\n              activeSequence={activeSequence}\n              showOnlyActive={showOnlyActive}\n              sequence={sequence}\n              nodes={nodes}\n              activeNodes={activeNodes}\n              countRefs={countRefs}\n              playheads={playheads}\n              zoom={zoom}\n              height={height}\n              width={width}\n              cps={cps}\n              clearClick={clearClick}\n              playheadCount={playheadCount}\n              showSequenceAbove={!showEntireSequence}\n            />\n          )}\n          <VisualizerSequence\n            bounds={sequenceBounds}\n            showOnlyActive={showOnlyActive}\n            sequence={sequence}\n            nodes={nodes}\n            activeSequence={activeSequence}\n            activeNodes={activeNodes}\n            zoom={zoom}\n            height={height}\n            width={width}\n            playheadCount={playheadCount}\n            setShowHelp={setShowHelp}\n            setHelpMessage={setHelpMessage}\n            playheads={playheads}\n            getNote={getNote}\n            noteOffsetRef={noteOffsetRef}\n            playSoundFont={playSoundFont}\n            setMenu={setMenu}\n            showSequenceAbove={!showEntireSequence}\n            showControlsTransition={showControlsTransition}\n          />\n          <VisualizerPlayheads\n            playing={playing}\n            counter={renderCount.current}\n            bounds={sequenceBounds}\n            showOnlyActive={showOnlyActive}\n            sequence={sequence}\n            nodes={nodes}\n            activeSequence={activeSequence}\n            activeNodes={activeNodes}\n            counters={counters}\n            playheads={playheads}\n            zoom={zoom}\n            height={height}\n            width={width}\n            playheadCount={playheadCount}\n            showSequenceAbove={!showEntireSequence}\n            showControlsTransition={showControlsTransition}\n          />\n        </div>\n      </div>\n      <div>\n        <div className=\"text-[0.9rem] relative max-w-[60rem] mx-auto pb-[0.5rem] overflow-y-hidden\">\n          <div>\n            {showEntireSequence && (\n              <div className=\"w-[40rem] mx-auto\">\n                <SequenceBoundsSlider\n                  selectedSequence={selectedSequence}\n                  sequenceBounds={sequenceBounds}\n                  setSequenceBounds={setSequenceBounds}\n                  sequence={sequence}\n                  sequenceRef={sequenceRef}\n                  boundsRef={boundsRef}\n                  setShowHelp={setShowHelp}\n                  setHelpMessage={setHelpMessage}\n                />\n              </div>\n            )}\n            {!showEntireSequence && (\n              <div\n                className=\"mb-[1rem] text-center mx-auto\"\n                style={{ width: \"20rem\" }}\n              >\n                <div className=\"relative\">\n                  <SequenceInput\n                    userSequence={userSequence}\n                    setUserSequence={setUserSequence}\n                    width={\"30rem\"}\n                  />\n                  <div className=\"absolute left-[-2.5rem] top-[0.6rem]\">\n                    <RemixButton\n                      onclick={() => {\n                        const seq = textSequences[\n                          Math.floor(Math.random() * textSequences.length)\n                        ].value\n                        console.log(seq)\n                        setUserSequence(\n                          seq\n                        );\n                      }}\n                    />\n                  </div>\n                </div>\n              </div>\n            )}\n            <div\n              style={{\n                height: showControls ? \"15rem\" : \"3.7rem\",\n                transitionDuration: \"200ms\",\n              }}\n            >\n              <div className=\"flex justify-center mx-auto h-full relative\">\n                {\n                  showControls &&\n                  <div\n                    className=\"w-[16.5rem] relative h-[15rem]\"\n                    style={{\n                      border: '1px white solid'\n                    }}\n                  >\n                    {\n                      showControls && showHelp &&\n                      <ConsoleWindow\n                        helpMessage={helpMessage}\n                        setShowHelp={setShowHelp}\n                        helpIndex={helpIndex}\n                        setHelpIndex={setHelpIndex}\n                        embedded={true}\n                      />\n                    }\n                    <ConsoleSelectButtons\n                      setMenu={setMenu}\n                      menu={menu}\n                      setShowHelp={setShowHelp}\n                      showHelp={showHelp}\n                      helpMessage={helpMessage}\n                      showControls={showControls}\n                    />\n                    {menu === 0 ? (\n                      <div className=\"w-full\">\n                        <VisualizerMappings\n                          playheads={playheads}\n                          countRefs={countRefs}\n                          counters={counters}\n                          activeNodes={activeNodes}\n                          playheadCount={playheadCount}\n                        />\n                      </div>\n                    ) : menu === 1 ? (\n                      <InstrumentMenu\n                        playheads={playheads}\n                        selectedPlayhead={selectedPlayhead}\n                        updatePlayhead={updatePlayhead}\n                        WebMidi={WebMidi}\n                        presetMappings={presetMappings}\n                        playheadCount={playheadCount}\n                        setSelectedPlayhead={setSelectedPlayhead}\n                        updatePlayer={updatePlayer}\n                      />\n                    ) : (\n                      <div className=\"w-full\">\n                        <PresetMenu\n                          playheads={playheads}\n                          updatePlayer={updatePlayer}\n                          setPlayheads={setPlayheads}\n                          updateTempo={updateTempo}\n                          setMasterSteps={setMasterSteps}\n                          noteOffset={noteOffset}\n                          setNoteOffset={setNoteOffset}\n                          updatePlayhead={updatePlayhead}\n                        />\n                      </div>\n                    )}\n                  </div>\n                }\n                <div\n                  className={` \n                    relative ml-[0.5rem]\n                    `}\n                  style={{\n                    border: \"1px white solid\",\n                    width: showControls ? '32rem' : '40rem'\n                  }}\n                >\n                  <SequencerSettings\n                    playing={playing}\n                    counter={counter}\n                    play={play}\n                    pause={pause}\n                    bpm={bpm}\n                    stop={stop}\n                    updateTempo={updateTempo}\n                    setPlayheads={setPlayheads}\n                    masterSteps={masterSteps}\n                    setMasterSteps={setMasterSteps}\n                    playheads={playheads}\n                    setNoteOffset={setNoteOffset}\n                    noteOffset={noteOffset}\n                    zoom={zoom}\n                    setZoom={setZoom}\n                    activeSequence={activeSequence}\n                    setSequenceBounds={setSequenceBounds}\n                    sequence={sequence}\n                    boundsRef={boundsRef}\n                    showControls={showControls}\n                    setShowControls={setShowControls}\n                    updatePlayhead={updatePlayhead}\n                    activeNotes={activeNoteRefs}\n                    setShowControlsTransition={setShowControlsTransition}\n                    setShowHelp={setShowHelp}\n                  />\n                  <div className=\"flex\">\n                    <PlayheadsView\n                      playheads={playheads}\n                      updatePlayhead={updatePlayhead}\n                      playing={playing}\n                      ticker={ticker}\n                      masterSteps={masterSteps}\n                      counter={counter}\n                      counters={counters}\n                      playheadCount={playheadCount}\n                      width={width}\n                      activeNotes={activeNoteRefs}\n                      selectedPlayhead={selectedPlayhead}\n                      setPlayheadCount={setPlayheadCount}\n                      setSelectedPlayhead={setSelectedPlayhead}\n                      showControls={showControls}\n                      setMenu={setMenu}\n                      setShowHelp={setShowHelp}\n                    />\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","export const queryPattern = (p, patternCycleLength, start, end) => {\n  if (patternCycleLength <= 0) {\n    console.error(\"# of patternCycleLength cannot be <= 0\");\n    return [];\n  }\n  const startPhase = Math.floor(start / patternCycleLength);\n  const endPhase = Math.ceil(end / patternCycleLength);\n  let events = [];\n\n  for (let phase = startPhase; phase <= endPhase; phase++) {\n    for (let i = 0; i < p.length; i++) {\n      // for each phase, we want to go through the pattern and add\n      const timing = patternCycleLength * p[i] + phase * patternCycleLength;\n      if (timing >= start && timing < end) {\n        events.push(timing);\n      }\n    }\n  }\n  return events;\n};\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n    <App />\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"names":["hasOwn","Object","prototype","hasOwnProperty","toStr","toString","defineProperty","gOPD","getOwnPropertyDescriptor","isArray","arr","Array","call","isPlainObject","obj","key","hasOwnConstructor","hasIsPrototypeOf","constructor","setProperty","target","options","name","enumerable","configurable","value","newValue","writable","getProperty","module","exports","extend","src","copy","copyIsArray","clone","arguments","i","length","deep","COMMENT_REGEX","NEWLINE_REGEX","WHITESPACE_REGEX","PROPERTY_REGEX","COLON_REGEX","VALUE_REGEX","SEMICOLON_REGEX","TRIM_REGEX","EMPTY_STRING","trim","str","replace","style","TypeError","lineno","column","updatePosition","lines","match","lastIndexOf","position","start","line","node","Position","whitespace","this","end","source","content","errorsList","error","msg","err","Error","reason","filename","silent","push","re","m","exec","slice","comments","rules","c","comment","pos","charAt","type","declaration","prop","val","ret","property","decl","decls","declarations","ReactPropTypesSecret","require","emptyFunction","emptyFunctionWithReset","resetWarningCache","shim","props","propName","componentName","location","propFullName","secret","getShim","isRequired","ReactPropTypes","array","bigint","bool","func","number","object","string","symbol","any","arrayOf","element","elementType","instanceOf","objectOf","oneOf","oneOfType","shape","exact","checkPropTypes","PropTypes","aa","ca","p","a","b","encodeURIComponent","da","Set","ea","fa","ha","add","ia","window","document","createElement","ja","ka","la","ma","v","d","e","f","g","acceptsBooleans","attributeName","attributeNamespace","mustUseProperty","propertyName","sanitizeURL","removeEmptyString","z","split","forEach","toLowerCase","ra","sa","toUpperCase","ta","pa","isNaN","qa","test","oa","removeAttribute","setAttribute","setAttributeNS","xlinkHref","ua","__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED","va","Symbol","for","wa","ya","za","Aa","Ba","Ca","Da","Ea","Fa","Ga","Ha","Ia","Ja","iterator","Ka","La","A","assign","Ma","stack","Na","Oa","prepareStackTrace","set","Reflect","construct","l","h","k","displayName","includes","Pa","tag","render","Qa","$$typeof","_context","_payload","_init","Ra","Sa","Ta","nodeName","Va","_valueTracker","get","getValue","setValue","stopTracking","Ua","Wa","checked","Xa","activeElement","body","Ya","defaultChecked","defaultValue","_wrapperState","initialChecked","Za","initialValue","controlled","ab","bb","cb","db","ownerDocument","eb","fb","selected","defaultSelected","disabled","gb","dangerouslySetInnerHTML","children","hb","ib","jb","textContent","kb","lb","mb","nb","namespaceURI","innerHTML","valueOf","firstChild","removeChild","appendChild","MSApp","execUnsafeLocalFunction","ob","lastChild","nodeType","nodeValue","pb","animationIterationCount","aspectRatio","borderImageOutset","borderImageSlice","borderImageWidth","boxFlex","boxFlexGroup","boxOrdinalGroup","columnCount","columns","flex","flexGrow","flexPositive","flexShrink","flexNegative","flexOrder","gridArea","gridRow","gridRowEnd","gridRowSpan","gridRowStart","gridColumn","gridColumnEnd","gridColumnSpan","gridColumnStart","fontWeight","lineClamp","lineHeight","opacity","order","orphans","tabSize","widows","zIndex","zoom","fillOpacity","floodOpacity","stopOpacity","strokeDasharray","strokeDashoffset","strokeMiterlimit","strokeOpacity","strokeWidth","qb","rb","sb","indexOf","keys","substring","tb","menuitem","area","base","br","col","embed","hr","img","input","keygen","link","meta","param","track","wbr","ub","vb","is","wb","xb","srcElement","correspondingUseElement","parentNode","yb","zb","Ab","Bb","Cb","stateNode","Db","Eb","Fb","Gb","Hb","Ib","Jb","Kb","Lb","Mb","addEventListener","removeEventListener","Nb","apply","onError","Ob","Pb","Qb","Rb","Sb","Tb","Vb","alternate","return","flags","Wb","memoizedState","dehydrated","Xb","Zb","child","sibling","current","Yb","$b","ac","unstable_scheduleCallback","bc","unstable_cancelCallback","cc","unstable_shouldYield","dc","unstable_requestPaint","B","unstable_now","ec","unstable_getCurrentPriorityLevel","fc","unstable_ImmediatePriority","gc","unstable_UserBlockingPriority","hc","unstable_NormalPriority","ic","unstable_LowPriority","jc","unstable_IdlePriority","kc","lc","oc","Math","clz32","pc","qc","log","LN2","rc","sc","tc","uc","pendingLanes","suspendedLanes","pingedLanes","entangledLanes","entanglements","vc","xc","yc","zc","Ac","eventTimes","Cc","C","Dc","Ec","Fc","Gc","Hc","Ic","Jc","Kc","Lc","Mc","Nc","Oc","Map","Pc","Qc","Rc","Sc","delete","pointerId","Tc","nativeEvent","blockedOn","domEventName","eventSystemFlags","targetContainers","Vc","Wc","priority","isDehydrated","containerInfo","Xc","Yc","dispatchEvent","shift","Zc","$c","ad","bd","cd","ReactCurrentBatchConfig","dd","ed","transition","fd","gd","hd","id","Uc","stopPropagation","jd","kd","ld","md","nd","od","keyCode","charCode","pd","qd","rd","_reactName","_targetInst","currentTarget","isDefaultPrevented","defaultPrevented","returnValue","isPropagationStopped","preventDefault","cancelBubble","persist","isPersistent","wd","xd","yd","sd","eventPhase","bubbles","cancelable","timeStamp","Date","now","isTrusted","td","ud","view","detail","vd","Ad","screenX","screenY","clientX","clientY","pageX","pageY","ctrlKey","shiftKey","altKey","metaKey","getModifierState","zd","button","buttons","relatedTarget","fromElement","toElement","movementX","movementY","Bd","Dd","dataTransfer","Fd","Hd","animationName","elapsedTime","pseudoElement","Id","clipboardData","Jd","Ld","data","Md","Esc","Spacebar","Left","Up","Right","Down","Del","Win","Menu","Apps","Scroll","MozPrintableKey","Nd","Od","Alt","Control","Meta","Shift","Pd","Qd","String","fromCharCode","code","repeat","locale","which","Rd","Td","width","height","pressure","tangentialPressure","tiltX","tiltY","twist","pointerType","isPrimary","Vd","touches","targetTouches","changedTouches","Xd","Yd","deltaX","wheelDeltaX","deltaY","wheelDeltaY","wheelDelta","deltaZ","deltaMode","Zd","$d","ae","be","documentMode","ce","de","ee","fe","ge","he","ie","le","color","date","datetime","email","month","password","range","search","tel","text","time","url","week","me","ne","oe","event","listeners","pe","qe","se","te","ue","ve","we","xe","ye","ze","oninput","Ae","detachEvent","Be","Ce","attachEvent","De","Ee","Fe","He","Ie","Je","Ke","offset","nextSibling","Le","contains","compareDocumentPosition","Me","HTMLIFrameElement","contentWindow","href","Ne","contentEditable","Oe","focusedElem","selectionRange","documentElement","selectionStart","selectionEnd","min","defaultView","getSelection","rangeCount","anchorNode","anchorOffset","focusNode","focusOffset","createRange","setStart","removeAllRanges","addRange","setEnd","left","scrollLeft","top","scrollTop","focus","Pe","Qe","Re","Se","Te","Ue","Ve","We","animationend","animationiteration","animationstart","transitionend","Xe","Ye","Ze","animation","$e","af","bf","cf","df","ef","ff","gf","hf","lf","mf","concat","nf","Ub","instance","listener","D","of","has","pf","qf","rf","random","sf","bind","capture","passive","n","t","J","x","u","w","F","tf","uf","parentWindow","vf","wf","na","xa","$a","ba","je","char","ke","unshift","xf","yf","zf","Af","Bf","Cf","Df","Ef","__html","Ff","setTimeout","Gf","clearTimeout","Hf","Promise","Jf","queueMicrotask","resolve","then","catch","If","Kf","Lf","Mf","previousSibling","Nf","Of","Pf","Qf","Rf","Sf","Tf","Uf","E","G","Vf","H","Wf","Xf","Yf","contextTypes","__reactInternalMemoizedUnmaskedChildContext","__reactInternalMemoizedMaskedChildContext","Zf","childContextTypes","$f","ag","bg","getChildContext","cg","__reactInternalMemoizedMergedChildContext","dg","eg","fg","gg","hg","jg","kg","lg","mg","ng","og","pg","qg","rg","sg","tg","ug","vg","wg","xg","yg","I","zg","Ag","Bg","deletions","Cg","pendingProps","overflow","treeContext","retryLane","Dg","mode","Eg","Fg","Gg","memoizedProps","Hg","Ig","Jg","Kg","Lg","defaultProps","Mg","Ng","Og","Pg","Qg","Rg","_currentValue","Sg","childLanes","Tg","dependencies","firstContext","lanes","Ug","Vg","context","memoizedValue","next","Wg","Xg","Yg","interleaved","Zg","$g","ah","updateQueue","baseState","firstBaseUpdate","lastBaseUpdate","shared","pending","effects","bh","ch","eventTime","lane","payload","callback","dh","K","eh","fh","gh","q","r","y","hh","ih","jh","Component","refs","kh","nh","isMounted","_reactInternals","enqueueSetState","L","lh","mh","enqueueReplaceState","enqueueForceUpdate","oh","shouldComponentUpdate","isPureReactComponent","ph","contextType","state","updater","qh","componentWillReceiveProps","UNSAFE_componentWillReceiveProps","rh","getDerivedStateFromProps","getSnapshotBeforeUpdate","UNSAFE_componentWillMount","componentWillMount","componentDidMount","sh","ref","_owner","_stringRef","th","join","uh","vh","index","wh","xh","yh","implementation","zh","Ah","done","Bh","Ch","Dh","Eh","Fh","Gh","Hh","Ih","tagName","Jh","Kh","Lh","M","Mh","revealOrder","Nh","Oh","_workInProgressVersionPrimary","Ph","ReactCurrentDispatcher","Qh","Rh","N","O","P","Sh","Th","Uh","Vh","Q","Wh","Xh","Yh","Zh","$h","ai","bi","ci","baseQueue","queue","di","ei","fi","lastRenderedReducer","action","hasEagerState","eagerState","lastRenderedState","dispatch","gi","hi","ii","ji","ki","getSnapshot","li","mi","R","ni","lastEffect","stores","oi","pi","qi","ri","create","destroy","deps","si","ti","ui","vi","wi","xi","yi","zi","Ai","Bi","Ci","Di","Ei","Fi","Gi","Hi","Ii","Ji","readContext","useCallback","useContext","useEffect","useImperativeHandle","useInsertionEffect","useLayoutEffect","useMemo","useReducer","useRef","useState","useDebugValue","useDeferredValue","useTransition","useMutableSource","useSyncExternalStore","useId","unstable_isNewReconciler","identifierPrefix","Ki","message","digest","Li","Mi","console","Ni","WeakMap","Oi","Pi","Qi","Ri","getDerivedStateFromError","componentDidCatch","Si","componentStack","Ti","pingCache","Ui","Vi","Wi","Xi","ReactCurrentOwner","Yi","Zi","$i","aj","bj","compare","cj","dj","ej","baseLanes","cachePool","transitions","fj","gj","hj","ij","jj","UNSAFE_componentWillUpdate","componentWillUpdate","componentDidUpdate","kj","lj","pendingContext","mj","Aj","Bj","Cj","Dj","nj","oj","pj","fallback","qj","rj","tj","dataset","dgst","uj","vj","_reactRetry","sj","subtreeFlags","wj","xj","isBackwards","rendering","renderingStartTime","last","tail","tailMode","yj","Ej","S","Fj","Gj","wasMultiple","multiple","suppressHydrationWarning","onClick","onclick","size","createElementNS","autoFocus","createTextNode","T","Hj","Ij","Jj","Kj","U","Lj","WeakSet","V","Mj","W","Nj","Oj","Qj","Rj","Sj","Tj","Uj","Vj","Wj","insertBefore","_reactRootContainer","Xj","X","Yj","Zj","ak","onCommitFiberUnmount","componentWillUnmount","bk","ck","dk","ek","fk","isHidden","gk","hk","display","ik","jk","kk","lk","__reactInternalSnapshotBeforeUpdate","Wk","mk","ceil","nk","ok","pk","Y","Z","qk","rk","sk","tk","uk","Infinity","vk","wk","xk","yk","zk","Ak","Bk","Ck","Dk","Ek","callbackNode","expirationTimes","expiredLanes","wc","callbackPriority","ig","Fk","Gk","Hk","Ik","Jk","Kk","Lk","Mk","Nk","Ok","Pk","finishedWork","finishedLanes","Qk","timeoutHandle","Rk","Sk","Tk","Uk","Vk","mutableReadLanes","Bc","Pj","onCommitFiberRoot","mc","onRecoverableError","Xk","onPostCommitFiberRoot","Yk","Zk","al","isReactComponent","pendingChildren","bl","mutableSourceEagerHydrationData","cl","cache","pendingSuspenseBoundaries","el","fl","gl","hl","il","jl","zj","$k","ll","reportError","ml","_internalRoot","nl","ol","pl","ql","sl","rl","unmount","unstable_scheduleHydration","splice","querySelectorAll","JSON","stringify","form","tl","usingClientEntryPoint","Events","ul","findFiberByHostInstance","bundleType","version","rendererPackageName","vl","rendererConfig","overrideHookState","overrideHookStateDeletePath","overrideHookStateRenamePath","overrideProps","overridePropsDeletePath","overridePropsRenamePath","setErrorHandler","setSuspenseHandler","scheduleUpdate","currentDispatcherRef","findHostInstanceByFiber","findHostInstancesForRefresh","scheduleRefresh","scheduleRoot","setRefreshHandler","getCurrentFiber","reconcilerVersion","__REACT_DEVTOOLS_GLOBAL_HOOK__","wl","isDisabled","supportsFiber","inject","createPortal","dl","createRoot","unstable_strictMode","findDOMNode","flushSync","hydrate","hydrateRoot","hydratedSources","_getVersion","_source","unmountComponentAtNode","unstable_batchedUpdates","unstable_renderSubtreeIntoContainer","checkDCE","_typeof","_react","nodeInterop","__esModule","_getRequireWildcardCache","newObj","hasPropertyDescriptor","desc","_interopRequireWildcard","_propTypes","cacheBabelInterop","cacheNodeInterop","ownKeys","enumerableOnly","getOwnPropertySymbols","symbols","filter","sym","_objectSpread","_defineProperty","getOwnPropertyDescriptors","defineProperties","_toConsumableArray","_arrayLikeToArray","_arrayWithoutHoles","iter","from","_iterableToArray","_unsupportedIterableToArray","_nonIterableSpread","_slicedToArray","_arrayWithHoles","_i","_s","_e","_arr","_n","_d","_iterableToArrayLimit","_nonIterableRest","o","minLen","len","arr2","FPSStats","_ref","_ref$top","_ref$right","right","_ref$bottom","bottom","_ref$left","_ref$graphHeight","graphHeight","_ref$graphWidth","graphWidth","_useReducer","currentTime","prevTime","nextFPS","floor","fill","max","round","frames","fps","_useReducer2","requestRef","tick","requestAnimationFrame","cancelAnimationFrame","padding","backgroundColor","fontSize","fontFamily","boxSizing","pointerEvents","background","map","frame","propTypes","_default","__self","__source","Fragment","jsx","jsxs","setState","forceUpdate","escape","_status","_result","default","Children","count","toArray","only","Profiler","PureComponent","StrictMode","Suspense","cloneElement","createContext","_currentValue2","_threadCount","Provider","Consumer","_defaultValue","_globalName","createFactory","createRef","forwardRef","isValidElement","lazy","memo","startTransition","unstable_act","pop","sortIndex","performance","setImmediate","startTime","expirationTime","priorityLevel","navigator","scheduling","isInputPending","MessageChannel","port2","port1","onmessage","postMessage","unstable_Profiling","unstable_continueExecution","unstable_forceFrameRate","unstable_getFirstCallbackNode","unstable_next","unstable_pauseExecution","unstable_runWithPriority","delay","unstable_wrapCallback","parse","StyleToObject","output","hasIterator","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","definition","chunkId","all","reduce","promises","miniCssF","inProgress","dataWebpackPrefix","script","needAttach","scripts","getElementsByTagName","s","getAttribute","charset","timeout","nc","onScriptComplete","prev","onerror","onload","doneFns","fn","head","toStringTag","installedChunks","j","installedChunkData","promise","reject","errorType","realSrc","request","webpackJsonpCallback","parentChunkLoadingFunction","chunkIds","moreModules","runtime","some","chunkLoadingGlobal","self","_regeneratorRuntime","Op","$Symbol","iteratorSymbol","asyncIteratorSymbol","asyncIterator","toStringTagSymbol","define","wrap","innerFn","outerFn","tryLocsList","protoGenerator","Generator","generator","Context","makeInvokeMethod","tryCatch","arg","ContinueSentinel","GeneratorFunction","GeneratorFunctionPrototype","IteratorPrototype","getProto","getPrototypeOf","NativeIteratorPrototype","values","Gp","defineIteratorMethods","method","_invoke","AsyncIterator","PromiseImpl","invoke","record","result","__await","unwrapped","previousPromise","callInvokeWithMethodAndArg","doneResult","delegate","delegateResult","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","methodName","info","resultName","nextLoc","pushTryEntry","locs","entry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","resetTryEntry","completion","reset","iterable","iteratorMethod","isGeneratorFunction","genFun","ctor","mark","setPrototypeOf","__proto__","awrap","async","reverse","skipTempReset","stop","rootRecord","rval","exception","handle","loc","caught","hasCatch","hasFinally","finallyEntry","complete","finish","thrown","delegateYield","asyncGeneratorStep","gen","_next","_throw","_asyncToGenerator","args","_toPropertyKey","hint","prim","toPrimitive","res","Number","_objectSpread2","_x","_r","WebAudioFontChannel","audioContext","createGain","band32","bandEqualizer","band64","band128","band256","band512","band1k","band2k","band4k","band8k","band16k","connect","frequency","createBiquadFilter","setTargetAtTime","gain","WebAudioFontLoader","player","cached","instrumentKeyArray","instrumentNamesArray","choosenInfos","drumNamesArray","drumKeyArray","instrumentTitles","insNames","startLoad","filePath","variableName","decodeAfterLoading","waitOrFinish","adjustPreset","onFinish","loaded","preset","zones","buffer","progress","waitLoad","instrumentKeys","instrumentInfo","parseInt","variable","title","pitch","findInstrument","program","drumTitles","drumNames","drumKeys","drumInfo","findDrum","nn","WebAudioFontPlayer","envelopes","loader","afterTime","nearZero","adjustZone","zone","sample","decoded","atob","createBuffer","sampleRate","b1","b2","float32Array","getChannelData","charCodeAt","file","datalen","arraybuffer","ArrayBuffer","Uint8Array","decodeAudioData","audioBuffer","loopStart","numValue","loopEnd","coarseTune","fineTune","originalPitch","sustain","createChannel","createReverberator","WebAudioFontReverberator","limitVolume","volume","queueChord","when","pitches","duration","slides","singleSlide","envlp","queueWaveTable","queueStrumUp","sort","queueStrum","queueStrumDown","queueSnap","resumeContext","resume","findZone","baseDetune","playbackRate","pow","startWhen","waveDuration","loop","envelope","findEnvelope","setupEnvelope","audioBufferSourceNode","createBufferSource","setValueAtTime","nextPitch","delta","newPlaybackRate","newWhen","linearRampToValueAtTime","noZeroVolume","sampleDuration","noteDuration","lastTime","lastVolume","zoneahdsr","ahdsr","cancelScheduledValues","aValue","defValue","disconnect","cancel","keyRangeLow","keyRangeHigh","ex","cancelQueue","irr","compressor","createDynamicsCompressor","compressorWet","compressorDry","convolver","convolverInput","dry","wet","threshold","knee","ratio","attack","release","irrArrayBuffer","createConvolver","WebAudioFontTicker","stateStop","statePlay","stateEnd","stepDuration","lastPosition","playLoop","loopPosition","startTicks","to","note","destination","at","onTick","onEnd","nextAudioTime","_getPrototypeOf","_get","receiver","_assertThisInitialized","ReferenceError","_createForOfIteratorHelper","allowArrayLike","it","normalCompletion","didErr","step","_e2","_setPrototypeOf","_inherits","subClass","superClass","_isNativeReflectConstruct","sham","Proxy","Boolean","_createSuper","Derived","hasNativeReflectConstruct","Super","NewTarget","_classCallCheck","Constructor","_defineProperties","descriptor","_createClass","protoProps","staticProps","EventEmitter","eventsSuspended","eventMap","ANY_EVENT","Listener","prepend","remaining","addListener","entries","getListeners","suspended","_len","_key","results","params","remove","_waitFor","_callee","_this","_args","_this2","removeListener","Enumerations","validation","warn","CHANNEL_MESSAGES","noteoff","noteon","keyaftertouch","controlchange","programchange","channelaftertouch","pitchbend","allsoundoff","resetallcontrollers","localcontrol","allnotesoff","omnimodeoff","omnimodeon","monomodeon","polymodeon","CHANNEL_MODE_MESSAGES","bankselectcoarse","modulationwheelcoarse","breathcontrollercoarse","controller3","footcontrollercoarse","portamentotimecoarse","dataentrycoarse","volumecoarse","balancecoarse","controller9","pancoarse","expressioncoarse","effectcontrol1coarse","effectcontrol2coarse","controller14","controller15","generalpurposeslider1","generalpurposeslider2","generalpurposeslider3","generalpurposeslider4","controller20","controller21","controller22","controller23","controller24","controller25","controller26","controller27","controller28","controller29","controller30","controller31","bankselectfine","modulationwheelfine","breathcontrollerfine","controller35","footcontrollerfine","portamentotimefine","dataentryfine","volumefine","balancefine","controller41","panfine","expressionfine","effectcontrol1fine","effectcontrol2fine","controller46","controller47","controller48","controller49","controller50","controller51","controller52","controller53","controller54","controller55","controller56","controller57","controller58","controller59","controller60","controller61","controller62","controller63","holdpedal","portamento","sustenutopedal","softpedal","legatopedal","hold2pedal","soundvariation","resonance","soundreleasetime","soundattacktime","brightness","soundcontrol6","soundcontrol7","soundcontrol8","soundcontrol9","soundcontrol10","generalpurposebutton1","generalpurposebutton2","generalpurposebutton3","generalpurposebutton4","controller84","controller85","controller86","controller87","controller88","controller89","controller90","reverblevel","tremololevel","choruslevel","celestelevel","phaserlevel","databuttonincrement","databuttondecrement","nonregisteredparametercoarse","nonregisteredparameterfine","registeredparametercoarse","registeredparameterfine","controller102","controller103","controller104","controller105","controller106","controller107","controller108","controller109","controller110","controller111","controller112","controller113","controller114","controller115","controller116","controller117","controller118","controller119","description","pitchbendrange","channelfinetuning","channelcoarsetuning","tuningprogram","tuningbank","modulationrange","azimuthangle","elevationangle","distanceratio","maximumdistance","maximumdistancegain","referencedistanceratio","panspreadangle","rollangle","MIDI_REGISTERED_PARAMETERS","sysex","timecode","songposition","songselect","tunerequest","tuningrequest","sysexend","clock","continue","activesensing","midimessage","unknownsystemmessage","SYSTEM_MESSAGES","Note","wm","defaults","rawAttack","Utilities","from7bitToFloat","rawRelease","isInteger","identifier","toNoteIdentifier","_name","_accidental","_octave","fragments","getNoteDetails","accidental","octave","_duration","parseFloat","RangeError","_attack","_release","fromFloatTo7Bit","toNoteNumber","octaveOffset","semitoneOffset","startsWith","matches","channel","channels","MIDI_CHANNEL_NUMBERS","parsed","guessNoteNumber","notes","_this3","buildNote","msb","lsb","multiplied","find","CONTROL_CHANGE_MESSAGES","MIDI_CONTROL_CHANGE_MESSAGES","cm","process","versions","OutputChannel","_EventEmitter","_super","_this4","_output","_number","_octaveOffset","send","_this5","useRawValue","rawValue","buildNoteArray","getOffsetNumber","toTimestamp","controller","_this6","getCcNumberByName","item","parameter","sendControlChange","REGISTERED_PARAMETERS","valid","getOwnPropertyNames","_selectRegisteredParameter","_deselectRegisteredParameter","sendNoteOn","_step","_iterator","noteOffOptions","sendNoteOff","_this7","rawVelocity","velocity","nVelocity","_this8","command","sendChannelMode","coarse","fine","sendRpnValue","semitones","cents","nrpn","_selectNonRegisteredParameter","_setCurrentParameter","_deselectNonRegisteredParameter","fromFloatToMsbLsb","rpn","Output","_EventEmitter2","_super2","midiOutput","_this9","_midiOutput","onstatechange","_onStateChange","_destroy","_callee2","_context2","close","timestamp","port","connection","emit","manufacturer","_open","_callee3","_context3","open","t0","_close","_callee4","_context4","legacy","Message","isNode","rawData","identification","merged","clear","sendTuneRequest","_this10","sanitizeChannels","sendKeyAftertouch","_this11","_this12","sendPitchBendRange","_this13","_this14","sendChannelAftertouch","_this15","sendPitchBend","_this16","sendProgramChange","_this17","sendModulationRange","_this18","sendMasterTuning","_this19","sendTuningProgram","_this20","sendTuningBank","_this21","_this22","sendAllSoundOff","_this23","sendAllNotesOff","_this24","sendResetAllControllers","_this25","sendPolyphonicMode","_this26","sendLocalControl","_this27","sendOmniMode","_this28","sendNrpnValue","_this29","sendRpnIncrement","_this30","sendRpnDecrement","_this31","_this32","playNote","_this33","Forwarder","destinations","types","InputChannel","_EventEmitter3","_super3","_this34","_input","_nrpnBuffer","_rpnBuffer","parameterNumberEventsEnabled","notesState","_parseEventForStandardMessages","data1","dataBytes","data2","offsetNumber","rawKey","subtype","numberedEvent","namedEvent","_parseChannelModeMessage","_isRpnOrNrpnController","_parseEventForParameterNumber","_dispatchParameterNumberEvent","paramMsb","paramLsb","parameterMsb","parameterLsb","legacyEvent","getChannelModeByNumber","getCcNameByNumber","statusByte","rawDataBytes","isChannelMessage","isSystemMessage","manufacturerId","getPropertyByValue","Input","_EventEmitter4","_super4","midiInput","_this35","_midiInput","_forwarders","onmidimessage","_onMidiMessage","_destroy2","_callee5","_context5","_parseEvent","_processMidiMessageEvent","forwarder","forward","song","_open2","_callee6","_context6","_close2","_callee7","_context7","_this36","CHANNEL_EVENTS","_this37","every","hasListener","_this38","WebMidi","_EventEmitter5","_super5","_this39","interface","_inputs","_disconnectedInputs","_outputs","_disconnectedOutputs","_stateChangeQueue","_enable","_callee10","errorEvent","midiAccessGrantedEvent","enabledEvent","_args10","_context10","_callee8","_context8","global","t1","_callee9","_context9","enabled","requestMIDIAccessFunction","software","requestMIDIAccess","t2","_onInterfaceStateChange","_updateInputsAndOutputs","t3","_disable","_callee11","_this40","_context11","_destroyInputsAndOutputs","disconnected","inputs","outputs","_destroyInputsAndOutputs2","_callee12","_this41","_context12","getOutputById","getInputById","portsChangedEvent","_updateInputsAndOutputs2","_callee13","_context13","_updateInputs","_updateOutputs","_updateInputs2","_callee14","_loop","_this42","_context15","_context14","nInput","_updateOutputs2","_callee15","_loop2","_this43","_context17","_context16","nOutput","isBrowser","sysexEnabled","_WebMidi","enableWebMidi","onReady","onConnected","onDisconnected","enable","getDevice","getOutputByName","reverbGen","AudioContext","numChannels","totalTime","decayTime","decaySampleFrames","numSampleFrames","fadeInSampleFrames","fadeInTime","decayBase","reverbIR","chan","randomSample","applyGradualLowpass","lpFreqStart","lpFreqEnd","canvas","getContext","fillStyle","fillRect","xscale","yscale","lpFreqEndAt","channelData","getAllChannelData","OfflineAudioContext","numberOfChannels","oncomplete","renderedBuffer","startRendering","filterNode","adjustLength","newLength","newBuffer","oldData","newData","createReverb","fade","lp","dim","ir","generate","generateReverb","rotate","randRange","mapN","start1","stop1","start2","stop2","accs","toMidi","_tokenizeNote","_note$match","_ref2","_ref2$","acc","oct","tokenizeNote","_tokenizeNote2","chroma","Playhead","_ref$playing","playing","_ref$interval","interval","pattern","_ref$instrument","instrument","_ref$offset","_ref$legato","legato","_ref$color","_ref$steps","steps","_ref$events","events","_ref$instrumentName","instrumentName","_ref$rotation","rotation","_ref$preset","_ref$velocity","pause","updateStep","newStep","followStep","follow","followSteps","hsl","hex","hexToHSL","midiEnabled","midiOutputDevice","updateEuclid","playhead","euclid","pulses","first","second","firstLength","minLength","loopThreshold","flat","getPattern","euclidToPattern","instruments","presetMappings","midi","anchor","p1","p2","p3","p4","p5","codonMappings","ATT","ATC","ATA","CTT","CTC","CTA","CTG","TTA","TTG","GTT","GTC","GTA","GTG","TTT","TTC","ATG","TGT","TGC","GCT","GCC","GCA","GCG","GGT","GGC","GGA","GGG","CCT","CCC","CCA","CCG","ACT","ACC","ACA","ACG","TCT","TCC","TCA","TCG","AGT","AGC","TAT","TAC","TGG","CAA","CAG","AAT","AAC","CAT","CAC","GAA","GAG","GAT","GAC","AAA","AAG","CGT","CGC","CGA","CGG","AGA","AGG","TAA","TAG","TGA","codonNames","aminoAcidToCodons","noteMappings","interpretSequence","seq","splitUp","combined","codons","SingleButton","buttonStyle","_jsx","className","RotationToggle","PlayheadView","masterSteps","ticker","rem","hap","active","transitionDuration","SwitchButtonCenterText","leftText","leftOnClick","rightText","rightOnClick","leftStyle","rightStyle","_jsxs","HitsToggle","ToggleButton","activeNotes","cursor","PlayheadsView","playheads","updatePlayhead","playheadCount","setSelectedPlayhead","setMenu","selectedPlayhead","setShowHelp","setPlayheadCount","showControls","classNames","SequenceInput","userSequence","setUserSequence","onChange","helpMessages","introduction","imgHeight","acids","description2","VisualizerSequence","sequence","nodes","activeSequence","activeNodes","showOnlyActive","bounds","setHelpMessage","getNote","noteOffsetRef","playSoundFont","showSequenceAbove","showControlsTransition","currentSequence","showDetails","spacingX","boxSide","colSpace","rowSpace","detailSpace","_useState2","setNoteActive","cols","rows","spacingY","boxScale","letter","_getCoord","row","offsetX","unit","xRemainder","getCoord","currentAcid","aminoacid","noteColor","isActive","borderRadius","helpMessage","other","VisualizerPlayheads","counter","counters","lastCounter","_useState4","currentNode","nucleotide","getAcidSprite","borderBottom","VisualizerBlobs","countRefs","cps","clearClick","setUpdatedCount","endAllAnimations","lastTick","lastSpawned","lastIndex","ticks","updatedCount","updatedRef","animationCallback","svg","querySelector","endNoteAnimation","startNoteAnimation","animationCallbackRef","React","previousTimeRef","animate","deltaTime","useAnimationFrame","px","py","points","initialX","initialY","scaleY","generatePoints","path","newPath","getTotalLength","path_offset","initial","segment_length","createSVGPath","svgPath","bezierCommand","animating","getElementById","classList","matrix","getComputedStyle","getPropertyValue","dashArrayStart","point","controlPoint","previous","smoothing","pointA","pointB","lengthX","lengthY","sqrt","angle","atan2","PI","cos","sin","_controlPoint2","cpsX","cpsY","_controlPoint4","cpeX","cpeY","VisualizerMappings","abs","toFixed","onKeyUp","onMouseUp","getMouseEventMap","onTouchEnd","getTouchEventMap","onBlur","getKeyDownEventMap","onMouseMove","getMousePosition","getDiffPosition","getValueFromPosition","move","onTouchMove","getTouchPosition","isScrolling","startPosition","onKeyDown","moveDownByStep","moveUpByStep","pageFn","onSliderMouseDown","snapDragDisabled","forceValueFromPosition","onSliderClick","hasMoved","calcValue","calcOffsetFromPosition","createOnKeyDown","createOnMouseDown","createOnTouchStart","handleResize","pendingResizeTimeouts","resize","renderThumb","thumbClassName","thumbActiveClassName","onMouseDown","onTouchStart","onFocus","tabIndex","role","orientation","ariaLabel","ariaLabelledby","valueNow","ariaValuetext","renderTrack","trackClassName","buildTrackStyle","upperBound","resizeObserver","resizeElementRef","sliderLength","zIndices","ResizeObserver","observe","clearPendingResizeTimeouts","fireChangeEvent","getClosestIndex","MAX_VALUE","calcOffset","axisKey","orthogonalAxisKey","keydown","keyup","focusout","mousemove","mouseup","touchmove","touchend","thumbSize","startValue","invert","slider","thumb0","sizeKey","getBoundingClientRect","posMaxKey","posMinKey","minDistance","_this$props","pearling","pushSucceeding","pushPreceding","buildThumbStyle","touchAction","willChange","buildMarkStyle","renderThumbs","renderTracks","renderMarks","marks","markClassName","renderMark","withTracks","SpeedToggle","InstrumentMenu","updatePlayer","border","presetIndex","ReactSlider","PlayPauseButton","play","borderRight","viewBox","xmlns","rx","RemixButton","fillRule","clipRule","SwitchButton","ToggleVerticalButton","SequencerSettings","bpm","updateTempo","setPlayheads","setMasterSteps","setNoteOffset","noteOffset","setZoom","setShowControls","setShowControlsTransition","marginLeft","marginRight","updated","cur","borderLeft","transform","maskType","maskUnits","mask","factoryPresets","author","keyOffset","sequenceBounds","PresetMenu","updatePlayheads","tempo","special","normalRotation","generatePattern","empty","Schema","normal","space","merge","definitions","normalize","Info","attribute","boolean","booleanish","overloadedBoolean","commaSeparated","spaceSeparated","commaOrSpaceSeparated","defined","powers","increment","checks","DefinedInfo","_Info","check","own","properties","attributes","xlink","_","xLinkActuate","xLinkArcRole","xLinkHref","xLinkRole","xLinkShow","xLinkTitle","xLinkType","xml","xmlLang","xmlBase","xmlSpace","caseSensitiveTransform","caseInsensitiveTransform","xmlnsxlink","xmlnsXLink","aria","ariaActiveDescendant","ariaAtomic","ariaAutoComplete","ariaBusy","ariaChecked","ariaColCount","ariaColIndex","ariaColSpan","ariaControls","ariaCurrent","ariaDescribedBy","ariaDetails","ariaDisabled","ariaDropEffect","ariaErrorMessage","ariaExpanded","ariaFlowTo","ariaGrabbed","ariaHasPopup","ariaHidden","ariaInvalid","ariaKeyShortcuts","ariaLabelledBy","ariaLevel","ariaLive","ariaModal","ariaMultiLine","ariaMultiSelectable","ariaOrientation","ariaOwns","ariaPlaceholder","ariaPosInSet","ariaPressed","ariaReadOnly","ariaRelevant","ariaRequired","ariaRoleDescription","ariaRowCount","ariaRowIndex","ariaRowSpan","ariaSelected","ariaSetSize","ariaSort","ariaValueMax","ariaValueMin","ariaValueNow","ariaValueText","html","acceptcharset","classname","htmlfor","httpequiv","abbr","accept","acceptCharset","accessKey","allow","allowFullScreen","allowPaymentRequest","allowUserMedia","alt","as","autoCapitalize","autoComplete","autoPlay","blocking","charSet","cite","colSpan","controls","controlsList","coords","crossOrigin","dateTime","decoding","defer","dir","dirName","download","draggable","encType","enterKeyHint","fetchPriority","formAction","formEncType","formMethod","formNoValidate","formTarget","headers","hidden","high","hrefLang","htmlFor","httpEquiv","imageSizes","imageSrcSet","inert","inputMode","integrity","isMap","itemId","itemProp","itemRef","itemScope","itemType","kind","label","lang","language","list","loading","low","manifest","maxLength","media","muted","nonce","noModule","noValidate","onAbort","onAfterPrint","onAuxClick","onBeforeMatch","onBeforePrint","onBeforeUnload","onCancel","onCanPlay","onCanPlayThrough","onClose","onContextLost","onContextMenu","onContextRestored","onCopy","onCueChange","onCut","onDblClick","onDrag","onDragEnd","onDragEnter","onDragExit","onDragLeave","onDragOver","onDragStart","onDrop","onDurationChange","onEmptied","onEnded","onFormData","onHashChange","onInput","onInvalid","onKeyPress","onLanguageChange","onLoad","onLoadedData","onLoadedMetadata","onLoadEnd","onLoadStart","onMessage","onMessageError","onMouseEnter","onMouseLeave","onMouseOut","onMouseOver","onOffline","onOnline","onPageHide","onPageShow","onPaste","onPause","onPlay","onPlaying","onPopState","onProgress","onRateChange","onRejectionHandled","onReset","onResize","onScroll","onScrollEnd","onSecurityPolicyViolation","onSeeked","onSeeking","onSelect","onSlotChange","onStalled","onStorage","onSubmit","onSuspend","onTimeUpdate","onToggle","onUnhandledRejection","onUnload","onVolumeChange","onWaiting","onWheel","optimum","ping","placeholder","playsInline","popover","popoverTarget","popoverTargetAction","poster","preload","readOnly","referrerPolicy","rel","required","reversed","rowSpan","sandbox","scope","scoped","seamless","sizes","slot","span","spellCheck","srcDoc","srcLang","srcSet","translate","typeMustMatch","useMap","align","aLink","archive","axis","bgColor","borderColor","bottomMargin","cellPadding","cellSpacing","charOff","classId","codeBase","codeType","compact","declare","face","frameBorder","hSpace","leftMargin","longDesc","lowSrc","marginHeight","marginWidth","noResize","noHref","noShade","noWrap","profile","prompt","rev","rightMargin","scheme","scrolling","standby","summary","topMargin","valueType","vAlign","vLink","vSpace","allowTransparency","autoCorrect","autoSave","disablePictureInPicture","disableRemotePlayback","prefix","security","unselectable","accentHeight","alignmentBaseline","arabicForm","baselineShift","capHeight","clipPath","colorInterpolation","colorInterpolationFilters","colorProfile","colorRendering","dataType","dominantBaseline","enableBackground","floodColor","fontSizeAdjust","fontStretch","fontStyle","fontVariant","glyphName","glyphOrientationHorizontal","glyphOrientationVertical","horizAdvX","horizOriginX","horizOriginY","imageRendering","letterSpacing","lightingColor","markerEnd","markerMid","markerStart","navDown","navDownLeft","navDownRight","navLeft","navNext","navPrev","navRight","navUp","navUpLeft","navUpRight","onActivate","onBegin","onFocusIn","onFocusOut","onMouseWheel","onRepeat","onShow","onZoom","overlinePosition","overlineThickness","paintOrder","panose1","renderingIntent","shapeRendering","stopColor","strikethroughPosition","strikethroughThickness","strokeDashArray","strokeDashOffset","strokeLineCap","strokeLineJoin","strokeMiterLimit","textAnchor","textDecoration","textRendering","transformOrigin","typeOf","underlinePosition","underlineThickness","unicodeBidi","unicodeRange","unitsPerEm","vAlphabetic","vHanging","vIdeographic","vMathematical","vectorEffect","vertAdvY","vertOriginX","vertOriginY","wordSpacing","writingMode","xHeight","playbackOrder","timelineBegin","about","accumulate","additive","alphabetic","amplitude","ascent","attributeType","azimuth","bandwidth","baseFrequency","baseProfile","bbox","begin","bias","by","calcMode","clip","clipPathUnits","contentScriptType","contentStyleType","cx","cy","defaultAction","descent","diffuseConstant","direction","dur","divisor","dx","dy","edgeMode","editable","elevation","exponent","externalResourcesRequired","filterRes","filterUnits","focusable","focusHighlight","format","fr","fx","fy","g1","g2","glyphRef","gradientTransform","gradientUnits","handler","hanging","hatchContentUnits","hatchUnits","ideographic","initialVisibility","in","in2","intercept","k1","k2","k3","k4","kernelMatrix","kernelUnitLength","keyPoints","keySplines","keyTimes","kerning","lengthAdjust","limitingConeAngle","local","markerHeight","markerUnits","markerWidth","maskContentUnits","mathematical","mediaCharacterEncoding","mediaContentEncodings","mediaSize","mediaTime","numOctaves","observer","operator","orient","origin","overlay","pathLength","patternContentUnits","patternTransform","patternUnits","phase","pointsAtX","pointsAtY","pointsAtZ","preserveAlpha","preserveAspectRatio","primitiveUnits","propagate","radius","refX","refY","repeatCount","repeatDur","requiredExtensions","requiredFeatures","requiredFonts","requiredFormats","resource","restart","ry","scale","seed","side","slope","snapshotTime","specularConstant","specularExponent","spreadMethod","spacing","startOffset","stdDeviation","stemh","stemv","stitchTiles","stroke","surfaceScale","syncBehavior","syncBehaviorDefault","syncMaster","syncTolerance","syncToleranceDefault","systemLanguage","tableValues","targetX","targetY","textLength","transformBehavior","u1","u2","unicode","viewTarget","visibility","widths","x1","x2","xChannelSelector","y1","y2","yChannelSelector","zoomAndPan","htmlBase","svgBase","dash","cap","kebab","$0","camelcase","hastToReact","pointEnd","pointStart","_construct","Parent","Class","Function","_wrapNativeSuper","_cache","Wrapper","stringifyPosition","VFileMessage","_Error","causeOrReason","optionsOrParentOrPlace","legacyCause","place","ancestors","cause","ruleId","parent","fatal","actual","expected","emptyMap","dashSomething","tableElements","tableCellElement","toJsxRuntime","tree","development","jsxDEV","isStaticChildren","columnNumber","fileName","lineNumber","developmentCreate","productionCreate","components","elementAttributeNameCase","ignoreInvalidStyle","passKeys","passNode","schema","stylePropertyNameCase","tableCellAlignToStyle","one","parentSchema","countsByTagName","createChildren","alignValue","createProperty","createProperties","thing","Type","rest","dashes","settings","padRight","padLeft","commas","styleObject","styleToObject","replacer","toCamel","parseStyle","domCasing","cssCasing","transformStyleToCssCasing","transformStylesToCssCasing","toDash","$1","urlAttributes","icon","unicodePunctuationInternal","regexCheck","asciiAlpha","asciiAlphanumeric","asciiAtext","asciiControl","asciiDigit","asciiHexDigit","asciiPunctuation","markdownLineEnding","markdownLineEndingOrSpace","markdownSpace","unicodeWhitespace","regex","characterReferences","sanitizeUri","protocol","encode","normalizeUri","colon","questionMark","numberSign","slash","skip","emptyOptions","includeImageAlt","includeHtml","items","parameters","chunkStart","subtokenize","lineIndex","otherIndex","otherEvent","subevents","more","jumps","_tokenizer","_isInFirstContentOfListItem","contentType","subcontent","_container","eventIndex","stream","token","startPositions","tokenizer","parser","childEvents","gaps","adjust","breaks","sliceStream","defineSkip","_gfmTasklistFirstContentOfListItem","write","syntaxExtension","extension","hook","constructs","existing","before","factorySpace","limit","POSITIVE_INFINITY","enter","consume","exit","tokenize","contentStart","attempt","contentInitial","lineStart","childFlow","childToken","lineStartOffset","continued","containerState","continuation","documentContinue","checkNewContainers","_closeFlow","closeFlow","indexBeforeExits","indexBeforeFlow","exitContainers","documentContinued","currentConstruct","concrete","flowStart","interrupt","_gfmTableDynamicInterruptHack","containerConstruct","thereIsANewContainer","thereIsNoNewContainer","containerContinue","flow","flowContinue","writeToChild","eof","seen","nok","disable","null","blankLine","after","partial","chunkInside","contentEnd","continuationConstruct","contentContinue","prefixed","sliceSerialize","flowInitial","afterConstruct","resolver","resolveAll","createResolver","initializeFactory","field","notText","atBreak","resolveAllLineSuffixes","extraResolver","chunks","bufferIndex","tabs","chunk","_index","_bufferIndex","called","createTokenizer","initialize","columnStart","resolveAllConstructs","accountForPotentialSkip","fields","constructFactory","addResult","onsuccessfulcheck","expandTabs","atTab","serializeChunks","main","startIndex","startBufferIndex","endIndex","endBufferIndex","sliceChunks","_point","chunkIndex","go","restore","onreturn","returnState","bogusState","listOfConstructs","constructIndex","handleListOfConstructs","def","handleMapOfConstructs","handleConstruct","startPoint","startPrevious","startCurrentConstruct","startEventsIndex","startStack","store","resolveTo","thematicBreak","marker","initialSize","atMarker","inside","onBlank","listItemPrefixWhitespaceConstruct","endOfPrefix","otherPrefix","initialBlankLine","notBlank","furtherBlankLines","notInCurrentItem","indentConstruct","blockQuote","contBefore","factoryDestination","literalType","literalMarkerType","rawType","stringType","balance","enclosedBefore","raw","enclosed","enclosedEscape","rawEscape","factoryLabel","markerType","labelInside","labelEscape","factoryTitle","factoryWhitespace","normalizeIdentifier","labelAfter","markerAfter","destinationBefore","destinationAfter","titleBefore","afterWhitespace","beforeMarker","titleAfter","titleAfterOptionalWhitespace","codeIndented","afterPrefix","furtherStart","headingAtx","sequenceOpen","sequenceFurther","setextUnderline","paragraph","heading","htmlBlockNames","htmlRawNames","htmlFlow","closingTag","markerB","declarationOpen","tagCloseStart","continuationDeclarationInside","commentOpenInside","cdataOpenInside","basicSelfClosing","completeClosingTagAfter","completeAttributeNameBefore","completeEnd","completeAttributeName","completeAttributeNameAfter","completeAttributeValueBefore","completeAttributeValueQuoted","completeAttributeValueUnquoted","completeAttributeValueQuotedAfter","completeAfter","continuationCommentInside","continuationRawTagOpen","continuationClose","continuationCdataInside","continuationStart","blankLineBefore","continuationAfter","nonLazyContinuationStart","continuationStartNonLazy","continuationBefore","continuationRawEndTag","nonLazyContinuation","codeFenced","closeStart","startBefore","beforeSequenceClose","sequenceClose","sizeOpen","sequenceCloseAfter","initialPrefix","beforeSequenceOpen","infoBefore","atNonLazyBreak","metaBefore","contentBefore","beforeContentChunk","contentChunk","decodeNamedCharacterReference","characterReference","numeric","characterEscape","lineEnding","labelEnd","labelStart","_balanced","_inactive","labelEndNok","resourceConstruct","labelEndOk","referenceFullConstruct","referenceNotFull","referenceCollapsedConstruct","group","insideSpan","resourceBefore","resourceOpen","resourceEnd","resourceDestinationAfter","resourceDestinationMissing","resourceBetween","resourceTitleAfter","referenceFullAfter","referenceFullMissing","referenceCollapsedOpen","labelStartImage","classifyCharacter","unicodePunctuation","attention","attentionMarkers","openingSequence","closingSequence","use","nextEvents","movePoint","autolink","schemeOrEmailAtext","emailAtext","schemeInsideOrEmailAtext","urlInside","emailAtSignOrDot","emailLabel","emailValue","htmlText","instruction","tagOpen","commentEnd","commentClose","lineEndingBefore","cdata","cdataClose","cdataEnd","instructionClose","tagClose","tagCloseBetween","tagOpenBetween","tagOpenAttributeName","tagOpenAttributeNameAfter","tagOpenAttributeValueBefore","tagOpenAttributeValueQuoted","tagOpenAttributeValueUnquoted","tagOpenAttributeValueQuotedAfter","lineEndingAfter","lineEndingAfterPrefix","labelStartLink","hardBreakEscape","codeText","between","tailExitIndex","headEnterIndex","_document","_flowInitial","_flow","_string","_text","resolveText","extensions","combineExtensions","defaultConstructs","decodeNumericCharacterReference","fromCodePoint","characterEscapeOrReference","decode","$2","fromMarkdown","encoding","config","transforms","canContainEols","opener","autolinkProtocol","onenterdata","autolinkEmail","atxHeading","codeFlow","codeFencedFenceInfo","codeFencedFenceMeta","codeTextData","codeFlowValue","definitionDestinationString","definitionLabelString","definitionTitleString","emphasis","hardBreak","hardBreakTrailing","htmlFlowData","htmlTextData","image","listItem","listItemValue","onenterlistitemvalue","listOrdered","onenterlistordered","listUnordered","reference","onenterreference","referenceString","resourceDestinationString","resourceTitleString","setextHeading","strong","closer","atxHeadingSequence","onexitatxheadingsequence","onexitautolinkemail","onexitautolinkprotocol","characterEscapeValue","onexitdata","characterReferenceMarkerHexadecimal","onexitcharacterreferencemarker","characterReferenceMarkerNumeric","characterReferenceValue","onexitcharacterreferencevalue","onexitcodefenced","codeFencedFence","onexitcodefencedfence","onexitcodefencedfenceinfo","onexitcodefencedfencemeta","onexitcodeindented","onexitcodetext","onexitdefinitiondestinationstring","onexitdefinitionlabelstring","onexitdefinitiontitlestring","onexithardbreak","onexithtmlflow","onexithtmltext","onexitimage","onexitlabel","labelText","onexitlabeltext","onexitlineending","onexitlink","onexitreferencestring","onexitresourcedestinationstring","onexitresourcetitlestring","onexitresource","onexitsetextheading","setextHeadingLineSequence","onexitsetextheadinglinesequence","setextHeadingText","onexitsetextheadingtext","configure","mdastExtensions","compile","tokenStack","listStack","prepareList","defaultOnError","firstBlankLineIndex","containerBalance","listSpread","tailIndex","tailEvent","_spread","and","errorHandler","onExitError","expectingFirstListItemValue","flowCodeInside","depth","setextHeadingSlurpLineEnding","codePointAt","siblings","atHardBreak","inReference","referenceType","ancestor","decodeString","fragment","characterReferenceType","ordered","spread","compiler","postprocess","atCarriageReturn","endPosition","TextDecoder","preprocess","_combined$key","_combined$key2","remarkParse","doc","env","globalThis","deserialize","serialized","$","out","unpair","_$index","_step2","_iterator2","_step2$value","RegExp","_step3","_iterator3","_step3$value","_step4","_iterator4","BigInt","deserializer","EMPTY","asString","shouldSkip","_ref3","TYPE","serialize","_ref4","json","lossy","strict","pair","_typeOf2","toJSON","toISOString","serializer","structuredClone","defaultFootnoteBackContent","rereferenceIndex","defaultFootnoteBackLabel","referenceIndex","_objectWithoutProperties","excluded","sourceKeys","sourceSymbolKeys","propertyIsEnumerable","convert","castFactory","anyFactory","checkAsRecord","nodeAsRecord","propsFactory","typeFactory","tests","testFunction","looksLikeANode","CONTINUE","EXIT","SKIP","visitParents","visitor","factory","parents","visit","subresult","grandparents","toResult","nodeAsParent","testOrVisitor","visitorOrReverse","maybeReverse","revert","suffix","contents","listItemLoose","tab","trimLines","trimLine","handlers","blockquote","patch","applyData","break","footnoteReference","clobberPrefix","safeId","footnoteOrder","reuseCounter","footnoteCounts","dataFootnoteRef","sup","allowDangerousHtml","imageReference","definitionById","inlineCode","linkReference","loose","listLoose","root","table","firstRow","tableContent","tableCell","tableRow","cellIndex","cells","cell","toml","ignore","yaml","footnoteDefinition","hName","hChildren","hProperties","defaultUnknownHandler","trimMarkdownSpaceStart","toHast","footnoteById","defaultHandlers","passThrough","shallow","_excluded","unknownHandler","createState","foot","footnoteBackContent","footnoteBackLabel","footnoteLabel","footnoteLabelTagName","footnoteLabelProperties","listItems","backReferences","counts","dataFootnoteBackref","_tail$children","tailTail","dataFootnotes","footer","remarkRehype","hastTree","run","_x2","_toArray","bail","trough","fns","pipeline","middlewareIndex","_len2","_key2","middleware","wrapped","_len3","_key3","fnExpectsCallback","_len4","_key4","middelware","basename","ext","assertPath","seenNonSlash","firstNonSlashEnd","extIndex","dirname","unmatchedSlash","extname","startPart","startDot","preDotState","joined","segments","absolute","allowAboveRoot","lastSlashIndex","lastSegmentLength","lastSlash","dots","normalizeString","sep","proc","cwd","isUrl","fileUrlOrPath","auth","urlToPath","URL","hostname","pathname","third","decodeURIComponent","getPathFromURLPosix","VFile","isUint8Array","history","messages","stored","assertNonEmpty","assertPart","stem","part","CallableInstance","proto","Processor","_CallableInstance","Compiler","Parser","attachers","freezeIndex","frozen","namespace","transformers","attacher","assertUnfrozen","_this$attachers$this$","transformer","freeze","realFile","vfile","assertParser","assertCompiler","executor","parseTree","realDone","compileTree","compileResult","assertDone","assertNode","outputTree","resultingTree","addPlugin","addList","addPreset","_value","plugins","plugin","entryIndex","_parameters2","primary","currentPrimary","isPlainObj","unified","asyncName","looksLikeAVFile","emptyPlugins","emptyRemarkRehypeOptions","safeProtocol","deprecations","Markdown","allowedElements","allowElement","disallowedElements","rehypePlugins","remarkPlugins","remarkRehypeOptions","skipHtml","unwrapDisallowed","urlTransform","defaultUrlTransform","processor","deprecation","mdastTree","runSync","_parent$children","ConsoleWindow","embedded","helpIndex","setHelpIndex","mixBlendMode","borderTop","savedSequences","viewing","textSequences","SequenceBoundsSlider","setSequenceBounds","selectedSequence","sequenceRef","boundsRef","ConsoleSelectButtons","menu","_useState6","modal","setModal","_useState8","setInitialMenu","_useState10","userModeSelect","setUserModeSelect","_useState12","showIntroduction","setShowIntroduction","_useState14","introductionIndex","_useState16","_useState18","transitionRef","_useState20","_useState22","showHelp","_useState24","_useState26","_useState28","showEntireSequence","setShowEntireSequence","_useState30","setSelectedSequence","_useState32","setBpm","_useState34","_useState36","_useState38","_useState40","sequenceIndex","_useState42","userInputSequence","setUserInputSequence","_useState44","_useState46","_useState48","_useState50","setPlaying","_useState52","setCps","_useState54","setNodes","_useState56","setSequence","_useState58","setCounter","_useState60","setAudioContext","_useState62","showFPS","_useState64","showViz","_useState66","_useState68","setActiveSequence","_useState70","setActiveNodes","calculatedHeight","innerHeight","innerWidth","bpmRef","renderCount","_useState72","players","setPlayers","getAudioContext","currentPreset","newPlayer","updatePlayers","presetName","acid","_useState74","setWindowSize","_listener","_listener2","setClearClick","newAudioContext","audioPlayers","initializePlayers","_useState76","setTicker","_useState78","count1","setCount1","_useState80","count2","setCount2","_useState82","count3","setCount3","_useState84","count4","setCount4","_useState86","count5","setCount5","_useState88","noteActive1","setNoteActive1","_useState90","noteActive2","setNoteActive2","_useState92","noteActive3","setNoteActive3","_useState94","noteActive4","setNoteActive4","_useState96","noteActive5","setNoteActive5","countRef1","countRef2","countRef3","countRef4","countRef5","noteActiveRef1","noteActiveRef2","noteActiveRef3","noteActiveRef4","noteActiveRef5","_useState98","activeNoteRefs","setCounters","setActiveNotes","_useState99","ps","initialized","initPlayheads","_useState100","playheadsRef","clicks","device","lookahead","setInterval","timeWindow","activeRef","haps","patternCycleLength","startPhase","endPhase","timing","queryPattern","clearInterval","_parseAllSequence","filtered","amount","tempNodes","triNucleotide","parseAllSequence","snippet","nodeSnippet","newZoom","minHeight","getState","intro","resetCounters","onPerfEntry","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","App","reportWebVitals"],"sourceRoot":""}